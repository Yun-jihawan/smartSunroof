
RXaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08009a50  08009a50  0000aa50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f9c  08009f9c  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f9c  08009f9c  0000af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa4  08009fa4  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa4  08009fa4  0000afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fa8  08009fa8  0000afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009fac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001dc  0800a188  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800a188  0000b5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b324  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228d  00000000  00000000  00016528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  000187b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071b  00000000  00000000  00019128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003710  00000000  00000000  00019843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e373  00000000  00000000  0001cf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008066c  00000000  00000000  0002b2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000ab978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000aec2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009a34 	.word	0x08009a34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009a34 	.word	0x08009a34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe09 	bl	8002054 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd49 	bl	8001ee4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fdfb 	bl	8002054 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdf1 	bl	8002054 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd73 	bl	8001f6c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd69 	bl	8001f6c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fafd 	bl	8000ab0 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa7d 	bl	80009c0 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 faef 	bl	8000ab0 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fae5 	bl	8000ab0 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa8b 	bl	8000a10 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa81 	bl	8000a10 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f84c 	bl	80005e8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 fda1 	bl	8001110 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fbf7 	bl	8000dc8 <__aeabi_fsub>
 80005da:	f000 fd99 	bl	8001110 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__udivmoddi4>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	4657      	mov	r7, sl
 80005ec:	464e      	mov	r6, r9
 80005ee:	4645      	mov	r5, r8
 80005f0:	46de      	mov	lr, fp
 80005f2:	b5e0      	push	{r5, r6, r7, lr}
 80005f4:	0004      	movs	r4, r0
 80005f6:	000d      	movs	r5, r1
 80005f8:	4692      	mov	sl, r2
 80005fa:	4699      	mov	r9, r3
 80005fc:	b083      	sub	sp, #12
 80005fe:	428b      	cmp	r3, r1
 8000600:	d830      	bhi.n	8000664 <__udivmoddi4+0x7c>
 8000602:	d02d      	beq.n	8000660 <__udivmoddi4+0x78>
 8000604:	4649      	mov	r1, r9
 8000606:	4650      	mov	r0, sl
 8000608:	f002 fcc8 	bl	8002f9c <__clzdi2>
 800060c:	0029      	movs	r1, r5
 800060e:	0006      	movs	r6, r0
 8000610:	0020      	movs	r0, r4
 8000612:	f002 fcc3 	bl	8002f9c <__clzdi2>
 8000616:	1a33      	subs	r3, r6, r0
 8000618:	4698      	mov	r8, r3
 800061a:	3b20      	subs	r3, #32
 800061c:	d434      	bmi.n	8000688 <__udivmoddi4+0xa0>
 800061e:	469b      	mov	fp, r3
 8000620:	4653      	mov	r3, sl
 8000622:	465a      	mov	r2, fp
 8000624:	4093      	lsls	r3, r2
 8000626:	4642      	mov	r2, r8
 8000628:	001f      	movs	r7, r3
 800062a:	4653      	mov	r3, sl
 800062c:	4093      	lsls	r3, r2
 800062e:	001e      	movs	r6, r3
 8000630:	42af      	cmp	r7, r5
 8000632:	d83b      	bhi.n	80006ac <__udivmoddi4+0xc4>
 8000634:	42af      	cmp	r7, r5
 8000636:	d100      	bne.n	800063a <__udivmoddi4+0x52>
 8000638:	e079      	b.n	800072e <__udivmoddi4+0x146>
 800063a:	465b      	mov	r3, fp
 800063c:	1ba4      	subs	r4, r4, r6
 800063e:	41bd      	sbcs	r5, r7
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <__udivmoddi4+0x5e>
 8000644:	e076      	b.n	8000734 <__udivmoddi4+0x14c>
 8000646:	2200      	movs	r2, #0
 8000648:	2300      	movs	r3, #0
 800064a:	9200      	str	r2, [sp, #0]
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	465a      	mov	r2, fp
 8000652:	4093      	lsls	r3, r2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	4642      	mov	r2, r8
 800065a:	4093      	lsls	r3, r2
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	e029      	b.n	80006b4 <__udivmoddi4+0xcc>
 8000660:	4282      	cmp	r2, r0
 8000662:	d9cf      	bls.n	8000604 <__udivmoddi4+0x1c>
 8000664:	2200      	movs	r2, #0
 8000666:	2300      	movs	r3, #0
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <__udivmoddi4+0x8e>
 8000672:	601c      	str	r4, [r3, #0]
 8000674:	605d      	str	r5, [r3, #4]
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	b003      	add	sp, #12
 800067c:	bcf0      	pop	{r4, r5, r6, r7}
 800067e:	46bb      	mov	fp, r7
 8000680:	46b2      	mov	sl, r6
 8000682:	46a9      	mov	r9, r5
 8000684:	46a0      	mov	r8, r4
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000688:	4642      	mov	r2, r8
 800068a:	469b      	mov	fp, r3
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	4652      	mov	r2, sl
 8000692:	40da      	lsrs	r2, r3
 8000694:	4641      	mov	r1, r8
 8000696:	0013      	movs	r3, r2
 8000698:	464a      	mov	r2, r9
 800069a:	408a      	lsls	r2, r1
 800069c:	0017      	movs	r7, r2
 800069e:	4642      	mov	r2, r8
 80006a0:	431f      	orrs	r7, r3
 80006a2:	4653      	mov	r3, sl
 80006a4:	4093      	lsls	r3, r2
 80006a6:	001e      	movs	r6, r3
 80006a8:	42af      	cmp	r7, r5
 80006aa:	d9c3      	bls.n	8000634 <__udivmoddi4+0x4c>
 80006ac:	2200      	movs	r2, #0
 80006ae:	2300      	movs	r3, #0
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	4643      	mov	r3, r8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0d8      	beq.n	800066c <__udivmoddi4+0x84>
 80006ba:	07fb      	lsls	r3, r7, #31
 80006bc:	0872      	lsrs	r2, r6, #1
 80006be:	431a      	orrs	r2, r3
 80006c0:	4646      	mov	r6, r8
 80006c2:	087b      	lsrs	r3, r7, #1
 80006c4:	e00e      	b.n	80006e4 <__udivmoddi4+0xfc>
 80006c6:	42ab      	cmp	r3, r5
 80006c8:	d101      	bne.n	80006ce <__udivmoddi4+0xe6>
 80006ca:	42a2      	cmp	r2, r4
 80006cc:	d80c      	bhi.n	80006e8 <__udivmoddi4+0x100>
 80006ce:	1aa4      	subs	r4, r4, r2
 80006d0:	419d      	sbcs	r5, r3
 80006d2:	2001      	movs	r0, #1
 80006d4:	1924      	adds	r4, r4, r4
 80006d6:	416d      	adcs	r5, r5
 80006d8:	2100      	movs	r1, #0
 80006da:	3e01      	subs	r6, #1
 80006dc:	1824      	adds	r4, r4, r0
 80006de:	414d      	adcs	r5, r1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d006      	beq.n	80006f2 <__udivmoddi4+0x10a>
 80006e4:	42ab      	cmp	r3, r5
 80006e6:	d9ee      	bls.n	80006c6 <__udivmoddi4+0xde>
 80006e8:	3e01      	subs	r6, #1
 80006ea:	1924      	adds	r4, r4, r4
 80006ec:	416d      	adcs	r5, r5
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d1f8      	bne.n	80006e4 <__udivmoddi4+0xfc>
 80006f2:	9800      	ldr	r0, [sp, #0]
 80006f4:	9901      	ldr	r1, [sp, #4]
 80006f6:	465b      	mov	r3, fp
 80006f8:	1900      	adds	r0, r0, r4
 80006fa:	4169      	adcs	r1, r5
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db24      	blt.n	800074a <__udivmoddi4+0x162>
 8000700:	002b      	movs	r3, r5
 8000702:	465a      	mov	r2, fp
 8000704:	4644      	mov	r4, r8
 8000706:	40d3      	lsrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	40e2      	lsrs	r2, r4
 800070c:	001c      	movs	r4, r3
 800070e:	465b      	mov	r3, fp
 8000710:	0015      	movs	r5, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	db2a      	blt.n	800076c <__udivmoddi4+0x184>
 8000716:	0026      	movs	r6, r4
 8000718:	409e      	lsls	r6, r3
 800071a:	0033      	movs	r3, r6
 800071c:	0026      	movs	r6, r4
 800071e:	4647      	mov	r7, r8
 8000720:	40be      	lsls	r6, r7
 8000722:	0032      	movs	r2, r6
 8000724:	1a80      	subs	r0, r0, r2
 8000726:	4199      	sbcs	r1, r3
 8000728:	9000      	str	r0, [sp, #0]
 800072a:	9101      	str	r1, [sp, #4]
 800072c:	e79e      	b.n	800066c <__udivmoddi4+0x84>
 800072e:	42a3      	cmp	r3, r4
 8000730:	d8bc      	bhi.n	80006ac <__udivmoddi4+0xc4>
 8000732:	e782      	b.n	800063a <__udivmoddi4+0x52>
 8000734:	4642      	mov	r2, r8
 8000736:	2320      	movs	r3, #32
 8000738:	2100      	movs	r1, #0
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	2200      	movs	r2, #0
 800073e:	9100      	str	r1, [sp, #0]
 8000740:	9201      	str	r2, [sp, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	40da      	lsrs	r2, r3
 8000746:	9201      	str	r2, [sp, #4]
 8000748:	e785      	b.n	8000656 <__udivmoddi4+0x6e>
 800074a:	4642      	mov	r2, r8
 800074c:	2320      	movs	r3, #32
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	4646      	mov	r6, r8
 8000754:	409a      	lsls	r2, r3
 8000756:	0023      	movs	r3, r4
 8000758:	40f3      	lsrs	r3, r6
 800075a:	4644      	mov	r4, r8
 800075c:	4313      	orrs	r3, r2
 800075e:	002a      	movs	r2, r5
 8000760:	40e2      	lsrs	r2, r4
 8000762:	001c      	movs	r4, r3
 8000764:	465b      	mov	r3, fp
 8000766:	0015      	movs	r5, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	dad4      	bge.n	8000716 <__udivmoddi4+0x12e>
 800076c:	4642      	mov	r2, r8
 800076e:	002f      	movs	r7, r5
 8000770:	2320      	movs	r3, #32
 8000772:	0026      	movs	r6, r4
 8000774:	4097      	lsls	r7, r2
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	40de      	lsrs	r6, r3
 800077a:	003b      	movs	r3, r7
 800077c:	4333      	orrs	r3, r6
 800077e:	e7cd      	b.n	800071c <__udivmoddi4+0x134>

08000780 <__aeabi_fdiv>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	464f      	mov	r7, r9
 8000784:	4646      	mov	r6, r8
 8000786:	46d6      	mov	lr, sl
 8000788:	0244      	lsls	r4, r0, #9
 800078a:	b5c0      	push	{r6, r7, lr}
 800078c:	0047      	lsls	r7, r0, #1
 800078e:	1c0e      	adds	r6, r1, #0
 8000790:	0a64      	lsrs	r4, r4, #9
 8000792:	0e3f      	lsrs	r7, r7, #24
 8000794:	0fc5      	lsrs	r5, r0, #31
 8000796:	2f00      	cmp	r7, #0
 8000798:	d03c      	beq.n	8000814 <__aeabi_fdiv+0x94>
 800079a:	2fff      	cmp	r7, #255	@ 0xff
 800079c:	d042      	beq.n	8000824 <__aeabi_fdiv+0xa4>
 800079e:	2300      	movs	r3, #0
 80007a0:	2280      	movs	r2, #128	@ 0x80
 80007a2:	4699      	mov	r9, r3
 80007a4:	469a      	mov	sl, r3
 80007a6:	00e4      	lsls	r4, r4, #3
 80007a8:	04d2      	lsls	r2, r2, #19
 80007aa:	4314      	orrs	r4, r2
 80007ac:	3f7f      	subs	r7, #127	@ 0x7f
 80007ae:	0273      	lsls	r3, r6, #9
 80007b0:	0a5b      	lsrs	r3, r3, #9
 80007b2:	4698      	mov	r8, r3
 80007b4:	0073      	lsls	r3, r6, #1
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	0ff6      	lsrs	r6, r6, #31
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d01b      	beq.n	80007f6 <__aeabi_fdiv+0x76>
 80007be:	2bff      	cmp	r3, #255	@ 0xff
 80007c0:	d013      	beq.n	80007ea <__aeabi_fdiv+0x6a>
 80007c2:	4642      	mov	r2, r8
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	00d2      	lsls	r2, r2, #3
 80007c8:	04c9      	lsls	r1, r1, #19
 80007ca:	4311      	orrs	r1, r2
 80007cc:	4688      	mov	r8, r1
 80007ce:	2000      	movs	r0, #0
 80007d0:	3b7f      	subs	r3, #127	@ 0x7f
 80007d2:	0029      	movs	r1, r5
 80007d4:	1aff      	subs	r7, r7, r3
 80007d6:	464b      	mov	r3, r9
 80007d8:	4071      	eors	r1, r6
 80007da:	b2c9      	uxtb	r1, r1
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d900      	bls.n	80007e2 <__aeabi_fdiv+0x62>
 80007e0:	e0b5      	b.n	800094e <__aeabi_fdiv+0x1ce>
 80007e2:	4a74      	ldr	r2, [pc, #464]	@ (80009b4 <__aeabi_fdiv+0x234>)
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	58d3      	ldr	r3, [r2, r3]
 80007e8:	469f      	mov	pc, r3
 80007ea:	4643      	mov	r3, r8
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d13f      	bne.n	8000870 <__aeabi_fdiv+0xf0>
 80007f0:	3fff      	subs	r7, #255	@ 0xff
 80007f2:	3302      	adds	r3, #2
 80007f4:	e003      	b.n	80007fe <__aeabi_fdiv+0x7e>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d12d      	bne.n	8000858 <__aeabi_fdiv+0xd8>
 80007fc:	2301      	movs	r3, #1
 80007fe:	0029      	movs	r1, r5
 8000800:	464a      	mov	r2, r9
 8000802:	4071      	eors	r1, r6
 8000804:	b2c9      	uxtb	r1, r1
 8000806:	431a      	orrs	r2, r3
 8000808:	2a0e      	cmp	r2, #14
 800080a:	d838      	bhi.n	800087e <__aeabi_fdiv+0xfe>
 800080c:	486a      	ldr	r0, [pc, #424]	@ (80009b8 <__aeabi_fdiv+0x238>)
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	5882      	ldr	r2, [r0, r2]
 8000812:	4697      	mov	pc, r2
 8000814:	2c00      	cmp	r4, #0
 8000816:	d113      	bne.n	8000840 <__aeabi_fdiv+0xc0>
 8000818:	2304      	movs	r3, #4
 800081a:	4699      	mov	r9, r3
 800081c:	3b03      	subs	r3, #3
 800081e:	2700      	movs	r7, #0
 8000820:	469a      	mov	sl, r3
 8000822:	e7c4      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d105      	bne.n	8000834 <__aeabi_fdiv+0xb4>
 8000828:	2308      	movs	r3, #8
 800082a:	4699      	mov	r9, r3
 800082c:	3b06      	subs	r3, #6
 800082e:	27ff      	movs	r7, #255	@ 0xff
 8000830:	469a      	mov	sl, r3
 8000832:	e7bc      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000834:	230c      	movs	r3, #12
 8000836:	4699      	mov	r9, r3
 8000838:	3b09      	subs	r3, #9
 800083a:	27ff      	movs	r7, #255	@ 0xff
 800083c:	469a      	mov	sl, r3
 800083e:	e7b6      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000840:	0020      	movs	r0, r4
 8000842:	f002 fb8d 	bl	8002f60 <__clzsi2>
 8000846:	2776      	movs	r7, #118	@ 0x76
 8000848:	1f43      	subs	r3, r0, #5
 800084a:	409c      	lsls	r4, r3
 800084c:	2300      	movs	r3, #0
 800084e:	427f      	negs	r7, r7
 8000850:	4699      	mov	r9, r3
 8000852:	469a      	mov	sl, r3
 8000854:	1a3f      	subs	r7, r7, r0
 8000856:	e7aa      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000858:	4640      	mov	r0, r8
 800085a:	f002 fb81 	bl	8002f60 <__clzsi2>
 800085e:	4642      	mov	r2, r8
 8000860:	1f43      	subs	r3, r0, #5
 8000862:	409a      	lsls	r2, r3
 8000864:	2376      	movs	r3, #118	@ 0x76
 8000866:	425b      	negs	r3, r3
 8000868:	1a1b      	subs	r3, r3, r0
 800086a:	4690      	mov	r8, r2
 800086c:	2000      	movs	r0, #0
 800086e:	e7b0      	b.n	80007d2 <__aeabi_fdiv+0x52>
 8000870:	2303      	movs	r3, #3
 8000872:	464a      	mov	r2, r9
 8000874:	431a      	orrs	r2, r3
 8000876:	4691      	mov	r9, r2
 8000878:	2003      	movs	r0, #3
 800087a:	33fc      	adds	r3, #252	@ 0xfc
 800087c:	e7a9      	b.n	80007d2 <__aeabi_fdiv+0x52>
 800087e:	000d      	movs	r5, r1
 8000880:	20ff      	movs	r0, #255	@ 0xff
 8000882:	2200      	movs	r2, #0
 8000884:	05c0      	lsls	r0, r0, #23
 8000886:	07ed      	lsls	r5, r5, #31
 8000888:	4310      	orrs	r0, r2
 800088a:	4328      	orrs	r0, r5
 800088c:	bce0      	pop	{r5, r6, r7}
 800088e:	46ba      	mov	sl, r7
 8000890:	46b1      	mov	r9, r6
 8000892:	46a8      	mov	r8, r5
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000896:	000d      	movs	r5, r1
 8000898:	2000      	movs	r0, #0
 800089a:	2200      	movs	r2, #0
 800089c:	e7f2      	b.n	8000884 <__aeabi_fdiv+0x104>
 800089e:	4653      	mov	r3, sl
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d0ed      	beq.n	8000880 <__aeabi_fdiv+0x100>
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d033      	beq.n	8000910 <__aeabi_fdiv+0x190>
 80008a8:	46a0      	mov	r8, r4
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d105      	bne.n	80008ba <__aeabi_fdiv+0x13a>
 80008ae:	2000      	movs	r0, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	e7e7      	b.n	8000884 <__aeabi_fdiv+0x104>
 80008b4:	0035      	movs	r5, r6
 80008b6:	2803      	cmp	r0, #3
 80008b8:	d07a      	beq.n	80009b0 <__aeabi_fdiv+0x230>
 80008ba:	003b      	movs	r3, r7
 80008bc:	337f      	adds	r3, #127	@ 0x7f
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dd2d      	ble.n	800091e <__aeabi_fdiv+0x19e>
 80008c2:	4642      	mov	r2, r8
 80008c4:	0752      	lsls	r2, r2, #29
 80008c6:	d007      	beq.n	80008d8 <__aeabi_fdiv+0x158>
 80008c8:	220f      	movs	r2, #15
 80008ca:	4641      	mov	r1, r8
 80008cc:	400a      	ands	r2, r1
 80008ce:	2a04      	cmp	r2, #4
 80008d0:	d002      	beq.n	80008d8 <__aeabi_fdiv+0x158>
 80008d2:	2204      	movs	r2, #4
 80008d4:	4694      	mov	ip, r2
 80008d6:	44e0      	add	r8, ip
 80008d8:	4642      	mov	r2, r8
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	d505      	bpl.n	80008ea <__aeabi_fdiv+0x16a>
 80008de:	4642      	mov	r2, r8
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <__aeabi_fdiv+0x23c>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	003b      	movs	r3, r7
 80008e6:	4690      	mov	r8, r2
 80008e8:	3380      	adds	r3, #128	@ 0x80
 80008ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80008ec:	dcc8      	bgt.n	8000880 <__aeabi_fdiv+0x100>
 80008ee:	4642      	mov	r2, r8
 80008f0:	0192      	lsls	r2, r2, #6
 80008f2:	0a52      	lsrs	r2, r2, #9
 80008f4:	b2d8      	uxtb	r0, r3
 80008f6:	e7c5      	b.n	8000884 <__aeabi_fdiv+0x104>
 80008f8:	2280      	movs	r2, #128	@ 0x80
 80008fa:	2500      	movs	r5, #0
 80008fc:	20ff      	movs	r0, #255	@ 0xff
 80008fe:	03d2      	lsls	r2, r2, #15
 8000900:	e7c0      	b.n	8000884 <__aeabi_fdiv+0x104>
 8000902:	2280      	movs	r2, #128	@ 0x80
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4214      	tst	r4, r2
 8000908:	d002      	beq.n	8000910 <__aeabi_fdiv+0x190>
 800090a:	4643      	mov	r3, r8
 800090c:	4213      	tst	r3, r2
 800090e:	d049      	beq.n	80009a4 <__aeabi_fdiv+0x224>
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	03d2      	lsls	r2, r2, #15
 8000914:	4322      	orrs	r2, r4
 8000916:	0252      	lsls	r2, r2, #9
 8000918:	20ff      	movs	r0, #255	@ 0xff
 800091a:	0a52      	lsrs	r2, r2, #9
 800091c:	e7b2      	b.n	8000884 <__aeabi_fdiv+0x104>
 800091e:	2201      	movs	r2, #1
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	2b1b      	cmp	r3, #27
 8000924:	dcc3      	bgt.n	80008ae <__aeabi_fdiv+0x12e>
 8000926:	4642      	mov	r2, r8
 8000928:	40da      	lsrs	r2, r3
 800092a:	4643      	mov	r3, r8
 800092c:	379e      	adds	r7, #158	@ 0x9e
 800092e:	40bb      	lsls	r3, r7
 8000930:	1e59      	subs	r1, r3, #1
 8000932:	418b      	sbcs	r3, r1
 8000934:	431a      	orrs	r2, r3
 8000936:	0753      	lsls	r3, r2, #29
 8000938:	d004      	beq.n	8000944 <__aeabi_fdiv+0x1c4>
 800093a:	230f      	movs	r3, #15
 800093c:	4013      	ands	r3, r2
 800093e:	2b04      	cmp	r3, #4
 8000940:	d000      	beq.n	8000944 <__aeabi_fdiv+0x1c4>
 8000942:	3204      	adds	r2, #4
 8000944:	0153      	lsls	r3, r2, #5
 8000946:	d529      	bpl.n	800099c <__aeabi_fdiv+0x21c>
 8000948:	2001      	movs	r0, #1
 800094a:	2200      	movs	r2, #0
 800094c:	e79a      	b.n	8000884 <__aeabi_fdiv+0x104>
 800094e:	4642      	mov	r2, r8
 8000950:	0163      	lsls	r3, r4, #5
 8000952:	0155      	lsls	r5, r2, #5
 8000954:	42ab      	cmp	r3, r5
 8000956:	d215      	bcs.n	8000984 <__aeabi_fdiv+0x204>
 8000958:	201b      	movs	r0, #27
 800095a:	2200      	movs	r2, #0
 800095c:	3f01      	subs	r7, #1
 800095e:	2601      	movs	r6, #1
 8000960:	001c      	movs	r4, r3
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2c00      	cmp	r4, #0
 8000968:	db01      	blt.n	800096e <__aeabi_fdiv+0x1ee>
 800096a:	429d      	cmp	r5, r3
 800096c:	d801      	bhi.n	8000972 <__aeabi_fdiv+0x1f2>
 800096e:	1b5b      	subs	r3, r3, r5
 8000970:	4332      	orrs	r2, r6
 8000972:	3801      	subs	r0, #1
 8000974:	2800      	cmp	r0, #0
 8000976:	d1f3      	bne.n	8000960 <__aeabi_fdiv+0x1e0>
 8000978:	1e58      	subs	r0, r3, #1
 800097a:	4183      	sbcs	r3, r0
 800097c:	4313      	orrs	r3, r2
 800097e:	4698      	mov	r8, r3
 8000980:	000d      	movs	r5, r1
 8000982:	e79a      	b.n	80008ba <__aeabi_fdiv+0x13a>
 8000984:	201a      	movs	r0, #26
 8000986:	2201      	movs	r2, #1
 8000988:	1b5b      	subs	r3, r3, r5
 800098a:	e7e8      	b.n	800095e <__aeabi_fdiv+0x1de>
 800098c:	3b02      	subs	r3, #2
 800098e:	425a      	negs	r2, r3
 8000990:	4153      	adcs	r3, r2
 8000992:	425b      	negs	r3, r3
 8000994:	0035      	movs	r5, r6
 8000996:	2200      	movs	r2, #0
 8000998:	b2d8      	uxtb	r0, r3
 800099a:	e773      	b.n	8000884 <__aeabi_fdiv+0x104>
 800099c:	0192      	lsls	r2, r2, #6
 800099e:	2000      	movs	r0, #0
 80009a0:	0a52      	lsrs	r2, r2, #9
 80009a2:	e76f      	b.n	8000884 <__aeabi_fdiv+0x104>
 80009a4:	431a      	orrs	r2, r3
 80009a6:	0252      	lsls	r2, r2, #9
 80009a8:	0035      	movs	r5, r6
 80009aa:	20ff      	movs	r0, #255	@ 0xff
 80009ac:	0a52      	lsrs	r2, r2, #9
 80009ae:	e769      	b.n	8000884 <__aeabi_fdiv+0x104>
 80009b0:	4644      	mov	r4, r8
 80009b2:	e7ad      	b.n	8000910 <__aeabi_fdiv+0x190>
 80009b4:	08009aa8 	.word	0x08009aa8
 80009b8:	08009ae8 	.word	0x08009ae8
 80009bc:	f7ffffff 	.word	0xf7ffffff

080009c0 <__eqsf2>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	0042      	lsls	r2, r0, #1
 80009c4:	024e      	lsls	r6, r1, #9
 80009c6:	004c      	lsls	r4, r1, #1
 80009c8:	0245      	lsls	r5, r0, #9
 80009ca:	0a6d      	lsrs	r5, r5, #9
 80009cc:	0e12      	lsrs	r2, r2, #24
 80009ce:	0fc3      	lsrs	r3, r0, #31
 80009d0:	0a76      	lsrs	r6, r6, #9
 80009d2:	0e24      	lsrs	r4, r4, #24
 80009d4:	0fc9      	lsrs	r1, r1, #31
 80009d6:	2aff      	cmp	r2, #255	@ 0xff
 80009d8:	d010      	beq.n	80009fc <__eqsf2+0x3c>
 80009da:	2cff      	cmp	r4, #255	@ 0xff
 80009dc:	d00c      	beq.n	80009f8 <__eqsf2+0x38>
 80009de:	2001      	movs	r0, #1
 80009e0:	42a2      	cmp	r2, r4
 80009e2:	d10a      	bne.n	80009fa <__eqsf2+0x3a>
 80009e4:	42b5      	cmp	r5, r6
 80009e6:	d108      	bne.n	80009fa <__eqsf2+0x3a>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d00f      	beq.n	8000a0c <__eqsf2+0x4c>
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d104      	bne.n	80009fa <__eqsf2+0x3a>
 80009f0:	0028      	movs	r0, r5
 80009f2:	1e43      	subs	r3, r0, #1
 80009f4:	4198      	sbcs	r0, r3
 80009f6:	e000      	b.n	80009fa <__eqsf2+0x3a>
 80009f8:	2001      	movs	r0, #1
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	2001      	movs	r0, #1
 80009fe:	2cff      	cmp	r4, #255	@ 0xff
 8000a00:	d1fb      	bne.n	80009fa <__eqsf2+0x3a>
 8000a02:	4335      	orrs	r5, r6
 8000a04:	d1f9      	bne.n	80009fa <__eqsf2+0x3a>
 8000a06:	404b      	eors	r3, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	e7f6      	b.n	80009fa <__eqsf2+0x3a>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e7f4      	b.n	80009fa <__eqsf2+0x3a>

08000a10 <__gesf2>:
 8000a10:	b530      	push	{r4, r5, lr}
 8000a12:	0042      	lsls	r2, r0, #1
 8000a14:	0244      	lsls	r4, r0, #9
 8000a16:	024d      	lsls	r5, r1, #9
 8000a18:	0fc3      	lsrs	r3, r0, #31
 8000a1a:	0048      	lsls	r0, r1, #1
 8000a1c:	0a64      	lsrs	r4, r4, #9
 8000a1e:	0e12      	lsrs	r2, r2, #24
 8000a20:	0a6d      	lsrs	r5, r5, #9
 8000a22:	0e00      	lsrs	r0, r0, #24
 8000a24:	0fc9      	lsrs	r1, r1, #31
 8000a26:	2aff      	cmp	r2, #255	@ 0xff
 8000a28:	d019      	beq.n	8000a5e <__gesf2+0x4e>
 8000a2a:	28ff      	cmp	r0, #255	@ 0xff
 8000a2c:	d00b      	beq.n	8000a46 <__gesf2+0x36>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d11e      	bne.n	8000a70 <__gesf2+0x60>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d10b      	bne.n	8000a4e <__gesf2+0x3e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d027      	beq.n	8000a8a <__gesf2+0x7a>
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d134      	bne.n	8000aa8 <__gesf2+0x98>
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	d02f      	beq.n	8000aa2 <__gesf2+0x92>
 8000a42:	0008      	movs	r0, r1
 8000a44:	bd30      	pop	{r4, r5, pc}
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d128      	bne.n	8000a9c <__gesf2+0x8c>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d101      	bne.n	8000a52 <__gesf2+0x42>
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d0f5      	beq.n	8000a3e <__gesf2+0x2e>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d107      	bne.n	8000a66 <__gesf2+0x56>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d023      	beq.n	8000aa2 <__gesf2+0x92>
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	e7f2      	b.n	8000a44 <__gesf2+0x34>
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d11c      	bne.n	8000a9c <__gesf2+0x8c>
 8000a62:	28ff      	cmp	r0, #255	@ 0xff
 8000a64:	d014      	beq.n	8000a90 <__gesf2+0x80>
 8000a66:	1e58      	subs	r0, r3, #1
 8000a68:	2302      	movs	r3, #2
 8000a6a:	4018      	ands	r0, r3
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	e7e9      	b.n	8000a44 <__gesf2+0x34>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d0f8      	beq.n	8000a66 <__gesf2+0x56>
 8000a74:	428b      	cmp	r3, r1
 8000a76:	d1f6      	bne.n	8000a66 <__gesf2+0x56>
 8000a78:	4282      	cmp	r2, r0
 8000a7a:	dcf4      	bgt.n	8000a66 <__gesf2+0x56>
 8000a7c:	dbeb      	blt.n	8000a56 <__gesf2+0x46>
 8000a7e:	42ac      	cmp	r4, r5
 8000a80:	d8f1      	bhi.n	8000a66 <__gesf2+0x56>
 8000a82:	2000      	movs	r0, #0
 8000a84:	42ac      	cmp	r4, r5
 8000a86:	d2dd      	bcs.n	8000a44 <__gesf2+0x34>
 8000a88:	e7e5      	b.n	8000a56 <__gesf2+0x46>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d0da      	beq.n	8000a44 <__gesf2+0x34>
 8000a8e:	e7ea      	b.n	8000a66 <__gesf2+0x56>
 8000a90:	2d00      	cmp	r5, #0
 8000a92:	d103      	bne.n	8000a9c <__gesf2+0x8c>
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d1e6      	bne.n	8000a66 <__gesf2+0x56>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e7d3      	b.n	8000a44 <__gesf2+0x34>
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	e7d0      	b.n	8000a44 <__gesf2+0x34>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4240      	negs	r0, r0
 8000aa6:	e7cd      	b.n	8000a44 <__gesf2+0x34>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d0e8      	beq.n	8000a7e <__gesf2+0x6e>
 8000aac:	e7db      	b.n	8000a66 <__gesf2+0x56>
 8000aae:	46c0      	nop			@ (mov r8, r8)

08000ab0 <__lesf2>:
 8000ab0:	b530      	push	{r4, r5, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0244      	lsls	r4, r0, #9
 8000ab6:	024d      	lsls	r5, r1, #9
 8000ab8:	0fc3      	lsrs	r3, r0, #31
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	0a64      	lsrs	r4, r4, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a6d      	lsrs	r5, r5, #9
 8000ac2:	0e00      	lsrs	r0, r0, #24
 8000ac4:	0fc9      	lsrs	r1, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	@ 0xff
 8000ac8:	d01a      	beq.n	8000b00 <__lesf2+0x50>
 8000aca:	28ff      	cmp	r0, #255	@ 0xff
 8000acc:	d00e      	beq.n	8000aec <__lesf2+0x3c>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d11e      	bne.n	8000b10 <__lesf2+0x60>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d10e      	bne.n	8000af4 <__lesf2+0x44>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d02a      	beq.n	8000b30 <__lesf2+0x80>
 8000ada:	2c00      	cmp	r4, #0
 8000adc:	d00c      	beq.n	8000af8 <__lesf2+0x48>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d01d      	beq.n	8000b1e <__lesf2+0x6e>
 8000ae2:	1e58      	subs	r0, r3, #1
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	4018      	ands	r0, r3
 8000ae8:	3801      	subs	r0, #1
 8000aea:	e010      	b.n	8000b0e <__lesf2+0x5e>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d10d      	bne.n	8000b0c <__lesf2+0x5c>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d120      	bne.n	8000b36 <__lesf2+0x86>
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d11e      	bne.n	8000b36 <__lesf2+0x86>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d023      	beq.n	8000b44 <__lesf2+0x94>
 8000afc:	0008      	movs	r0, r1
 8000afe:	e006      	b.n	8000b0e <__lesf2+0x5e>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d103      	bne.n	8000b0c <__lesf2+0x5c>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d1ec      	bne.n	8000ae2 <__lesf2+0x32>
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d017      	beq.n	8000b3c <__lesf2+0x8c>
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	bd30      	pop	{r4, r5, pc}
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__lesf2+0x32>
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d1e4      	bne.n	8000ae2 <__lesf2+0x32>
 8000b18:	4282      	cmp	r2, r0
 8000b1a:	dce2      	bgt.n	8000ae2 <__lesf2+0x32>
 8000b1c:	db04      	blt.n	8000b28 <__lesf2+0x78>
 8000b1e:	42ac      	cmp	r4, r5
 8000b20:	d8df      	bhi.n	8000ae2 <__lesf2+0x32>
 8000b22:	2000      	movs	r0, #0
 8000b24:	42ac      	cmp	r4, r5
 8000b26:	d2f2      	bcs.n	8000b0e <__lesf2+0x5e>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <__lesf2+0x94>
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	e7ee      	b.n	8000b0e <__lesf2+0x5e>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d0ec      	beq.n	8000b0e <__lesf2+0x5e>
 8000b34:	e7d5      	b.n	8000ae2 <__lesf2+0x32>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d1d3      	bne.n	8000ae2 <__lesf2+0x32>
 8000b3a:	e7f5      	b.n	8000b28 <__lesf2+0x78>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d0e5      	beq.n	8000b0e <__lesf2+0x5e>
 8000b42:	e7ce      	b.n	8000ae2 <__lesf2+0x32>
 8000b44:	2001      	movs	r0, #1
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7e1      	b.n	8000b0e <__lesf2+0x5e>
 8000b4a:	46c0      	nop			@ (mov r8, r8)

08000b4c <__aeabi_fmul>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	464f      	mov	r7, r9
 8000b50:	4646      	mov	r6, r8
 8000b52:	46d6      	mov	lr, sl
 8000b54:	0243      	lsls	r3, r0, #9
 8000b56:	0a5b      	lsrs	r3, r3, #9
 8000b58:	0045      	lsls	r5, r0, #1
 8000b5a:	b5c0      	push	{r6, r7, lr}
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	1c0f      	adds	r7, r1, #0
 8000b60:	0e2d      	lsrs	r5, r5, #24
 8000b62:	0fc6      	lsrs	r6, r0, #31
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fmul+0x1e>
 8000b68:	e088      	b.n	8000c7c <__aeabi_fmul+0x130>
 8000b6a:	2dff      	cmp	r5, #255	@ 0xff
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fmul+0x24>
 8000b6e:	e08d      	b.n	8000c8c <__aeabi_fmul+0x140>
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	04d2      	lsls	r2, r2, #19
 8000b76:	431a      	orrs	r2, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	4691      	mov	r9, r2
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	469a      	mov	sl, r3
 8000b80:	3d7f      	subs	r5, #127	@ 0x7f
 8000b82:	027c      	lsls	r4, r7, #9
 8000b84:	007b      	lsls	r3, r7, #1
 8000b86:	0a64      	lsrs	r4, r4, #9
 8000b88:	0e1b      	lsrs	r3, r3, #24
 8000b8a:	0fff      	lsrs	r7, r7, #31
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d068      	beq.n	8000c62 <__aeabi_fmul+0x116>
 8000b90:	2bff      	cmp	r3, #255	@ 0xff
 8000b92:	d021      	beq.n	8000bd8 <__aeabi_fmul+0x8c>
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	00e4      	lsls	r4, r4, #3
 8000b98:	04d2      	lsls	r2, r2, #19
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000ba0:	195b      	adds	r3, r3, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	1c5d      	adds	r5, r3, #1
 8000ba6:	2a0a      	cmp	r2, #10
 8000ba8:	dc2e      	bgt.n	8000c08 <__aeabi_fmul+0xbc>
 8000baa:	407e      	eors	r6, r7
 8000bac:	4642      	mov	r2, r8
 8000bae:	2a02      	cmp	r2, #2
 8000bb0:	dc23      	bgt.n	8000bfa <__aeabi_fmul+0xae>
 8000bb2:	3a01      	subs	r2, #1
 8000bb4:	2a01      	cmp	r2, #1
 8000bb6:	d900      	bls.n	8000bba <__aeabi_fmul+0x6e>
 8000bb8:	e0bd      	b.n	8000d36 <__aeabi_fmul+0x1ea>
 8000bba:	2902      	cmp	r1, #2
 8000bbc:	d06e      	beq.n	8000c9c <__aeabi_fmul+0x150>
 8000bbe:	2901      	cmp	r1, #1
 8000bc0:	d12c      	bne.n	8000c1c <__aeabi_fmul+0xd0>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	05c0      	lsls	r0, r0, #23
 8000bc8:	07f6      	lsls	r6, r6, #31
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	4330      	orrs	r0, r6
 8000bce:	bce0      	pop	{r5, r6, r7}
 8000bd0:	46ba      	mov	sl, r7
 8000bd2:	46b1      	mov	r9, r6
 8000bd4:	46a8      	mov	r8, r5
 8000bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd8:	002b      	movs	r3, r5
 8000bda:	33ff      	adds	r3, #255	@ 0xff
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d065      	beq.n	8000cac <__aeabi_fmul+0x160>
 8000be0:	2203      	movs	r2, #3
 8000be2:	4641      	mov	r1, r8
 8000be4:	4311      	orrs	r1, r2
 8000be6:	0032      	movs	r2, r6
 8000be8:	3501      	adds	r5, #1
 8000bea:	4688      	mov	r8, r1
 8000bec:	407a      	eors	r2, r7
 8000bee:	35ff      	adds	r5, #255	@ 0xff
 8000bf0:	290a      	cmp	r1, #10
 8000bf2:	dd00      	ble.n	8000bf6 <__aeabi_fmul+0xaa>
 8000bf4:	e0d8      	b.n	8000da8 <__aeabi_fmul+0x25c>
 8000bf6:	0016      	movs	r6, r2
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	4640      	mov	r0, r8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4082      	lsls	r2, r0
 8000c00:	20a6      	movs	r0, #166	@ 0xa6
 8000c02:	00c0      	lsls	r0, r0, #3
 8000c04:	4202      	tst	r2, r0
 8000c06:	d020      	beq.n	8000c4a <__aeabi_fmul+0xfe>
 8000c08:	4653      	mov	r3, sl
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d046      	beq.n	8000c9c <__aeabi_fmul+0x150>
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fmul+0xc8>
 8000c12:	e0bb      	b.n	8000d8c <__aeabi_fmul+0x240>
 8000c14:	4651      	mov	r1, sl
 8000c16:	464c      	mov	r4, r9
 8000c18:	2901      	cmp	r1, #1
 8000c1a:	d0d2      	beq.n	8000bc2 <__aeabi_fmul+0x76>
 8000c1c:	002b      	movs	r3, r5
 8000c1e:	337f      	adds	r3, #127	@ 0x7f
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dd70      	ble.n	8000d06 <__aeabi_fmul+0x1ba>
 8000c24:	0762      	lsls	r2, r4, #29
 8000c26:	d004      	beq.n	8000c32 <__aeabi_fmul+0xe6>
 8000c28:	220f      	movs	r2, #15
 8000c2a:	4022      	ands	r2, r4
 8000c2c:	2a04      	cmp	r2, #4
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_fmul+0xe6>
 8000c30:	3404      	adds	r4, #4
 8000c32:	0122      	lsls	r2, r4, #4
 8000c34:	d503      	bpl.n	8000c3e <__aeabi_fmul+0xf2>
 8000c36:	4b63      	ldr	r3, [pc, #396]	@ (8000dc4 <__aeabi_fmul+0x278>)
 8000c38:	401c      	ands	r4, r3
 8000c3a:	002b      	movs	r3, r5
 8000c3c:	3380      	adds	r3, #128	@ 0x80
 8000c3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c40:	dc2c      	bgt.n	8000c9c <__aeabi_fmul+0x150>
 8000c42:	01a2      	lsls	r2, r4, #6
 8000c44:	0a52      	lsrs	r2, r2, #9
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	e7bd      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000c4a:	2090      	movs	r0, #144	@ 0x90
 8000c4c:	0080      	lsls	r0, r0, #2
 8000c4e:	4202      	tst	r2, r0
 8000c50:	d127      	bne.n	8000ca2 <__aeabi_fmul+0x156>
 8000c52:	38b9      	subs	r0, #185	@ 0xb9
 8000c54:	38ff      	subs	r0, #255	@ 0xff
 8000c56:	4210      	tst	r0, r2
 8000c58:	d06d      	beq.n	8000d36 <__aeabi_fmul+0x1ea>
 8000c5a:	003e      	movs	r6, r7
 8000c5c:	46a1      	mov	r9, r4
 8000c5e:	468a      	mov	sl, r1
 8000c60:	e7d2      	b.n	8000c08 <__aeabi_fmul+0xbc>
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	d141      	bne.n	8000cea <__aeabi_fmul+0x19e>
 8000c66:	2301      	movs	r3, #1
 8000c68:	4642      	mov	r2, r8
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	002b      	movs	r3, r5
 8000c70:	4642      	mov	r2, r8
 8000c72:	2101      	movs	r1, #1
 8000c74:	1c5d      	adds	r5, r3, #1
 8000c76:	2a0a      	cmp	r2, #10
 8000c78:	dd97      	ble.n	8000baa <__aeabi_fmul+0x5e>
 8000c7a:	e7c5      	b.n	8000c08 <__aeabi_fmul+0xbc>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d126      	bne.n	8000cce <__aeabi_fmul+0x182>
 8000c80:	2304      	movs	r3, #4
 8000c82:	4698      	mov	r8, r3
 8000c84:	3b03      	subs	r3, #3
 8000c86:	2500      	movs	r5, #0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	e77a      	b.n	8000b82 <__aeabi_fmul+0x36>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d118      	bne.n	8000cc2 <__aeabi_fmul+0x176>
 8000c90:	2308      	movs	r3, #8
 8000c92:	4698      	mov	r8, r3
 8000c94:	3b06      	subs	r3, #6
 8000c96:	25ff      	movs	r5, #255	@ 0xff
 8000c98:	469a      	mov	sl, r3
 8000c9a:	e772      	b.n	8000b82 <__aeabi_fmul+0x36>
 8000c9c:	20ff      	movs	r0, #255	@ 0xff
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	e791      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000ca2:	2280      	movs	r2, #128	@ 0x80
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	20ff      	movs	r0, #255	@ 0xff
 8000ca8:	03d2      	lsls	r2, r2, #15
 8000caa:	e78c      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000cac:	4641      	mov	r1, r8
 8000cae:	2202      	movs	r2, #2
 8000cb0:	3501      	adds	r5, #1
 8000cb2:	4311      	orrs	r1, r2
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	35ff      	adds	r5, #255	@ 0xff
 8000cb8:	290a      	cmp	r1, #10
 8000cba:	dca5      	bgt.n	8000c08 <__aeabi_fmul+0xbc>
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	407e      	eors	r6, r7
 8000cc0:	e774      	b.n	8000bac <__aeabi_fmul+0x60>
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	3b09      	subs	r3, #9
 8000cc8:	25ff      	movs	r5, #255	@ 0xff
 8000cca:	469a      	mov	sl, r3
 8000ccc:	e759      	b.n	8000b82 <__aeabi_fmul+0x36>
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 f946 	bl	8002f60 <__clzsi2>
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	1f43      	subs	r3, r0, #5
 8000cd8:	2576      	movs	r5, #118	@ 0x76
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	2300      	movs	r3, #0
 8000cde:	426d      	negs	r5, r5
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	1a2d      	subs	r5, r5, r0
 8000ce8:	e74b      	b.n	8000b82 <__aeabi_fmul+0x36>
 8000cea:	0020      	movs	r0, r4
 8000cec:	f002 f938 	bl	8002f60 <__clzsi2>
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1f43      	subs	r3, r0, #5
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	1a2b      	subs	r3, r5, r0
 8000cf8:	3b76      	subs	r3, #118	@ 0x76
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	1c5d      	adds	r5, r3, #1
 8000cfe:	2a0a      	cmp	r2, #10
 8000d00:	dc00      	bgt.n	8000d04 <__aeabi_fmul+0x1b8>
 8000d02:	e752      	b.n	8000baa <__aeabi_fmul+0x5e>
 8000d04:	e780      	b.n	8000c08 <__aeabi_fmul+0xbc>
 8000d06:	2201      	movs	r2, #1
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b1b      	cmp	r3, #27
 8000d0c:	dd00      	ble.n	8000d10 <__aeabi_fmul+0x1c4>
 8000d0e:	e758      	b.n	8000bc2 <__aeabi_fmul+0x76>
 8000d10:	359e      	adds	r5, #158	@ 0x9e
 8000d12:	0022      	movs	r2, r4
 8000d14:	40ac      	lsls	r4, r5
 8000d16:	40da      	lsrs	r2, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	4322      	orrs	r2, r4
 8000d1e:	0753      	lsls	r3, r2, #29
 8000d20:	d004      	beq.n	8000d2c <__aeabi_fmul+0x1e0>
 8000d22:	230f      	movs	r3, #15
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d000      	beq.n	8000d2c <__aeabi_fmul+0x1e0>
 8000d2a:	3204      	adds	r2, #4
 8000d2c:	0153      	lsls	r3, r2, #5
 8000d2e:	d537      	bpl.n	8000da0 <__aeabi_fmul+0x254>
 8000d30:	2001      	movs	r0, #1
 8000d32:	2200      	movs	r2, #0
 8000d34:	e747      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000d36:	0c21      	lsrs	r1, r4, #16
 8000d38:	464a      	mov	r2, r9
 8000d3a:	0424      	lsls	r4, r4, #16
 8000d3c:	0c24      	lsrs	r4, r4, #16
 8000d3e:	0027      	movs	r7, r4
 8000d40:	0c10      	lsrs	r0, r2, #16
 8000d42:	0412      	lsls	r2, r2, #16
 8000d44:	0c12      	lsrs	r2, r2, #16
 8000d46:	4344      	muls	r4, r0
 8000d48:	4357      	muls	r7, r2
 8000d4a:	4348      	muls	r0, r1
 8000d4c:	4351      	muls	r1, r2
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	1909      	adds	r1, r1, r4
 8000d52:	1852      	adds	r2, r2, r1
 8000d54:	4294      	cmp	r4, r2
 8000d56:	d903      	bls.n	8000d60 <__aeabi_fmul+0x214>
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	0249      	lsls	r1, r1, #9
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	4460      	add	r0, ip
 8000d60:	043f      	lsls	r7, r7, #16
 8000d62:	0411      	lsls	r1, r2, #16
 8000d64:	0c3f      	lsrs	r7, r7, #16
 8000d66:	19c9      	adds	r1, r1, r7
 8000d68:	018c      	lsls	r4, r1, #6
 8000d6a:	1e67      	subs	r7, r4, #1
 8000d6c:	41bc      	sbcs	r4, r7
 8000d6e:	0c12      	lsrs	r2, r2, #16
 8000d70:	0e89      	lsrs	r1, r1, #26
 8000d72:	1812      	adds	r2, r2, r0
 8000d74:	430c      	orrs	r4, r1
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	4314      	orrs	r4, r2
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	d50e      	bpl.n	8000d9c <__aeabi_fmul+0x250>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	0862      	lsrs	r2, r4, #1
 8000d82:	401c      	ands	r4, r3
 8000d84:	4314      	orrs	r4, r2
 8000d86:	e749      	b.n	8000c1c <__aeabi_fmul+0xd0>
 8000d88:	003e      	movs	r6, r7
 8000d8a:	46a1      	mov	r9, r4
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	464b      	mov	r3, r9
 8000d90:	03d2      	lsls	r2, r2, #15
 8000d92:	431a      	orrs	r2, r3
 8000d94:	0252      	lsls	r2, r2, #9
 8000d96:	20ff      	movs	r0, #255	@ 0xff
 8000d98:	0a52      	lsrs	r2, r2, #9
 8000d9a:	e714      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000d9c:	001d      	movs	r5, r3
 8000d9e:	e73d      	b.n	8000c1c <__aeabi_fmul+0xd0>
 8000da0:	0192      	lsls	r2, r2, #6
 8000da2:	2000      	movs	r0, #0
 8000da4:	0a52      	lsrs	r2, r2, #9
 8000da6:	e70e      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000da8:	290f      	cmp	r1, #15
 8000daa:	d1ed      	bne.n	8000d88 <__aeabi_fmul+0x23c>
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	464b      	mov	r3, r9
 8000db0:	03d2      	lsls	r2, r2, #15
 8000db2:	4213      	tst	r3, r2
 8000db4:	d0ea      	beq.n	8000d8c <__aeabi_fmul+0x240>
 8000db6:	4214      	tst	r4, r2
 8000db8:	d1e8      	bne.n	8000d8c <__aeabi_fmul+0x240>
 8000dba:	003e      	movs	r6, r7
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	e701      	b.n	8000bc6 <__aeabi_fmul+0x7a>
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	f7ffffff 	.word	0xf7ffffff

08000dc8 <__aeabi_fsub>:
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	4647      	mov	r7, r8
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	024e      	lsls	r6, r1, #9
 8000dd0:	0243      	lsls	r3, r0, #9
 8000dd2:	0045      	lsls	r5, r0, #1
 8000dd4:	0a72      	lsrs	r2, r6, #9
 8000dd6:	0fc4      	lsrs	r4, r0, #31
 8000dd8:	0048      	lsls	r0, r1, #1
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	4694      	mov	ip, r2
 8000dde:	0a5f      	lsrs	r7, r3, #9
 8000de0:	0e2d      	lsrs	r5, r5, #24
 8000de2:	099b      	lsrs	r3, r3, #6
 8000de4:	0e00      	lsrs	r0, r0, #24
 8000de6:	0fc9      	lsrs	r1, r1, #31
 8000de8:	09b6      	lsrs	r6, r6, #6
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d024      	beq.n	8000e38 <__aeabi_fsub+0x70>
 8000dee:	2201      	movs	r2, #1
 8000df0:	4051      	eors	r1, r2
 8000df2:	1a2a      	subs	r2, r5, r0
 8000df4:	428c      	cmp	r4, r1
 8000df6:	d00f      	beq.n	8000e18 <__aeabi_fsub+0x50>
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	dc00      	bgt.n	8000dfe <__aeabi_fsub+0x36>
 8000dfc:	e16a      	b.n	80010d4 <__aeabi_fsub+0x30c>
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	d135      	bne.n	8000e6e <__aeabi_fsub+0xa6>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_fsub+0x40>
 8000e06:	e0a2      	b.n	8000f4e <__aeabi_fsub+0x186>
 8000e08:	1e51      	subs	r1, r2, #1
 8000e0a:	2a01      	cmp	r2, #1
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x48>
 8000e0e:	e124      	b.n	800105a <__aeabi_fsub+0x292>
 8000e10:	2aff      	cmp	r2, #255	@ 0xff
 8000e12:	d021      	beq.n	8000e58 <__aeabi_fsub+0x90>
 8000e14:	000a      	movs	r2, r1
 8000e16:	e02f      	b.n	8000e78 <__aeabi_fsub+0xb0>
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	dc00      	bgt.n	8000e1e <__aeabi_fsub+0x56>
 8000e1c:	e167      	b.n	80010ee <__aeabi_fsub+0x326>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d05e      	beq.n	8000ee0 <__aeabi_fsub+0x118>
 8000e22:	2dff      	cmp	r5, #255	@ 0xff
 8000e24:	d018      	beq.n	8000e58 <__aeabi_fsub+0x90>
 8000e26:	2180      	movs	r1, #128	@ 0x80
 8000e28:	04c9      	lsls	r1, r1, #19
 8000e2a:	430e      	orrs	r6, r1
 8000e2c:	2a1b      	cmp	r2, #27
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_fsub+0x6a>
 8000e30:	e076      	b.n	8000f20 <__aeabi_fsub+0x158>
 8000e32:	002a      	movs	r2, r5
 8000e34:	3301      	adds	r3, #1
 8000e36:	e032      	b.n	8000e9e <__aeabi_fsub+0xd6>
 8000e38:	002a      	movs	r2, r5
 8000e3a:	3aff      	subs	r2, #255	@ 0xff
 8000e3c:	4691      	mov	r9, r2
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d042      	beq.n	8000ec8 <__aeabi_fsub+0x100>
 8000e42:	428c      	cmp	r4, r1
 8000e44:	d055      	beq.n	8000ef2 <__aeabi_fsub+0x12a>
 8000e46:	464a      	mov	r2, r9
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x86>
 8000e4c:	e09c      	b.n	8000f88 <__aeabi_fsub+0x1c0>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fsub+0x8c>
 8000e52:	e077      	b.n	8000f44 <__aeabi_fsub+0x17c>
 8000e54:	000c      	movs	r4, r1
 8000e56:	0033      	movs	r3, r6
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0x98>
 8000e5e:	e06e      	b.n	8000f3e <__aeabi_fsub+0x176>
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	03d2      	lsls	r2, r2, #15
 8000e64:	4313      	orrs	r3, r2
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	20ff      	movs	r0, #255	@ 0xff
 8000e6a:	0a5b      	lsrs	r3, r3, #9
 8000e6c:	e024      	b.n	8000eb8 <__aeabi_fsub+0xf0>
 8000e6e:	2dff      	cmp	r5, #255	@ 0xff
 8000e70:	d0f2      	beq.n	8000e58 <__aeabi_fsub+0x90>
 8000e72:	2180      	movs	r1, #128	@ 0x80
 8000e74:	04c9      	lsls	r1, r1, #19
 8000e76:	430e      	orrs	r6, r1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2a1b      	cmp	r2, #27
 8000e7c:	dc08      	bgt.n	8000e90 <__aeabi_fsub+0xc8>
 8000e7e:	0031      	movs	r1, r6
 8000e80:	2020      	movs	r0, #32
 8000e82:	40d1      	lsrs	r1, r2
 8000e84:	1a82      	subs	r2, r0, r2
 8000e86:	4096      	lsls	r6, r2
 8000e88:	0032      	movs	r2, r6
 8000e8a:	1e50      	subs	r0, r2, #1
 8000e8c:	4182      	sbcs	r2, r0
 8000e8e:	4311      	orrs	r1, r2
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	015a      	lsls	r2, r3, #5
 8000e94:	d460      	bmi.n	8000f58 <__aeabi_fsub+0x190>
 8000e96:	2107      	movs	r1, #7
 8000e98:	002a      	movs	r2, r5
 8000e9a:	4019      	ands	r1, r3
 8000e9c:	d057      	beq.n	8000f4e <__aeabi_fsub+0x186>
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	4019      	ands	r1, r3
 8000ea2:	2904      	cmp	r1, #4
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_fsub+0xe0>
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	0159      	lsls	r1, r3, #5
 8000eaa:	d550      	bpl.n	8000f4e <__aeabi_fsub+0x186>
 8000eac:	1c50      	adds	r0, r2, #1
 8000eae:	2afe      	cmp	r2, #254	@ 0xfe
 8000eb0:	d045      	beq.n	8000f3e <__aeabi_fsub+0x176>
 8000eb2:	019b      	lsls	r3, r3, #6
 8000eb4:	b2c0      	uxtb	r0, r0
 8000eb6:	0a5b      	lsrs	r3, r3, #9
 8000eb8:	05c0      	lsls	r0, r0, #23
 8000eba:	4318      	orrs	r0, r3
 8000ebc:	07e4      	lsls	r4, r4, #31
 8000ebe:	4320      	orrs	r0, r4
 8000ec0:	bcc0      	pop	{r6, r7}
 8000ec2:	46b9      	mov	r9, r7
 8000ec4:	46b0      	mov	r8, r6
 8000ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4051      	eors	r1, r2
 8000ecc:	428c      	cmp	r4, r1
 8000ece:	d1ba      	bne.n	8000e46 <__aeabi_fsub+0x7e>
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d010      	beq.n	8000ef8 <__aeabi_fsub+0x130>
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x114>
 8000eda:	e098      	b.n	800100e <__aeabi_fsub+0x246>
 8000edc:	2300      	movs	r3, #0
 8000ede:	e7bb      	b.n	8000e58 <__aeabi_fsub+0x90>
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d034      	beq.n	8000f4e <__aeabi_fsub+0x186>
 8000ee4:	1e51      	subs	r1, r2, #1
 8000ee6:	2a01      	cmp	r2, #1
 8000ee8:	d06e      	beq.n	8000fc8 <__aeabi_fsub+0x200>
 8000eea:	2aff      	cmp	r2, #255	@ 0xff
 8000eec:	d0b4      	beq.n	8000e58 <__aeabi_fsub+0x90>
 8000eee:	000a      	movs	r2, r1
 8000ef0:	e79c      	b.n	8000e2c <__aeabi_fsub+0x64>
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_fsub+0x130>
 8000ef6:	e088      	b.n	800100a <__aeabi_fsub+0x242>
 8000ef8:	20fe      	movs	r0, #254	@ 0xfe
 8000efa:	1c6a      	adds	r2, r5, #1
 8000efc:	4210      	tst	r0, r2
 8000efe:	d000      	beq.n	8000f02 <__aeabi_fsub+0x13a>
 8000f00:	e092      	b.n	8001028 <__aeabi_fsub+0x260>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d000      	beq.n	8000f08 <__aeabi_fsub+0x140>
 8000f06:	e0a4      	b.n	8001052 <__aeabi_fsub+0x28a>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_fsub+0x146>
 8000f0c:	e0cb      	b.n	80010a6 <__aeabi_fsub+0x2de>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x14c>
 8000f12:	e0ca      	b.n	80010aa <__aeabi_fsub+0x2e2>
 8000f14:	2200      	movs	r2, #0
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	025b      	lsls	r3, r3, #9
 8000f1a:	0a5b      	lsrs	r3, r3, #9
 8000f1c:	b2d0      	uxtb	r0, r2
 8000f1e:	e7cb      	b.n	8000eb8 <__aeabi_fsub+0xf0>
 8000f20:	0031      	movs	r1, r6
 8000f22:	2020      	movs	r0, #32
 8000f24:	40d1      	lsrs	r1, r2
 8000f26:	1a82      	subs	r2, r0, r2
 8000f28:	4096      	lsls	r6, r2
 8000f2a:	0032      	movs	r2, r6
 8000f2c:	1e50      	subs	r0, r2, #1
 8000f2e:	4182      	sbcs	r2, r0
 8000f30:	430a      	orrs	r2, r1
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	015a      	lsls	r2, r3, #5
 8000f36:	d5ae      	bpl.n	8000e96 <__aeabi_fsub+0xce>
 8000f38:	1c6a      	adds	r2, r5, #1
 8000f3a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f3c:	d14a      	bne.n	8000fd4 <__aeabi_fsub+0x20c>
 8000f3e:	20ff      	movs	r0, #255	@ 0xff
 8000f40:	2300      	movs	r3, #0
 8000f42:	e7b9      	b.n	8000eb8 <__aeabi_fsub+0xf0>
 8000f44:	22ff      	movs	r2, #255	@ 0xff
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d14b      	bne.n	8000fe2 <__aeabi_fsub+0x21a>
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	0033      	movs	r3, r6
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	2aff      	cmp	r2, #255	@ 0xff
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x18e>
 8000f54:	e781      	b.n	8000e5a <__aeabi_fsub+0x92>
 8000f56:	e7df      	b.n	8000f18 <__aeabi_fsub+0x150>
 8000f58:	019f      	lsls	r7, r3, #6
 8000f5a:	09bf      	lsrs	r7, r7, #6
 8000f5c:	0038      	movs	r0, r7
 8000f5e:	f001 ffff 	bl	8002f60 <__clzsi2>
 8000f62:	3805      	subs	r0, #5
 8000f64:	4087      	lsls	r7, r0
 8000f66:	4285      	cmp	r5, r0
 8000f68:	dc21      	bgt.n	8000fae <__aeabi_fsub+0x1e6>
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	1b42      	subs	r2, r0, r5
 8000f70:	3201      	adds	r2, #1
 8000f72:	40d3      	lsrs	r3, r2
 8000f74:	1a8a      	subs	r2, r1, r2
 8000f76:	4097      	lsls	r7, r2
 8000f78:	1e7a      	subs	r2, r7, #1
 8000f7a:	4197      	sbcs	r7, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	433b      	orrs	r3, r7
 8000f80:	0759      	lsls	r1, r3, #29
 8000f82:	d000      	beq.n	8000f86 <__aeabi_fsub+0x1be>
 8000f84:	e78b      	b.n	8000e9e <__aeabi_fsub+0xd6>
 8000f86:	e78f      	b.n	8000ea8 <__aeabi_fsub+0xe0>
 8000f88:	20fe      	movs	r0, #254	@ 0xfe
 8000f8a:	1c6a      	adds	r2, r5, #1
 8000f8c:	4210      	tst	r0, r2
 8000f8e:	d112      	bne.n	8000fb6 <__aeabi_fsub+0x1ee>
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d152      	bne.n	800103a <__aeabi_fsub+0x272>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d07c      	beq.n	8001092 <__aeabi_fsub+0x2ca>
 8000f98:	2e00      	cmp	r6, #0
 8000f9a:	d0bb      	beq.n	8000f14 <__aeabi_fsub+0x14c>
 8000f9c:	1b9a      	subs	r2, r3, r6
 8000f9e:	0150      	lsls	r0, r2, #5
 8000fa0:	d400      	bmi.n	8000fa4 <__aeabi_fsub+0x1dc>
 8000fa2:	e08b      	b.n	80010bc <__aeabi_fsub+0x2f4>
 8000fa4:	2401      	movs	r4, #1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	1af3      	subs	r3, r6, r3
 8000faa:	400c      	ands	r4, r1
 8000fac:	e7e8      	b.n	8000f80 <__aeabi_fsub+0x1b8>
 8000fae:	4b56      	ldr	r3, [pc, #344]	@ (8001108 <__aeabi_fsub+0x340>)
 8000fb0:	1a2a      	subs	r2, r5, r0
 8000fb2:	403b      	ands	r3, r7
 8000fb4:	e7e4      	b.n	8000f80 <__aeabi_fsub+0x1b8>
 8000fb6:	1b9f      	subs	r7, r3, r6
 8000fb8:	017a      	lsls	r2, r7, #5
 8000fba:	d446      	bmi.n	800104a <__aeabi_fsub+0x282>
 8000fbc:	2f00      	cmp	r7, #0
 8000fbe:	d1cd      	bne.n	8000f5c <__aeabi_fsub+0x194>
 8000fc0:	2400      	movs	r4, #0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e777      	b.n	8000eb8 <__aeabi_fsub+0xf0>
 8000fc8:	199b      	adds	r3, r3, r6
 8000fca:	2501      	movs	r5, #1
 8000fcc:	3201      	adds	r2, #1
 8000fce:	0159      	lsls	r1, r3, #5
 8000fd0:	d400      	bmi.n	8000fd4 <__aeabi_fsub+0x20c>
 8000fd2:	e760      	b.n	8000e96 <__aeabi_fsub+0xce>
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	484d      	ldr	r0, [pc, #308]	@ (800110c <__aeabi_fsub+0x344>)
 8000fd8:	4019      	ands	r1, r3
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	4003      	ands	r3, r0
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	e7ce      	b.n	8000f80 <__aeabi_fsub+0x1b8>
 8000fe2:	1e57      	subs	r7, r2, #1
 8000fe4:	2a01      	cmp	r2, #1
 8000fe6:	d05a      	beq.n	800109e <__aeabi_fsub+0x2d6>
 8000fe8:	000c      	movs	r4, r1
 8000fea:	2aff      	cmp	r2, #255	@ 0xff
 8000fec:	d033      	beq.n	8001056 <__aeabi_fsub+0x28e>
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2f1b      	cmp	r7, #27
 8000ff2:	dc07      	bgt.n	8001004 <__aeabi_fsub+0x23c>
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	1bc9      	subs	r1, r1, r7
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	408b      	lsls	r3, r1
 8000ffc:	40fa      	lsrs	r2, r7
 8000ffe:	1e59      	subs	r1, r3, #1
 8001000:	418b      	sbcs	r3, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	0005      	movs	r5, r0
 8001006:	1ab3      	subs	r3, r6, r2
 8001008:	e743      	b.n	8000e92 <__aeabi_fsub+0xca>
 800100a:	2d00      	cmp	r5, #0
 800100c:	d123      	bne.n	8001056 <__aeabi_fsub+0x28e>
 800100e:	22ff      	movs	r2, #255	@ 0xff
 8001010:	2b00      	cmp	r3, #0
 8001012:	d09b      	beq.n	8000f4c <__aeabi_fsub+0x184>
 8001014:	1e51      	subs	r1, r2, #1
 8001016:	2a01      	cmp	r2, #1
 8001018:	d0d6      	beq.n	8000fc8 <__aeabi_fsub+0x200>
 800101a:	2aff      	cmp	r2, #255	@ 0xff
 800101c:	d01b      	beq.n	8001056 <__aeabi_fsub+0x28e>
 800101e:	291b      	cmp	r1, #27
 8001020:	dd2c      	ble.n	800107c <__aeabi_fsub+0x2b4>
 8001022:	0002      	movs	r2, r0
 8001024:	1c73      	adds	r3, r6, #1
 8001026:	e73a      	b.n	8000e9e <__aeabi_fsub+0xd6>
 8001028:	2aff      	cmp	r2, #255	@ 0xff
 800102a:	d088      	beq.n	8000f3e <__aeabi_fsub+0x176>
 800102c:	199b      	adds	r3, r3, r6
 800102e:	085b      	lsrs	r3, r3, #1
 8001030:	0759      	lsls	r1, r3, #29
 8001032:	d000      	beq.n	8001036 <__aeabi_fsub+0x26e>
 8001034:	e733      	b.n	8000e9e <__aeabi_fsub+0xd6>
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	e76e      	b.n	8000f18 <__aeabi_fsub+0x150>
 800103a:	2b00      	cmp	r3, #0
 800103c:	d110      	bne.n	8001060 <__aeabi_fsub+0x298>
 800103e:	2e00      	cmp	r6, #0
 8001040:	d043      	beq.n	80010ca <__aeabi_fsub+0x302>
 8001042:	2401      	movs	r4, #1
 8001044:	0033      	movs	r3, r6
 8001046:	400c      	ands	r4, r1
 8001048:	e706      	b.n	8000e58 <__aeabi_fsub+0x90>
 800104a:	2401      	movs	r4, #1
 800104c:	1af7      	subs	r7, r6, r3
 800104e:	400c      	ands	r4, r1
 8001050:	e784      	b.n	8000f5c <__aeabi_fsub+0x194>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d104      	bne.n	8001060 <__aeabi_fsub+0x298>
 8001056:	0033      	movs	r3, r6
 8001058:	e6fe      	b.n	8000e58 <__aeabi_fsub+0x90>
 800105a:	2501      	movs	r5, #1
 800105c:	1b9b      	subs	r3, r3, r6
 800105e:	e718      	b.n	8000e92 <__aeabi_fsub+0xca>
 8001060:	2e00      	cmp	r6, #0
 8001062:	d100      	bne.n	8001066 <__aeabi_fsub+0x29e>
 8001064:	e6f8      	b.n	8000e58 <__aeabi_fsub+0x90>
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	4297      	cmp	r7, r2
 800106c:	d304      	bcc.n	8001078 <__aeabi_fsub+0x2b0>
 800106e:	4594      	cmp	ip, r2
 8001070:	d202      	bcs.n	8001078 <__aeabi_fsub+0x2b0>
 8001072:	2401      	movs	r4, #1
 8001074:	0033      	movs	r3, r6
 8001076:	400c      	ands	r4, r1
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	e6f1      	b.n	8000e60 <__aeabi_fsub+0x98>
 800107c:	001a      	movs	r2, r3
 800107e:	2520      	movs	r5, #32
 8001080:	40ca      	lsrs	r2, r1
 8001082:	1a69      	subs	r1, r5, r1
 8001084:	408b      	lsls	r3, r1
 8001086:	1e59      	subs	r1, r3, #1
 8001088:	418b      	sbcs	r3, r1
 800108a:	4313      	orrs	r3, r2
 800108c:	0005      	movs	r5, r0
 800108e:	199b      	adds	r3, r3, r6
 8001090:	e750      	b.n	8000f34 <__aeabi_fsub+0x16c>
 8001092:	2e00      	cmp	r6, #0
 8001094:	d094      	beq.n	8000fc0 <__aeabi_fsub+0x1f8>
 8001096:	2401      	movs	r4, #1
 8001098:	0033      	movs	r3, r6
 800109a:	400c      	ands	r4, r1
 800109c:	e73a      	b.n	8000f14 <__aeabi_fsub+0x14c>
 800109e:	000c      	movs	r4, r1
 80010a0:	2501      	movs	r5, #1
 80010a2:	1af3      	subs	r3, r6, r3
 80010a4:	e6f5      	b.n	8000e92 <__aeabi_fsub+0xca>
 80010a6:	0033      	movs	r3, r6
 80010a8:	e734      	b.n	8000f14 <__aeabi_fsub+0x14c>
 80010aa:	199b      	adds	r3, r3, r6
 80010ac:	2200      	movs	r2, #0
 80010ae:	0159      	lsls	r1, r3, #5
 80010b0:	d5c1      	bpl.n	8001036 <__aeabi_fsub+0x26e>
 80010b2:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <__aeabi_fsub+0x340>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	2201      	movs	r2, #1
 80010ba:	e72d      	b.n	8000f18 <__aeabi_fsub+0x150>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_fsub+0x2fa>
 80010c0:	e77e      	b.n	8000fc0 <__aeabi_fsub+0x1f8>
 80010c2:	0013      	movs	r3, r2
 80010c4:	2200      	movs	r2, #0
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	e726      	b.n	8000f18 <__aeabi_fsub+0x150>
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	2400      	movs	r4, #0
 80010ce:	20ff      	movs	r0, #255	@ 0xff
 80010d0:	03db      	lsls	r3, r3, #15
 80010d2:	e6f1      	b.n	8000eb8 <__aeabi_fsub+0xf0>
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x312>
 80010d8:	e756      	b.n	8000f88 <__aeabi_fsub+0x1c0>
 80010da:	1b47      	subs	r7, r0, r5
 80010dc:	003a      	movs	r2, r7
 80010de:	2d00      	cmp	r5, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x31c>
 80010e2:	e730      	b.n	8000f46 <__aeabi_fsub+0x17e>
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	04d2      	lsls	r2, r2, #19
 80010e8:	000c      	movs	r4, r1
 80010ea:	4313      	orrs	r3, r2
 80010ec:	e77f      	b.n	8000fee <__aeabi_fsub+0x226>
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x32c>
 80010f2:	e701      	b.n	8000ef8 <__aeabi_fsub+0x130>
 80010f4:	1b41      	subs	r1, r0, r5
 80010f6:	2d00      	cmp	r5, #0
 80010f8:	d101      	bne.n	80010fe <__aeabi_fsub+0x336>
 80010fa:	000a      	movs	r2, r1
 80010fc:	e788      	b.n	8001010 <__aeabi_fsub+0x248>
 80010fe:	2280      	movs	r2, #128	@ 0x80
 8001100:	04d2      	lsls	r2, r2, #19
 8001102:	4313      	orrs	r3, r2
 8001104:	e78b      	b.n	800101e <__aeabi_fsub+0x256>
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	fbffffff 	.word	0xfbffffff
 800110c:	7dffffff 	.word	0x7dffffff

08001110 <__aeabi_f2iz>:
 8001110:	0241      	lsls	r1, r0, #9
 8001112:	0042      	lsls	r2, r0, #1
 8001114:	0fc3      	lsrs	r3, r0, #31
 8001116:	0a49      	lsrs	r1, r1, #9
 8001118:	2000      	movs	r0, #0
 800111a:	0e12      	lsrs	r2, r2, #24
 800111c:	2a7e      	cmp	r2, #126	@ 0x7e
 800111e:	dd03      	ble.n	8001128 <__aeabi_f2iz+0x18>
 8001120:	2a9d      	cmp	r2, #157	@ 0x9d
 8001122:	dd02      	ble.n	800112a <__aeabi_f2iz+0x1a>
 8001124:	4a09      	ldr	r2, [pc, #36]	@ (800114c <__aeabi_f2iz+0x3c>)
 8001126:	1898      	adds	r0, r3, r2
 8001128:	4770      	bx	lr
 800112a:	2080      	movs	r0, #128	@ 0x80
 800112c:	0400      	lsls	r0, r0, #16
 800112e:	4301      	orrs	r1, r0
 8001130:	2a95      	cmp	r2, #149	@ 0x95
 8001132:	dc07      	bgt.n	8001144 <__aeabi_f2iz+0x34>
 8001134:	2096      	movs	r0, #150	@ 0x96
 8001136:	1a82      	subs	r2, r0, r2
 8001138:	40d1      	lsrs	r1, r2
 800113a:	4248      	negs	r0, r1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f3      	bne.n	8001128 <__aeabi_f2iz+0x18>
 8001140:	0008      	movs	r0, r1
 8001142:	e7f1      	b.n	8001128 <__aeabi_f2iz+0x18>
 8001144:	3a96      	subs	r2, #150	@ 0x96
 8001146:	4091      	lsls	r1, r2
 8001148:	e7f7      	b.n	800113a <__aeabi_f2iz+0x2a>
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	7fffffff 	.word	0x7fffffff

08001150 <__aeabi_i2f>:
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	2800      	cmp	r0, #0
 8001154:	d013      	beq.n	800117e <__aeabi_i2f+0x2e>
 8001156:	17c3      	asrs	r3, r0, #31
 8001158:	18c5      	adds	r5, r0, r3
 800115a:	405d      	eors	r5, r3
 800115c:	0fc4      	lsrs	r4, r0, #31
 800115e:	0028      	movs	r0, r5
 8001160:	f001 fefe 	bl	8002f60 <__clzsi2>
 8001164:	239e      	movs	r3, #158	@ 0x9e
 8001166:	0001      	movs	r1, r0
 8001168:	1a1b      	subs	r3, r3, r0
 800116a:	2b96      	cmp	r3, #150	@ 0x96
 800116c:	dc0f      	bgt.n	800118e <__aeabi_i2f+0x3e>
 800116e:	2808      	cmp	r0, #8
 8001170:	d034      	beq.n	80011dc <__aeabi_i2f+0x8c>
 8001172:	3908      	subs	r1, #8
 8001174:	408d      	lsls	r5, r1
 8001176:	026d      	lsls	r5, r5, #9
 8001178:	0a6d      	lsrs	r5, r5, #9
 800117a:	b2d8      	uxtb	r0, r3
 800117c:	e002      	b.n	8001184 <__aeabi_i2f+0x34>
 800117e:	2400      	movs	r4, #0
 8001180:	2000      	movs	r0, #0
 8001182:	2500      	movs	r5, #0
 8001184:	05c0      	lsls	r0, r0, #23
 8001186:	4328      	orrs	r0, r5
 8001188:	07e4      	lsls	r4, r4, #31
 800118a:	4320      	orrs	r0, r4
 800118c:	bd70      	pop	{r4, r5, r6, pc}
 800118e:	2b99      	cmp	r3, #153	@ 0x99
 8001190:	dc16      	bgt.n	80011c0 <__aeabi_i2f+0x70>
 8001192:	1f42      	subs	r2, r0, #5
 8001194:	2805      	cmp	r0, #5
 8001196:	d000      	beq.n	800119a <__aeabi_i2f+0x4a>
 8001198:	4095      	lsls	r5, r2
 800119a:	002a      	movs	r2, r5
 800119c:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <__aeabi_i2f+0x94>)
 800119e:	4002      	ands	r2, r0
 80011a0:	076e      	lsls	r6, r5, #29
 80011a2:	d009      	beq.n	80011b8 <__aeabi_i2f+0x68>
 80011a4:	260f      	movs	r6, #15
 80011a6:	4035      	ands	r5, r6
 80011a8:	2d04      	cmp	r5, #4
 80011aa:	d005      	beq.n	80011b8 <__aeabi_i2f+0x68>
 80011ac:	3204      	adds	r2, #4
 80011ae:	0155      	lsls	r5, r2, #5
 80011b0:	d502      	bpl.n	80011b8 <__aeabi_i2f+0x68>
 80011b2:	239f      	movs	r3, #159	@ 0x9f
 80011b4:	4002      	ands	r2, r0
 80011b6:	1a5b      	subs	r3, r3, r1
 80011b8:	0192      	lsls	r2, r2, #6
 80011ba:	0a55      	lsrs	r5, r2, #9
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	e7e1      	b.n	8001184 <__aeabi_i2f+0x34>
 80011c0:	2205      	movs	r2, #5
 80011c2:	1a12      	subs	r2, r2, r0
 80011c4:	0028      	movs	r0, r5
 80011c6:	40d0      	lsrs	r0, r2
 80011c8:	0002      	movs	r2, r0
 80011ca:	0008      	movs	r0, r1
 80011cc:	301b      	adds	r0, #27
 80011ce:	4085      	lsls	r5, r0
 80011d0:	0028      	movs	r0, r5
 80011d2:	1e45      	subs	r5, r0, #1
 80011d4:	41a8      	sbcs	r0, r5
 80011d6:	4302      	orrs	r2, r0
 80011d8:	0015      	movs	r5, r2
 80011da:	e7de      	b.n	800119a <__aeabi_i2f+0x4a>
 80011dc:	026d      	lsls	r5, r5, #9
 80011de:	2096      	movs	r0, #150	@ 0x96
 80011e0:	0a6d      	lsrs	r5, r5, #9
 80011e2:	e7cf      	b.n	8001184 <__aeabi_i2f+0x34>
 80011e4:	fbffffff 	.word	0xfbffffff

080011e8 <__aeabi_dadd>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	4657      	mov	r7, sl
 80011ec:	464e      	mov	r6, r9
 80011ee:	4645      	mov	r5, r8
 80011f0:	46de      	mov	lr, fp
 80011f2:	b5e0      	push	{r5, r6, r7, lr}
 80011f4:	b083      	sub	sp, #12
 80011f6:	9000      	str	r0, [sp, #0]
 80011f8:	9101      	str	r1, [sp, #4]
 80011fa:	030c      	lsls	r4, r1, #12
 80011fc:	004f      	lsls	r7, r1, #1
 80011fe:	0fce      	lsrs	r6, r1, #31
 8001200:	0a61      	lsrs	r1, r4, #9
 8001202:	9c00      	ldr	r4, [sp, #0]
 8001204:	031d      	lsls	r5, r3, #12
 8001206:	0f64      	lsrs	r4, r4, #29
 8001208:	430c      	orrs	r4, r1
 800120a:	9900      	ldr	r1, [sp, #0]
 800120c:	9200      	str	r2, [sp, #0]
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	00c8      	lsls	r0, r1, #3
 8001212:	0059      	lsls	r1, r3, #1
 8001214:	0d4b      	lsrs	r3, r1, #21
 8001216:	4699      	mov	r9, r3
 8001218:	9a00      	ldr	r2, [sp, #0]
 800121a:	9b01      	ldr	r3, [sp, #4]
 800121c:	0a6d      	lsrs	r5, r5, #9
 800121e:	0fd9      	lsrs	r1, r3, #31
 8001220:	0f53      	lsrs	r3, r2, #29
 8001222:	432b      	orrs	r3, r5
 8001224:	469a      	mov	sl, r3
 8001226:	9b00      	ldr	r3, [sp, #0]
 8001228:	0d7f      	lsrs	r7, r7, #21
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	4694      	mov	ip, r2
 800122e:	464a      	mov	r2, r9
 8001230:	46b0      	mov	r8, r6
 8001232:	1aba      	subs	r2, r7, r2
 8001234:	428e      	cmp	r6, r1
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x52>
 8001238:	e0b0      	b.n	800139c <__aeabi_dadd+0x1b4>
 800123a:	2a00      	cmp	r2, #0
 800123c:	dc00      	bgt.n	8001240 <__aeabi_dadd+0x58>
 800123e:	e078      	b.n	8001332 <__aeabi_dadd+0x14a>
 8001240:	4649      	mov	r1, r9
 8001242:	2900      	cmp	r1, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_dadd+0x60>
 8001246:	e0e9      	b.n	800141c <__aeabi_dadd+0x234>
 8001248:	49c9      	ldr	r1, [pc, #804]	@ (8001570 <__aeabi_dadd+0x388>)
 800124a:	428f      	cmp	r7, r1
 800124c:	d100      	bne.n	8001250 <__aeabi_dadd+0x68>
 800124e:	e195      	b.n	800157c <__aeabi_dadd+0x394>
 8001250:	2501      	movs	r5, #1
 8001252:	2a38      	cmp	r2, #56	@ 0x38
 8001254:	dc16      	bgt.n	8001284 <__aeabi_dadd+0x9c>
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	4653      	mov	r3, sl
 800125a:	0409      	lsls	r1, r1, #16
 800125c:	430b      	orrs	r3, r1
 800125e:	469a      	mov	sl, r3
 8001260:	2a1f      	cmp	r2, #31
 8001262:	dd00      	ble.n	8001266 <__aeabi_dadd+0x7e>
 8001264:	e1e7      	b.n	8001636 <__aeabi_dadd+0x44e>
 8001266:	2120      	movs	r1, #32
 8001268:	4655      	mov	r5, sl
 800126a:	1a8b      	subs	r3, r1, r2
 800126c:	4661      	mov	r1, ip
 800126e:	409d      	lsls	r5, r3
 8001270:	40d1      	lsrs	r1, r2
 8001272:	430d      	orrs	r5, r1
 8001274:	4661      	mov	r1, ip
 8001276:	4099      	lsls	r1, r3
 8001278:	1e4b      	subs	r3, r1, #1
 800127a:	4199      	sbcs	r1, r3
 800127c:	4653      	mov	r3, sl
 800127e:	40d3      	lsrs	r3, r2
 8001280:	430d      	orrs	r5, r1
 8001282:	1ae4      	subs	r4, r4, r3
 8001284:	1b45      	subs	r5, r0, r5
 8001286:	42a8      	cmp	r0, r5
 8001288:	4180      	sbcs	r0, r0
 800128a:	4240      	negs	r0, r0
 800128c:	1a24      	subs	r4, r4, r0
 800128e:	0223      	lsls	r3, r4, #8
 8001290:	d400      	bmi.n	8001294 <__aeabi_dadd+0xac>
 8001292:	e10f      	b.n	80014b4 <__aeabi_dadd+0x2cc>
 8001294:	0264      	lsls	r4, r4, #9
 8001296:	0a64      	lsrs	r4, r4, #9
 8001298:	2c00      	cmp	r4, #0
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0xb6>
 800129c:	e139      	b.n	8001512 <__aeabi_dadd+0x32a>
 800129e:	0020      	movs	r0, r4
 80012a0:	f001 fe5e 	bl	8002f60 <__clzsi2>
 80012a4:	0003      	movs	r3, r0
 80012a6:	3b08      	subs	r3, #8
 80012a8:	2120      	movs	r1, #32
 80012aa:	0028      	movs	r0, r5
 80012ac:	1aca      	subs	r2, r1, r3
 80012ae:	40d0      	lsrs	r0, r2
 80012b0:	409c      	lsls	r4, r3
 80012b2:	0002      	movs	r2, r0
 80012b4:	409d      	lsls	r5, r3
 80012b6:	4322      	orrs	r2, r4
 80012b8:	429f      	cmp	r7, r3
 80012ba:	dd00      	ble.n	80012be <__aeabi_dadd+0xd6>
 80012bc:	e173      	b.n	80015a6 <__aeabi_dadd+0x3be>
 80012be:	1bd8      	subs	r0, r3, r7
 80012c0:	3001      	adds	r0, #1
 80012c2:	1a09      	subs	r1, r1, r0
 80012c4:	002c      	movs	r4, r5
 80012c6:	408d      	lsls	r5, r1
 80012c8:	40c4      	lsrs	r4, r0
 80012ca:	1e6b      	subs	r3, r5, #1
 80012cc:	419d      	sbcs	r5, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	40c2      	lsrs	r2, r0
 80012d2:	408b      	lsls	r3, r1
 80012d4:	4325      	orrs	r5, r4
 80012d6:	2700      	movs	r7, #0
 80012d8:	0014      	movs	r4, r2
 80012da:	431d      	orrs	r5, r3
 80012dc:	076b      	lsls	r3, r5, #29
 80012de:	d009      	beq.n	80012f4 <__aeabi_dadd+0x10c>
 80012e0:	230f      	movs	r3, #15
 80012e2:	402b      	ands	r3, r5
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <__aeabi_dadd+0x10c>
 80012e8:	1d2b      	adds	r3, r5, #4
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	41ad      	sbcs	r5, r5
 80012ee:	426d      	negs	r5, r5
 80012f0:	1964      	adds	r4, r4, r5
 80012f2:	001d      	movs	r5, r3
 80012f4:	0223      	lsls	r3, r4, #8
 80012f6:	d400      	bmi.n	80012fa <__aeabi_dadd+0x112>
 80012f8:	e12d      	b.n	8001556 <__aeabi_dadd+0x36e>
 80012fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001570 <__aeabi_dadd+0x388>)
 80012fc:	3701      	adds	r7, #1
 80012fe:	4297      	cmp	r7, r2
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x11c>
 8001302:	e0d3      	b.n	80014ac <__aeabi_dadd+0x2c4>
 8001304:	4646      	mov	r6, r8
 8001306:	499b      	ldr	r1, [pc, #620]	@ (8001574 <__aeabi_dadd+0x38c>)
 8001308:	08ed      	lsrs	r5, r5, #3
 800130a:	4021      	ands	r1, r4
 800130c:	074a      	lsls	r2, r1, #29
 800130e:	432a      	orrs	r2, r5
 8001310:	057c      	lsls	r4, r7, #21
 8001312:	024d      	lsls	r5, r1, #9
 8001314:	0b2d      	lsrs	r5, r5, #12
 8001316:	0d64      	lsrs	r4, r4, #21
 8001318:	0524      	lsls	r4, r4, #20
 800131a:	432c      	orrs	r4, r5
 800131c:	07f6      	lsls	r6, r6, #31
 800131e:	4334      	orrs	r4, r6
 8001320:	0010      	movs	r0, r2
 8001322:	0021      	movs	r1, r4
 8001324:	b003      	add	sp, #12
 8001326:	bcf0      	pop	{r4, r5, r6, r7}
 8001328:	46bb      	mov	fp, r7
 800132a:	46b2      	mov	sl, r6
 800132c:	46a9      	mov	r9, r5
 800132e:	46a0      	mov	r8, r4
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	2a00      	cmp	r2, #0
 8001334:	d100      	bne.n	8001338 <__aeabi_dadd+0x150>
 8001336:	e084      	b.n	8001442 <__aeabi_dadd+0x25a>
 8001338:	464a      	mov	r2, r9
 800133a:	1bd2      	subs	r2, r2, r7
 800133c:	2f00      	cmp	r7, #0
 800133e:	d000      	beq.n	8001342 <__aeabi_dadd+0x15a>
 8001340:	e16d      	b.n	800161e <__aeabi_dadd+0x436>
 8001342:	0025      	movs	r5, r4
 8001344:	4305      	orrs	r5, r0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x162>
 8001348:	e127      	b.n	800159a <__aeabi_dadd+0x3b2>
 800134a:	1e56      	subs	r6, r2, #1
 800134c:	2a01      	cmp	r2, #1
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x16a>
 8001350:	e23b      	b.n	80017ca <__aeabi_dadd+0x5e2>
 8001352:	4d87      	ldr	r5, [pc, #540]	@ (8001570 <__aeabi_dadd+0x388>)
 8001354:	42aa      	cmp	r2, r5
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x172>
 8001358:	e26a      	b.n	8001830 <__aeabi_dadd+0x648>
 800135a:	2501      	movs	r5, #1
 800135c:	2e38      	cmp	r6, #56	@ 0x38
 800135e:	dc12      	bgt.n	8001386 <__aeabi_dadd+0x19e>
 8001360:	0032      	movs	r2, r6
 8001362:	2a1f      	cmp	r2, #31
 8001364:	dd00      	ble.n	8001368 <__aeabi_dadd+0x180>
 8001366:	e1f8      	b.n	800175a <__aeabi_dadd+0x572>
 8001368:	2620      	movs	r6, #32
 800136a:	0025      	movs	r5, r4
 800136c:	1ab6      	subs	r6, r6, r2
 800136e:	0007      	movs	r7, r0
 8001370:	4653      	mov	r3, sl
 8001372:	40b0      	lsls	r0, r6
 8001374:	40d4      	lsrs	r4, r2
 8001376:	40b5      	lsls	r5, r6
 8001378:	40d7      	lsrs	r7, r2
 800137a:	1e46      	subs	r6, r0, #1
 800137c:	41b0      	sbcs	r0, r6
 800137e:	1b1b      	subs	r3, r3, r4
 8001380:	469a      	mov	sl, r3
 8001382:	433d      	orrs	r5, r7
 8001384:	4305      	orrs	r5, r0
 8001386:	4662      	mov	r2, ip
 8001388:	1b55      	subs	r5, r2, r5
 800138a:	45ac      	cmp	ip, r5
 800138c:	4192      	sbcs	r2, r2
 800138e:	4653      	mov	r3, sl
 8001390:	4252      	negs	r2, r2
 8001392:	000e      	movs	r6, r1
 8001394:	464f      	mov	r7, r9
 8001396:	4688      	mov	r8, r1
 8001398:	1a9c      	subs	r4, r3, r2
 800139a:	e778      	b.n	800128e <__aeabi_dadd+0xa6>
 800139c:	2a00      	cmp	r2, #0
 800139e:	dc00      	bgt.n	80013a2 <__aeabi_dadd+0x1ba>
 80013a0:	e08e      	b.n	80014c0 <__aeabi_dadd+0x2d8>
 80013a2:	4649      	mov	r1, r9
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d175      	bne.n	8001494 <__aeabi_dadd+0x2ac>
 80013a8:	4661      	mov	r1, ip
 80013aa:	4653      	mov	r3, sl
 80013ac:	4319      	orrs	r1, r3
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dadd+0x1ca>
 80013b0:	e0f6      	b.n	80015a0 <__aeabi_dadd+0x3b8>
 80013b2:	1e51      	subs	r1, r2, #1
 80013b4:	2a01      	cmp	r2, #1
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x1d2>
 80013b8:	e191      	b.n	80016de <__aeabi_dadd+0x4f6>
 80013ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001570 <__aeabi_dadd+0x388>)
 80013bc:	42aa      	cmp	r2, r5
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x1da>
 80013c0:	e0dc      	b.n	800157c <__aeabi_dadd+0x394>
 80013c2:	2501      	movs	r5, #1
 80013c4:	2938      	cmp	r1, #56	@ 0x38
 80013c6:	dc14      	bgt.n	80013f2 <__aeabi_dadd+0x20a>
 80013c8:	000a      	movs	r2, r1
 80013ca:	2a1f      	cmp	r2, #31
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_dadd+0x1e8>
 80013ce:	e1a2      	b.n	8001716 <__aeabi_dadd+0x52e>
 80013d0:	2120      	movs	r1, #32
 80013d2:	4653      	mov	r3, sl
 80013d4:	1a89      	subs	r1, r1, r2
 80013d6:	408b      	lsls	r3, r1
 80013d8:	001d      	movs	r5, r3
 80013da:	4663      	mov	r3, ip
 80013dc:	40d3      	lsrs	r3, r2
 80013de:	431d      	orrs	r5, r3
 80013e0:	4663      	mov	r3, ip
 80013e2:	408b      	lsls	r3, r1
 80013e4:	0019      	movs	r1, r3
 80013e6:	1e4b      	subs	r3, r1, #1
 80013e8:	4199      	sbcs	r1, r3
 80013ea:	4653      	mov	r3, sl
 80013ec:	40d3      	lsrs	r3, r2
 80013ee:	430d      	orrs	r5, r1
 80013f0:	18e4      	adds	r4, r4, r3
 80013f2:	182d      	adds	r5, r5, r0
 80013f4:	4285      	cmp	r5, r0
 80013f6:	4180      	sbcs	r0, r0
 80013f8:	4240      	negs	r0, r0
 80013fa:	1824      	adds	r4, r4, r0
 80013fc:	0223      	lsls	r3, r4, #8
 80013fe:	d559      	bpl.n	80014b4 <__aeabi_dadd+0x2cc>
 8001400:	4b5b      	ldr	r3, [pc, #364]	@ (8001570 <__aeabi_dadd+0x388>)
 8001402:	3701      	adds	r7, #1
 8001404:	429f      	cmp	r7, r3
 8001406:	d051      	beq.n	80014ac <__aeabi_dadd+0x2c4>
 8001408:	2101      	movs	r1, #1
 800140a:	4b5a      	ldr	r3, [pc, #360]	@ (8001574 <__aeabi_dadd+0x38c>)
 800140c:	086a      	lsrs	r2, r5, #1
 800140e:	401c      	ands	r4, r3
 8001410:	4029      	ands	r1, r5
 8001412:	430a      	orrs	r2, r1
 8001414:	07e5      	lsls	r5, r4, #31
 8001416:	4315      	orrs	r5, r2
 8001418:	0864      	lsrs	r4, r4, #1
 800141a:	e75f      	b.n	80012dc <__aeabi_dadd+0xf4>
 800141c:	4661      	mov	r1, ip
 800141e:	4653      	mov	r3, sl
 8001420:	4319      	orrs	r1, r3
 8001422:	d100      	bne.n	8001426 <__aeabi_dadd+0x23e>
 8001424:	e0bc      	b.n	80015a0 <__aeabi_dadd+0x3b8>
 8001426:	1e51      	subs	r1, r2, #1
 8001428:	2a01      	cmp	r2, #1
 800142a:	d100      	bne.n	800142e <__aeabi_dadd+0x246>
 800142c:	e164      	b.n	80016f8 <__aeabi_dadd+0x510>
 800142e:	4d50      	ldr	r5, [pc, #320]	@ (8001570 <__aeabi_dadd+0x388>)
 8001430:	42aa      	cmp	r2, r5
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x24e>
 8001434:	e16a      	b.n	800170c <__aeabi_dadd+0x524>
 8001436:	2501      	movs	r5, #1
 8001438:	2938      	cmp	r1, #56	@ 0x38
 800143a:	dd00      	ble.n	800143e <__aeabi_dadd+0x256>
 800143c:	e722      	b.n	8001284 <__aeabi_dadd+0x9c>
 800143e:	000a      	movs	r2, r1
 8001440:	e70e      	b.n	8001260 <__aeabi_dadd+0x78>
 8001442:	4a4d      	ldr	r2, [pc, #308]	@ (8001578 <__aeabi_dadd+0x390>)
 8001444:	1c7d      	adds	r5, r7, #1
 8001446:	4215      	tst	r5, r2
 8001448:	d000      	beq.n	800144c <__aeabi_dadd+0x264>
 800144a:	e0d0      	b.n	80015ee <__aeabi_dadd+0x406>
 800144c:	0025      	movs	r5, r4
 800144e:	4662      	mov	r2, ip
 8001450:	4653      	mov	r3, sl
 8001452:	4305      	orrs	r5, r0
 8001454:	431a      	orrs	r2, r3
 8001456:	2f00      	cmp	r7, #0
 8001458:	d000      	beq.n	800145c <__aeabi_dadd+0x274>
 800145a:	e137      	b.n	80016cc <__aeabi_dadd+0x4e4>
 800145c:	2d00      	cmp	r5, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x27a>
 8001460:	e1a8      	b.n	80017b4 <__aeabi_dadd+0x5cc>
 8001462:	2a00      	cmp	r2, #0
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x280>
 8001466:	e16a      	b.n	800173e <__aeabi_dadd+0x556>
 8001468:	4663      	mov	r3, ip
 800146a:	1ac5      	subs	r5, r0, r3
 800146c:	4653      	mov	r3, sl
 800146e:	1ae2      	subs	r2, r4, r3
 8001470:	42a8      	cmp	r0, r5
 8001472:	419b      	sbcs	r3, r3
 8001474:	425b      	negs	r3, r3
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	d400      	bmi.n	800147e <__aeabi_dadd+0x296>
 800147c:	e203      	b.n	8001886 <__aeabi_dadd+0x69e>
 800147e:	4663      	mov	r3, ip
 8001480:	1a1d      	subs	r5, r3, r0
 8001482:	45ac      	cmp	ip, r5
 8001484:	4192      	sbcs	r2, r2
 8001486:	4653      	mov	r3, sl
 8001488:	4252      	negs	r2, r2
 800148a:	1b1c      	subs	r4, r3, r4
 800148c:	000e      	movs	r6, r1
 800148e:	4688      	mov	r8, r1
 8001490:	1aa4      	subs	r4, r4, r2
 8001492:	e723      	b.n	80012dc <__aeabi_dadd+0xf4>
 8001494:	4936      	ldr	r1, [pc, #216]	@ (8001570 <__aeabi_dadd+0x388>)
 8001496:	428f      	cmp	r7, r1
 8001498:	d070      	beq.n	800157c <__aeabi_dadd+0x394>
 800149a:	2501      	movs	r5, #1
 800149c:	2a38      	cmp	r2, #56	@ 0x38
 800149e:	dca8      	bgt.n	80013f2 <__aeabi_dadd+0x20a>
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	4653      	mov	r3, sl
 80014a4:	0409      	lsls	r1, r1, #16
 80014a6:	430b      	orrs	r3, r1
 80014a8:	469a      	mov	sl, r3
 80014aa:	e78e      	b.n	80013ca <__aeabi_dadd+0x1e2>
 80014ac:	003c      	movs	r4, r7
 80014ae:	2500      	movs	r5, #0
 80014b0:	2200      	movs	r2, #0
 80014b2:	e731      	b.n	8001318 <__aeabi_dadd+0x130>
 80014b4:	2307      	movs	r3, #7
 80014b6:	402b      	ands	r3, r5
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d000      	beq.n	80014be <__aeabi_dadd+0x2d6>
 80014bc:	e710      	b.n	80012e0 <__aeabi_dadd+0xf8>
 80014be:	e093      	b.n	80015e8 <__aeabi_dadd+0x400>
 80014c0:	2a00      	cmp	r2, #0
 80014c2:	d074      	beq.n	80015ae <__aeabi_dadd+0x3c6>
 80014c4:	464a      	mov	r2, r9
 80014c6:	1bd2      	subs	r2, r2, r7
 80014c8:	2f00      	cmp	r7, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x2e6>
 80014cc:	e0c7      	b.n	800165e <__aeabi_dadd+0x476>
 80014ce:	4928      	ldr	r1, [pc, #160]	@ (8001570 <__aeabi_dadd+0x388>)
 80014d0:	4589      	cmp	r9, r1
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x2ee>
 80014d4:	e185      	b.n	80017e2 <__aeabi_dadd+0x5fa>
 80014d6:	2501      	movs	r5, #1
 80014d8:	2a38      	cmp	r2, #56	@ 0x38
 80014da:	dc12      	bgt.n	8001502 <__aeabi_dadd+0x31a>
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0409      	lsls	r1, r1, #16
 80014e0:	430c      	orrs	r4, r1
 80014e2:	2a1f      	cmp	r2, #31
 80014e4:	dd00      	ble.n	80014e8 <__aeabi_dadd+0x300>
 80014e6:	e1ab      	b.n	8001840 <__aeabi_dadd+0x658>
 80014e8:	2120      	movs	r1, #32
 80014ea:	0025      	movs	r5, r4
 80014ec:	1a89      	subs	r1, r1, r2
 80014ee:	0007      	movs	r7, r0
 80014f0:	4088      	lsls	r0, r1
 80014f2:	408d      	lsls	r5, r1
 80014f4:	40d7      	lsrs	r7, r2
 80014f6:	1e41      	subs	r1, r0, #1
 80014f8:	4188      	sbcs	r0, r1
 80014fa:	40d4      	lsrs	r4, r2
 80014fc:	433d      	orrs	r5, r7
 80014fe:	4305      	orrs	r5, r0
 8001500:	44a2      	add	sl, r4
 8001502:	4465      	add	r5, ip
 8001504:	4565      	cmp	r5, ip
 8001506:	4192      	sbcs	r2, r2
 8001508:	4252      	negs	r2, r2
 800150a:	4452      	add	r2, sl
 800150c:	0014      	movs	r4, r2
 800150e:	464f      	mov	r7, r9
 8001510:	e774      	b.n	80013fc <__aeabi_dadd+0x214>
 8001512:	0028      	movs	r0, r5
 8001514:	f001 fd24 	bl	8002f60 <__clzsi2>
 8001518:	0003      	movs	r3, r0
 800151a:	3318      	adds	r3, #24
 800151c:	2b1f      	cmp	r3, #31
 800151e:	dc00      	bgt.n	8001522 <__aeabi_dadd+0x33a>
 8001520:	e6c2      	b.n	80012a8 <__aeabi_dadd+0xc0>
 8001522:	002a      	movs	r2, r5
 8001524:	3808      	subs	r0, #8
 8001526:	4082      	lsls	r2, r0
 8001528:	429f      	cmp	r7, r3
 800152a:	dd00      	ble.n	800152e <__aeabi_dadd+0x346>
 800152c:	e0a9      	b.n	8001682 <__aeabi_dadd+0x49a>
 800152e:	1bdb      	subs	r3, r3, r7
 8001530:	1c58      	adds	r0, r3, #1
 8001532:	281f      	cmp	r0, #31
 8001534:	dc00      	bgt.n	8001538 <__aeabi_dadd+0x350>
 8001536:	e1ac      	b.n	8001892 <__aeabi_dadd+0x6aa>
 8001538:	0015      	movs	r5, r2
 800153a:	3b1f      	subs	r3, #31
 800153c:	40dd      	lsrs	r5, r3
 800153e:	2820      	cmp	r0, #32
 8001540:	d005      	beq.n	800154e <__aeabi_dadd+0x366>
 8001542:	2340      	movs	r3, #64	@ 0x40
 8001544:	1a1b      	subs	r3, r3, r0
 8001546:	409a      	lsls	r2, r3
 8001548:	1e53      	subs	r3, r2, #1
 800154a:	419a      	sbcs	r2, r3
 800154c:	4315      	orrs	r5, r2
 800154e:	2307      	movs	r3, #7
 8001550:	2700      	movs	r7, #0
 8001552:	402b      	ands	r3, r5
 8001554:	e7b0      	b.n	80014b8 <__aeabi_dadd+0x2d0>
 8001556:	08ed      	lsrs	r5, r5, #3
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <__aeabi_dadd+0x388>)
 800155a:	0762      	lsls	r2, r4, #29
 800155c:	432a      	orrs	r2, r5
 800155e:	08e4      	lsrs	r4, r4, #3
 8001560:	429f      	cmp	r7, r3
 8001562:	d00f      	beq.n	8001584 <__aeabi_dadd+0x39c>
 8001564:	0324      	lsls	r4, r4, #12
 8001566:	0b25      	lsrs	r5, r4, #12
 8001568:	057c      	lsls	r4, r7, #21
 800156a:	0d64      	lsrs	r4, r4, #21
 800156c:	e6d4      	b.n	8001318 <__aeabi_dadd+0x130>
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	000007ff 	.word	0x000007ff
 8001574:	ff7fffff 	.word	0xff7fffff
 8001578:	000007fe 	.word	0x000007fe
 800157c:	08c0      	lsrs	r0, r0, #3
 800157e:	0762      	lsls	r2, r4, #29
 8001580:	4302      	orrs	r2, r0
 8001582:	08e4      	lsrs	r4, r4, #3
 8001584:	0013      	movs	r3, r2
 8001586:	4323      	orrs	r3, r4
 8001588:	d100      	bne.n	800158c <__aeabi_dadd+0x3a4>
 800158a:	e186      	b.n	800189a <__aeabi_dadd+0x6b2>
 800158c:	2580      	movs	r5, #128	@ 0x80
 800158e:	032d      	lsls	r5, r5, #12
 8001590:	4325      	orrs	r5, r4
 8001592:	032d      	lsls	r5, r5, #12
 8001594:	4cc3      	ldr	r4, [pc, #780]	@ (80018a4 <__aeabi_dadd+0x6bc>)
 8001596:	0b2d      	lsrs	r5, r5, #12
 8001598:	e6be      	b.n	8001318 <__aeabi_dadd+0x130>
 800159a:	4660      	mov	r0, ip
 800159c:	4654      	mov	r4, sl
 800159e:	000e      	movs	r6, r1
 80015a0:	0017      	movs	r7, r2
 80015a2:	08c5      	lsrs	r5, r0, #3
 80015a4:	e7d8      	b.n	8001558 <__aeabi_dadd+0x370>
 80015a6:	4cc0      	ldr	r4, [pc, #768]	@ (80018a8 <__aeabi_dadd+0x6c0>)
 80015a8:	1aff      	subs	r7, r7, r3
 80015aa:	4014      	ands	r4, r2
 80015ac:	e696      	b.n	80012dc <__aeabi_dadd+0xf4>
 80015ae:	4abf      	ldr	r2, [pc, #764]	@ (80018ac <__aeabi_dadd+0x6c4>)
 80015b0:	1c79      	adds	r1, r7, #1
 80015b2:	4211      	tst	r1, r2
 80015b4:	d16b      	bne.n	800168e <__aeabi_dadd+0x4a6>
 80015b6:	0022      	movs	r2, r4
 80015b8:	4302      	orrs	r2, r0
 80015ba:	2f00      	cmp	r7, #0
 80015bc:	d000      	beq.n	80015c0 <__aeabi_dadd+0x3d8>
 80015be:	e0db      	b.n	8001778 <__aeabi_dadd+0x590>
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x3de>
 80015c4:	e12d      	b.n	8001822 <__aeabi_dadd+0x63a>
 80015c6:	4662      	mov	r2, ip
 80015c8:	4653      	mov	r3, sl
 80015ca:	431a      	orrs	r2, r3
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dadd+0x3e8>
 80015ce:	e0b6      	b.n	800173e <__aeabi_dadd+0x556>
 80015d0:	4663      	mov	r3, ip
 80015d2:	18c5      	adds	r5, r0, r3
 80015d4:	4285      	cmp	r5, r0
 80015d6:	4180      	sbcs	r0, r0
 80015d8:	4454      	add	r4, sl
 80015da:	4240      	negs	r0, r0
 80015dc:	1824      	adds	r4, r4, r0
 80015de:	0223      	lsls	r3, r4, #8
 80015e0:	d502      	bpl.n	80015e8 <__aeabi_dadd+0x400>
 80015e2:	000f      	movs	r7, r1
 80015e4:	4bb0      	ldr	r3, [pc, #704]	@ (80018a8 <__aeabi_dadd+0x6c0>)
 80015e6:	401c      	ands	r4, r3
 80015e8:	003a      	movs	r2, r7
 80015ea:	0028      	movs	r0, r5
 80015ec:	e7d8      	b.n	80015a0 <__aeabi_dadd+0x3b8>
 80015ee:	4662      	mov	r2, ip
 80015f0:	1a85      	subs	r5, r0, r2
 80015f2:	42a8      	cmp	r0, r5
 80015f4:	4192      	sbcs	r2, r2
 80015f6:	4653      	mov	r3, sl
 80015f8:	4252      	negs	r2, r2
 80015fa:	4691      	mov	r9, r2
 80015fc:	1ae3      	subs	r3, r4, r3
 80015fe:	001a      	movs	r2, r3
 8001600:	464b      	mov	r3, r9
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	4691      	mov	r9, r2
 8001608:	021a      	lsls	r2, r3, #8
 800160a:	d454      	bmi.n	80016b6 <__aeabi_dadd+0x4ce>
 800160c:	464a      	mov	r2, r9
 800160e:	464c      	mov	r4, r9
 8001610:	432a      	orrs	r2, r5
 8001612:	d000      	beq.n	8001616 <__aeabi_dadd+0x42e>
 8001614:	e640      	b.n	8001298 <__aeabi_dadd+0xb0>
 8001616:	2600      	movs	r6, #0
 8001618:	2400      	movs	r4, #0
 800161a:	2500      	movs	r5, #0
 800161c:	e67c      	b.n	8001318 <__aeabi_dadd+0x130>
 800161e:	4da1      	ldr	r5, [pc, #644]	@ (80018a4 <__aeabi_dadd+0x6bc>)
 8001620:	45a9      	cmp	r9, r5
 8001622:	d100      	bne.n	8001626 <__aeabi_dadd+0x43e>
 8001624:	e090      	b.n	8001748 <__aeabi_dadd+0x560>
 8001626:	2501      	movs	r5, #1
 8001628:	2a38      	cmp	r2, #56	@ 0x38
 800162a:	dd00      	ble.n	800162e <__aeabi_dadd+0x446>
 800162c:	e6ab      	b.n	8001386 <__aeabi_dadd+0x19e>
 800162e:	2580      	movs	r5, #128	@ 0x80
 8001630:	042d      	lsls	r5, r5, #16
 8001632:	432c      	orrs	r4, r5
 8001634:	e695      	b.n	8001362 <__aeabi_dadd+0x17a>
 8001636:	0011      	movs	r1, r2
 8001638:	4655      	mov	r5, sl
 800163a:	3920      	subs	r1, #32
 800163c:	40cd      	lsrs	r5, r1
 800163e:	46a9      	mov	r9, r5
 8001640:	2a20      	cmp	r2, #32
 8001642:	d006      	beq.n	8001652 <__aeabi_dadd+0x46a>
 8001644:	2140      	movs	r1, #64	@ 0x40
 8001646:	4653      	mov	r3, sl
 8001648:	1a8a      	subs	r2, r1, r2
 800164a:	4093      	lsls	r3, r2
 800164c:	4662      	mov	r2, ip
 800164e:	431a      	orrs	r2, r3
 8001650:	4694      	mov	ip, r2
 8001652:	4665      	mov	r5, ip
 8001654:	1e6b      	subs	r3, r5, #1
 8001656:	419d      	sbcs	r5, r3
 8001658:	464b      	mov	r3, r9
 800165a:	431d      	orrs	r5, r3
 800165c:	e612      	b.n	8001284 <__aeabi_dadd+0x9c>
 800165e:	0021      	movs	r1, r4
 8001660:	4301      	orrs	r1, r0
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x47e>
 8001664:	e0c4      	b.n	80017f0 <__aeabi_dadd+0x608>
 8001666:	1e51      	subs	r1, r2, #1
 8001668:	2a01      	cmp	r2, #1
 800166a:	d100      	bne.n	800166e <__aeabi_dadd+0x486>
 800166c:	e0fb      	b.n	8001866 <__aeabi_dadd+0x67e>
 800166e:	4d8d      	ldr	r5, [pc, #564]	@ (80018a4 <__aeabi_dadd+0x6bc>)
 8001670:	42aa      	cmp	r2, r5
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x48e>
 8001674:	e0b5      	b.n	80017e2 <__aeabi_dadd+0x5fa>
 8001676:	2501      	movs	r5, #1
 8001678:	2938      	cmp	r1, #56	@ 0x38
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x496>
 800167c:	e741      	b.n	8001502 <__aeabi_dadd+0x31a>
 800167e:	000a      	movs	r2, r1
 8001680:	e72f      	b.n	80014e2 <__aeabi_dadd+0x2fa>
 8001682:	4c89      	ldr	r4, [pc, #548]	@ (80018a8 <__aeabi_dadd+0x6c0>)
 8001684:	1aff      	subs	r7, r7, r3
 8001686:	4014      	ands	r4, r2
 8001688:	0762      	lsls	r2, r4, #29
 800168a:	08e4      	lsrs	r4, r4, #3
 800168c:	e76a      	b.n	8001564 <__aeabi_dadd+0x37c>
 800168e:	4a85      	ldr	r2, [pc, #532]	@ (80018a4 <__aeabi_dadd+0x6bc>)
 8001690:	4291      	cmp	r1, r2
 8001692:	d100      	bne.n	8001696 <__aeabi_dadd+0x4ae>
 8001694:	e0e3      	b.n	800185e <__aeabi_dadd+0x676>
 8001696:	4663      	mov	r3, ip
 8001698:	18c2      	adds	r2, r0, r3
 800169a:	4282      	cmp	r2, r0
 800169c:	4180      	sbcs	r0, r0
 800169e:	0023      	movs	r3, r4
 80016a0:	4240      	negs	r0, r0
 80016a2:	4453      	add	r3, sl
 80016a4:	181b      	adds	r3, r3, r0
 80016a6:	07dd      	lsls	r5, r3, #31
 80016a8:	085c      	lsrs	r4, r3, #1
 80016aa:	2307      	movs	r3, #7
 80016ac:	0852      	lsrs	r2, r2, #1
 80016ae:	4315      	orrs	r5, r2
 80016b0:	000f      	movs	r7, r1
 80016b2:	402b      	ands	r3, r5
 80016b4:	e700      	b.n	80014b8 <__aeabi_dadd+0x2d0>
 80016b6:	4663      	mov	r3, ip
 80016b8:	1a1d      	subs	r5, r3, r0
 80016ba:	45ac      	cmp	ip, r5
 80016bc:	4192      	sbcs	r2, r2
 80016be:	4653      	mov	r3, sl
 80016c0:	4252      	negs	r2, r2
 80016c2:	1b1c      	subs	r4, r3, r4
 80016c4:	000e      	movs	r6, r1
 80016c6:	4688      	mov	r8, r1
 80016c8:	1aa4      	subs	r4, r4, r2
 80016ca:	e5e5      	b.n	8001298 <__aeabi_dadd+0xb0>
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	d000      	beq.n	80016d2 <__aeabi_dadd+0x4ea>
 80016d0:	e091      	b.n	80017f6 <__aeabi_dadd+0x60e>
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	d138      	bne.n	8001748 <__aeabi_dadd+0x560>
 80016d6:	2480      	movs	r4, #128	@ 0x80
 80016d8:	2600      	movs	r6, #0
 80016da:	0324      	lsls	r4, r4, #12
 80016dc:	e756      	b.n	800158c <__aeabi_dadd+0x3a4>
 80016de:	4663      	mov	r3, ip
 80016e0:	18c5      	adds	r5, r0, r3
 80016e2:	4285      	cmp	r5, r0
 80016e4:	4180      	sbcs	r0, r0
 80016e6:	4454      	add	r4, sl
 80016e8:	4240      	negs	r0, r0
 80016ea:	1824      	adds	r4, r4, r0
 80016ec:	2701      	movs	r7, #1
 80016ee:	0223      	lsls	r3, r4, #8
 80016f0:	d400      	bmi.n	80016f4 <__aeabi_dadd+0x50c>
 80016f2:	e6df      	b.n	80014b4 <__aeabi_dadd+0x2cc>
 80016f4:	2702      	movs	r7, #2
 80016f6:	e687      	b.n	8001408 <__aeabi_dadd+0x220>
 80016f8:	4663      	mov	r3, ip
 80016fa:	1ac5      	subs	r5, r0, r3
 80016fc:	42a8      	cmp	r0, r5
 80016fe:	4180      	sbcs	r0, r0
 8001700:	4653      	mov	r3, sl
 8001702:	4240      	negs	r0, r0
 8001704:	1ae4      	subs	r4, r4, r3
 8001706:	2701      	movs	r7, #1
 8001708:	1a24      	subs	r4, r4, r0
 800170a:	e5c0      	b.n	800128e <__aeabi_dadd+0xa6>
 800170c:	0762      	lsls	r2, r4, #29
 800170e:	08c0      	lsrs	r0, r0, #3
 8001710:	4302      	orrs	r2, r0
 8001712:	08e4      	lsrs	r4, r4, #3
 8001714:	e736      	b.n	8001584 <__aeabi_dadd+0x39c>
 8001716:	0011      	movs	r1, r2
 8001718:	4653      	mov	r3, sl
 800171a:	3920      	subs	r1, #32
 800171c:	40cb      	lsrs	r3, r1
 800171e:	4699      	mov	r9, r3
 8001720:	2a20      	cmp	r2, #32
 8001722:	d006      	beq.n	8001732 <__aeabi_dadd+0x54a>
 8001724:	2140      	movs	r1, #64	@ 0x40
 8001726:	4653      	mov	r3, sl
 8001728:	1a8a      	subs	r2, r1, r2
 800172a:	4093      	lsls	r3, r2
 800172c:	4662      	mov	r2, ip
 800172e:	431a      	orrs	r2, r3
 8001730:	4694      	mov	ip, r2
 8001732:	4665      	mov	r5, ip
 8001734:	1e6b      	subs	r3, r5, #1
 8001736:	419d      	sbcs	r5, r3
 8001738:	464b      	mov	r3, r9
 800173a:	431d      	orrs	r5, r3
 800173c:	e659      	b.n	80013f2 <__aeabi_dadd+0x20a>
 800173e:	0762      	lsls	r2, r4, #29
 8001740:	08c0      	lsrs	r0, r0, #3
 8001742:	4302      	orrs	r2, r0
 8001744:	08e4      	lsrs	r4, r4, #3
 8001746:	e70d      	b.n	8001564 <__aeabi_dadd+0x37c>
 8001748:	4653      	mov	r3, sl
 800174a:	075a      	lsls	r2, r3, #29
 800174c:	4663      	mov	r3, ip
 800174e:	08d8      	lsrs	r0, r3, #3
 8001750:	4653      	mov	r3, sl
 8001752:	000e      	movs	r6, r1
 8001754:	4302      	orrs	r2, r0
 8001756:	08dc      	lsrs	r4, r3, #3
 8001758:	e714      	b.n	8001584 <__aeabi_dadd+0x39c>
 800175a:	0015      	movs	r5, r2
 800175c:	0026      	movs	r6, r4
 800175e:	3d20      	subs	r5, #32
 8001760:	40ee      	lsrs	r6, r5
 8001762:	2a20      	cmp	r2, #32
 8001764:	d003      	beq.n	800176e <__aeabi_dadd+0x586>
 8001766:	2540      	movs	r5, #64	@ 0x40
 8001768:	1aaa      	subs	r2, r5, r2
 800176a:	4094      	lsls	r4, r2
 800176c:	4320      	orrs	r0, r4
 800176e:	1e42      	subs	r2, r0, #1
 8001770:	4190      	sbcs	r0, r2
 8001772:	0005      	movs	r5, r0
 8001774:	4335      	orrs	r5, r6
 8001776:	e606      	b.n	8001386 <__aeabi_dadd+0x19e>
 8001778:	2a00      	cmp	r2, #0
 800177a:	d07c      	beq.n	8001876 <__aeabi_dadd+0x68e>
 800177c:	4662      	mov	r2, ip
 800177e:	4653      	mov	r3, sl
 8001780:	08c0      	lsrs	r0, r0, #3
 8001782:	431a      	orrs	r2, r3
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x5a0>
 8001786:	e6fa      	b.n	800157e <__aeabi_dadd+0x396>
 8001788:	0762      	lsls	r2, r4, #29
 800178a:	4310      	orrs	r0, r2
 800178c:	2280      	movs	r2, #128	@ 0x80
 800178e:	08e4      	lsrs	r4, r4, #3
 8001790:	0312      	lsls	r2, r2, #12
 8001792:	4214      	tst	r4, r2
 8001794:	d008      	beq.n	80017a8 <__aeabi_dadd+0x5c0>
 8001796:	08d9      	lsrs	r1, r3, #3
 8001798:	4211      	tst	r1, r2
 800179a:	d105      	bne.n	80017a8 <__aeabi_dadd+0x5c0>
 800179c:	4663      	mov	r3, ip
 800179e:	08d8      	lsrs	r0, r3, #3
 80017a0:	4653      	mov	r3, sl
 80017a2:	000c      	movs	r4, r1
 80017a4:	075b      	lsls	r3, r3, #29
 80017a6:	4318      	orrs	r0, r3
 80017a8:	0f42      	lsrs	r2, r0, #29
 80017aa:	00c0      	lsls	r0, r0, #3
 80017ac:	08c0      	lsrs	r0, r0, #3
 80017ae:	0752      	lsls	r2, r2, #29
 80017b0:	4302      	orrs	r2, r0
 80017b2:	e6e7      	b.n	8001584 <__aeabi_dadd+0x39c>
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x5d2>
 80017b8:	e72d      	b.n	8001616 <__aeabi_dadd+0x42e>
 80017ba:	4663      	mov	r3, ip
 80017bc:	08d8      	lsrs	r0, r3, #3
 80017be:	4653      	mov	r3, sl
 80017c0:	075a      	lsls	r2, r3, #29
 80017c2:	000e      	movs	r6, r1
 80017c4:	4302      	orrs	r2, r0
 80017c6:	08dc      	lsrs	r4, r3, #3
 80017c8:	e6cc      	b.n	8001564 <__aeabi_dadd+0x37c>
 80017ca:	4663      	mov	r3, ip
 80017cc:	1a1d      	subs	r5, r3, r0
 80017ce:	45ac      	cmp	ip, r5
 80017d0:	4192      	sbcs	r2, r2
 80017d2:	4653      	mov	r3, sl
 80017d4:	4252      	negs	r2, r2
 80017d6:	1b1c      	subs	r4, r3, r4
 80017d8:	000e      	movs	r6, r1
 80017da:	4688      	mov	r8, r1
 80017dc:	1aa4      	subs	r4, r4, r2
 80017de:	3701      	adds	r7, #1
 80017e0:	e555      	b.n	800128e <__aeabi_dadd+0xa6>
 80017e2:	4663      	mov	r3, ip
 80017e4:	08d9      	lsrs	r1, r3, #3
 80017e6:	4653      	mov	r3, sl
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	430a      	orrs	r2, r1
 80017ec:	08dc      	lsrs	r4, r3, #3
 80017ee:	e6c9      	b.n	8001584 <__aeabi_dadd+0x39c>
 80017f0:	4660      	mov	r0, ip
 80017f2:	4654      	mov	r4, sl
 80017f4:	e6d4      	b.n	80015a0 <__aeabi_dadd+0x3b8>
 80017f6:	08c0      	lsrs	r0, r0, #3
 80017f8:	2a00      	cmp	r2, #0
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x616>
 80017fc:	e6bf      	b.n	800157e <__aeabi_dadd+0x396>
 80017fe:	0762      	lsls	r2, r4, #29
 8001800:	4310      	orrs	r0, r2
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	08e4      	lsrs	r4, r4, #3
 8001806:	0312      	lsls	r2, r2, #12
 8001808:	4214      	tst	r4, r2
 800180a:	d0cd      	beq.n	80017a8 <__aeabi_dadd+0x5c0>
 800180c:	08dd      	lsrs	r5, r3, #3
 800180e:	4215      	tst	r5, r2
 8001810:	d1ca      	bne.n	80017a8 <__aeabi_dadd+0x5c0>
 8001812:	4663      	mov	r3, ip
 8001814:	08d8      	lsrs	r0, r3, #3
 8001816:	4653      	mov	r3, sl
 8001818:	075b      	lsls	r3, r3, #29
 800181a:	000e      	movs	r6, r1
 800181c:	002c      	movs	r4, r5
 800181e:	4318      	orrs	r0, r3
 8001820:	e7c2      	b.n	80017a8 <__aeabi_dadd+0x5c0>
 8001822:	4663      	mov	r3, ip
 8001824:	08d9      	lsrs	r1, r3, #3
 8001826:	4653      	mov	r3, sl
 8001828:	075a      	lsls	r2, r3, #29
 800182a:	430a      	orrs	r2, r1
 800182c:	08dc      	lsrs	r4, r3, #3
 800182e:	e699      	b.n	8001564 <__aeabi_dadd+0x37c>
 8001830:	4663      	mov	r3, ip
 8001832:	08d8      	lsrs	r0, r3, #3
 8001834:	4653      	mov	r3, sl
 8001836:	075a      	lsls	r2, r3, #29
 8001838:	000e      	movs	r6, r1
 800183a:	4302      	orrs	r2, r0
 800183c:	08dc      	lsrs	r4, r3, #3
 800183e:	e6a1      	b.n	8001584 <__aeabi_dadd+0x39c>
 8001840:	0011      	movs	r1, r2
 8001842:	0027      	movs	r7, r4
 8001844:	3920      	subs	r1, #32
 8001846:	40cf      	lsrs	r7, r1
 8001848:	2a20      	cmp	r2, #32
 800184a:	d003      	beq.n	8001854 <__aeabi_dadd+0x66c>
 800184c:	2140      	movs	r1, #64	@ 0x40
 800184e:	1a8a      	subs	r2, r1, r2
 8001850:	4094      	lsls	r4, r2
 8001852:	4320      	orrs	r0, r4
 8001854:	1e42      	subs	r2, r0, #1
 8001856:	4190      	sbcs	r0, r2
 8001858:	0005      	movs	r5, r0
 800185a:	433d      	orrs	r5, r7
 800185c:	e651      	b.n	8001502 <__aeabi_dadd+0x31a>
 800185e:	000c      	movs	r4, r1
 8001860:	2500      	movs	r5, #0
 8001862:	2200      	movs	r2, #0
 8001864:	e558      	b.n	8001318 <__aeabi_dadd+0x130>
 8001866:	4460      	add	r0, ip
 8001868:	4560      	cmp	r0, ip
 800186a:	4192      	sbcs	r2, r2
 800186c:	4454      	add	r4, sl
 800186e:	4252      	negs	r2, r2
 8001870:	0005      	movs	r5, r0
 8001872:	18a4      	adds	r4, r4, r2
 8001874:	e73a      	b.n	80016ec <__aeabi_dadd+0x504>
 8001876:	4653      	mov	r3, sl
 8001878:	075a      	lsls	r2, r3, #29
 800187a:	4663      	mov	r3, ip
 800187c:	08d9      	lsrs	r1, r3, #3
 800187e:	4653      	mov	r3, sl
 8001880:	430a      	orrs	r2, r1
 8001882:	08dc      	lsrs	r4, r3, #3
 8001884:	e67e      	b.n	8001584 <__aeabi_dadd+0x39c>
 8001886:	001a      	movs	r2, r3
 8001888:	001c      	movs	r4, r3
 800188a:	432a      	orrs	r2, r5
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x6a8>
 800188e:	e6ab      	b.n	80015e8 <__aeabi_dadd+0x400>
 8001890:	e6c1      	b.n	8001616 <__aeabi_dadd+0x42e>
 8001892:	2120      	movs	r1, #32
 8001894:	2500      	movs	r5, #0
 8001896:	1a09      	subs	r1, r1, r0
 8001898:	e519      	b.n	80012ce <__aeabi_dadd+0xe6>
 800189a:	2200      	movs	r2, #0
 800189c:	2500      	movs	r5, #0
 800189e:	4c01      	ldr	r4, [pc, #4]	@ (80018a4 <__aeabi_dadd+0x6bc>)
 80018a0:	e53a      	b.n	8001318 <__aeabi_dadd+0x130>
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	000007ff 	.word	0x000007ff
 80018a8:	ff7fffff 	.word	0xff7fffff
 80018ac:	000007fe 	.word	0x000007fe

080018b0 <__aeabi_ddiv>:
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	46de      	mov	lr, fp
 80018b4:	4645      	mov	r5, r8
 80018b6:	4657      	mov	r7, sl
 80018b8:	464e      	mov	r6, r9
 80018ba:	b5e0      	push	{r5, r6, r7, lr}
 80018bc:	b087      	sub	sp, #28
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	030b      	lsls	r3, r1, #12
 80018c4:	0b1b      	lsrs	r3, r3, #12
 80018c6:	469b      	mov	fp, r3
 80018c8:	0fca      	lsrs	r2, r1, #31
 80018ca:	004b      	lsls	r3, r1, #1
 80018cc:	0004      	movs	r4, r0
 80018ce:	4680      	mov	r8, r0
 80018d0:	0d5b      	lsrs	r3, r3, #21
 80018d2:	9202      	str	r2, [sp, #8]
 80018d4:	d100      	bne.n	80018d8 <__aeabi_ddiv+0x28>
 80018d6:	e16a      	b.n	8001bae <__aeabi_ddiv+0x2fe>
 80018d8:	4ad4      	ldr	r2, [pc, #848]	@ (8001c2c <__aeabi_ddiv+0x37c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x30>
 80018de:	e18c      	b.n	8001bfa <__aeabi_ddiv+0x34a>
 80018e0:	4659      	mov	r1, fp
 80018e2:	0f42      	lsrs	r2, r0, #29
 80018e4:	00c9      	lsls	r1, r1, #3
 80018e6:	430a      	orrs	r2, r1
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	0409      	lsls	r1, r1, #16
 80018ec:	4311      	orrs	r1, r2
 80018ee:	00c2      	lsls	r2, r0, #3
 80018f0:	4690      	mov	r8, r2
 80018f2:	4acf      	ldr	r2, [pc, #828]	@ (8001c30 <__aeabi_ddiv+0x380>)
 80018f4:	4689      	mov	r9, r1
 80018f6:	4692      	mov	sl, r2
 80018f8:	449a      	add	sl, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	2400      	movs	r4, #0
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	9e00      	ldr	r6, [sp, #0]
 8001902:	9f01      	ldr	r7, [sp, #4]
 8001904:	033b      	lsls	r3, r7, #12
 8001906:	0b1b      	lsrs	r3, r3, #12
 8001908:	469b      	mov	fp, r3
 800190a:	007b      	lsls	r3, r7, #1
 800190c:	0030      	movs	r0, r6
 800190e:	0d5b      	lsrs	r3, r3, #21
 8001910:	0ffd      	lsrs	r5, r7, #31
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x68>
 8001916:	e128      	b.n	8001b6a <__aeabi_ddiv+0x2ba>
 8001918:	4ac4      	ldr	r2, [pc, #784]	@ (8001c2c <__aeabi_ddiv+0x37c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0x70>
 800191e:	e177      	b.n	8001c10 <__aeabi_ddiv+0x360>
 8001920:	4659      	mov	r1, fp
 8001922:	0f72      	lsrs	r2, r6, #29
 8001924:	00c9      	lsls	r1, r1, #3
 8001926:	430a      	orrs	r2, r1
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	0409      	lsls	r1, r1, #16
 800192c:	4311      	orrs	r1, r2
 800192e:	468b      	mov	fp, r1
 8001930:	49bf      	ldr	r1, [pc, #764]	@ (8001c30 <__aeabi_ddiv+0x380>)
 8001932:	00f2      	lsls	r2, r6, #3
 8001934:	468c      	mov	ip, r1
 8001936:	4651      	mov	r1, sl
 8001938:	4463      	add	r3, ip
 800193a:	1acb      	subs	r3, r1, r3
 800193c:	469a      	mov	sl, r3
 800193e:	2300      	movs	r3, #0
 8001940:	9e02      	ldr	r6, [sp, #8]
 8001942:	406e      	eors	r6, r5
 8001944:	2c0f      	cmp	r4, #15
 8001946:	d827      	bhi.n	8001998 <__aeabi_ddiv+0xe8>
 8001948:	49ba      	ldr	r1, [pc, #744]	@ (8001c34 <__aeabi_ddiv+0x384>)
 800194a:	00a4      	lsls	r4, r4, #2
 800194c:	5909      	ldr	r1, [r1, r4]
 800194e:	468f      	mov	pc, r1
 8001950:	46cb      	mov	fp, r9
 8001952:	4642      	mov	r2, r8
 8001954:	9e02      	ldr	r6, [sp, #8]
 8001956:	9b03      	ldr	r3, [sp, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d016      	beq.n	800198a <__aeabi_ddiv+0xda>
 800195c:	2b03      	cmp	r3, #3
 800195e:	d100      	bne.n	8001962 <__aeabi_ddiv+0xb2>
 8001960:	e2a6      	b.n	8001eb0 <__aeabi_ddiv+0x600>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d000      	beq.n	8001968 <__aeabi_ddiv+0xb8>
 8001966:	e0df      	b.n	8001b28 <__aeabi_ddiv+0x278>
 8001968:	2200      	movs	r2, #0
 800196a:	2300      	movs	r3, #0
 800196c:	2400      	movs	r4, #0
 800196e:	4690      	mov	r8, r2
 8001970:	051b      	lsls	r3, r3, #20
 8001972:	4323      	orrs	r3, r4
 8001974:	07f6      	lsls	r6, r6, #31
 8001976:	4333      	orrs	r3, r6
 8001978:	4640      	mov	r0, r8
 800197a:	0019      	movs	r1, r3
 800197c:	b007      	add	sp, #28
 800197e:	bcf0      	pop	{r4, r5, r6, r7}
 8001980:	46bb      	mov	fp, r7
 8001982:	46b2      	mov	sl, r6
 8001984:	46a9      	mov	r9, r5
 8001986:	46a0      	mov	r8, r4
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	2200      	movs	r2, #0
 800198c:	2400      	movs	r4, #0
 800198e:	4690      	mov	r8, r2
 8001990:	4ba6      	ldr	r3, [pc, #664]	@ (8001c2c <__aeabi_ddiv+0x37c>)
 8001992:	e7ed      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001994:	002e      	movs	r6, r5
 8001996:	e7df      	b.n	8001958 <__aeabi_ddiv+0xa8>
 8001998:	45cb      	cmp	fp, r9
 800199a:	d200      	bcs.n	800199e <__aeabi_ddiv+0xee>
 800199c:	e1d4      	b.n	8001d48 <__aeabi_ddiv+0x498>
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0xf2>
 80019a0:	e1cf      	b.n	8001d42 <__aeabi_ddiv+0x492>
 80019a2:	2301      	movs	r3, #1
 80019a4:	425b      	negs	r3, r3
 80019a6:	469c      	mov	ip, r3
 80019a8:	4644      	mov	r4, r8
 80019aa:	4648      	mov	r0, r9
 80019ac:	2700      	movs	r7, #0
 80019ae:	44e2      	add	sl, ip
 80019b0:	465b      	mov	r3, fp
 80019b2:	0e15      	lsrs	r5, r2, #24
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	431d      	orrs	r5, r3
 80019b8:	0c19      	lsrs	r1, r3, #16
 80019ba:	042b      	lsls	r3, r5, #16
 80019bc:	0212      	lsls	r2, r2, #8
 80019be:	9500      	str	r5, [sp, #0]
 80019c0:	0c1d      	lsrs	r5, r3, #16
 80019c2:	4691      	mov	r9, r2
 80019c4:	9102      	str	r1, [sp, #8]
 80019c6:	9503      	str	r5, [sp, #12]
 80019c8:	f7fe fc40 	bl	800024c <__aeabi_uidivmod>
 80019cc:	0002      	movs	r2, r0
 80019ce:	436a      	muls	r2, r5
 80019d0:	040b      	lsls	r3, r1, #16
 80019d2:	0c21      	lsrs	r1, r4, #16
 80019d4:	4680      	mov	r8, r0
 80019d6:	4319      	orrs	r1, r3
 80019d8:	428a      	cmp	r2, r1
 80019da:	d909      	bls.n	80019f0 <__aeabi_ddiv+0x140>
 80019dc:	9d00      	ldr	r5, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	46ac      	mov	ip, r5
 80019e2:	425b      	negs	r3, r3
 80019e4:	4461      	add	r1, ip
 80019e6:	469c      	mov	ip, r3
 80019e8:	44e0      	add	r8, ip
 80019ea:	428d      	cmp	r5, r1
 80019ec:	d800      	bhi.n	80019f0 <__aeabi_ddiv+0x140>
 80019ee:	e1fb      	b.n	8001de8 <__aeabi_ddiv+0x538>
 80019f0:	1a88      	subs	r0, r1, r2
 80019f2:	9902      	ldr	r1, [sp, #8]
 80019f4:	f7fe fc2a 	bl	800024c <__aeabi_uidivmod>
 80019f8:	9a03      	ldr	r2, [sp, #12]
 80019fa:	0424      	lsls	r4, r4, #16
 80019fc:	4342      	muls	r2, r0
 80019fe:	0409      	lsls	r1, r1, #16
 8001a00:	0c24      	lsrs	r4, r4, #16
 8001a02:	0003      	movs	r3, r0
 8001a04:	430c      	orrs	r4, r1
 8001a06:	42a2      	cmp	r2, r4
 8001a08:	d906      	bls.n	8001a18 <__aeabi_ddiv+0x168>
 8001a0a:	9900      	ldr	r1, [sp, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	468c      	mov	ip, r1
 8001a10:	4464      	add	r4, ip
 8001a12:	42a1      	cmp	r1, r4
 8001a14:	d800      	bhi.n	8001a18 <__aeabi_ddiv+0x168>
 8001a16:	e1e1      	b.n	8001ddc <__aeabi_ddiv+0x52c>
 8001a18:	1aa0      	subs	r0, r4, r2
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	0412      	lsls	r2, r2, #16
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	4693      	mov	fp, r2
 8001a22:	464b      	mov	r3, r9
 8001a24:	4659      	mov	r1, fp
 8001a26:	0c1b      	lsrs	r3, r3, #16
 8001a28:	001d      	movs	r5, r3
 8001a2a:	9304      	str	r3, [sp, #16]
 8001a2c:	040b      	lsls	r3, r1, #16
 8001a2e:	4649      	mov	r1, r9
 8001a30:	0409      	lsls	r1, r1, #16
 8001a32:	0c09      	lsrs	r1, r1, #16
 8001a34:	000c      	movs	r4, r1
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	435c      	muls	r4, r3
 8001a3a:	0c12      	lsrs	r2, r2, #16
 8001a3c:	436b      	muls	r3, r5
 8001a3e:	4688      	mov	r8, r1
 8001a40:	4351      	muls	r1, r2
 8001a42:	436a      	muls	r2, r5
 8001a44:	0c25      	lsrs	r5, r4, #16
 8001a46:	46ac      	mov	ip, r5
 8001a48:	185b      	adds	r3, r3, r1
 8001a4a:	4463      	add	r3, ip
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	d903      	bls.n	8001a58 <__aeabi_ddiv+0x1a8>
 8001a50:	2180      	movs	r1, #128	@ 0x80
 8001a52:	0249      	lsls	r1, r1, #9
 8001a54:	468c      	mov	ip, r1
 8001a56:	4462      	add	r2, ip
 8001a58:	0c19      	lsrs	r1, r3, #16
 8001a5a:	0424      	lsls	r4, r4, #16
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	0c24      	lsrs	r4, r4, #16
 8001a60:	188a      	adds	r2, r1, r2
 8001a62:	191c      	adds	r4, r3, r4
 8001a64:	4290      	cmp	r0, r2
 8001a66:	d302      	bcc.n	8001a6e <__aeabi_ddiv+0x1be>
 8001a68:	d116      	bne.n	8001a98 <__aeabi_ddiv+0x1e8>
 8001a6a:	42a7      	cmp	r7, r4
 8001a6c:	d214      	bcs.n	8001a98 <__aeabi_ddiv+0x1e8>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	9d00      	ldr	r5, [sp, #0]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	444f      	add	r7, r9
 8001a76:	9305      	str	r3, [sp, #20]
 8001a78:	454f      	cmp	r7, r9
 8001a7a:	419b      	sbcs	r3, r3
 8001a7c:	46ac      	mov	ip, r5
 8001a7e:	425b      	negs	r3, r3
 8001a80:	4463      	add	r3, ip
 8001a82:	18c0      	adds	r0, r0, r3
 8001a84:	4285      	cmp	r5, r0
 8001a86:	d300      	bcc.n	8001a8a <__aeabi_ddiv+0x1da>
 8001a88:	e1a1      	b.n	8001dce <__aeabi_ddiv+0x51e>
 8001a8a:	4282      	cmp	r2, r0
 8001a8c:	d900      	bls.n	8001a90 <__aeabi_ddiv+0x1e0>
 8001a8e:	e1f6      	b.n	8001e7e <__aeabi_ddiv+0x5ce>
 8001a90:	d100      	bne.n	8001a94 <__aeabi_ddiv+0x1e4>
 8001a92:	e1f1      	b.n	8001e78 <__aeabi_ddiv+0x5c8>
 8001a94:	9b05      	ldr	r3, [sp, #20]
 8001a96:	469b      	mov	fp, r3
 8001a98:	1b3c      	subs	r4, r7, r4
 8001a9a:	42a7      	cmp	r7, r4
 8001a9c:	41bf      	sbcs	r7, r7
 8001a9e:	9d00      	ldr	r5, [sp, #0]
 8001aa0:	1a80      	subs	r0, r0, r2
 8001aa2:	427f      	negs	r7, r7
 8001aa4:	1bc0      	subs	r0, r0, r7
 8001aa6:	4285      	cmp	r5, r0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_ddiv+0x1fc>
 8001aaa:	e1d0      	b.n	8001e4e <__aeabi_ddiv+0x59e>
 8001aac:	9902      	ldr	r1, [sp, #8]
 8001aae:	f7fe fbcd 	bl	800024c <__aeabi_uidivmod>
 8001ab2:	9a03      	ldr	r2, [sp, #12]
 8001ab4:	040b      	lsls	r3, r1, #16
 8001ab6:	4342      	muls	r2, r0
 8001ab8:	0c21      	lsrs	r1, r4, #16
 8001aba:	0007      	movs	r7, r0
 8001abc:	4319      	orrs	r1, r3
 8001abe:	428a      	cmp	r2, r1
 8001ac0:	d900      	bls.n	8001ac4 <__aeabi_ddiv+0x214>
 8001ac2:	e178      	b.n	8001db6 <__aeabi_ddiv+0x506>
 8001ac4:	1a88      	subs	r0, r1, r2
 8001ac6:	9902      	ldr	r1, [sp, #8]
 8001ac8:	f7fe fbc0 	bl	800024c <__aeabi_uidivmod>
 8001acc:	9a03      	ldr	r2, [sp, #12]
 8001ace:	0424      	lsls	r4, r4, #16
 8001ad0:	4342      	muls	r2, r0
 8001ad2:	0409      	lsls	r1, r1, #16
 8001ad4:	0c24      	lsrs	r4, r4, #16
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	430c      	orrs	r4, r1
 8001ada:	42a2      	cmp	r2, r4
 8001adc:	d900      	bls.n	8001ae0 <__aeabi_ddiv+0x230>
 8001ade:	e15d      	b.n	8001d9c <__aeabi_ddiv+0x4ec>
 8001ae0:	4641      	mov	r1, r8
 8001ae2:	1aa4      	subs	r4, r4, r2
 8001ae4:	043a      	lsls	r2, r7, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	9d04      	ldr	r5, [sp, #16]
 8001aea:	0413      	lsls	r3, r2, #16
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	4359      	muls	r1, r3
 8001af0:	4647      	mov	r7, r8
 8001af2:	436b      	muls	r3, r5
 8001af4:	469c      	mov	ip, r3
 8001af6:	0c10      	lsrs	r0, r2, #16
 8001af8:	4347      	muls	r7, r0
 8001afa:	0c0b      	lsrs	r3, r1, #16
 8001afc:	44bc      	add	ip, r7
 8001afe:	4463      	add	r3, ip
 8001b00:	4368      	muls	r0, r5
 8001b02:	429f      	cmp	r7, r3
 8001b04:	d903      	bls.n	8001b0e <__aeabi_ddiv+0x25e>
 8001b06:	2580      	movs	r5, #128	@ 0x80
 8001b08:	026d      	lsls	r5, r5, #9
 8001b0a:	46ac      	mov	ip, r5
 8001b0c:	4460      	add	r0, ip
 8001b0e:	0c1f      	lsrs	r7, r3, #16
 8001b10:	0409      	lsls	r1, r1, #16
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	0c09      	lsrs	r1, r1, #16
 8001b16:	183f      	adds	r7, r7, r0
 8001b18:	185b      	adds	r3, r3, r1
 8001b1a:	42bc      	cmp	r4, r7
 8001b1c:	d200      	bcs.n	8001b20 <__aeabi_ddiv+0x270>
 8001b1e:	e102      	b.n	8001d26 <__aeabi_ddiv+0x476>
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x274>
 8001b22:	e0fd      	b.n	8001d20 <__aeabi_ddiv+0x470>
 8001b24:	2301      	movs	r3, #1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <__aeabi_ddiv+0x388>)
 8001b2a:	4453      	add	r3, sl
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	dc00      	bgt.n	8001b32 <__aeabi_ddiv+0x282>
 8001b30:	e0ae      	b.n	8001c90 <__aeabi_ddiv+0x3e0>
 8001b32:	0751      	lsls	r1, r2, #29
 8001b34:	d000      	beq.n	8001b38 <__aeabi_ddiv+0x288>
 8001b36:	e198      	b.n	8001e6a <__aeabi_ddiv+0x5ba>
 8001b38:	4659      	mov	r1, fp
 8001b3a:	01c9      	lsls	r1, r1, #7
 8001b3c:	d506      	bpl.n	8001b4c <__aeabi_ddiv+0x29c>
 8001b3e:	4659      	mov	r1, fp
 8001b40:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <__aeabi_ddiv+0x38c>)
 8001b42:	4019      	ands	r1, r3
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	468b      	mov	fp, r1
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4453      	add	r3, sl
 8001b4c:	493c      	ldr	r1, [pc, #240]	@ (8001c40 <__aeabi_ddiv+0x390>)
 8001b4e:	428b      	cmp	r3, r1
 8001b50:	dd00      	ble.n	8001b54 <__aeabi_ddiv+0x2a4>
 8001b52:	e71a      	b.n	800198a <__aeabi_ddiv+0xda>
 8001b54:	4659      	mov	r1, fp
 8001b56:	08d2      	lsrs	r2, r2, #3
 8001b58:	0749      	lsls	r1, r1, #29
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	465a      	mov	r2, fp
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	0254      	lsls	r4, r2, #9
 8001b62:	4688      	mov	r8, r1
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	0d5b      	lsrs	r3, r3, #21
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001b6a:	465a      	mov	r2, fp
 8001b6c:	9b00      	ldr	r3, [sp, #0]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x2c4>
 8001b72:	e07e      	b.n	8001c72 <__aeabi_ddiv+0x3c2>
 8001b74:	465b      	mov	r3, fp
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_ddiv+0x2cc>
 8001b7a:	e100      	b.n	8001d7e <__aeabi_ddiv+0x4ce>
 8001b7c:	4658      	mov	r0, fp
 8001b7e:	f001 f9ef 	bl	8002f60 <__clzsi2>
 8001b82:	0002      	movs	r2, r0
 8001b84:	0003      	movs	r3, r0
 8001b86:	3a0b      	subs	r2, #11
 8001b88:	271d      	movs	r7, #29
 8001b8a:	9e00      	ldr	r6, [sp, #0]
 8001b8c:	1aba      	subs	r2, r7, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	4658      	mov	r0, fp
 8001b92:	40d6      	lsrs	r6, r2
 8001b94:	3908      	subs	r1, #8
 8001b96:	4088      	lsls	r0, r1
 8001b98:	0032      	movs	r2, r6
 8001b9a:	4302      	orrs	r2, r0
 8001b9c:	4693      	mov	fp, r2
 8001b9e:	9a00      	ldr	r2, [sp, #0]
 8001ba0:	408a      	lsls	r2, r1
 8001ba2:	4928      	ldr	r1, [pc, #160]	@ (8001c44 <__aeabi_ddiv+0x394>)
 8001ba4:	4453      	add	r3, sl
 8001ba6:	468a      	mov	sl, r1
 8001ba8:	449a      	add	sl, r3
 8001baa:	2300      	movs	r3, #0
 8001bac:	e6c8      	b.n	8001940 <__aeabi_ddiv+0x90>
 8001bae:	465b      	mov	r3, fp
 8001bb0:	4303      	orrs	r3, r0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	d056      	beq.n	8001c64 <__aeabi_ddiv+0x3b4>
 8001bb6:	465b      	mov	r3, fp
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_ddiv+0x30e>
 8001bbc:	e0cd      	b.n	8001d5a <__aeabi_ddiv+0x4aa>
 8001bbe:	4658      	mov	r0, fp
 8001bc0:	f001 f9ce 	bl	8002f60 <__clzsi2>
 8001bc4:	230b      	movs	r3, #11
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	469c      	mov	ip, r3
 8001bca:	0002      	movs	r2, r0
 8001bcc:	4484      	add	ip, r0
 8001bce:	4666      	mov	r6, ip
 8001bd0:	231d      	movs	r3, #29
 8001bd2:	1b9b      	subs	r3, r3, r6
 8001bd4:	0026      	movs	r6, r4
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	4658      	mov	r0, fp
 8001bda:	40de      	lsrs	r6, r3
 8001bdc:	3908      	subs	r1, #8
 8001bde:	4088      	lsls	r0, r1
 8001be0:	0033      	movs	r3, r6
 8001be2:	4303      	orrs	r3, r0
 8001be4:	4699      	mov	r9, r3
 8001be6:	0023      	movs	r3, r4
 8001be8:	408b      	lsls	r3, r1
 8001bea:	4698      	mov	r8, r3
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <__aeabi_ddiv+0x398>)
 8001bee:	2400      	movs	r4, #0
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	469a      	mov	sl, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9303      	str	r3, [sp, #12]
 8001bf8:	e682      	b.n	8001900 <__aeabi_ddiv+0x50>
 8001bfa:	465a      	mov	r2, fp
 8001bfc:	4302      	orrs	r2, r0
 8001bfe:	4691      	mov	r9, r2
 8001c00:	d12a      	bne.n	8001c58 <__aeabi_ddiv+0x3a8>
 8001c02:	2200      	movs	r2, #0
 8001c04:	469a      	mov	sl, r3
 8001c06:	2302      	movs	r3, #2
 8001c08:	4690      	mov	r8, r2
 8001c0a:	2408      	movs	r4, #8
 8001c0c:	9303      	str	r3, [sp, #12]
 8001c0e:	e677      	b.n	8001900 <__aeabi_ddiv+0x50>
 8001c10:	465a      	mov	r2, fp
 8001c12:	9b00      	ldr	r3, [sp, #0]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <__aeabi_ddiv+0x39c>)
 8001c18:	469c      	mov	ip, r3
 8001c1a:	44e2      	add	sl, ip
 8001c1c:	2a00      	cmp	r2, #0
 8001c1e:	d117      	bne.n	8001c50 <__aeabi_ddiv+0x3a0>
 8001c20:	2302      	movs	r3, #2
 8001c22:	431c      	orrs	r4, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	469b      	mov	fp, r3
 8001c28:	3302      	adds	r3, #2
 8001c2a:	e689      	b.n	8001940 <__aeabi_ddiv+0x90>
 8001c2c:	000007ff 	.word	0x000007ff
 8001c30:	fffffc01 	.word	0xfffffc01
 8001c34:	08009b24 	.word	0x08009b24
 8001c38:	000003ff 	.word	0x000003ff
 8001c3c:	feffffff 	.word	0xfeffffff
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	000003f3 	.word	0x000003f3
 8001c48:	fffffc0d 	.word	0xfffffc0d
 8001c4c:	fffff801 	.word	0xfffff801
 8001c50:	2303      	movs	r3, #3
 8001c52:	0032      	movs	r2, r6
 8001c54:	431c      	orrs	r4, r3
 8001c56:	e673      	b.n	8001940 <__aeabi_ddiv+0x90>
 8001c58:	469a      	mov	sl, r3
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	46d9      	mov	r9, fp
 8001c5e:	240c      	movs	r4, #12
 8001c60:	9303      	str	r3, [sp, #12]
 8001c62:	e64d      	b.n	8001900 <__aeabi_ddiv+0x50>
 8001c64:	2300      	movs	r3, #0
 8001c66:	4698      	mov	r8, r3
 8001c68:	469a      	mov	sl, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	2404      	movs	r4, #4
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	e646      	b.n	8001900 <__aeabi_ddiv+0x50>
 8001c72:	2301      	movs	r3, #1
 8001c74:	431c      	orrs	r4, r3
 8001c76:	2300      	movs	r3, #0
 8001c78:	469b      	mov	fp, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	e660      	b.n	8001940 <__aeabi_ddiv+0x90>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2480      	movs	r4, #128	@ 0x80
 8001c82:	4698      	mov	r8, r3
 8001c84:	2600      	movs	r6, #0
 8001c86:	4b92      	ldr	r3, [pc, #584]	@ (8001ed0 <__aeabi_ddiv+0x620>)
 8001c88:	0324      	lsls	r4, r4, #12
 8001c8a:	e671      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4252      	negs	r2, r2
 8001c90:	2101      	movs	r1, #1
 8001c92:	1ac9      	subs	r1, r1, r3
 8001c94:	2938      	cmp	r1, #56	@ 0x38
 8001c96:	dd00      	ble.n	8001c9a <__aeabi_ddiv+0x3ea>
 8001c98:	e666      	b.n	8001968 <__aeabi_ddiv+0xb8>
 8001c9a:	291f      	cmp	r1, #31
 8001c9c:	dc00      	bgt.n	8001ca0 <__aeabi_ddiv+0x3f0>
 8001c9e:	e0ab      	b.n	8001df8 <__aeabi_ddiv+0x548>
 8001ca0:	201f      	movs	r0, #31
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	1ac3      	subs	r3, r0, r3
 8001ca6:	4658      	mov	r0, fp
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	0003      	movs	r3, r0
 8001cac:	2920      	cmp	r1, #32
 8001cae:	d004      	beq.n	8001cba <__aeabi_ddiv+0x40a>
 8001cb0:	4658      	mov	r0, fp
 8001cb2:	4988      	ldr	r1, [pc, #544]	@ (8001ed4 <__aeabi_ddiv+0x624>)
 8001cb4:	4451      	add	r1, sl
 8001cb6:	4088      	lsls	r0, r1
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	1e51      	subs	r1, r2, #1
 8001cbc:	418a      	sbcs	r2, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	4011      	ands	r1, r2
 8001cc8:	4213      	tst	r3, r2
 8001cca:	d00c      	beq.n	8001ce6 <__aeabi_ddiv+0x436>
 8001ccc:	230f      	movs	r3, #15
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0x426>
 8001cd4:	e0f9      	b.n	8001eca <__aeabi_ddiv+0x61a>
 8001cd6:	1d11      	adds	r1, r2, #4
 8001cd8:	4291      	cmp	r1, r2
 8001cda:	419b      	sbcs	r3, r3
 8001cdc:	000a      	movs	r2, r1
 8001cde:	425b      	negs	r3, r3
 8001ce0:	0759      	lsls	r1, r3, #29
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	0b1c      	lsrs	r4, r3, #12
 8001ce6:	08d2      	lsrs	r2, r2, #3
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	4690      	mov	r8, r2
 8001cec:	2300      	movs	r3, #0
 8001cee:	e63f      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001cf0:	2480      	movs	r4, #128	@ 0x80
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	0324      	lsls	r4, r4, #12
 8001cf6:	4223      	tst	r3, r4
 8001cf8:	d009      	beq.n	8001d0e <__aeabi_ddiv+0x45e>
 8001cfa:	465b      	mov	r3, fp
 8001cfc:	4223      	tst	r3, r4
 8001cfe:	d106      	bne.n	8001d0e <__aeabi_ddiv+0x45e>
 8001d00:	431c      	orrs	r4, r3
 8001d02:	0324      	lsls	r4, r4, #12
 8001d04:	002e      	movs	r6, r5
 8001d06:	4690      	mov	r8, r2
 8001d08:	4b71      	ldr	r3, [pc, #452]	@ (8001ed0 <__aeabi_ddiv+0x620>)
 8001d0a:	0b24      	lsrs	r4, r4, #12
 8001d0c:	e630      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001d0e:	2480      	movs	r4, #128	@ 0x80
 8001d10:	464b      	mov	r3, r9
 8001d12:	0324      	lsls	r4, r4, #12
 8001d14:	431c      	orrs	r4, r3
 8001d16:	0324      	lsls	r4, r4, #12
 8001d18:	9e02      	ldr	r6, [sp, #8]
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed0 <__aeabi_ddiv+0x620>)
 8001d1c:	0b24      	lsrs	r4, r4, #12
 8001d1e:	e627      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d100      	bne.n	8001d26 <__aeabi_ddiv+0x476>
 8001d24:	e700      	b.n	8001b28 <__aeabi_ddiv+0x278>
 8001d26:	9800      	ldr	r0, [sp, #0]
 8001d28:	1e51      	subs	r1, r2, #1
 8001d2a:	4684      	mov	ip, r0
 8001d2c:	4464      	add	r4, ip
 8001d2e:	4284      	cmp	r4, r0
 8001d30:	d200      	bcs.n	8001d34 <__aeabi_ddiv+0x484>
 8001d32:	e084      	b.n	8001e3e <__aeabi_ddiv+0x58e>
 8001d34:	42bc      	cmp	r4, r7
 8001d36:	d200      	bcs.n	8001d3a <__aeabi_ddiv+0x48a>
 8001d38:	e0ae      	b.n	8001e98 <__aeabi_ddiv+0x5e8>
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_ddiv+0x48e>
 8001d3c:	e0c1      	b.n	8001ec2 <__aeabi_ddiv+0x612>
 8001d3e:	000a      	movs	r2, r1
 8001d40:	e6f0      	b.n	8001b24 <__aeabi_ddiv+0x274>
 8001d42:	4542      	cmp	r2, r8
 8001d44:	d900      	bls.n	8001d48 <__aeabi_ddiv+0x498>
 8001d46:	e62c      	b.n	80019a2 <__aeabi_ddiv+0xf2>
 8001d48:	464b      	mov	r3, r9
 8001d4a:	07dc      	lsls	r4, r3, #31
 8001d4c:	0858      	lsrs	r0, r3, #1
 8001d4e:	4643      	mov	r3, r8
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	431c      	orrs	r4, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	07df      	lsls	r7, r3, #31
 8001d58:	e62a      	b.n	80019b0 <__aeabi_ddiv+0x100>
 8001d5a:	f001 f901 	bl	8002f60 <__clzsi2>
 8001d5e:	2315      	movs	r3, #21
 8001d60:	469c      	mov	ip, r3
 8001d62:	4484      	add	ip, r0
 8001d64:	0002      	movs	r2, r0
 8001d66:	4663      	mov	r3, ip
 8001d68:	3220      	adds	r2, #32
 8001d6a:	2b1c      	cmp	r3, #28
 8001d6c:	dc00      	bgt.n	8001d70 <__aeabi_ddiv+0x4c0>
 8001d6e:	e72e      	b.n	8001bce <__aeabi_ddiv+0x31e>
 8001d70:	0023      	movs	r3, r4
 8001d72:	3808      	subs	r0, #8
 8001d74:	4083      	lsls	r3, r0
 8001d76:	4699      	mov	r9, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	e736      	b.n	8001bec <__aeabi_ddiv+0x33c>
 8001d7e:	f001 f8ef 	bl	8002f60 <__clzsi2>
 8001d82:	0002      	movs	r2, r0
 8001d84:	0003      	movs	r3, r0
 8001d86:	3215      	adds	r2, #21
 8001d88:	3320      	adds	r3, #32
 8001d8a:	2a1c      	cmp	r2, #28
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_ddiv+0x4e0>
 8001d8e:	e6fb      	b.n	8001b88 <__aeabi_ddiv+0x2d8>
 8001d90:	9900      	ldr	r1, [sp, #0]
 8001d92:	3808      	subs	r0, #8
 8001d94:	4081      	lsls	r1, r0
 8001d96:	2200      	movs	r2, #0
 8001d98:	468b      	mov	fp, r1
 8001d9a:	e702      	b.n	8001ba2 <__aeabi_ddiv+0x2f2>
 8001d9c:	9900      	ldr	r1, [sp, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	468c      	mov	ip, r1
 8001da2:	4464      	add	r4, ip
 8001da4:	42a1      	cmp	r1, r4
 8001da6:	d900      	bls.n	8001daa <__aeabi_ddiv+0x4fa>
 8001da8:	e69a      	b.n	8001ae0 <__aeabi_ddiv+0x230>
 8001daa:	42a2      	cmp	r2, r4
 8001dac:	d800      	bhi.n	8001db0 <__aeabi_ddiv+0x500>
 8001dae:	e697      	b.n	8001ae0 <__aeabi_ddiv+0x230>
 8001db0:	1e83      	subs	r3, r0, #2
 8001db2:	4464      	add	r4, ip
 8001db4:	e694      	b.n	8001ae0 <__aeabi_ddiv+0x230>
 8001db6:	46ac      	mov	ip, r5
 8001db8:	4461      	add	r1, ip
 8001dba:	3f01      	subs	r7, #1
 8001dbc:	428d      	cmp	r5, r1
 8001dbe:	d900      	bls.n	8001dc2 <__aeabi_ddiv+0x512>
 8001dc0:	e680      	b.n	8001ac4 <__aeabi_ddiv+0x214>
 8001dc2:	428a      	cmp	r2, r1
 8001dc4:	d800      	bhi.n	8001dc8 <__aeabi_ddiv+0x518>
 8001dc6:	e67d      	b.n	8001ac4 <__aeabi_ddiv+0x214>
 8001dc8:	1e87      	subs	r7, r0, #2
 8001dca:	4461      	add	r1, ip
 8001dcc:	e67a      	b.n	8001ac4 <__aeabi_ddiv+0x214>
 8001dce:	4285      	cmp	r5, r0
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_ddiv+0x524>
 8001dd2:	e65f      	b.n	8001a94 <__aeabi_ddiv+0x1e4>
 8001dd4:	45b9      	cmp	r9, r7
 8001dd6:	d900      	bls.n	8001dda <__aeabi_ddiv+0x52a>
 8001dd8:	e65c      	b.n	8001a94 <__aeabi_ddiv+0x1e4>
 8001dda:	e656      	b.n	8001a8a <__aeabi_ddiv+0x1da>
 8001ddc:	42a2      	cmp	r2, r4
 8001dde:	d800      	bhi.n	8001de2 <__aeabi_ddiv+0x532>
 8001de0:	e61a      	b.n	8001a18 <__aeabi_ddiv+0x168>
 8001de2:	1e83      	subs	r3, r0, #2
 8001de4:	4464      	add	r4, ip
 8001de6:	e617      	b.n	8001a18 <__aeabi_ddiv+0x168>
 8001de8:	428a      	cmp	r2, r1
 8001dea:	d800      	bhi.n	8001dee <__aeabi_ddiv+0x53e>
 8001dec:	e600      	b.n	80019f0 <__aeabi_ddiv+0x140>
 8001dee:	46ac      	mov	ip, r5
 8001df0:	1e83      	subs	r3, r0, #2
 8001df2:	4698      	mov	r8, r3
 8001df4:	4461      	add	r1, ip
 8001df6:	e5fb      	b.n	80019f0 <__aeabi_ddiv+0x140>
 8001df8:	4837      	ldr	r0, [pc, #220]	@ (8001ed8 <__aeabi_ddiv+0x628>)
 8001dfa:	0014      	movs	r4, r2
 8001dfc:	4450      	add	r0, sl
 8001dfe:	4082      	lsls	r2, r0
 8001e00:	465b      	mov	r3, fp
 8001e02:	0017      	movs	r7, r2
 8001e04:	4083      	lsls	r3, r0
 8001e06:	40cc      	lsrs	r4, r1
 8001e08:	1e7a      	subs	r2, r7, #1
 8001e0a:	4197      	sbcs	r7, r2
 8001e0c:	4323      	orrs	r3, r4
 8001e0e:	433b      	orrs	r3, r7
 8001e10:	001a      	movs	r2, r3
 8001e12:	465b      	mov	r3, fp
 8001e14:	40cb      	lsrs	r3, r1
 8001e16:	0751      	lsls	r1, r2, #29
 8001e18:	d009      	beq.n	8001e2e <__aeabi_ddiv+0x57e>
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	4011      	ands	r1, r2
 8001e1e:	2904      	cmp	r1, #4
 8001e20:	d005      	beq.n	8001e2e <__aeabi_ddiv+0x57e>
 8001e22:	1d11      	adds	r1, r2, #4
 8001e24:	4291      	cmp	r1, r2
 8001e26:	4192      	sbcs	r2, r2
 8001e28:	4252      	negs	r2, r2
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	0219      	lsls	r1, r3, #8
 8001e30:	d400      	bmi.n	8001e34 <__aeabi_ddiv+0x584>
 8001e32:	e755      	b.n	8001ce0 <__aeabi_ddiv+0x430>
 8001e34:	2200      	movs	r2, #0
 8001e36:	2301      	movs	r3, #1
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	e598      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001e3e:	000a      	movs	r2, r1
 8001e40:	42bc      	cmp	r4, r7
 8001e42:	d000      	beq.n	8001e46 <__aeabi_ddiv+0x596>
 8001e44:	e66e      	b.n	8001b24 <__aeabi_ddiv+0x274>
 8001e46:	454b      	cmp	r3, r9
 8001e48:	d000      	beq.n	8001e4c <__aeabi_ddiv+0x59c>
 8001e4a:	e66b      	b.n	8001b24 <__aeabi_ddiv+0x274>
 8001e4c:	e66c      	b.n	8001b28 <__aeabi_ddiv+0x278>
 8001e4e:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <__aeabi_ddiv+0x62c>)
 8001e50:	4a23      	ldr	r2, [pc, #140]	@ (8001ee0 <__aeabi_ddiv+0x630>)
 8001e52:	4453      	add	r3, sl
 8001e54:	4592      	cmp	sl, r2
 8001e56:	da00      	bge.n	8001e5a <__aeabi_ddiv+0x5aa>
 8001e58:	e718      	b.n	8001c8c <__aeabi_ddiv+0x3dc>
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4249      	negs	r1, r1
 8001e5e:	1d0a      	adds	r2, r1, #4
 8001e60:	428a      	cmp	r2, r1
 8001e62:	4189      	sbcs	r1, r1
 8001e64:	4249      	negs	r1, r1
 8001e66:	448b      	add	fp, r1
 8001e68:	e666      	b.n	8001b38 <__aeabi_ddiv+0x288>
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	4011      	ands	r1, r2
 8001e6e:	2904      	cmp	r1, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_ddiv+0x5c4>
 8001e72:	e661      	b.n	8001b38 <__aeabi_ddiv+0x288>
 8001e74:	0011      	movs	r1, r2
 8001e76:	e7f2      	b.n	8001e5e <__aeabi_ddiv+0x5ae>
 8001e78:	42bc      	cmp	r4, r7
 8001e7a:	d800      	bhi.n	8001e7e <__aeabi_ddiv+0x5ce>
 8001e7c:	e60a      	b.n	8001a94 <__aeabi_ddiv+0x1e4>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	425b      	negs	r3, r3
 8001e82:	469c      	mov	ip, r3
 8001e84:	9900      	ldr	r1, [sp, #0]
 8001e86:	444f      	add	r7, r9
 8001e88:	454f      	cmp	r7, r9
 8001e8a:	419b      	sbcs	r3, r3
 8001e8c:	44e3      	add	fp, ip
 8001e8e:	468c      	mov	ip, r1
 8001e90:	425b      	negs	r3, r3
 8001e92:	4463      	add	r3, ip
 8001e94:	18c0      	adds	r0, r0, r3
 8001e96:	e5ff      	b.n	8001a98 <__aeabi_ddiv+0x1e8>
 8001e98:	4649      	mov	r1, r9
 8001e9a:	9d00      	ldr	r5, [sp, #0]
 8001e9c:	0048      	lsls	r0, r1, #1
 8001e9e:	4548      	cmp	r0, r9
 8001ea0:	4189      	sbcs	r1, r1
 8001ea2:	46ac      	mov	ip, r5
 8001ea4:	4249      	negs	r1, r1
 8001ea6:	4461      	add	r1, ip
 8001ea8:	4681      	mov	r9, r0
 8001eaa:	3a02      	subs	r2, #2
 8001eac:	1864      	adds	r4, r4, r1
 8001eae:	e7c7      	b.n	8001e40 <__aeabi_ddiv+0x590>
 8001eb0:	2480      	movs	r4, #128	@ 0x80
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	0324      	lsls	r4, r4, #12
 8001eb6:	431c      	orrs	r4, r3
 8001eb8:	0324      	lsls	r4, r4, #12
 8001eba:	4690      	mov	r8, r2
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <__aeabi_ddiv+0x620>)
 8001ebe:	0b24      	lsrs	r4, r4, #12
 8001ec0:	e556      	b.n	8001970 <__aeabi_ddiv+0xc0>
 8001ec2:	4599      	cmp	r9, r3
 8001ec4:	d3e8      	bcc.n	8001e98 <__aeabi_ddiv+0x5e8>
 8001ec6:	000a      	movs	r2, r1
 8001ec8:	e7bd      	b.n	8001e46 <__aeabi_ddiv+0x596>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e708      	b.n	8001ce0 <__aeabi_ddiv+0x430>
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	0000043e 	.word	0x0000043e
 8001ed8:	0000041e 	.word	0x0000041e
 8001edc:	000003ff 	.word	0x000003ff
 8001ee0:	fffffc02 	.word	0xfffffc02

08001ee4 <__eqdf2>:
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	4657      	mov	r7, sl
 8001ee8:	46de      	mov	lr, fp
 8001eea:	464e      	mov	r6, r9
 8001eec:	4645      	mov	r5, r8
 8001eee:	b5e0      	push	{r5, r6, r7, lr}
 8001ef0:	000d      	movs	r5, r1
 8001ef2:	0004      	movs	r4, r0
 8001ef4:	0fe8      	lsrs	r0, r5, #31
 8001ef6:	4683      	mov	fp, r0
 8001ef8:	0309      	lsls	r1, r1, #12
 8001efa:	0fd8      	lsrs	r0, r3, #31
 8001efc:	0b09      	lsrs	r1, r1, #12
 8001efe:	4682      	mov	sl, r0
 8001f00:	4819      	ldr	r0, [pc, #100]	@ (8001f68 <__eqdf2+0x84>)
 8001f02:	468c      	mov	ip, r1
 8001f04:	031f      	lsls	r7, r3, #12
 8001f06:	0069      	lsls	r1, r5, #1
 8001f08:	005e      	lsls	r6, r3, #1
 8001f0a:	0d49      	lsrs	r1, r1, #21
 8001f0c:	0b3f      	lsrs	r7, r7, #12
 8001f0e:	0d76      	lsrs	r6, r6, #21
 8001f10:	4281      	cmp	r1, r0
 8001f12:	d018      	beq.n	8001f46 <__eqdf2+0x62>
 8001f14:	4286      	cmp	r6, r0
 8001f16:	d00f      	beq.n	8001f38 <__eqdf2+0x54>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	42b1      	cmp	r1, r6
 8001f1c:	d10d      	bne.n	8001f3a <__eqdf2+0x56>
 8001f1e:	45bc      	cmp	ip, r7
 8001f20:	d10b      	bne.n	8001f3a <__eqdf2+0x56>
 8001f22:	4294      	cmp	r4, r2
 8001f24:	d109      	bne.n	8001f3a <__eqdf2+0x56>
 8001f26:	45d3      	cmp	fp, sl
 8001f28:	d01c      	beq.n	8001f64 <__eqdf2+0x80>
 8001f2a:	2900      	cmp	r1, #0
 8001f2c:	d105      	bne.n	8001f3a <__eqdf2+0x56>
 8001f2e:	4660      	mov	r0, ip
 8001f30:	4320      	orrs	r0, r4
 8001f32:	1e43      	subs	r3, r0, #1
 8001f34:	4198      	sbcs	r0, r3
 8001f36:	e000      	b.n	8001f3a <__eqdf2+0x56>
 8001f38:	2001      	movs	r0, #1
 8001f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f3c:	46bb      	mov	fp, r7
 8001f3e:	46b2      	mov	sl, r6
 8001f40:	46a9      	mov	r9, r5
 8001f42:	46a0      	mov	r8, r4
 8001f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f46:	2001      	movs	r0, #1
 8001f48:	428e      	cmp	r6, r1
 8001f4a:	d1f6      	bne.n	8001f3a <__eqdf2+0x56>
 8001f4c:	4661      	mov	r1, ip
 8001f4e:	4339      	orrs	r1, r7
 8001f50:	000f      	movs	r7, r1
 8001f52:	4317      	orrs	r7, r2
 8001f54:	4327      	orrs	r7, r4
 8001f56:	d1f0      	bne.n	8001f3a <__eqdf2+0x56>
 8001f58:	465b      	mov	r3, fp
 8001f5a:	4652      	mov	r2, sl
 8001f5c:	1a98      	subs	r0, r3, r2
 8001f5e:	1e43      	subs	r3, r0, #1
 8001f60:	4198      	sbcs	r0, r3
 8001f62:	e7ea      	b.n	8001f3a <__eqdf2+0x56>
 8001f64:	2000      	movs	r0, #0
 8001f66:	e7e8      	b.n	8001f3a <__eqdf2+0x56>
 8001f68:	000007ff 	.word	0x000007ff

08001f6c <__gedf2>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	4657      	mov	r7, sl
 8001f70:	464e      	mov	r6, r9
 8001f72:	4645      	mov	r5, r8
 8001f74:	46de      	mov	lr, fp
 8001f76:	b5e0      	push	{r5, r6, r7, lr}
 8001f78:	000d      	movs	r5, r1
 8001f7a:	030f      	lsls	r7, r1, #12
 8001f7c:	0b39      	lsrs	r1, r7, #12
 8001f7e:	b083      	sub	sp, #12
 8001f80:	0004      	movs	r4, r0
 8001f82:	4680      	mov	r8, r0
 8001f84:	9101      	str	r1, [sp, #4]
 8001f86:	0058      	lsls	r0, r3, #1
 8001f88:	0fe9      	lsrs	r1, r5, #31
 8001f8a:	4f31      	ldr	r7, [pc, #196]	@ (8002050 <__gedf2+0xe4>)
 8001f8c:	0d40      	lsrs	r0, r0, #21
 8001f8e:	468c      	mov	ip, r1
 8001f90:	006e      	lsls	r6, r5, #1
 8001f92:	0319      	lsls	r1, r3, #12
 8001f94:	4682      	mov	sl, r0
 8001f96:	4691      	mov	r9, r2
 8001f98:	0d76      	lsrs	r6, r6, #21
 8001f9a:	0b09      	lsrs	r1, r1, #12
 8001f9c:	0fd8      	lsrs	r0, r3, #31
 8001f9e:	42be      	cmp	r6, r7
 8001fa0:	d01f      	beq.n	8001fe2 <__gedf2+0x76>
 8001fa2:	45ba      	cmp	sl, r7
 8001fa4:	d00f      	beq.n	8001fc6 <__gedf2+0x5a>
 8001fa6:	2e00      	cmp	r6, #0
 8001fa8:	d12f      	bne.n	800200a <__gedf2+0x9e>
 8001faa:	4655      	mov	r5, sl
 8001fac:	9e01      	ldr	r6, [sp, #4]
 8001fae:	4334      	orrs	r4, r6
 8001fb0:	2d00      	cmp	r5, #0
 8001fb2:	d127      	bne.n	8002004 <__gedf2+0x98>
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	d03a      	beq.n	800202e <__gedf2+0xc2>
 8001fb8:	2c00      	cmp	r4, #0
 8001fba:	d145      	bne.n	8002048 <__gedf2+0xdc>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d11a      	bne.n	8001ff6 <__gedf2+0x8a>
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	4240      	negs	r0, r0
 8001fc4:	e017      	b.n	8001ff6 <__gedf2+0x8a>
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	d13b      	bne.n	8002042 <__gedf2+0xd6>
 8001fca:	2e00      	cmp	r6, #0
 8001fcc:	d102      	bne.n	8001fd4 <__gedf2+0x68>
 8001fce:	9f01      	ldr	r7, [sp, #4]
 8001fd0:	4327      	orrs	r7, r4
 8001fd2:	d0f3      	beq.n	8001fbc <__gedf2+0x50>
 8001fd4:	4584      	cmp	ip, r0
 8001fd6:	d109      	bne.n	8001fec <__gedf2+0x80>
 8001fd8:	4663      	mov	r3, ip
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <__gedf2+0x54>
 8001fde:	4660      	mov	r0, ip
 8001fe0:	e009      	b.n	8001ff6 <__gedf2+0x8a>
 8001fe2:	9f01      	ldr	r7, [sp, #4]
 8001fe4:	4327      	orrs	r7, r4
 8001fe6:	d12c      	bne.n	8002042 <__gedf2+0xd6>
 8001fe8:	45b2      	cmp	sl, r6
 8001fea:	d024      	beq.n	8002036 <__gedf2+0xca>
 8001fec:	4663      	mov	r3, ip
 8001fee:	2002      	movs	r0, #2
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	4018      	ands	r0, r3
 8001ff4:	3801      	subs	r0, #1
 8001ff6:	b003      	add	sp, #12
 8001ff8:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffa:	46bb      	mov	fp, r7
 8001ffc:	46b2      	mov	sl, r6
 8001ffe:	46a9      	mov	r9, r5
 8002000:	46a0      	mov	r8, r4
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002004:	2c00      	cmp	r4, #0
 8002006:	d0d9      	beq.n	8001fbc <__gedf2+0x50>
 8002008:	e7e4      	b.n	8001fd4 <__gedf2+0x68>
 800200a:	4654      	mov	r4, sl
 800200c:	2c00      	cmp	r4, #0
 800200e:	d0ed      	beq.n	8001fec <__gedf2+0x80>
 8002010:	4584      	cmp	ip, r0
 8002012:	d1eb      	bne.n	8001fec <__gedf2+0x80>
 8002014:	4556      	cmp	r6, sl
 8002016:	dce9      	bgt.n	8001fec <__gedf2+0x80>
 8002018:	dbde      	blt.n	8001fd8 <__gedf2+0x6c>
 800201a:	9b01      	ldr	r3, [sp, #4]
 800201c:	428b      	cmp	r3, r1
 800201e:	d8e5      	bhi.n	8001fec <__gedf2+0x80>
 8002020:	d1da      	bne.n	8001fd8 <__gedf2+0x6c>
 8002022:	45c8      	cmp	r8, r9
 8002024:	d8e2      	bhi.n	8001fec <__gedf2+0x80>
 8002026:	2000      	movs	r0, #0
 8002028:	45c8      	cmp	r8, r9
 800202a:	d2e4      	bcs.n	8001ff6 <__gedf2+0x8a>
 800202c:	e7d4      	b.n	8001fd8 <__gedf2+0x6c>
 800202e:	2000      	movs	r0, #0
 8002030:	2c00      	cmp	r4, #0
 8002032:	d0e0      	beq.n	8001ff6 <__gedf2+0x8a>
 8002034:	e7da      	b.n	8001fec <__gedf2+0x80>
 8002036:	4311      	orrs	r1, r2
 8002038:	d103      	bne.n	8002042 <__gedf2+0xd6>
 800203a:	4584      	cmp	ip, r0
 800203c:	d1d6      	bne.n	8001fec <__gedf2+0x80>
 800203e:	2000      	movs	r0, #0
 8002040:	e7d9      	b.n	8001ff6 <__gedf2+0x8a>
 8002042:	2002      	movs	r0, #2
 8002044:	4240      	negs	r0, r0
 8002046:	e7d6      	b.n	8001ff6 <__gedf2+0x8a>
 8002048:	4584      	cmp	ip, r0
 800204a:	d0e6      	beq.n	800201a <__gedf2+0xae>
 800204c:	e7ce      	b.n	8001fec <__gedf2+0x80>
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	000007ff 	.word	0x000007ff

08002054 <__ledf2>:
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	4657      	mov	r7, sl
 8002058:	464e      	mov	r6, r9
 800205a:	4645      	mov	r5, r8
 800205c:	46de      	mov	lr, fp
 800205e:	b5e0      	push	{r5, r6, r7, lr}
 8002060:	000d      	movs	r5, r1
 8002062:	030f      	lsls	r7, r1, #12
 8002064:	0004      	movs	r4, r0
 8002066:	4680      	mov	r8, r0
 8002068:	0fe8      	lsrs	r0, r5, #31
 800206a:	0b39      	lsrs	r1, r7, #12
 800206c:	4684      	mov	ip, r0
 800206e:	b083      	sub	sp, #12
 8002070:	0058      	lsls	r0, r3, #1
 8002072:	4f30      	ldr	r7, [pc, #192]	@ (8002134 <__ledf2+0xe0>)
 8002074:	0d40      	lsrs	r0, r0, #21
 8002076:	9101      	str	r1, [sp, #4]
 8002078:	031e      	lsls	r6, r3, #12
 800207a:	0069      	lsls	r1, r5, #1
 800207c:	4682      	mov	sl, r0
 800207e:	4691      	mov	r9, r2
 8002080:	0d49      	lsrs	r1, r1, #21
 8002082:	0b36      	lsrs	r6, r6, #12
 8002084:	0fd8      	lsrs	r0, r3, #31
 8002086:	42b9      	cmp	r1, r7
 8002088:	d020      	beq.n	80020cc <__ledf2+0x78>
 800208a:	45ba      	cmp	sl, r7
 800208c:	d00f      	beq.n	80020ae <__ledf2+0x5a>
 800208e:	2900      	cmp	r1, #0
 8002090:	d12b      	bne.n	80020ea <__ledf2+0x96>
 8002092:	9901      	ldr	r1, [sp, #4]
 8002094:	430c      	orrs	r4, r1
 8002096:	4651      	mov	r1, sl
 8002098:	2900      	cmp	r1, #0
 800209a:	d137      	bne.n	800210c <__ledf2+0xb8>
 800209c:	4332      	orrs	r2, r6
 800209e:	d038      	beq.n	8002112 <__ledf2+0xbe>
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	d144      	bne.n	800212e <__ledf2+0xda>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d119      	bne.n	80020dc <__ledf2+0x88>
 80020a8:	2001      	movs	r0, #1
 80020aa:	4240      	negs	r0, r0
 80020ac:	e016      	b.n	80020dc <__ledf2+0x88>
 80020ae:	4316      	orrs	r6, r2
 80020b0:	d113      	bne.n	80020da <__ledf2+0x86>
 80020b2:	2900      	cmp	r1, #0
 80020b4:	d102      	bne.n	80020bc <__ledf2+0x68>
 80020b6:	9f01      	ldr	r7, [sp, #4]
 80020b8:	4327      	orrs	r7, r4
 80020ba:	d0f3      	beq.n	80020a4 <__ledf2+0x50>
 80020bc:	4584      	cmp	ip, r0
 80020be:	d020      	beq.n	8002102 <__ledf2+0xae>
 80020c0:	4663      	mov	r3, ip
 80020c2:	2002      	movs	r0, #2
 80020c4:	3b01      	subs	r3, #1
 80020c6:	4018      	ands	r0, r3
 80020c8:	3801      	subs	r0, #1
 80020ca:	e007      	b.n	80020dc <__ledf2+0x88>
 80020cc:	9f01      	ldr	r7, [sp, #4]
 80020ce:	4327      	orrs	r7, r4
 80020d0:	d103      	bne.n	80020da <__ledf2+0x86>
 80020d2:	458a      	cmp	sl, r1
 80020d4:	d1f4      	bne.n	80020c0 <__ledf2+0x6c>
 80020d6:	4316      	orrs	r6, r2
 80020d8:	d01f      	beq.n	800211a <__ledf2+0xc6>
 80020da:	2002      	movs	r0, #2
 80020dc:	b003      	add	sp, #12
 80020de:	bcf0      	pop	{r4, r5, r6, r7}
 80020e0:	46bb      	mov	fp, r7
 80020e2:	46b2      	mov	sl, r6
 80020e4:	46a9      	mov	r9, r5
 80020e6:	46a0      	mov	r8, r4
 80020e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ea:	4654      	mov	r4, sl
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d0e7      	beq.n	80020c0 <__ledf2+0x6c>
 80020f0:	4584      	cmp	ip, r0
 80020f2:	d1e5      	bne.n	80020c0 <__ledf2+0x6c>
 80020f4:	4551      	cmp	r1, sl
 80020f6:	dce3      	bgt.n	80020c0 <__ledf2+0x6c>
 80020f8:	db03      	blt.n	8002102 <__ledf2+0xae>
 80020fa:	9b01      	ldr	r3, [sp, #4]
 80020fc:	42b3      	cmp	r3, r6
 80020fe:	d8df      	bhi.n	80020c0 <__ledf2+0x6c>
 8002100:	d00f      	beq.n	8002122 <__ledf2+0xce>
 8002102:	4663      	mov	r3, ip
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0cf      	beq.n	80020a8 <__ledf2+0x54>
 8002108:	4660      	mov	r0, ip
 800210a:	e7e7      	b.n	80020dc <__ledf2+0x88>
 800210c:	2c00      	cmp	r4, #0
 800210e:	d0c9      	beq.n	80020a4 <__ledf2+0x50>
 8002110:	e7d4      	b.n	80020bc <__ledf2+0x68>
 8002112:	2000      	movs	r0, #0
 8002114:	2c00      	cmp	r4, #0
 8002116:	d0e1      	beq.n	80020dc <__ledf2+0x88>
 8002118:	e7d2      	b.n	80020c0 <__ledf2+0x6c>
 800211a:	4584      	cmp	ip, r0
 800211c:	d1d0      	bne.n	80020c0 <__ledf2+0x6c>
 800211e:	2000      	movs	r0, #0
 8002120:	e7dc      	b.n	80020dc <__ledf2+0x88>
 8002122:	45c8      	cmp	r8, r9
 8002124:	d8cc      	bhi.n	80020c0 <__ledf2+0x6c>
 8002126:	2000      	movs	r0, #0
 8002128:	45c8      	cmp	r8, r9
 800212a:	d2d7      	bcs.n	80020dc <__ledf2+0x88>
 800212c:	e7e9      	b.n	8002102 <__ledf2+0xae>
 800212e:	4584      	cmp	ip, r0
 8002130:	d0e3      	beq.n	80020fa <__ledf2+0xa6>
 8002132:	e7c5      	b.n	80020c0 <__ledf2+0x6c>
 8002134:	000007ff 	.word	0x000007ff

08002138 <__aeabi_dmul>:
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	4657      	mov	r7, sl
 800213c:	46de      	mov	lr, fp
 800213e:	464e      	mov	r6, r9
 8002140:	4645      	mov	r5, r8
 8002142:	b5e0      	push	{r5, r6, r7, lr}
 8002144:	001f      	movs	r7, r3
 8002146:	030b      	lsls	r3, r1, #12
 8002148:	0b1b      	lsrs	r3, r3, #12
 800214a:	0016      	movs	r6, r2
 800214c:	469a      	mov	sl, r3
 800214e:	0fca      	lsrs	r2, r1, #31
 8002150:	004b      	lsls	r3, r1, #1
 8002152:	0004      	movs	r4, r0
 8002154:	4693      	mov	fp, r2
 8002156:	b087      	sub	sp, #28
 8002158:	0d5b      	lsrs	r3, r3, #21
 800215a:	d100      	bne.n	800215e <__aeabi_dmul+0x26>
 800215c:	e0d5      	b.n	800230a <__aeabi_dmul+0x1d2>
 800215e:	4abb      	ldr	r2, [pc, #748]	@ (800244c <__aeabi_dmul+0x314>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d100      	bne.n	8002166 <__aeabi_dmul+0x2e>
 8002164:	e0f8      	b.n	8002358 <__aeabi_dmul+0x220>
 8002166:	4651      	mov	r1, sl
 8002168:	0f42      	lsrs	r2, r0, #29
 800216a:	00c9      	lsls	r1, r1, #3
 800216c:	430a      	orrs	r2, r1
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	0409      	lsls	r1, r1, #16
 8002172:	4311      	orrs	r1, r2
 8002174:	00c2      	lsls	r2, r0, #3
 8002176:	4691      	mov	r9, r2
 8002178:	4ab5      	ldr	r2, [pc, #724]	@ (8002450 <__aeabi_dmul+0x318>)
 800217a:	468a      	mov	sl, r1
 800217c:	189d      	adds	r5, r3, r2
 800217e:	2300      	movs	r3, #0
 8002180:	4698      	mov	r8, r3
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	033c      	lsls	r4, r7, #12
 8002186:	007b      	lsls	r3, r7, #1
 8002188:	0ffa      	lsrs	r2, r7, #31
 800218a:	0030      	movs	r0, r6
 800218c:	0b24      	lsrs	r4, r4, #12
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	9200      	str	r2, [sp, #0]
 8002192:	d100      	bne.n	8002196 <__aeabi_dmul+0x5e>
 8002194:	e096      	b.n	80022c4 <__aeabi_dmul+0x18c>
 8002196:	4aad      	ldr	r2, [pc, #692]	@ (800244c <__aeabi_dmul+0x314>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d031      	beq.n	8002200 <__aeabi_dmul+0xc8>
 800219c:	0f72      	lsrs	r2, r6, #29
 800219e:	00e4      	lsls	r4, r4, #3
 80021a0:	4322      	orrs	r2, r4
 80021a2:	2480      	movs	r4, #128	@ 0x80
 80021a4:	0424      	lsls	r4, r4, #16
 80021a6:	4314      	orrs	r4, r2
 80021a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002450 <__aeabi_dmul+0x318>)
 80021aa:	00f0      	lsls	r0, r6, #3
 80021ac:	4694      	mov	ip, r2
 80021ae:	4463      	add	r3, ip
 80021b0:	195b      	adds	r3, r3, r5
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	9201      	str	r2, [sp, #4]
 80021b6:	4642      	mov	r2, r8
 80021b8:	2600      	movs	r6, #0
 80021ba:	2a0a      	cmp	r2, #10
 80021bc:	dc42      	bgt.n	8002244 <__aeabi_dmul+0x10c>
 80021be:	465a      	mov	r2, fp
 80021c0:	9900      	ldr	r1, [sp, #0]
 80021c2:	404a      	eors	r2, r1
 80021c4:	4693      	mov	fp, r2
 80021c6:	4642      	mov	r2, r8
 80021c8:	2a02      	cmp	r2, #2
 80021ca:	dc32      	bgt.n	8002232 <__aeabi_dmul+0xfa>
 80021cc:	3a01      	subs	r2, #1
 80021ce:	2a01      	cmp	r2, #1
 80021d0:	d900      	bls.n	80021d4 <__aeabi_dmul+0x9c>
 80021d2:	e149      	b.n	8002468 <__aeabi_dmul+0x330>
 80021d4:	2e02      	cmp	r6, #2
 80021d6:	d100      	bne.n	80021da <__aeabi_dmul+0xa2>
 80021d8:	e0ca      	b.n	8002370 <__aeabi_dmul+0x238>
 80021da:	2e01      	cmp	r6, #1
 80021dc:	d13d      	bne.n	800225a <__aeabi_dmul+0x122>
 80021de:	2300      	movs	r3, #0
 80021e0:	2400      	movs	r4, #0
 80021e2:	2200      	movs	r2, #0
 80021e4:	0010      	movs	r0, r2
 80021e6:	465a      	mov	r2, fp
 80021e8:	051b      	lsls	r3, r3, #20
 80021ea:	4323      	orrs	r3, r4
 80021ec:	07d2      	lsls	r2, r2, #31
 80021ee:	4313      	orrs	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	b007      	add	sp, #28
 80021f4:	bcf0      	pop	{r4, r5, r6, r7}
 80021f6:	46bb      	mov	fp, r7
 80021f8:	46b2      	mov	sl, r6
 80021fa:	46a9      	mov	r9, r5
 80021fc:	46a0      	mov	r8, r4
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002200:	4b92      	ldr	r3, [pc, #584]	@ (800244c <__aeabi_dmul+0x314>)
 8002202:	4326      	orrs	r6, r4
 8002204:	18eb      	adds	r3, r5, r3
 8002206:	2e00      	cmp	r6, #0
 8002208:	d100      	bne.n	800220c <__aeabi_dmul+0xd4>
 800220a:	e0bb      	b.n	8002384 <__aeabi_dmul+0x24c>
 800220c:	2203      	movs	r2, #3
 800220e:	4641      	mov	r1, r8
 8002210:	4311      	orrs	r1, r2
 8002212:	465a      	mov	r2, fp
 8002214:	4688      	mov	r8, r1
 8002216:	9900      	ldr	r1, [sp, #0]
 8002218:	404a      	eors	r2, r1
 800221a:	2180      	movs	r1, #128	@ 0x80
 800221c:	0109      	lsls	r1, r1, #4
 800221e:	468c      	mov	ip, r1
 8002220:	0029      	movs	r1, r5
 8002222:	4461      	add	r1, ip
 8002224:	9101      	str	r1, [sp, #4]
 8002226:	4641      	mov	r1, r8
 8002228:	290a      	cmp	r1, #10
 800222a:	dd00      	ble.n	800222e <__aeabi_dmul+0xf6>
 800222c:	e233      	b.n	8002696 <__aeabi_dmul+0x55e>
 800222e:	4693      	mov	fp, r2
 8002230:	2603      	movs	r6, #3
 8002232:	4642      	mov	r2, r8
 8002234:	2701      	movs	r7, #1
 8002236:	4097      	lsls	r7, r2
 8002238:	21a6      	movs	r1, #166	@ 0xa6
 800223a:	003a      	movs	r2, r7
 800223c:	00c9      	lsls	r1, r1, #3
 800223e:	400a      	ands	r2, r1
 8002240:	420f      	tst	r7, r1
 8002242:	d031      	beq.n	80022a8 <__aeabi_dmul+0x170>
 8002244:	9e02      	ldr	r6, [sp, #8]
 8002246:	2e02      	cmp	r6, #2
 8002248:	d100      	bne.n	800224c <__aeabi_dmul+0x114>
 800224a:	e235      	b.n	80026b8 <__aeabi_dmul+0x580>
 800224c:	2e03      	cmp	r6, #3
 800224e:	d100      	bne.n	8002252 <__aeabi_dmul+0x11a>
 8002250:	e1d2      	b.n	80025f8 <__aeabi_dmul+0x4c0>
 8002252:	4654      	mov	r4, sl
 8002254:	4648      	mov	r0, r9
 8002256:	2e01      	cmp	r6, #1
 8002258:	d0c1      	beq.n	80021de <__aeabi_dmul+0xa6>
 800225a:	9a01      	ldr	r2, [sp, #4]
 800225c:	4b7d      	ldr	r3, [pc, #500]	@ (8002454 <__aeabi_dmul+0x31c>)
 800225e:	4694      	mov	ip, r2
 8002260:	4463      	add	r3, ip
 8002262:	2b00      	cmp	r3, #0
 8002264:	dc00      	bgt.n	8002268 <__aeabi_dmul+0x130>
 8002266:	e0c0      	b.n	80023ea <__aeabi_dmul+0x2b2>
 8002268:	0742      	lsls	r2, r0, #29
 800226a:	d009      	beq.n	8002280 <__aeabi_dmul+0x148>
 800226c:	220f      	movs	r2, #15
 800226e:	4002      	ands	r2, r0
 8002270:	2a04      	cmp	r2, #4
 8002272:	d005      	beq.n	8002280 <__aeabi_dmul+0x148>
 8002274:	1d02      	adds	r2, r0, #4
 8002276:	4282      	cmp	r2, r0
 8002278:	4180      	sbcs	r0, r0
 800227a:	4240      	negs	r0, r0
 800227c:	1824      	adds	r4, r4, r0
 800227e:	0010      	movs	r0, r2
 8002280:	01e2      	lsls	r2, r4, #7
 8002282:	d506      	bpl.n	8002292 <__aeabi_dmul+0x15a>
 8002284:	4b74      	ldr	r3, [pc, #464]	@ (8002458 <__aeabi_dmul+0x320>)
 8002286:	9a01      	ldr	r2, [sp, #4]
 8002288:	401c      	ands	r4, r3
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	4694      	mov	ip, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4463      	add	r3, ip
 8002292:	4a72      	ldr	r2, [pc, #456]	@ (800245c <__aeabi_dmul+0x324>)
 8002294:	4293      	cmp	r3, r2
 8002296:	dc6b      	bgt.n	8002370 <__aeabi_dmul+0x238>
 8002298:	0762      	lsls	r2, r4, #29
 800229a:	08c0      	lsrs	r0, r0, #3
 800229c:	0264      	lsls	r4, r4, #9
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4302      	orrs	r2, r0
 80022a2:	0b24      	lsrs	r4, r4, #12
 80022a4:	0d5b      	lsrs	r3, r3, #21
 80022a6:	e79d      	b.n	80021e4 <__aeabi_dmul+0xac>
 80022a8:	2190      	movs	r1, #144	@ 0x90
 80022aa:	0089      	lsls	r1, r1, #2
 80022ac:	420f      	tst	r7, r1
 80022ae:	d163      	bne.n	8002378 <__aeabi_dmul+0x240>
 80022b0:	2288      	movs	r2, #136	@ 0x88
 80022b2:	423a      	tst	r2, r7
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dmul+0x180>
 80022b6:	e0d7      	b.n	8002468 <__aeabi_dmul+0x330>
 80022b8:	9b00      	ldr	r3, [sp, #0]
 80022ba:	46a2      	mov	sl, r4
 80022bc:	469b      	mov	fp, r3
 80022be:	4681      	mov	r9, r0
 80022c0:	9602      	str	r6, [sp, #8]
 80022c2:	e7bf      	b.n	8002244 <__aeabi_dmul+0x10c>
 80022c4:	0023      	movs	r3, r4
 80022c6:	4333      	orrs	r3, r6
 80022c8:	d100      	bne.n	80022cc <__aeabi_dmul+0x194>
 80022ca:	e07f      	b.n	80023cc <__aeabi_dmul+0x294>
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dmul+0x19a>
 80022d0:	e1ad      	b.n	800262e <__aeabi_dmul+0x4f6>
 80022d2:	0020      	movs	r0, r4
 80022d4:	f000 fe44 	bl	8002f60 <__clzsi2>
 80022d8:	0002      	movs	r2, r0
 80022da:	0003      	movs	r3, r0
 80022dc:	3a0b      	subs	r2, #11
 80022de:	201d      	movs	r0, #29
 80022e0:	0019      	movs	r1, r3
 80022e2:	1a82      	subs	r2, r0, r2
 80022e4:	0030      	movs	r0, r6
 80022e6:	3908      	subs	r1, #8
 80022e8:	40d0      	lsrs	r0, r2
 80022ea:	408c      	lsls	r4, r1
 80022ec:	4304      	orrs	r4, r0
 80022ee:	0030      	movs	r0, r6
 80022f0:	4088      	lsls	r0, r1
 80022f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002460 <__aeabi_dmul+0x328>)
 80022f4:	1aeb      	subs	r3, r5, r3
 80022f6:	4694      	mov	ip, r2
 80022f8:	4463      	add	r3, ip
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	9201      	str	r2, [sp, #4]
 80022fe:	4642      	mov	r2, r8
 8002300:	2600      	movs	r6, #0
 8002302:	2a0a      	cmp	r2, #10
 8002304:	dc00      	bgt.n	8002308 <__aeabi_dmul+0x1d0>
 8002306:	e75a      	b.n	80021be <__aeabi_dmul+0x86>
 8002308:	e79c      	b.n	8002244 <__aeabi_dmul+0x10c>
 800230a:	4653      	mov	r3, sl
 800230c:	4303      	orrs	r3, r0
 800230e:	4699      	mov	r9, r3
 8002310:	d054      	beq.n	80023bc <__aeabi_dmul+0x284>
 8002312:	4653      	mov	r3, sl
 8002314:	2b00      	cmp	r3, #0
 8002316:	d100      	bne.n	800231a <__aeabi_dmul+0x1e2>
 8002318:	e177      	b.n	800260a <__aeabi_dmul+0x4d2>
 800231a:	4650      	mov	r0, sl
 800231c:	f000 fe20 	bl	8002f60 <__clzsi2>
 8002320:	230b      	movs	r3, #11
 8002322:	425b      	negs	r3, r3
 8002324:	469c      	mov	ip, r3
 8002326:	0002      	movs	r2, r0
 8002328:	4484      	add	ip, r0
 800232a:	0011      	movs	r1, r2
 800232c:	4650      	mov	r0, sl
 800232e:	3908      	subs	r1, #8
 8002330:	4088      	lsls	r0, r1
 8002332:	231d      	movs	r3, #29
 8002334:	4680      	mov	r8, r0
 8002336:	4660      	mov	r0, ip
 8002338:	1a1b      	subs	r3, r3, r0
 800233a:	0020      	movs	r0, r4
 800233c:	40d8      	lsrs	r0, r3
 800233e:	0003      	movs	r3, r0
 8002340:	4640      	mov	r0, r8
 8002342:	4303      	orrs	r3, r0
 8002344:	469a      	mov	sl, r3
 8002346:	0023      	movs	r3, r4
 8002348:	408b      	lsls	r3, r1
 800234a:	4699      	mov	r9, r3
 800234c:	2300      	movs	r3, #0
 800234e:	4d44      	ldr	r5, [pc, #272]	@ (8002460 <__aeabi_dmul+0x328>)
 8002350:	4698      	mov	r8, r3
 8002352:	1aad      	subs	r5, r5, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	e715      	b.n	8002184 <__aeabi_dmul+0x4c>
 8002358:	4652      	mov	r2, sl
 800235a:	4302      	orrs	r2, r0
 800235c:	4691      	mov	r9, r2
 800235e:	d126      	bne.n	80023ae <__aeabi_dmul+0x276>
 8002360:	2200      	movs	r2, #0
 8002362:	001d      	movs	r5, r3
 8002364:	2302      	movs	r3, #2
 8002366:	4692      	mov	sl, r2
 8002368:	3208      	adds	r2, #8
 800236a:	4690      	mov	r8, r2
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	e709      	b.n	8002184 <__aeabi_dmul+0x4c>
 8002370:	2400      	movs	r4, #0
 8002372:	2200      	movs	r2, #0
 8002374:	4b35      	ldr	r3, [pc, #212]	@ (800244c <__aeabi_dmul+0x314>)
 8002376:	e735      	b.n	80021e4 <__aeabi_dmul+0xac>
 8002378:	2300      	movs	r3, #0
 800237a:	2480      	movs	r4, #128	@ 0x80
 800237c:	469b      	mov	fp, r3
 800237e:	0324      	lsls	r4, r4, #12
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <__aeabi_dmul+0x314>)
 8002382:	e72f      	b.n	80021e4 <__aeabi_dmul+0xac>
 8002384:	2202      	movs	r2, #2
 8002386:	4641      	mov	r1, r8
 8002388:	4311      	orrs	r1, r2
 800238a:	2280      	movs	r2, #128	@ 0x80
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	4694      	mov	ip, r2
 8002390:	002a      	movs	r2, r5
 8002392:	4462      	add	r2, ip
 8002394:	4688      	mov	r8, r1
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	290a      	cmp	r1, #10
 800239a:	dd00      	ble.n	800239e <__aeabi_dmul+0x266>
 800239c:	e752      	b.n	8002244 <__aeabi_dmul+0x10c>
 800239e:	465a      	mov	r2, fp
 80023a0:	2000      	movs	r0, #0
 80023a2:	9900      	ldr	r1, [sp, #0]
 80023a4:	0004      	movs	r4, r0
 80023a6:	404a      	eors	r2, r1
 80023a8:	4693      	mov	fp, r2
 80023aa:	2602      	movs	r6, #2
 80023ac:	e70b      	b.n	80021c6 <__aeabi_dmul+0x8e>
 80023ae:	220c      	movs	r2, #12
 80023b0:	001d      	movs	r5, r3
 80023b2:	2303      	movs	r3, #3
 80023b4:	4681      	mov	r9, r0
 80023b6:	4690      	mov	r8, r2
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	e6e3      	b.n	8002184 <__aeabi_dmul+0x4c>
 80023bc:	2300      	movs	r3, #0
 80023be:	469a      	mov	sl, r3
 80023c0:	3304      	adds	r3, #4
 80023c2:	4698      	mov	r8, r3
 80023c4:	3b03      	subs	r3, #3
 80023c6:	2500      	movs	r5, #0
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	e6db      	b.n	8002184 <__aeabi_dmul+0x4c>
 80023cc:	4642      	mov	r2, r8
 80023ce:	3301      	adds	r3, #1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	002b      	movs	r3, r5
 80023d4:	4690      	mov	r8, r2
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	9201      	str	r2, [sp, #4]
 80023da:	4642      	mov	r2, r8
 80023dc:	2400      	movs	r4, #0
 80023de:	2000      	movs	r0, #0
 80023e0:	2601      	movs	r6, #1
 80023e2:	2a0a      	cmp	r2, #10
 80023e4:	dc00      	bgt.n	80023e8 <__aeabi_dmul+0x2b0>
 80023e6:	e6ea      	b.n	80021be <__aeabi_dmul+0x86>
 80023e8:	e72c      	b.n	8002244 <__aeabi_dmul+0x10c>
 80023ea:	2201      	movs	r2, #1
 80023ec:	1ad2      	subs	r2, r2, r3
 80023ee:	2a38      	cmp	r2, #56	@ 0x38
 80023f0:	dd00      	ble.n	80023f4 <__aeabi_dmul+0x2bc>
 80023f2:	e6f4      	b.n	80021de <__aeabi_dmul+0xa6>
 80023f4:	2a1f      	cmp	r2, #31
 80023f6:	dc00      	bgt.n	80023fa <__aeabi_dmul+0x2c2>
 80023f8:	e12a      	b.n	8002650 <__aeabi_dmul+0x518>
 80023fa:	211f      	movs	r1, #31
 80023fc:	4249      	negs	r1, r1
 80023fe:	1acb      	subs	r3, r1, r3
 8002400:	0021      	movs	r1, r4
 8002402:	40d9      	lsrs	r1, r3
 8002404:	000b      	movs	r3, r1
 8002406:	2a20      	cmp	r2, #32
 8002408:	d005      	beq.n	8002416 <__aeabi_dmul+0x2de>
 800240a:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <__aeabi_dmul+0x32c>)
 800240c:	9d01      	ldr	r5, [sp, #4]
 800240e:	4694      	mov	ip, r2
 8002410:	4465      	add	r5, ip
 8002412:	40ac      	lsls	r4, r5
 8002414:	4320      	orrs	r0, r4
 8002416:	1e42      	subs	r2, r0, #1
 8002418:	4190      	sbcs	r0, r2
 800241a:	4318      	orrs	r0, r3
 800241c:	2307      	movs	r3, #7
 800241e:	0019      	movs	r1, r3
 8002420:	2400      	movs	r4, #0
 8002422:	4001      	ands	r1, r0
 8002424:	4203      	tst	r3, r0
 8002426:	d00c      	beq.n	8002442 <__aeabi_dmul+0x30a>
 8002428:	230f      	movs	r3, #15
 800242a:	4003      	ands	r3, r0
 800242c:	2b04      	cmp	r3, #4
 800242e:	d100      	bne.n	8002432 <__aeabi_dmul+0x2fa>
 8002430:	e140      	b.n	80026b4 <__aeabi_dmul+0x57c>
 8002432:	1d03      	adds	r3, r0, #4
 8002434:	4283      	cmp	r3, r0
 8002436:	41a4      	sbcs	r4, r4
 8002438:	0018      	movs	r0, r3
 800243a:	4264      	negs	r4, r4
 800243c:	0761      	lsls	r1, r4, #29
 800243e:	0264      	lsls	r4, r4, #9
 8002440:	0b24      	lsrs	r4, r4, #12
 8002442:	08c2      	lsrs	r2, r0, #3
 8002444:	2300      	movs	r3, #0
 8002446:	430a      	orrs	r2, r1
 8002448:	e6cc      	b.n	80021e4 <__aeabi_dmul+0xac>
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	000007ff 	.word	0x000007ff
 8002450:	fffffc01 	.word	0xfffffc01
 8002454:	000003ff 	.word	0x000003ff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	000007fe 	.word	0x000007fe
 8002460:	fffffc0d 	.word	0xfffffc0d
 8002464:	0000043e 	.word	0x0000043e
 8002468:	4649      	mov	r1, r9
 800246a:	464a      	mov	r2, r9
 800246c:	0409      	lsls	r1, r1, #16
 800246e:	0c09      	lsrs	r1, r1, #16
 8002470:	000d      	movs	r5, r1
 8002472:	0c16      	lsrs	r6, r2, #16
 8002474:	0c02      	lsrs	r2, r0, #16
 8002476:	0400      	lsls	r0, r0, #16
 8002478:	0c00      	lsrs	r0, r0, #16
 800247a:	4345      	muls	r5, r0
 800247c:	46ac      	mov	ip, r5
 800247e:	0005      	movs	r5, r0
 8002480:	4375      	muls	r5, r6
 8002482:	46a8      	mov	r8, r5
 8002484:	0015      	movs	r5, r2
 8002486:	000f      	movs	r7, r1
 8002488:	4375      	muls	r5, r6
 800248a:	9200      	str	r2, [sp, #0]
 800248c:	9502      	str	r5, [sp, #8]
 800248e:	002a      	movs	r2, r5
 8002490:	9d00      	ldr	r5, [sp, #0]
 8002492:	436f      	muls	r7, r5
 8002494:	4665      	mov	r5, ip
 8002496:	0c2d      	lsrs	r5, r5, #16
 8002498:	46a9      	mov	r9, r5
 800249a:	4447      	add	r7, r8
 800249c:	444f      	add	r7, r9
 800249e:	45b8      	cmp	r8, r7
 80024a0:	d905      	bls.n	80024ae <__aeabi_dmul+0x376>
 80024a2:	0015      	movs	r5, r2
 80024a4:	2280      	movs	r2, #128	@ 0x80
 80024a6:	0252      	lsls	r2, r2, #9
 80024a8:	4690      	mov	r8, r2
 80024aa:	4445      	add	r5, r8
 80024ac:	9502      	str	r5, [sp, #8]
 80024ae:	0c3d      	lsrs	r5, r7, #16
 80024b0:	9503      	str	r5, [sp, #12]
 80024b2:	4665      	mov	r5, ip
 80024b4:	042d      	lsls	r5, r5, #16
 80024b6:	043f      	lsls	r7, r7, #16
 80024b8:	0c2d      	lsrs	r5, r5, #16
 80024ba:	46ac      	mov	ip, r5
 80024bc:	003d      	movs	r5, r7
 80024be:	4465      	add	r5, ip
 80024c0:	9504      	str	r5, [sp, #16]
 80024c2:	0c25      	lsrs	r5, r4, #16
 80024c4:	0424      	lsls	r4, r4, #16
 80024c6:	0c24      	lsrs	r4, r4, #16
 80024c8:	46ac      	mov	ip, r5
 80024ca:	0025      	movs	r5, r4
 80024cc:	4375      	muls	r5, r6
 80024ce:	46a8      	mov	r8, r5
 80024d0:	4665      	mov	r5, ip
 80024d2:	000f      	movs	r7, r1
 80024d4:	4369      	muls	r1, r5
 80024d6:	4441      	add	r1, r8
 80024d8:	4689      	mov	r9, r1
 80024da:	4367      	muls	r7, r4
 80024dc:	0c39      	lsrs	r1, r7, #16
 80024de:	4449      	add	r1, r9
 80024e0:	436e      	muls	r6, r5
 80024e2:	4588      	cmp	r8, r1
 80024e4:	d903      	bls.n	80024ee <__aeabi_dmul+0x3b6>
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	0252      	lsls	r2, r2, #9
 80024ea:	4690      	mov	r8, r2
 80024ec:	4446      	add	r6, r8
 80024ee:	0c0d      	lsrs	r5, r1, #16
 80024f0:	46a8      	mov	r8, r5
 80024f2:	0035      	movs	r5, r6
 80024f4:	4445      	add	r5, r8
 80024f6:	9505      	str	r5, [sp, #20]
 80024f8:	9d03      	ldr	r5, [sp, #12]
 80024fa:	043f      	lsls	r7, r7, #16
 80024fc:	46a8      	mov	r8, r5
 80024fe:	0c3f      	lsrs	r7, r7, #16
 8002500:	0409      	lsls	r1, r1, #16
 8002502:	19c9      	adds	r1, r1, r7
 8002504:	4488      	add	r8, r1
 8002506:	4645      	mov	r5, r8
 8002508:	9503      	str	r5, [sp, #12]
 800250a:	4655      	mov	r5, sl
 800250c:	042e      	lsls	r6, r5, #16
 800250e:	0c36      	lsrs	r6, r6, #16
 8002510:	0c2f      	lsrs	r7, r5, #16
 8002512:	0035      	movs	r5, r6
 8002514:	4345      	muls	r5, r0
 8002516:	4378      	muls	r0, r7
 8002518:	4681      	mov	r9, r0
 800251a:	0038      	movs	r0, r7
 800251c:	46a8      	mov	r8, r5
 800251e:	0c2d      	lsrs	r5, r5, #16
 8002520:	46aa      	mov	sl, r5
 8002522:	9a00      	ldr	r2, [sp, #0]
 8002524:	4350      	muls	r0, r2
 8002526:	4372      	muls	r2, r6
 8002528:	444a      	add	r2, r9
 800252a:	4452      	add	r2, sl
 800252c:	4591      	cmp	r9, r2
 800252e:	d903      	bls.n	8002538 <__aeabi_dmul+0x400>
 8002530:	2580      	movs	r5, #128	@ 0x80
 8002532:	026d      	lsls	r5, r5, #9
 8002534:	46a9      	mov	r9, r5
 8002536:	4448      	add	r0, r9
 8002538:	0c15      	lsrs	r5, r2, #16
 800253a:	46a9      	mov	r9, r5
 800253c:	4645      	mov	r5, r8
 800253e:	042d      	lsls	r5, r5, #16
 8002540:	0c2d      	lsrs	r5, r5, #16
 8002542:	46a8      	mov	r8, r5
 8002544:	4665      	mov	r5, ip
 8002546:	437d      	muls	r5, r7
 8002548:	0412      	lsls	r2, r2, #16
 800254a:	4448      	add	r0, r9
 800254c:	4490      	add	r8, r2
 800254e:	46a9      	mov	r9, r5
 8002550:	0032      	movs	r2, r6
 8002552:	4665      	mov	r5, ip
 8002554:	4362      	muls	r2, r4
 8002556:	436e      	muls	r6, r5
 8002558:	437c      	muls	r4, r7
 800255a:	0c17      	lsrs	r7, r2, #16
 800255c:	1936      	adds	r6, r6, r4
 800255e:	19bf      	adds	r7, r7, r6
 8002560:	42bc      	cmp	r4, r7
 8002562:	d903      	bls.n	800256c <__aeabi_dmul+0x434>
 8002564:	2480      	movs	r4, #128	@ 0x80
 8002566:	0264      	lsls	r4, r4, #9
 8002568:	46a4      	mov	ip, r4
 800256a:	44e1      	add	r9, ip
 800256c:	9c02      	ldr	r4, [sp, #8]
 800256e:	9e03      	ldr	r6, [sp, #12]
 8002570:	46a4      	mov	ip, r4
 8002572:	9d05      	ldr	r5, [sp, #20]
 8002574:	4466      	add	r6, ip
 8002576:	428e      	cmp	r6, r1
 8002578:	4189      	sbcs	r1, r1
 800257a:	46ac      	mov	ip, r5
 800257c:	0412      	lsls	r2, r2, #16
 800257e:	043c      	lsls	r4, r7, #16
 8002580:	0c12      	lsrs	r2, r2, #16
 8002582:	18a2      	adds	r2, r4, r2
 8002584:	4462      	add	r2, ip
 8002586:	4249      	negs	r1, r1
 8002588:	1854      	adds	r4, r2, r1
 800258a:	4446      	add	r6, r8
 800258c:	46a4      	mov	ip, r4
 800258e:	4546      	cmp	r6, r8
 8002590:	41a4      	sbcs	r4, r4
 8002592:	4682      	mov	sl, r0
 8002594:	4264      	negs	r4, r4
 8002596:	46a0      	mov	r8, r4
 8002598:	42aa      	cmp	r2, r5
 800259a:	4192      	sbcs	r2, r2
 800259c:	458c      	cmp	ip, r1
 800259e:	4189      	sbcs	r1, r1
 80025a0:	44e2      	add	sl, ip
 80025a2:	44d0      	add	r8, sl
 80025a4:	4249      	negs	r1, r1
 80025a6:	4252      	negs	r2, r2
 80025a8:	430a      	orrs	r2, r1
 80025aa:	45a0      	cmp	r8, r4
 80025ac:	41a4      	sbcs	r4, r4
 80025ae:	4582      	cmp	sl, r0
 80025b0:	4189      	sbcs	r1, r1
 80025b2:	4264      	negs	r4, r4
 80025b4:	4249      	negs	r1, r1
 80025b6:	430c      	orrs	r4, r1
 80025b8:	4641      	mov	r1, r8
 80025ba:	0c3f      	lsrs	r7, r7, #16
 80025bc:	19d2      	adds	r2, r2, r7
 80025be:	1912      	adds	r2, r2, r4
 80025c0:	0dcc      	lsrs	r4, r1, #23
 80025c2:	9904      	ldr	r1, [sp, #16]
 80025c4:	0270      	lsls	r0, r6, #9
 80025c6:	4308      	orrs	r0, r1
 80025c8:	1e41      	subs	r1, r0, #1
 80025ca:	4188      	sbcs	r0, r1
 80025cc:	4641      	mov	r1, r8
 80025ce:	444a      	add	r2, r9
 80025d0:	0df6      	lsrs	r6, r6, #23
 80025d2:	0252      	lsls	r2, r2, #9
 80025d4:	4330      	orrs	r0, r6
 80025d6:	0249      	lsls	r1, r1, #9
 80025d8:	4314      	orrs	r4, r2
 80025da:	4308      	orrs	r0, r1
 80025dc:	01d2      	lsls	r2, r2, #7
 80025de:	d535      	bpl.n	800264c <__aeabi_dmul+0x514>
 80025e0:	2201      	movs	r2, #1
 80025e2:	0843      	lsrs	r3, r0, #1
 80025e4:	4002      	ands	r2, r0
 80025e6:	4313      	orrs	r3, r2
 80025e8:	07e0      	lsls	r0, r4, #31
 80025ea:	4318      	orrs	r0, r3
 80025ec:	0864      	lsrs	r4, r4, #1
 80025ee:	e634      	b.n	800225a <__aeabi_dmul+0x122>
 80025f0:	9b00      	ldr	r3, [sp, #0]
 80025f2:	46a2      	mov	sl, r4
 80025f4:	469b      	mov	fp, r3
 80025f6:	4681      	mov	r9, r0
 80025f8:	2480      	movs	r4, #128	@ 0x80
 80025fa:	4653      	mov	r3, sl
 80025fc:	0324      	lsls	r4, r4, #12
 80025fe:	431c      	orrs	r4, r3
 8002600:	0324      	lsls	r4, r4, #12
 8002602:	464a      	mov	r2, r9
 8002604:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <__aeabi_dmul+0x588>)
 8002606:	0b24      	lsrs	r4, r4, #12
 8002608:	e5ec      	b.n	80021e4 <__aeabi_dmul+0xac>
 800260a:	f000 fca9 	bl	8002f60 <__clzsi2>
 800260e:	2315      	movs	r3, #21
 8002610:	469c      	mov	ip, r3
 8002612:	4484      	add	ip, r0
 8002614:	0002      	movs	r2, r0
 8002616:	4663      	mov	r3, ip
 8002618:	3220      	adds	r2, #32
 800261a:	2b1c      	cmp	r3, #28
 800261c:	dc00      	bgt.n	8002620 <__aeabi_dmul+0x4e8>
 800261e:	e684      	b.n	800232a <__aeabi_dmul+0x1f2>
 8002620:	2300      	movs	r3, #0
 8002622:	4699      	mov	r9, r3
 8002624:	0023      	movs	r3, r4
 8002626:	3808      	subs	r0, #8
 8002628:	4083      	lsls	r3, r0
 800262a:	469a      	mov	sl, r3
 800262c:	e68e      	b.n	800234c <__aeabi_dmul+0x214>
 800262e:	f000 fc97 	bl	8002f60 <__clzsi2>
 8002632:	0002      	movs	r2, r0
 8002634:	0003      	movs	r3, r0
 8002636:	3215      	adds	r2, #21
 8002638:	3320      	adds	r3, #32
 800263a:	2a1c      	cmp	r2, #28
 800263c:	dc00      	bgt.n	8002640 <__aeabi_dmul+0x508>
 800263e:	e64e      	b.n	80022de <__aeabi_dmul+0x1a6>
 8002640:	0002      	movs	r2, r0
 8002642:	0034      	movs	r4, r6
 8002644:	3a08      	subs	r2, #8
 8002646:	2000      	movs	r0, #0
 8002648:	4094      	lsls	r4, r2
 800264a:	e652      	b.n	80022f2 <__aeabi_dmul+0x1ba>
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	e604      	b.n	800225a <__aeabi_dmul+0x122>
 8002650:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <__aeabi_dmul+0x58c>)
 8002652:	0021      	movs	r1, r4
 8002654:	469c      	mov	ip, r3
 8002656:	0003      	movs	r3, r0
 8002658:	9d01      	ldr	r5, [sp, #4]
 800265a:	40d3      	lsrs	r3, r2
 800265c:	4465      	add	r5, ip
 800265e:	40a9      	lsls	r1, r5
 8002660:	4319      	orrs	r1, r3
 8002662:	0003      	movs	r3, r0
 8002664:	40ab      	lsls	r3, r5
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	4183      	sbcs	r3, r0
 800266a:	4319      	orrs	r1, r3
 800266c:	0008      	movs	r0, r1
 800266e:	40d4      	lsrs	r4, r2
 8002670:	074b      	lsls	r3, r1, #29
 8002672:	d009      	beq.n	8002688 <__aeabi_dmul+0x550>
 8002674:	230f      	movs	r3, #15
 8002676:	400b      	ands	r3, r1
 8002678:	2b04      	cmp	r3, #4
 800267a:	d005      	beq.n	8002688 <__aeabi_dmul+0x550>
 800267c:	1d0b      	adds	r3, r1, #4
 800267e:	428b      	cmp	r3, r1
 8002680:	4180      	sbcs	r0, r0
 8002682:	4240      	negs	r0, r0
 8002684:	1824      	adds	r4, r4, r0
 8002686:	0018      	movs	r0, r3
 8002688:	0223      	lsls	r3, r4, #8
 800268a:	d400      	bmi.n	800268e <__aeabi_dmul+0x556>
 800268c:	e6d6      	b.n	800243c <__aeabi_dmul+0x304>
 800268e:	2301      	movs	r3, #1
 8002690:	2400      	movs	r4, #0
 8002692:	2200      	movs	r2, #0
 8002694:	e5a6      	b.n	80021e4 <__aeabi_dmul+0xac>
 8002696:	290f      	cmp	r1, #15
 8002698:	d1aa      	bne.n	80025f0 <__aeabi_dmul+0x4b8>
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	4652      	mov	r2, sl
 800269e:	031b      	lsls	r3, r3, #12
 80026a0:	421a      	tst	r2, r3
 80026a2:	d0a9      	beq.n	80025f8 <__aeabi_dmul+0x4c0>
 80026a4:	421c      	tst	r4, r3
 80026a6:	d1a7      	bne.n	80025f8 <__aeabi_dmul+0x4c0>
 80026a8:	431c      	orrs	r4, r3
 80026aa:	9b00      	ldr	r3, [sp, #0]
 80026ac:	0002      	movs	r2, r0
 80026ae:	469b      	mov	fp, r3
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <__aeabi_dmul+0x588>)
 80026b2:	e597      	b.n	80021e4 <__aeabi_dmul+0xac>
 80026b4:	2400      	movs	r4, #0
 80026b6:	e6c1      	b.n	800243c <__aeabi_dmul+0x304>
 80026b8:	2400      	movs	r4, #0
 80026ba:	4b01      	ldr	r3, [pc, #4]	@ (80026c0 <__aeabi_dmul+0x588>)
 80026bc:	0022      	movs	r2, r4
 80026be:	e591      	b.n	80021e4 <__aeabi_dmul+0xac>
 80026c0:	000007ff 	.word	0x000007ff
 80026c4:	0000041e 	.word	0x0000041e

080026c8 <__aeabi_dsub>:
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ca:	464e      	mov	r6, r9
 80026cc:	4645      	mov	r5, r8
 80026ce:	46de      	mov	lr, fp
 80026d0:	4657      	mov	r7, sl
 80026d2:	b5e0      	push	{r5, r6, r7, lr}
 80026d4:	b085      	sub	sp, #20
 80026d6:	9000      	str	r0, [sp, #0]
 80026d8:	9101      	str	r1, [sp, #4]
 80026da:	030c      	lsls	r4, r1, #12
 80026dc:	004f      	lsls	r7, r1, #1
 80026de:	0fce      	lsrs	r6, r1, #31
 80026e0:	0a61      	lsrs	r1, r4, #9
 80026e2:	9c00      	ldr	r4, [sp, #0]
 80026e4:	46b0      	mov	r8, r6
 80026e6:	0f64      	lsrs	r4, r4, #29
 80026e8:	430c      	orrs	r4, r1
 80026ea:	9900      	ldr	r1, [sp, #0]
 80026ec:	0d7f      	lsrs	r7, r7, #21
 80026ee:	00c8      	lsls	r0, r1, #3
 80026f0:	0011      	movs	r1, r2
 80026f2:	001a      	movs	r2, r3
 80026f4:	031b      	lsls	r3, r3, #12
 80026f6:	469c      	mov	ip, r3
 80026f8:	9100      	str	r1, [sp, #0]
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	0051      	lsls	r1, r2, #1
 80026fe:	0d4b      	lsrs	r3, r1, #21
 8002700:	4699      	mov	r9, r3
 8002702:	9b01      	ldr	r3, [sp, #4]
 8002704:	9d00      	ldr	r5, [sp, #0]
 8002706:	0fd9      	lsrs	r1, r3, #31
 8002708:	4663      	mov	r3, ip
 800270a:	0f6a      	lsrs	r2, r5, #29
 800270c:	0a5b      	lsrs	r3, r3, #9
 800270e:	4313      	orrs	r3, r2
 8002710:	00ea      	lsls	r2, r5, #3
 8002712:	4694      	mov	ip, r2
 8002714:	4693      	mov	fp, r2
 8002716:	4ac1      	ldr	r2, [pc, #772]	@ (8002a1c <__aeabi_dsub+0x354>)
 8002718:	9003      	str	r0, [sp, #12]
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	4591      	cmp	r9, r2
 800271e:	d100      	bne.n	8002722 <__aeabi_dsub+0x5a>
 8002720:	e0cd      	b.n	80028be <__aeabi_dsub+0x1f6>
 8002722:	2501      	movs	r5, #1
 8002724:	4069      	eors	r1, r5
 8002726:	464d      	mov	r5, r9
 8002728:	1b7d      	subs	r5, r7, r5
 800272a:	46aa      	mov	sl, r5
 800272c:	428e      	cmp	r6, r1
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x6a>
 8002730:	e080      	b.n	8002834 <__aeabi_dsub+0x16c>
 8002732:	2d00      	cmp	r5, #0
 8002734:	dc00      	bgt.n	8002738 <__aeabi_dsub+0x70>
 8002736:	e335      	b.n	8002da4 <__aeabi_dsub+0x6dc>
 8002738:	4649      	mov	r1, r9
 800273a:	2900      	cmp	r1, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x78>
 800273e:	e0df      	b.n	8002900 <__aeabi_dsub+0x238>
 8002740:	4297      	cmp	r7, r2
 8002742:	d100      	bne.n	8002746 <__aeabi_dsub+0x7e>
 8002744:	e194      	b.n	8002a70 <__aeabi_dsub+0x3a8>
 8002746:	4652      	mov	r2, sl
 8002748:	2501      	movs	r5, #1
 800274a:	2a38      	cmp	r2, #56	@ 0x38
 800274c:	dc19      	bgt.n	8002782 <__aeabi_dsub+0xba>
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	9b02      	ldr	r3, [sp, #8]
 8002752:	0412      	lsls	r2, r2, #16
 8002754:	4313      	orrs	r3, r2
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	4652      	mov	r2, sl
 800275a:	2a1f      	cmp	r2, #31
 800275c:	dd00      	ble.n	8002760 <__aeabi_dsub+0x98>
 800275e:	e1e3      	b.n	8002b28 <__aeabi_dsub+0x460>
 8002760:	4653      	mov	r3, sl
 8002762:	2220      	movs	r2, #32
 8002764:	4661      	mov	r1, ip
 8002766:	9d02      	ldr	r5, [sp, #8]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	4095      	lsls	r5, r2
 800276c:	40d9      	lsrs	r1, r3
 800276e:	430d      	orrs	r5, r1
 8002770:	4661      	mov	r1, ip
 8002772:	4091      	lsls	r1, r2
 8002774:	000a      	movs	r2, r1
 8002776:	1e51      	subs	r1, r2, #1
 8002778:	418a      	sbcs	r2, r1
 800277a:	4315      	orrs	r5, r2
 800277c:	9a02      	ldr	r2, [sp, #8]
 800277e:	40da      	lsrs	r2, r3
 8002780:	1aa4      	subs	r4, r4, r2
 8002782:	1b45      	subs	r5, r0, r5
 8002784:	42a8      	cmp	r0, r5
 8002786:	4180      	sbcs	r0, r0
 8002788:	4240      	negs	r0, r0
 800278a:	1a24      	subs	r4, r4, r0
 800278c:	0223      	lsls	r3, r4, #8
 800278e:	d400      	bmi.n	8002792 <__aeabi_dsub+0xca>
 8002790:	e13d      	b.n	8002a0e <__aeabi_dsub+0x346>
 8002792:	0264      	lsls	r4, r4, #9
 8002794:	0a64      	lsrs	r4, r4, #9
 8002796:	2c00      	cmp	r4, #0
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0xd4>
 800279a:	e147      	b.n	8002a2c <__aeabi_dsub+0x364>
 800279c:	0020      	movs	r0, r4
 800279e:	f000 fbdf 	bl	8002f60 <__clzsi2>
 80027a2:	0003      	movs	r3, r0
 80027a4:	3b08      	subs	r3, #8
 80027a6:	2120      	movs	r1, #32
 80027a8:	0028      	movs	r0, r5
 80027aa:	1aca      	subs	r2, r1, r3
 80027ac:	40d0      	lsrs	r0, r2
 80027ae:	409c      	lsls	r4, r3
 80027b0:	0002      	movs	r2, r0
 80027b2:	409d      	lsls	r5, r3
 80027b4:	4322      	orrs	r2, r4
 80027b6:	429f      	cmp	r7, r3
 80027b8:	dd00      	ble.n	80027bc <__aeabi_dsub+0xf4>
 80027ba:	e177      	b.n	8002aac <__aeabi_dsub+0x3e4>
 80027bc:	1bd8      	subs	r0, r3, r7
 80027be:	3001      	adds	r0, #1
 80027c0:	1a09      	subs	r1, r1, r0
 80027c2:	002c      	movs	r4, r5
 80027c4:	408d      	lsls	r5, r1
 80027c6:	40c4      	lsrs	r4, r0
 80027c8:	1e6b      	subs	r3, r5, #1
 80027ca:	419d      	sbcs	r5, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	40c2      	lsrs	r2, r0
 80027d0:	408b      	lsls	r3, r1
 80027d2:	4325      	orrs	r5, r4
 80027d4:	2700      	movs	r7, #0
 80027d6:	0014      	movs	r4, r2
 80027d8:	431d      	orrs	r5, r3
 80027da:	076b      	lsls	r3, r5, #29
 80027dc:	d009      	beq.n	80027f2 <__aeabi_dsub+0x12a>
 80027de:	230f      	movs	r3, #15
 80027e0:	402b      	ands	r3, r5
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d005      	beq.n	80027f2 <__aeabi_dsub+0x12a>
 80027e6:	1d2b      	adds	r3, r5, #4
 80027e8:	42ab      	cmp	r3, r5
 80027ea:	41ad      	sbcs	r5, r5
 80027ec:	426d      	negs	r5, r5
 80027ee:	1964      	adds	r4, r4, r5
 80027f0:	001d      	movs	r5, r3
 80027f2:	0223      	lsls	r3, r4, #8
 80027f4:	d400      	bmi.n	80027f8 <__aeabi_dsub+0x130>
 80027f6:	e140      	b.n	8002a7a <__aeabi_dsub+0x3b2>
 80027f8:	4a88      	ldr	r2, [pc, #544]	@ (8002a1c <__aeabi_dsub+0x354>)
 80027fa:	3701      	adds	r7, #1
 80027fc:	4297      	cmp	r7, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x13a>
 8002800:	e101      	b.n	8002a06 <__aeabi_dsub+0x33e>
 8002802:	2601      	movs	r6, #1
 8002804:	4643      	mov	r3, r8
 8002806:	4986      	ldr	r1, [pc, #536]	@ (8002a20 <__aeabi_dsub+0x358>)
 8002808:	08ed      	lsrs	r5, r5, #3
 800280a:	4021      	ands	r1, r4
 800280c:	074a      	lsls	r2, r1, #29
 800280e:	432a      	orrs	r2, r5
 8002810:	057c      	lsls	r4, r7, #21
 8002812:	024d      	lsls	r5, r1, #9
 8002814:	0b2d      	lsrs	r5, r5, #12
 8002816:	0d64      	lsrs	r4, r4, #21
 8002818:	401e      	ands	r6, r3
 800281a:	0524      	lsls	r4, r4, #20
 800281c:	432c      	orrs	r4, r5
 800281e:	07f6      	lsls	r6, r6, #31
 8002820:	4334      	orrs	r4, r6
 8002822:	0010      	movs	r0, r2
 8002824:	0021      	movs	r1, r4
 8002826:	b005      	add	sp, #20
 8002828:	bcf0      	pop	{r4, r5, r6, r7}
 800282a:	46bb      	mov	fp, r7
 800282c:	46b2      	mov	sl, r6
 800282e:	46a9      	mov	r9, r5
 8002830:	46a0      	mov	r8, r4
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002834:	2d00      	cmp	r5, #0
 8002836:	dc00      	bgt.n	800283a <__aeabi_dsub+0x172>
 8002838:	e2d0      	b.n	8002ddc <__aeabi_dsub+0x714>
 800283a:	4649      	mov	r1, r9
 800283c:	2900      	cmp	r1, #0
 800283e:	d000      	beq.n	8002842 <__aeabi_dsub+0x17a>
 8002840:	e0d4      	b.n	80029ec <__aeabi_dsub+0x324>
 8002842:	4661      	mov	r1, ip
 8002844:	9b02      	ldr	r3, [sp, #8]
 8002846:	4319      	orrs	r1, r3
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x184>
 800284a:	e12b      	b.n	8002aa4 <__aeabi_dsub+0x3dc>
 800284c:	1e69      	subs	r1, r5, #1
 800284e:	2d01      	cmp	r5, #1
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x18c>
 8002852:	e1d9      	b.n	8002c08 <__aeabi_dsub+0x540>
 8002854:	4295      	cmp	r5, r2
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x192>
 8002858:	e10a      	b.n	8002a70 <__aeabi_dsub+0x3a8>
 800285a:	2501      	movs	r5, #1
 800285c:	2938      	cmp	r1, #56	@ 0x38
 800285e:	dc17      	bgt.n	8002890 <__aeabi_dsub+0x1c8>
 8002860:	468a      	mov	sl, r1
 8002862:	4653      	mov	r3, sl
 8002864:	2b1f      	cmp	r3, #31
 8002866:	dd00      	ble.n	800286a <__aeabi_dsub+0x1a2>
 8002868:	e1e7      	b.n	8002c3a <__aeabi_dsub+0x572>
 800286a:	2220      	movs	r2, #32
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	9b02      	ldr	r3, [sp, #8]
 8002870:	4661      	mov	r1, ip
 8002872:	4093      	lsls	r3, r2
 8002874:	001d      	movs	r5, r3
 8002876:	4653      	mov	r3, sl
 8002878:	40d9      	lsrs	r1, r3
 800287a:	4663      	mov	r3, ip
 800287c:	4093      	lsls	r3, r2
 800287e:	001a      	movs	r2, r3
 8002880:	430d      	orrs	r5, r1
 8002882:	1e51      	subs	r1, r2, #1
 8002884:	418a      	sbcs	r2, r1
 8002886:	4653      	mov	r3, sl
 8002888:	4315      	orrs	r5, r2
 800288a:	9a02      	ldr	r2, [sp, #8]
 800288c:	40da      	lsrs	r2, r3
 800288e:	18a4      	adds	r4, r4, r2
 8002890:	182d      	adds	r5, r5, r0
 8002892:	4285      	cmp	r5, r0
 8002894:	4180      	sbcs	r0, r0
 8002896:	4240      	negs	r0, r0
 8002898:	1824      	adds	r4, r4, r0
 800289a:	0223      	lsls	r3, r4, #8
 800289c:	d400      	bmi.n	80028a0 <__aeabi_dsub+0x1d8>
 800289e:	e0b6      	b.n	8002a0e <__aeabi_dsub+0x346>
 80028a0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a1c <__aeabi_dsub+0x354>)
 80028a2:	3701      	adds	r7, #1
 80028a4:	429f      	cmp	r7, r3
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x1e2>
 80028a8:	e0ad      	b.n	8002a06 <__aeabi_dsub+0x33e>
 80028aa:	2101      	movs	r1, #1
 80028ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002a20 <__aeabi_dsub+0x358>)
 80028ae:	086a      	lsrs	r2, r5, #1
 80028b0:	401c      	ands	r4, r3
 80028b2:	4029      	ands	r1, r5
 80028b4:	430a      	orrs	r2, r1
 80028b6:	07e5      	lsls	r5, r4, #31
 80028b8:	4315      	orrs	r5, r2
 80028ba:	0864      	lsrs	r4, r4, #1
 80028bc:	e78d      	b.n	80027da <__aeabi_dsub+0x112>
 80028be:	4a59      	ldr	r2, [pc, #356]	@ (8002a24 <__aeabi_dsub+0x35c>)
 80028c0:	9b02      	ldr	r3, [sp, #8]
 80028c2:	4692      	mov	sl, r2
 80028c4:	4662      	mov	r2, ip
 80028c6:	44ba      	add	sl, r7
 80028c8:	431a      	orrs	r2, r3
 80028ca:	d02c      	beq.n	8002926 <__aeabi_dsub+0x25e>
 80028cc:	428e      	cmp	r6, r1
 80028ce:	d02e      	beq.n	800292e <__aeabi_dsub+0x266>
 80028d0:	4652      	mov	r2, sl
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d060      	beq.n	8002998 <__aeabi_dsub+0x2d0>
 80028d6:	2f00      	cmp	r7, #0
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x214>
 80028da:	e0db      	b.n	8002a94 <__aeabi_dsub+0x3cc>
 80028dc:	4663      	mov	r3, ip
 80028de:	000e      	movs	r6, r1
 80028e0:	9c02      	ldr	r4, [sp, #8]
 80028e2:	08d8      	lsrs	r0, r3, #3
 80028e4:	0762      	lsls	r2, r4, #29
 80028e6:	4302      	orrs	r2, r0
 80028e8:	08e4      	lsrs	r4, r4, #3
 80028ea:	0013      	movs	r3, r2
 80028ec:	4323      	orrs	r3, r4
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x22a>
 80028f0:	e254      	b.n	8002d9c <__aeabi_dsub+0x6d4>
 80028f2:	2580      	movs	r5, #128	@ 0x80
 80028f4:	032d      	lsls	r5, r5, #12
 80028f6:	4325      	orrs	r5, r4
 80028f8:	032d      	lsls	r5, r5, #12
 80028fa:	4c48      	ldr	r4, [pc, #288]	@ (8002a1c <__aeabi_dsub+0x354>)
 80028fc:	0b2d      	lsrs	r5, r5, #12
 80028fe:	e78c      	b.n	800281a <__aeabi_dsub+0x152>
 8002900:	4661      	mov	r1, ip
 8002902:	9b02      	ldr	r3, [sp, #8]
 8002904:	4319      	orrs	r1, r3
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x242>
 8002908:	e0cc      	b.n	8002aa4 <__aeabi_dsub+0x3dc>
 800290a:	0029      	movs	r1, r5
 800290c:	3901      	subs	r1, #1
 800290e:	2d01      	cmp	r5, #1
 8002910:	d100      	bne.n	8002914 <__aeabi_dsub+0x24c>
 8002912:	e188      	b.n	8002c26 <__aeabi_dsub+0x55e>
 8002914:	4295      	cmp	r5, r2
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x252>
 8002918:	e0aa      	b.n	8002a70 <__aeabi_dsub+0x3a8>
 800291a:	2501      	movs	r5, #1
 800291c:	2938      	cmp	r1, #56	@ 0x38
 800291e:	dd00      	ble.n	8002922 <__aeabi_dsub+0x25a>
 8002920:	e72f      	b.n	8002782 <__aeabi_dsub+0xba>
 8002922:	468a      	mov	sl, r1
 8002924:	e718      	b.n	8002758 <__aeabi_dsub+0x90>
 8002926:	2201      	movs	r2, #1
 8002928:	4051      	eors	r1, r2
 800292a:	428e      	cmp	r6, r1
 800292c:	d1d0      	bne.n	80028d0 <__aeabi_dsub+0x208>
 800292e:	4653      	mov	r3, sl
 8002930:	2b00      	cmp	r3, #0
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x26e>
 8002934:	e0be      	b.n	8002ab4 <__aeabi_dsub+0x3ec>
 8002936:	2f00      	cmp	r7, #0
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x274>
 800293a:	e138      	b.n	8002bae <__aeabi_dsub+0x4e6>
 800293c:	46ca      	mov	sl, r9
 800293e:	0022      	movs	r2, r4
 8002940:	4302      	orrs	r2, r0
 8002942:	d100      	bne.n	8002946 <__aeabi_dsub+0x27e>
 8002944:	e1e2      	b.n	8002d0c <__aeabi_dsub+0x644>
 8002946:	4653      	mov	r3, sl
 8002948:	1e59      	subs	r1, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x288>
 800294e:	e20d      	b.n	8002d6c <__aeabi_dsub+0x6a4>
 8002950:	4a32      	ldr	r2, [pc, #200]	@ (8002a1c <__aeabi_dsub+0x354>)
 8002952:	4592      	cmp	sl, r2
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x290>
 8002956:	e1d2      	b.n	8002cfe <__aeabi_dsub+0x636>
 8002958:	2701      	movs	r7, #1
 800295a:	2938      	cmp	r1, #56	@ 0x38
 800295c:	dc13      	bgt.n	8002986 <__aeabi_dsub+0x2be>
 800295e:	291f      	cmp	r1, #31
 8002960:	dd00      	ble.n	8002964 <__aeabi_dsub+0x29c>
 8002962:	e1ee      	b.n	8002d42 <__aeabi_dsub+0x67a>
 8002964:	2220      	movs	r2, #32
 8002966:	9b02      	ldr	r3, [sp, #8]
 8002968:	1a52      	subs	r2, r2, r1
 800296a:	0025      	movs	r5, r4
 800296c:	0007      	movs	r7, r0
 800296e:	469a      	mov	sl, r3
 8002970:	40cc      	lsrs	r4, r1
 8002972:	4090      	lsls	r0, r2
 8002974:	4095      	lsls	r5, r2
 8002976:	40cf      	lsrs	r7, r1
 8002978:	44a2      	add	sl, r4
 800297a:	1e42      	subs	r2, r0, #1
 800297c:	4190      	sbcs	r0, r2
 800297e:	4653      	mov	r3, sl
 8002980:	432f      	orrs	r7, r5
 8002982:	4307      	orrs	r7, r0
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	003d      	movs	r5, r7
 8002988:	4465      	add	r5, ip
 800298a:	4565      	cmp	r5, ip
 800298c:	4192      	sbcs	r2, r2
 800298e:	9b02      	ldr	r3, [sp, #8]
 8002990:	4252      	negs	r2, r2
 8002992:	464f      	mov	r7, r9
 8002994:	18d4      	adds	r4, r2, r3
 8002996:	e780      	b.n	800289a <__aeabi_dsub+0x1d2>
 8002998:	4a23      	ldr	r2, [pc, #140]	@ (8002a28 <__aeabi_dsub+0x360>)
 800299a:	1c7d      	adds	r5, r7, #1
 800299c:	4215      	tst	r5, r2
 800299e:	d000      	beq.n	80029a2 <__aeabi_dsub+0x2da>
 80029a0:	e0aa      	b.n	8002af8 <__aeabi_dsub+0x430>
 80029a2:	4662      	mov	r2, ip
 80029a4:	0025      	movs	r5, r4
 80029a6:	9b02      	ldr	r3, [sp, #8]
 80029a8:	4305      	orrs	r5, r0
 80029aa:	431a      	orrs	r2, r3
 80029ac:	2f00      	cmp	r7, #0
 80029ae:	d000      	beq.n	80029b2 <__aeabi_dsub+0x2ea>
 80029b0:	e0f5      	b.n	8002b9e <__aeabi_dsub+0x4d6>
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x2f0>
 80029b6:	e16b      	b.n	8002c90 <__aeabi_dsub+0x5c8>
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x2f6>
 80029bc:	e152      	b.n	8002c64 <__aeabi_dsub+0x59c>
 80029be:	4663      	mov	r3, ip
 80029c0:	1ac5      	subs	r5, r0, r3
 80029c2:	9b02      	ldr	r3, [sp, #8]
 80029c4:	1ae2      	subs	r2, r4, r3
 80029c6:	42a8      	cmp	r0, r5
 80029c8:	419b      	sbcs	r3, r3
 80029ca:	425b      	negs	r3, r3
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	021a      	lsls	r2, r3, #8
 80029d0:	d400      	bmi.n	80029d4 <__aeabi_dsub+0x30c>
 80029d2:	e1d5      	b.n	8002d80 <__aeabi_dsub+0x6b8>
 80029d4:	4663      	mov	r3, ip
 80029d6:	1a1d      	subs	r5, r3, r0
 80029d8:	45ac      	cmp	ip, r5
 80029da:	4192      	sbcs	r2, r2
 80029dc:	2601      	movs	r6, #1
 80029de:	9b02      	ldr	r3, [sp, #8]
 80029e0:	4252      	negs	r2, r2
 80029e2:	1b1c      	subs	r4, r3, r4
 80029e4:	4688      	mov	r8, r1
 80029e6:	1aa4      	subs	r4, r4, r2
 80029e8:	400e      	ands	r6, r1
 80029ea:	e6f6      	b.n	80027da <__aeabi_dsub+0x112>
 80029ec:	4297      	cmp	r7, r2
 80029ee:	d03f      	beq.n	8002a70 <__aeabi_dsub+0x3a8>
 80029f0:	4652      	mov	r2, sl
 80029f2:	2501      	movs	r5, #1
 80029f4:	2a38      	cmp	r2, #56	@ 0x38
 80029f6:	dd00      	ble.n	80029fa <__aeabi_dsub+0x332>
 80029f8:	e74a      	b.n	8002890 <__aeabi_dsub+0x1c8>
 80029fa:	2280      	movs	r2, #128	@ 0x80
 80029fc:	9b02      	ldr	r3, [sp, #8]
 80029fe:	0412      	lsls	r2, r2, #16
 8002a00:	4313      	orrs	r3, r2
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	e72d      	b.n	8002862 <__aeabi_dsub+0x19a>
 8002a06:	003c      	movs	r4, r7
 8002a08:	2500      	movs	r5, #0
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	e705      	b.n	800281a <__aeabi_dsub+0x152>
 8002a0e:	2307      	movs	r3, #7
 8002a10:	402b      	ands	r3, r5
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d000      	beq.n	8002a18 <__aeabi_dsub+0x350>
 8002a16:	e6e2      	b.n	80027de <__aeabi_dsub+0x116>
 8002a18:	e06b      	b.n	8002af2 <__aeabi_dsub+0x42a>
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	000007ff 	.word	0x000007ff
 8002a20:	ff7fffff 	.word	0xff7fffff
 8002a24:	fffff801 	.word	0xfffff801
 8002a28:	000007fe 	.word	0x000007fe
 8002a2c:	0028      	movs	r0, r5
 8002a2e:	f000 fa97 	bl	8002f60 <__clzsi2>
 8002a32:	0003      	movs	r3, r0
 8002a34:	3318      	adds	r3, #24
 8002a36:	2b1f      	cmp	r3, #31
 8002a38:	dc00      	bgt.n	8002a3c <__aeabi_dsub+0x374>
 8002a3a:	e6b4      	b.n	80027a6 <__aeabi_dsub+0xde>
 8002a3c:	002a      	movs	r2, r5
 8002a3e:	3808      	subs	r0, #8
 8002a40:	4082      	lsls	r2, r0
 8002a42:	429f      	cmp	r7, r3
 8002a44:	dd00      	ble.n	8002a48 <__aeabi_dsub+0x380>
 8002a46:	e0b9      	b.n	8002bbc <__aeabi_dsub+0x4f4>
 8002a48:	1bdb      	subs	r3, r3, r7
 8002a4a:	1c58      	adds	r0, r3, #1
 8002a4c:	281f      	cmp	r0, #31
 8002a4e:	dc00      	bgt.n	8002a52 <__aeabi_dsub+0x38a>
 8002a50:	e1a0      	b.n	8002d94 <__aeabi_dsub+0x6cc>
 8002a52:	0015      	movs	r5, r2
 8002a54:	3b1f      	subs	r3, #31
 8002a56:	40dd      	lsrs	r5, r3
 8002a58:	2820      	cmp	r0, #32
 8002a5a:	d005      	beq.n	8002a68 <__aeabi_dsub+0x3a0>
 8002a5c:	2340      	movs	r3, #64	@ 0x40
 8002a5e:	1a1b      	subs	r3, r3, r0
 8002a60:	409a      	lsls	r2, r3
 8002a62:	1e53      	subs	r3, r2, #1
 8002a64:	419a      	sbcs	r2, r3
 8002a66:	4315      	orrs	r5, r2
 8002a68:	2307      	movs	r3, #7
 8002a6a:	2700      	movs	r7, #0
 8002a6c:	402b      	ands	r3, r5
 8002a6e:	e7d0      	b.n	8002a12 <__aeabi_dsub+0x34a>
 8002a70:	08c0      	lsrs	r0, r0, #3
 8002a72:	0762      	lsls	r2, r4, #29
 8002a74:	4302      	orrs	r2, r0
 8002a76:	08e4      	lsrs	r4, r4, #3
 8002a78:	e737      	b.n	80028ea <__aeabi_dsub+0x222>
 8002a7a:	08ea      	lsrs	r2, r5, #3
 8002a7c:	0763      	lsls	r3, r4, #29
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	4bd3      	ldr	r3, [pc, #844]	@ (8002dd0 <__aeabi_dsub+0x708>)
 8002a82:	08e4      	lsrs	r4, r4, #3
 8002a84:	429f      	cmp	r7, r3
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x3c2>
 8002a88:	e72f      	b.n	80028ea <__aeabi_dsub+0x222>
 8002a8a:	0324      	lsls	r4, r4, #12
 8002a8c:	0b25      	lsrs	r5, r4, #12
 8002a8e:	057c      	lsls	r4, r7, #21
 8002a90:	0d64      	lsrs	r4, r4, #21
 8002a92:	e6c2      	b.n	800281a <__aeabi_dsub+0x152>
 8002a94:	46ca      	mov	sl, r9
 8002a96:	0022      	movs	r2, r4
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	d158      	bne.n	8002b4e <__aeabi_dsub+0x486>
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	000e      	movs	r6, r1
 8002aa0:	9c02      	ldr	r4, [sp, #8]
 8002aa2:	9303      	str	r3, [sp, #12]
 8002aa4:	9b03      	ldr	r3, [sp, #12]
 8002aa6:	4657      	mov	r7, sl
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	e7e7      	b.n	8002a7c <__aeabi_dsub+0x3b4>
 8002aac:	4cc9      	ldr	r4, [pc, #804]	@ (8002dd4 <__aeabi_dsub+0x70c>)
 8002aae:	1aff      	subs	r7, r7, r3
 8002ab0:	4014      	ands	r4, r2
 8002ab2:	e692      	b.n	80027da <__aeabi_dsub+0x112>
 8002ab4:	4dc8      	ldr	r5, [pc, #800]	@ (8002dd8 <__aeabi_dsub+0x710>)
 8002ab6:	1c7a      	adds	r2, r7, #1
 8002ab8:	422a      	tst	r2, r5
 8002aba:	d000      	beq.n	8002abe <__aeabi_dsub+0x3f6>
 8002abc:	e084      	b.n	8002bc8 <__aeabi_dsub+0x500>
 8002abe:	0022      	movs	r2, r4
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	2f00      	cmp	r7, #0
 8002ac4:	d000      	beq.n	8002ac8 <__aeabi_dsub+0x400>
 8002ac6:	e0ef      	b.n	8002ca8 <__aeabi_dsub+0x5e0>
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x406>
 8002acc:	e0e5      	b.n	8002c9a <__aeabi_dsub+0x5d2>
 8002ace:	4662      	mov	r2, ip
 8002ad0:	9902      	ldr	r1, [sp, #8]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x410>
 8002ad6:	e0c5      	b.n	8002c64 <__aeabi_dsub+0x59c>
 8002ad8:	4663      	mov	r3, ip
 8002ada:	18c5      	adds	r5, r0, r3
 8002adc:	468c      	mov	ip, r1
 8002ade:	4285      	cmp	r5, r0
 8002ae0:	4180      	sbcs	r0, r0
 8002ae2:	4464      	add	r4, ip
 8002ae4:	4240      	negs	r0, r0
 8002ae6:	1824      	adds	r4, r4, r0
 8002ae8:	0223      	lsls	r3, r4, #8
 8002aea:	d502      	bpl.n	8002af2 <__aeabi_dsub+0x42a>
 8002aec:	4bb9      	ldr	r3, [pc, #740]	@ (8002dd4 <__aeabi_dsub+0x70c>)
 8002aee:	3701      	adds	r7, #1
 8002af0:	401c      	ands	r4, r3
 8002af2:	46ba      	mov	sl, r7
 8002af4:	9503      	str	r5, [sp, #12]
 8002af6:	e7d5      	b.n	8002aa4 <__aeabi_dsub+0x3dc>
 8002af8:	4662      	mov	r2, ip
 8002afa:	1a85      	subs	r5, r0, r2
 8002afc:	42a8      	cmp	r0, r5
 8002afe:	4192      	sbcs	r2, r2
 8002b00:	4252      	negs	r2, r2
 8002b02:	4691      	mov	r9, r2
 8002b04:	9b02      	ldr	r3, [sp, #8]
 8002b06:	1ae3      	subs	r3, r4, r3
 8002b08:	001a      	movs	r2, r3
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	4691      	mov	r9, r2
 8002b12:	021a      	lsls	r2, r3, #8
 8002b14:	d46c      	bmi.n	8002bf0 <__aeabi_dsub+0x528>
 8002b16:	464a      	mov	r2, r9
 8002b18:	464c      	mov	r4, r9
 8002b1a:	432a      	orrs	r2, r5
 8002b1c:	d000      	beq.n	8002b20 <__aeabi_dsub+0x458>
 8002b1e:	e63a      	b.n	8002796 <__aeabi_dsub+0xce>
 8002b20:	2600      	movs	r6, #0
 8002b22:	2400      	movs	r4, #0
 8002b24:	2500      	movs	r5, #0
 8002b26:	e678      	b.n	800281a <__aeabi_dsub+0x152>
 8002b28:	9902      	ldr	r1, [sp, #8]
 8002b2a:	4653      	mov	r3, sl
 8002b2c:	000d      	movs	r5, r1
 8002b2e:	3a20      	subs	r2, #32
 8002b30:	40d5      	lsrs	r5, r2
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d006      	beq.n	8002b44 <__aeabi_dsub+0x47c>
 8002b36:	2240      	movs	r2, #64	@ 0x40
 8002b38:	1ad2      	subs	r2, r2, r3
 8002b3a:	000b      	movs	r3, r1
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	4662      	mov	r2, ip
 8002b40:	431a      	orrs	r2, r3
 8002b42:	4693      	mov	fp, r2
 8002b44:	465b      	mov	r3, fp
 8002b46:	1e5a      	subs	r2, r3, #1
 8002b48:	4193      	sbcs	r3, r2
 8002b4a:	431d      	orrs	r5, r3
 8002b4c:	e619      	b.n	8002782 <__aeabi_dsub+0xba>
 8002b4e:	4653      	mov	r3, sl
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d100      	bne.n	8002b58 <__aeabi_dsub+0x490>
 8002b56:	e0c6      	b.n	8002ce6 <__aeabi_dsub+0x61e>
 8002b58:	4e9d      	ldr	r6, [pc, #628]	@ (8002dd0 <__aeabi_dsub+0x708>)
 8002b5a:	45b2      	cmp	sl, r6
 8002b5c:	d100      	bne.n	8002b60 <__aeabi_dsub+0x498>
 8002b5e:	e6bd      	b.n	80028dc <__aeabi_dsub+0x214>
 8002b60:	4688      	mov	r8, r1
 8002b62:	000e      	movs	r6, r1
 8002b64:	2501      	movs	r5, #1
 8002b66:	2a38      	cmp	r2, #56	@ 0x38
 8002b68:	dc10      	bgt.n	8002b8c <__aeabi_dsub+0x4c4>
 8002b6a:	2a1f      	cmp	r2, #31
 8002b6c:	dc7f      	bgt.n	8002c6e <__aeabi_dsub+0x5a6>
 8002b6e:	2120      	movs	r1, #32
 8002b70:	0025      	movs	r5, r4
 8002b72:	1a89      	subs	r1, r1, r2
 8002b74:	0007      	movs	r7, r0
 8002b76:	4088      	lsls	r0, r1
 8002b78:	408d      	lsls	r5, r1
 8002b7a:	40d7      	lsrs	r7, r2
 8002b7c:	40d4      	lsrs	r4, r2
 8002b7e:	1e41      	subs	r1, r0, #1
 8002b80:	4188      	sbcs	r0, r1
 8002b82:	9b02      	ldr	r3, [sp, #8]
 8002b84:	433d      	orrs	r5, r7
 8002b86:	1b1b      	subs	r3, r3, r4
 8002b88:	4305      	orrs	r5, r0
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	4662      	mov	r2, ip
 8002b8e:	1b55      	subs	r5, r2, r5
 8002b90:	45ac      	cmp	ip, r5
 8002b92:	4192      	sbcs	r2, r2
 8002b94:	9b02      	ldr	r3, [sp, #8]
 8002b96:	4252      	negs	r2, r2
 8002b98:	464f      	mov	r7, r9
 8002b9a:	1a9c      	subs	r4, r3, r2
 8002b9c:	e5f6      	b.n	800278c <__aeabi_dsub+0xc4>
 8002b9e:	2d00      	cmp	r5, #0
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dsub+0x4dc>
 8002ba2:	e0b7      	b.n	8002d14 <__aeabi_dsub+0x64c>
 8002ba4:	2a00      	cmp	r2, #0
 8002ba6:	d100      	bne.n	8002baa <__aeabi_dsub+0x4e2>
 8002ba8:	e0f0      	b.n	8002d8c <__aeabi_dsub+0x6c4>
 8002baa:	2601      	movs	r6, #1
 8002bac:	400e      	ands	r6, r1
 8002bae:	4663      	mov	r3, ip
 8002bb0:	9802      	ldr	r0, [sp, #8]
 8002bb2:	08d9      	lsrs	r1, r3, #3
 8002bb4:	0742      	lsls	r2, r0, #29
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	08c4      	lsrs	r4, r0, #3
 8002bba:	e696      	b.n	80028ea <__aeabi_dsub+0x222>
 8002bbc:	4c85      	ldr	r4, [pc, #532]	@ (8002dd4 <__aeabi_dsub+0x70c>)
 8002bbe:	1aff      	subs	r7, r7, r3
 8002bc0:	4014      	ands	r4, r2
 8002bc2:	0762      	lsls	r2, r4, #29
 8002bc4:	08e4      	lsrs	r4, r4, #3
 8002bc6:	e760      	b.n	8002a8a <__aeabi_dsub+0x3c2>
 8002bc8:	4981      	ldr	r1, [pc, #516]	@ (8002dd0 <__aeabi_dsub+0x708>)
 8002bca:	428a      	cmp	r2, r1
 8002bcc:	d100      	bne.n	8002bd0 <__aeabi_dsub+0x508>
 8002bce:	e0c9      	b.n	8002d64 <__aeabi_dsub+0x69c>
 8002bd0:	4663      	mov	r3, ip
 8002bd2:	18c1      	adds	r1, r0, r3
 8002bd4:	4281      	cmp	r1, r0
 8002bd6:	4180      	sbcs	r0, r0
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	4240      	negs	r0, r0
 8002bdc:	18e3      	adds	r3, r4, r3
 8002bde:	181b      	adds	r3, r3, r0
 8002be0:	07dd      	lsls	r5, r3, #31
 8002be2:	085c      	lsrs	r4, r3, #1
 8002be4:	2307      	movs	r3, #7
 8002be6:	0849      	lsrs	r1, r1, #1
 8002be8:	430d      	orrs	r5, r1
 8002bea:	0017      	movs	r7, r2
 8002bec:	402b      	ands	r3, r5
 8002bee:	e710      	b.n	8002a12 <__aeabi_dsub+0x34a>
 8002bf0:	4663      	mov	r3, ip
 8002bf2:	1a1d      	subs	r5, r3, r0
 8002bf4:	45ac      	cmp	ip, r5
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	2601      	movs	r6, #1
 8002bfa:	9b02      	ldr	r3, [sp, #8]
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	1b1c      	subs	r4, r3, r4
 8002c00:	4688      	mov	r8, r1
 8002c02:	1aa4      	subs	r4, r4, r2
 8002c04:	400e      	ands	r6, r1
 8002c06:	e5c6      	b.n	8002796 <__aeabi_dsub+0xce>
 8002c08:	4663      	mov	r3, ip
 8002c0a:	18c5      	adds	r5, r0, r3
 8002c0c:	9b02      	ldr	r3, [sp, #8]
 8002c0e:	4285      	cmp	r5, r0
 8002c10:	4180      	sbcs	r0, r0
 8002c12:	469c      	mov	ip, r3
 8002c14:	4240      	negs	r0, r0
 8002c16:	4464      	add	r4, ip
 8002c18:	1824      	adds	r4, r4, r0
 8002c1a:	2701      	movs	r7, #1
 8002c1c:	0223      	lsls	r3, r4, #8
 8002c1e:	d400      	bmi.n	8002c22 <__aeabi_dsub+0x55a>
 8002c20:	e6f5      	b.n	8002a0e <__aeabi_dsub+0x346>
 8002c22:	2702      	movs	r7, #2
 8002c24:	e641      	b.n	80028aa <__aeabi_dsub+0x1e2>
 8002c26:	4663      	mov	r3, ip
 8002c28:	1ac5      	subs	r5, r0, r3
 8002c2a:	42a8      	cmp	r0, r5
 8002c2c:	4180      	sbcs	r0, r0
 8002c2e:	9b02      	ldr	r3, [sp, #8]
 8002c30:	4240      	negs	r0, r0
 8002c32:	1ae4      	subs	r4, r4, r3
 8002c34:	2701      	movs	r7, #1
 8002c36:	1a24      	subs	r4, r4, r0
 8002c38:	e5a8      	b.n	800278c <__aeabi_dsub+0xc4>
 8002c3a:	9d02      	ldr	r5, [sp, #8]
 8002c3c:	4652      	mov	r2, sl
 8002c3e:	002b      	movs	r3, r5
 8002c40:	3a20      	subs	r2, #32
 8002c42:	40d3      	lsrs	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	4653      	mov	r3, sl
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d006      	beq.n	8002c5a <__aeabi_dsub+0x592>
 8002c4c:	2240      	movs	r2, #64	@ 0x40
 8002c4e:	1ad2      	subs	r2, r2, r3
 8002c50:	002b      	movs	r3, r5
 8002c52:	4093      	lsls	r3, r2
 8002c54:	4662      	mov	r2, ip
 8002c56:	431a      	orrs	r2, r3
 8002c58:	4693      	mov	fp, r2
 8002c5a:	465d      	mov	r5, fp
 8002c5c:	1e6b      	subs	r3, r5, #1
 8002c5e:	419d      	sbcs	r5, r3
 8002c60:	430d      	orrs	r5, r1
 8002c62:	e615      	b.n	8002890 <__aeabi_dsub+0x1c8>
 8002c64:	0762      	lsls	r2, r4, #29
 8002c66:	08c0      	lsrs	r0, r0, #3
 8002c68:	4302      	orrs	r2, r0
 8002c6a:	08e4      	lsrs	r4, r4, #3
 8002c6c:	e70d      	b.n	8002a8a <__aeabi_dsub+0x3c2>
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0027      	movs	r7, r4
 8002c72:	3920      	subs	r1, #32
 8002c74:	40cf      	lsrs	r7, r1
 8002c76:	2a20      	cmp	r2, #32
 8002c78:	d005      	beq.n	8002c86 <__aeabi_dsub+0x5be>
 8002c7a:	2140      	movs	r1, #64	@ 0x40
 8002c7c:	1a8a      	subs	r2, r1, r2
 8002c7e:	4094      	lsls	r4, r2
 8002c80:	0025      	movs	r5, r4
 8002c82:	4305      	orrs	r5, r0
 8002c84:	9503      	str	r5, [sp, #12]
 8002c86:	9d03      	ldr	r5, [sp, #12]
 8002c88:	1e6a      	subs	r2, r5, #1
 8002c8a:	4195      	sbcs	r5, r2
 8002c8c:	433d      	orrs	r5, r7
 8002c8e:	e77d      	b.n	8002b8c <__aeabi_dsub+0x4c4>
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	d100      	bne.n	8002c96 <__aeabi_dsub+0x5ce>
 8002c94:	e744      	b.n	8002b20 <__aeabi_dsub+0x458>
 8002c96:	2601      	movs	r6, #1
 8002c98:	400e      	ands	r6, r1
 8002c9a:	4663      	mov	r3, ip
 8002c9c:	08d9      	lsrs	r1, r3, #3
 8002c9e:	9b02      	ldr	r3, [sp, #8]
 8002ca0:	075a      	lsls	r2, r3, #29
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	08dc      	lsrs	r4, r3, #3
 8002ca6:	e6f0      	b.n	8002a8a <__aeabi_dsub+0x3c2>
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	d028      	beq.n	8002cfe <__aeabi_dsub+0x636>
 8002cac:	4662      	mov	r2, ip
 8002cae:	9f02      	ldr	r7, [sp, #8]
 8002cb0:	08c0      	lsrs	r0, r0, #3
 8002cb2:	433a      	orrs	r2, r7
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x5f0>
 8002cb6:	e6dc      	b.n	8002a72 <__aeabi_dsub+0x3aa>
 8002cb8:	0762      	lsls	r2, r4, #29
 8002cba:	4310      	orrs	r0, r2
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	08e4      	lsrs	r4, r4, #3
 8002cc0:	0312      	lsls	r2, r2, #12
 8002cc2:	4214      	tst	r4, r2
 8002cc4:	d009      	beq.n	8002cda <__aeabi_dsub+0x612>
 8002cc6:	08fd      	lsrs	r5, r7, #3
 8002cc8:	4215      	tst	r5, r2
 8002cca:	d106      	bne.n	8002cda <__aeabi_dsub+0x612>
 8002ccc:	4663      	mov	r3, ip
 8002cce:	2601      	movs	r6, #1
 8002cd0:	002c      	movs	r4, r5
 8002cd2:	08d8      	lsrs	r0, r3, #3
 8002cd4:	077b      	lsls	r3, r7, #29
 8002cd6:	4318      	orrs	r0, r3
 8002cd8:	400e      	ands	r6, r1
 8002cda:	0f42      	lsrs	r2, r0, #29
 8002cdc:	00c0      	lsls	r0, r0, #3
 8002cde:	08c0      	lsrs	r0, r0, #3
 8002ce0:	0752      	lsls	r2, r2, #29
 8002ce2:	4302      	orrs	r2, r0
 8002ce4:	e601      	b.n	80028ea <__aeabi_dsub+0x222>
 8002ce6:	4663      	mov	r3, ip
 8002ce8:	1a1d      	subs	r5, r3, r0
 8002cea:	45ac      	cmp	ip, r5
 8002cec:	4192      	sbcs	r2, r2
 8002cee:	9b02      	ldr	r3, [sp, #8]
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	1b1c      	subs	r4, r3, r4
 8002cf4:	000e      	movs	r6, r1
 8002cf6:	4688      	mov	r8, r1
 8002cf8:	2701      	movs	r7, #1
 8002cfa:	1aa4      	subs	r4, r4, r2
 8002cfc:	e546      	b.n	800278c <__aeabi_dsub+0xc4>
 8002cfe:	4663      	mov	r3, ip
 8002d00:	08d9      	lsrs	r1, r3, #3
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	075a      	lsls	r2, r3, #29
 8002d06:	430a      	orrs	r2, r1
 8002d08:	08dc      	lsrs	r4, r3, #3
 8002d0a:	e5ee      	b.n	80028ea <__aeabi_dsub+0x222>
 8002d0c:	4663      	mov	r3, ip
 8002d0e:	9c02      	ldr	r4, [sp, #8]
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	e6c7      	b.n	8002aa4 <__aeabi_dsub+0x3dc>
 8002d14:	08c0      	lsrs	r0, r0, #3
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d100      	bne.n	8002d1c <__aeabi_dsub+0x654>
 8002d1a:	e6aa      	b.n	8002a72 <__aeabi_dsub+0x3aa>
 8002d1c:	0762      	lsls	r2, r4, #29
 8002d1e:	4310      	orrs	r0, r2
 8002d20:	2280      	movs	r2, #128	@ 0x80
 8002d22:	08e4      	lsrs	r4, r4, #3
 8002d24:	0312      	lsls	r2, r2, #12
 8002d26:	4214      	tst	r4, r2
 8002d28:	d0d7      	beq.n	8002cda <__aeabi_dsub+0x612>
 8002d2a:	9f02      	ldr	r7, [sp, #8]
 8002d2c:	08fd      	lsrs	r5, r7, #3
 8002d2e:	4215      	tst	r5, r2
 8002d30:	d1d3      	bne.n	8002cda <__aeabi_dsub+0x612>
 8002d32:	4663      	mov	r3, ip
 8002d34:	2601      	movs	r6, #1
 8002d36:	08d8      	lsrs	r0, r3, #3
 8002d38:	077b      	lsls	r3, r7, #29
 8002d3a:	002c      	movs	r4, r5
 8002d3c:	4318      	orrs	r0, r3
 8002d3e:	400e      	ands	r6, r1
 8002d40:	e7cb      	b.n	8002cda <__aeabi_dsub+0x612>
 8002d42:	000a      	movs	r2, r1
 8002d44:	0027      	movs	r7, r4
 8002d46:	3a20      	subs	r2, #32
 8002d48:	40d7      	lsrs	r7, r2
 8002d4a:	2920      	cmp	r1, #32
 8002d4c:	d005      	beq.n	8002d5a <__aeabi_dsub+0x692>
 8002d4e:	2240      	movs	r2, #64	@ 0x40
 8002d50:	1a52      	subs	r2, r2, r1
 8002d52:	4094      	lsls	r4, r2
 8002d54:	0025      	movs	r5, r4
 8002d56:	4305      	orrs	r5, r0
 8002d58:	9503      	str	r5, [sp, #12]
 8002d5a:	9d03      	ldr	r5, [sp, #12]
 8002d5c:	1e6a      	subs	r2, r5, #1
 8002d5e:	4195      	sbcs	r5, r2
 8002d60:	432f      	orrs	r7, r5
 8002d62:	e610      	b.n	8002986 <__aeabi_dsub+0x2be>
 8002d64:	0014      	movs	r4, r2
 8002d66:	2500      	movs	r5, #0
 8002d68:	2200      	movs	r2, #0
 8002d6a:	e556      	b.n	800281a <__aeabi_dsub+0x152>
 8002d6c:	9b02      	ldr	r3, [sp, #8]
 8002d6e:	4460      	add	r0, ip
 8002d70:	4699      	mov	r9, r3
 8002d72:	4560      	cmp	r0, ip
 8002d74:	4192      	sbcs	r2, r2
 8002d76:	444c      	add	r4, r9
 8002d78:	4252      	negs	r2, r2
 8002d7a:	0005      	movs	r5, r0
 8002d7c:	18a4      	adds	r4, r4, r2
 8002d7e:	e74c      	b.n	8002c1a <__aeabi_dsub+0x552>
 8002d80:	001a      	movs	r2, r3
 8002d82:	001c      	movs	r4, r3
 8002d84:	432a      	orrs	r2, r5
 8002d86:	d000      	beq.n	8002d8a <__aeabi_dsub+0x6c2>
 8002d88:	e6b3      	b.n	8002af2 <__aeabi_dsub+0x42a>
 8002d8a:	e6c9      	b.n	8002b20 <__aeabi_dsub+0x458>
 8002d8c:	2480      	movs	r4, #128	@ 0x80
 8002d8e:	2600      	movs	r6, #0
 8002d90:	0324      	lsls	r4, r4, #12
 8002d92:	e5ae      	b.n	80028f2 <__aeabi_dsub+0x22a>
 8002d94:	2120      	movs	r1, #32
 8002d96:	2500      	movs	r5, #0
 8002d98:	1a09      	subs	r1, r1, r0
 8002d9a:	e517      	b.n	80027cc <__aeabi_dsub+0x104>
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2500      	movs	r5, #0
 8002da0:	4c0b      	ldr	r4, [pc, #44]	@ (8002dd0 <__aeabi_dsub+0x708>)
 8002da2:	e53a      	b.n	800281a <__aeabi_dsub+0x152>
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d100      	bne.n	8002daa <__aeabi_dsub+0x6e2>
 8002da8:	e5f6      	b.n	8002998 <__aeabi_dsub+0x2d0>
 8002daa:	464b      	mov	r3, r9
 8002dac:	1bda      	subs	r2, r3, r7
 8002dae:	4692      	mov	sl, r2
 8002db0:	2f00      	cmp	r7, #0
 8002db2:	d100      	bne.n	8002db6 <__aeabi_dsub+0x6ee>
 8002db4:	e66f      	b.n	8002a96 <__aeabi_dsub+0x3ce>
 8002db6:	2a38      	cmp	r2, #56	@ 0x38
 8002db8:	dc05      	bgt.n	8002dc6 <__aeabi_dsub+0x6fe>
 8002dba:	2680      	movs	r6, #128	@ 0x80
 8002dbc:	0436      	lsls	r6, r6, #16
 8002dbe:	4334      	orrs	r4, r6
 8002dc0:	4688      	mov	r8, r1
 8002dc2:	000e      	movs	r6, r1
 8002dc4:	e6d1      	b.n	8002b6a <__aeabi_dsub+0x4a2>
 8002dc6:	4688      	mov	r8, r1
 8002dc8:	000e      	movs	r6, r1
 8002dca:	2501      	movs	r5, #1
 8002dcc:	e6de      	b.n	8002b8c <__aeabi_dsub+0x4c4>
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	000007ff 	.word	0x000007ff
 8002dd4:	ff7fffff 	.word	0xff7fffff
 8002dd8:	000007fe 	.word	0x000007fe
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	d100      	bne.n	8002de2 <__aeabi_dsub+0x71a>
 8002de0:	e668      	b.n	8002ab4 <__aeabi_dsub+0x3ec>
 8002de2:	464b      	mov	r3, r9
 8002de4:	1bd9      	subs	r1, r3, r7
 8002de6:	2f00      	cmp	r7, #0
 8002de8:	d101      	bne.n	8002dee <__aeabi_dsub+0x726>
 8002dea:	468a      	mov	sl, r1
 8002dec:	e5a7      	b.n	800293e <__aeabi_dsub+0x276>
 8002dee:	2701      	movs	r7, #1
 8002df0:	2938      	cmp	r1, #56	@ 0x38
 8002df2:	dd00      	ble.n	8002df6 <__aeabi_dsub+0x72e>
 8002df4:	e5c7      	b.n	8002986 <__aeabi_dsub+0x2be>
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	0412      	lsls	r2, r2, #16
 8002dfa:	4314      	orrs	r4, r2
 8002dfc:	e5af      	b.n	800295e <__aeabi_dsub+0x296>
 8002dfe:	46c0      	nop			@ (mov r8, r8)

08002e00 <__aeabi_dcmpun>:
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	46c6      	mov	lr, r8
 8002e04:	031e      	lsls	r6, r3, #12
 8002e06:	0b36      	lsrs	r6, r6, #12
 8002e08:	46b0      	mov	r8, r6
 8002e0a:	4e0d      	ldr	r6, [pc, #52]	@ (8002e40 <__aeabi_dcmpun+0x40>)
 8002e0c:	030c      	lsls	r4, r1, #12
 8002e0e:	004d      	lsls	r5, r1, #1
 8002e10:	005f      	lsls	r7, r3, #1
 8002e12:	b500      	push	{lr}
 8002e14:	0b24      	lsrs	r4, r4, #12
 8002e16:	0d6d      	lsrs	r5, r5, #21
 8002e18:	0d7f      	lsrs	r7, r7, #21
 8002e1a:	42b5      	cmp	r5, r6
 8002e1c:	d00b      	beq.n	8002e36 <__aeabi_dcmpun+0x36>
 8002e1e:	4908      	ldr	r1, [pc, #32]	@ (8002e40 <__aeabi_dcmpun+0x40>)
 8002e20:	2000      	movs	r0, #0
 8002e22:	428f      	cmp	r7, r1
 8002e24:	d104      	bne.n	8002e30 <__aeabi_dcmpun+0x30>
 8002e26:	4646      	mov	r6, r8
 8002e28:	4316      	orrs	r6, r2
 8002e2a:	0030      	movs	r0, r6
 8002e2c:	1e43      	subs	r3, r0, #1
 8002e2e:	4198      	sbcs	r0, r3
 8002e30:	bc80      	pop	{r7}
 8002e32:	46b8      	mov	r8, r7
 8002e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e36:	4304      	orrs	r4, r0
 8002e38:	2001      	movs	r0, #1
 8002e3a:	2c00      	cmp	r4, #0
 8002e3c:	d1f8      	bne.n	8002e30 <__aeabi_dcmpun+0x30>
 8002e3e:	e7ee      	b.n	8002e1e <__aeabi_dcmpun+0x1e>
 8002e40:	000007ff 	.word	0x000007ff

08002e44 <__aeabi_d2iz>:
 8002e44:	000b      	movs	r3, r1
 8002e46:	0002      	movs	r2, r0
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	4d16      	ldr	r5, [pc, #88]	@ (8002ea4 <__aeabi_d2iz+0x60>)
 8002e4c:	030c      	lsls	r4, r1, #12
 8002e4e:	b082      	sub	sp, #8
 8002e50:	0049      	lsls	r1, r1, #1
 8002e52:	2000      	movs	r0, #0
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	0b24      	lsrs	r4, r4, #12
 8002e5a:	0d49      	lsrs	r1, r1, #21
 8002e5c:	0fde      	lsrs	r6, r3, #31
 8002e5e:	42a9      	cmp	r1, r5
 8002e60:	dd04      	ble.n	8002e6c <__aeabi_d2iz+0x28>
 8002e62:	4811      	ldr	r0, [pc, #68]	@ (8002ea8 <__aeabi_d2iz+0x64>)
 8002e64:	4281      	cmp	r1, r0
 8002e66:	dd03      	ble.n	8002e70 <__aeabi_d2iz+0x2c>
 8002e68:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <__aeabi_d2iz+0x68>)
 8002e6a:	18f0      	adds	r0, r6, r3
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	2080      	movs	r0, #128	@ 0x80
 8002e72:	0340      	lsls	r0, r0, #13
 8002e74:	4320      	orrs	r0, r4
 8002e76:	4c0e      	ldr	r4, [pc, #56]	@ (8002eb0 <__aeabi_d2iz+0x6c>)
 8002e78:	1a64      	subs	r4, r4, r1
 8002e7a:	2c1f      	cmp	r4, #31
 8002e7c:	dd08      	ble.n	8002e90 <__aeabi_d2iz+0x4c>
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <__aeabi_d2iz+0x70>)
 8002e80:	1a5b      	subs	r3, r3, r1
 8002e82:	40d8      	lsrs	r0, r3
 8002e84:	0003      	movs	r3, r0
 8002e86:	4258      	negs	r0, r3
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d1ef      	bne.n	8002e6c <__aeabi_d2iz+0x28>
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	e7ed      	b.n	8002e6c <__aeabi_d2iz+0x28>
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <__aeabi_d2iz+0x74>)
 8002e92:	9a00      	ldr	r2, [sp, #0]
 8002e94:	469c      	mov	ip, r3
 8002e96:	0003      	movs	r3, r0
 8002e98:	4461      	add	r1, ip
 8002e9a:	408b      	lsls	r3, r1
 8002e9c:	40e2      	lsrs	r2, r4
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	e7f1      	b.n	8002e86 <__aeabi_d2iz+0x42>
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	000003fe 	.word	0x000003fe
 8002ea8:	0000041d 	.word	0x0000041d
 8002eac:	7fffffff 	.word	0x7fffffff
 8002eb0:	00000433 	.word	0x00000433
 8002eb4:	00000413 	.word	0x00000413
 8002eb8:	fffffbed 	.word	0xfffffbed

08002ebc <__aeabi_i2d>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d016      	beq.n	8002ef0 <__aeabi_i2d+0x34>
 8002ec2:	17c3      	asrs	r3, r0, #31
 8002ec4:	18c5      	adds	r5, r0, r3
 8002ec6:	405d      	eors	r5, r3
 8002ec8:	0fc4      	lsrs	r4, r0, #31
 8002eca:	0028      	movs	r0, r5
 8002ecc:	f000 f848 	bl	8002f60 <__clzsi2>
 8002ed0:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <__aeabi_i2d+0x58>)
 8002ed2:	1a1b      	subs	r3, r3, r0
 8002ed4:	055b      	lsls	r3, r3, #21
 8002ed6:	0d5b      	lsrs	r3, r3, #21
 8002ed8:	280a      	cmp	r0, #10
 8002eda:	dc14      	bgt.n	8002f06 <__aeabi_i2d+0x4a>
 8002edc:	0002      	movs	r2, r0
 8002ede:	002e      	movs	r6, r5
 8002ee0:	3215      	adds	r2, #21
 8002ee2:	4096      	lsls	r6, r2
 8002ee4:	220b      	movs	r2, #11
 8002ee6:	1a12      	subs	r2, r2, r0
 8002ee8:	40d5      	lsrs	r5, r2
 8002eea:	032d      	lsls	r5, r5, #12
 8002eec:	0b2d      	lsrs	r5, r5, #12
 8002eee:	e003      	b.n	8002ef8 <__aeabi_i2d+0x3c>
 8002ef0:	2400      	movs	r4, #0
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	051b      	lsls	r3, r3, #20
 8002efa:	432b      	orrs	r3, r5
 8002efc:	07e4      	lsls	r4, r4, #31
 8002efe:	4323      	orrs	r3, r4
 8002f00:	0030      	movs	r0, r6
 8002f02:	0019      	movs	r1, r3
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	380b      	subs	r0, #11
 8002f08:	4085      	lsls	r5, r0
 8002f0a:	032d      	lsls	r5, r5, #12
 8002f0c:	2600      	movs	r6, #0
 8002f0e:	0b2d      	lsrs	r5, r5, #12
 8002f10:	e7f2      	b.n	8002ef8 <__aeabi_i2d+0x3c>
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	0000041e 	.word	0x0000041e

08002f18 <__aeabi_ui2d>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	1e04      	subs	r4, r0, #0
 8002f1c:	d010      	beq.n	8002f40 <__aeabi_ui2d+0x28>
 8002f1e:	f000 f81f 	bl	8002f60 <__clzsi2>
 8002f22:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <__aeabi_ui2d+0x44>)
 8002f24:	1a1b      	subs	r3, r3, r0
 8002f26:	055b      	lsls	r3, r3, #21
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	280a      	cmp	r0, #10
 8002f2c:	dc0f      	bgt.n	8002f4e <__aeabi_ui2d+0x36>
 8002f2e:	220b      	movs	r2, #11
 8002f30:	0021      	movs	r1, r4
 8002f32:	1a12      	subs	r2, r2, r0
 8002f34:	40d1      	lsrs	r1, r2
 8002f36:	3015      	adds	r0, #21
 8002f38:	030a      	lsls	r2, r1, #12
 8002f3a:	4084      	lsls	r4, r0
 8002f3c:	0b12      	lsrs	r2, r2, #12
 8002f3e:	e001      	b.n	8002f44 <__aeabi_ui2d+0x2c>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2200      	movs	r2, #0
 8002f44:	051b      	lsls	r3, r3, #20
 8002f46:	4313      	orrs	r3, r2
 8002f48:	0020      	movs	r0, r4
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	0022      	movs	r2, r4
 8002f50:	380b      	subs	r0, #11
 8002f52:	4082      	lsls	r2, r0
 8002f54:	0312      	lsls	r2, r2, #12
 8002f56:	2400      	movs	r4, #0
 8002f58:	0b12      	lsrs	r2, r2, #12
 8002f5a:	e7f3      	b.n	8002f44 <__aeabi_ui2d+0x2c>
 8002f5c:	0000041e 	.word	0x0000041e

08002f60 <__clzsi2>:
 8002f60:	211c      	movs	r1, #28
 8002f62:	2301      	movs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	4298      	cmp	r0, r3
 8002f68:	d301      	bcc.n	8002f6e <__clzsi2+0xe>
 8002f6a:	0c00      	lsrs	r0, r0, #16
 8002f6c:	3910      	subs	r1, #16
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	4298      	cmp	r0, r3
 8002f72:	d301      	bcc.n	8002f78 <__clzsi2+0x18>
 8002f74:	0a00      	lsrs	r0, r0, #8
 8002f76:	3908      	subs	r1, #8
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	4298      	cmp	r0, r3
 8002f7c:	d301      	bcc.n	8002f82 <__clzsi2+0x22>
 8002f7e:	0900      	lsrs	r0, r0, #4
 8002f80:	3904      	subs	r1, #4
 8002f82:	a202      	add	r2, pc, #8	@ (adr r2, 8002f8c <__clzsi2+0x2c>)
 8002f84:	5c10      	ldrb	r0, [r2, r0]
 8002f86:	1840      	adds	r0, r0, r1
 8002f88:	4770      	bx	lr
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	02020304 	.word	0x02020304
 8002f90:	01010101 	.word	0x01010101
	...

08002f9c <__clzdi2>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	d103      	bne.n	8002faa <__clzdi2+0xe>
 8002fa2:	f7ff ffdd 	bl	8002f60 <__clzsi2>
 8002fa6:	3020      	adds	r0, #32
 8002fa8:	e002      	b.n	8002fb0 <__clzdi2+0x14>
 8002faa:	0008      	movs	r0, r1
 8002fac:	f7ff ffd8 	bl	8002f60 <__clzsi2>
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)

08002fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <MX_DMA_Init+0x48>)
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <MX_DMA_Init+0x48>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <MX_DMA_Init+0x48>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	200a      	movs	r0, #10
 8002fd8:	f000 feda 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002fdc:	200a      	movs	r0, #10
 8002fde:	f000 feec 	bl	8003dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	200b      	movs	r0, #11
 8002fe8:	f000 fed2 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002fec:	200b      	movs	r0, #11
 8002fee:	f000 fee4 	bl	8003dba <HAL_NVIC_EnableIRQ>

}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	40021000 	.word	0x40021000

08003000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003006:	240c      	movs	r4, #12
 8003008:	193b      	adds	r3, r7, r4
 800300a:	0018      	movs	r0, r3
 800300c:	2314      	movs	r3, #20
 800300e:	001a      	movs	r2, r3
 8003010:	2100      	movs	r1, #0
 8003012:	f004 fc3f 	bl	8007894 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003016:	4b2a      	ldr	r3, [pc, #168]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 8003018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301a:	4b29      	ldr	r3, [pc, #164]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 800301c:	2104      	movs	r1, #4
 800301e:	430a      	orrs	r2, r1
 8003020:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003022:	4b27      	ldr	r3, [pc, #156]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 8003030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003032:	4b23      	ldr	r3, [pc, #140]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 8003034:	2180      	movs	r1, #128	@ 0x80
 8003036:	430a      	orrs	r2, r1
 8003038:	62da      	str	r2, [r3, #44]	@ 0x2c
 800303a:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	4013      	ands	r3, r2
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 8003048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304a:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 800304c:	2101      	movs	r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <MX_GPIO_Init+0xc0>)
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	2201      	movs	r2, #1
 8003058:	4013      	ands	r3, r2
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 800305e:	23a0      	movs	r3, #160	@ 0xa0
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	2200      	movs	r2, #0
 8003064:	21e3      	movs	r1, #227	@ 0xe3
 8003066:	0018      	movs	r0, r3
 8003068:	f001 fa84 	bl	8004574 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2280      	movs	r2, #128	@ 0x80
 8003070:	0192      	lsls	r2, r2, #6
 8003072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003074:	193b      	adds	r3, r7, r4
 8003076:	2284      	movs	r2, #132	@ 0x84
 8003078:	0392      	lsls	r2, r2, #14
 800307a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003082:	193b      	adds	r3, r7, r4
 8003084:	4a0f      	ldr	r2, [pc, #60]	@ (80030c4 <MX_GPIO_Init+0xc4>)
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f001 f8f5 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 800308e:	0021      	movs	r1, r4
 8003090:	187b      	adds	r3, r7, r1
 8003092:	22e3      	movs	r2, #227	@ 0xe3
 8003094:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003096:	187b      	adds	r3, r7, r1
 8003098:	2201      	movs	r2, #1
 800309a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	187b      	adds	r3, r7, r1
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	2200      	movs	r2, #0
 80030a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	187a      	adds	r2, r7, r1
 80030aa:	23a0      	movs	r3, #160	@ 0xa0
 80030ac:	05db      	lsls	r3, r3, #23
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f001 f8e1 	bl	8004278 <HAL_GPIO_Init>

}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b009      	add	sp, #36	@ 0x24
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	40021000 	.word	0x40021000
 80030c4:	50000800 	.word	0x50000800

080030c8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80030d0:	2301      	movs	r3, #1
 80030d2:	425b      	negs	r3, r3
 80030d4:	1d39      	adds	r1, r7, #4
 80030d6:	4804      	ldr	r0, [pc, #16]	@ (80030e8 <__io_putchar+0x20>)
 80030d8:	2201      	movs	r2, #1
 80030da:	f002 fa33 	bl	8005544 <HAL_UART_Transmit>
    return ch;
 80030de:	687b      	ldr	r3, [r7, #4]
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	200002d0 	.word	0x200002d0

080030ec <HAL_UART_RxCpltCallback>:
void init_rand(void)
{
    srand(HAL_GetTick()); // tick을 시드로 사용
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b096      	sub	sp, #88	@ 0x58
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART4)// sun으로 부터 센서 값 수신 그런데 선루프 상태값도 받아올라면 5바이트로 받아야할듯? 개오바 ㅋㅋ
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	@ (80031a8 <HAL_UART_RxCpltCallback+0xbc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d150      	bne.n	80031a0 <HAL_UART_RxCpltCallback+0xb4>
    {
        uint32_t payload = (rx_buf[0] << 24) | (rx_buf[1] << 16) | (rx_buf[2] << 8) | rx_buf[3];
 80030fe:	4b2b      	ldr	r3, [pc, #172]	@ (80031ac <HAL_UART_RxCpltCallback+0xc0>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	061a      	lsls	r2, r3, #24
 8003104:	4b29      	ldr	r3, [pc, #164]	@ (80031ac <HAL_UART_RxCpltCallback+0xc0>)
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	4b27      	ldr	r3, [pc, #156]	@ (80031ac <HAL_UART_RxCpltCallback+0xc0>)
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4313      	orrs	r3, r2
 8003114:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <HAL_UART_RxCpltCallback+0xc0>)
 8003116:	78d2      	ldrb	r2, [r2, #3]
 8003118:	4313      	orrs	r3, r2
 800311a:	64fb      	str	r3, [r7, #76]	@ 0x4c

       	in_illum  				= (payload >> 20) 		& 0x0FFF;
 800311c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800311e:	0d1b      	lsrs	r3, r3, #20
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_UART_RxCpltCallback+0xc4>)
 8003124:	801a      	strh	r2, [r3, #0]
       	out_illum 				= (payload >> 8)  		& 0x0FFF;
 8003126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	b29b      	uxth	r3, r3
 800312c:	051b      	lsls	r3, r3, #20
 800312e:	0d1b      	lsrs	r3, r3, #20
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_UART_RxCpltCallback+0xc8>)
 8003134:	801a      	strh	r2, [r3, #0]
       	rain_flag 				= (payload >> 7)  		& 0x01;
 8003136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003138:	09db      	lsrs	r3, r3, #7
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_UART_RxCpltCallback+0xcc>)
 8003144:	701a      	strb	r2, [r3, #0]
       	sunroof_state_sun 		= (payload >> 5) 		& 0x03;
 8003146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2203      	movs	r2, #3
 800314e:	4013      	ands	r3, r2
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <HAL_UART_RxCpltCallback+0xd0>)
 8003154:	701a      	strb	r2, [r3, #0]
       	sunroof_transparency 	= (payload) 			& 0x1F;
 8003156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003158:	b2db      	uxtb	r3, r3
 800315a:	221f      	movs	r2, #31
 800315c:	4013      	ands	r3, r2
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <HAL_UART_RxCpltCallback+0xd4>)
 8003162:	701a      	strb	r2, [r3, #0]
       	 char msg[64];
       	 sprintf(msg, "In: %u, Out: %u, Rain: %u \r\n", in_illum, out_illum, rain_flag);
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <HAL_UART_RxCpltCallback+0xc4>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	001a      	movs	r2, r3
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_UART_RxCpltCallback+0xc8>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	001c      	movs	r4, r3
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_UART_RxCpltCallback+0xcc>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4913      	ldr	r1, [pc, #76]	@ (80031c4 <HAL_UART_RxCpltCallback+0xd8>)
 8003176:	250c      	movs	r5, #12
 8003178:	1978      	adds	r0, r7, r5
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	0023      	movs	r3, r4
 800317e:	f004 fa7d 	bl	800767c <siprintf>
       	 printf("%s\r\n", msg);
 8003182:	197a      	adds	r2, r7, r5
 8003184:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <HAL_UART_RxCpltCallback+0xdc>)
 8003186:	0011      	movs	r1, r2
 8003188:	0018      	movs	r0, r3
 800318a:	f004 fa67 	bl	800765c <iprintf>

       	rx_sensor_sun = 1;  // 센서 값 수신 완료
 800318e:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <HAL_UART_RxCpltCallback+0xe0>)
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
       	HAL_UART_Receive_DMA(&huart4, rx_buf, sizeof(rx_buf));
 8003194:	4905      	ldr	r1, [pc, #20]	@ (80031ac <HAL_UART_RxCpltCallback+0xc0>)
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <HAL_UART_RxCpltCallback+0xe4>)
 8003198:	2204      	movs	r2, #4
 800319a:	0018      	movs	r0, r3
 800319c:	f002 fa72 	bl	8005684 <HAL_UART_Receive_DMA>

         // rpi 데이터 수신 코드
         // HAL_UART_Receive(&huart4, rx_buf_from_rpi, sizeif(rx_buf_from_rpi));
         // rx_buf_rpi = 1;
    }
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b014      	add	sp, #80	@ 0x50
 80031a6:	bdb0      	pop	{r4, r5, r7, pc}
 80031a8:	40004c00 	.word	0x40004c00
 80031ac:	200001f8 	.word	0x200001f8
 80031b0:	200001fc 	.word	0x200001fc
 80031b4:	200001fe 	.word	0x200001fe
 80031b8:	20000200 	.word	0x20000200
 80031bc:	20000208 	.word	0x20000208
 80031c0:	20000209 	.word	0x20000209
 80031c4:	08009a68 	.word	0x08009a68
 80031c8:	08009a88 	.word	0x08009a88
 80031cc:	2000020c 	.word	0x2000020c
 80031d0:	20000358 	.word	0x20000358

080031d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d8:	f000 fcbe 	bl	8003b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031dc:	f000 f900 	bl	80033e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e0:	f7ff ff0e 	bl	8003000 <MX_GPIO_Init>
  MX_DMA_Init();
 80031e4:	f7ff fee6 	bl	8002fb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80031e8:	f000 fb18 	bl	800381c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80031ec:	f000 fb46 	bl	800387c <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 80031f0:	f000 fae4 	bl	80037bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_DMA(&huart4, rx_buf, sizeof(rx_buf)); // USART1 수신 시작
 80031f4:	496c      	ldr	r1, [pc, #432]	@ (80033a8 <main+0x1d4>)
 80031f6:	4b6d      	ldr	r3, [pc, #436]	@ (80033ac <main+0x1d8>)
 80031f8:	2204      	movs	r2, #4
 80031fa:	0018      	movs	r0, r3
 80031fc:	f002 fa42 	bl	8005684 <HAL_UART_Receive_DMA>
   sunroof_state = 0;
 8003200:	4b6b      	ldr	r3, [pc, #428]	@ (80033b0 <main+0x1dc>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
	   AC = ?
	   SM = 0,1
	   PS = 1, 2, 3
	   */
	  //uart 송신 코드 DMA 송신 코드
	  if (rx_sensor_sun)
 8003206:	4b6b      	ldr	r3, [pc, #428]	@ (80033b4 <main+0x1e0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0fa      	beq.n	8003206 <main+0x32>
	  {
			  tx_payload = 1;
 8003210:	4b69      	ldr	r3, [pc, #420]	@ (80033b8 <main+0x1e4>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
			  sunroof_input.benzene_in = 0.003f;
 8003216:	4b69      	ldr	r3, [pc, #420]	@ (80033bc <main+0x1e8>)
 8003218:	4a69      	ldr	r2, [pc, #420]	@ (80033c0 <main+0x1ec>)
 800321a:	601a      	str	r2, [r3, #0]
			  sunroof_input.co_in = rand() % 40;
 800321c:	f003 fcba 	bl	8006b94 <rand>
 8003220:	0003      	movs	r3, r0
 8003222:	2128      	movs	r1, #40	@ 0x28
 8003224:	0018      	movs	r0, r3
 8003226:	f7fd f8fb 	bl	8000420 <__aeabi_idivmod>
 800322a:	000b      	movs	r3, r1
 800322c:	0018      	movs	r0, r3
 800322e:	f7fd ff8f 	bl	8001150 <__aeabi_i2f>
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	4b61      	ldr	r3, [pc, #388]	@ (80033bc <main+0x1e8>)
 8003236:	605a      	str	r2, [r3, #4]
			  sunroof_input.co2_in = rand() % 2000;
 8003238:	f003 fcac 	bl	8006b94 <rand>
 800323c:	0002      	movs	r2, r0
 800323e:	23fa      	movs	r3, #250	@ 0xfa
 8003240:	00d9      	lsls	r1, r3, #3
 8003242:	0010      	movs	r0, r2
 8003244:	f7fd f8ec 	bl	8000420 <__aeabi_idivmod>
 8003248:	000b      	movs	r3, r1
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd ff80 	bl	8001150 <__aeabi_i2f>
 8003250:	1c02      	adds	r2, r0, #0
 8003252:	4b5a      	ldr	r3, [pc, #360]	@ (80033bc <main+0x1e8>)
 8003254:	609a      	str	r2, [r3, #8]
			  sunroof_input.smoke_in = rand() % 50;
 8003256:	f003 fc9d 	bl	8006b94 <rand>
 800325a:	0003      	movs	r3, r0
 800325c:	2132      	movs	r1, #50	@ 0x32
 800325e:	0018      	movs	r0, r3
 8003260:	f7fd f8de 	bl	8000420 <__aeabi_idivmod>
 8003264:	000b      	movs	r3, r1
 8003266:	0018      	movs	r0, r3
 8003268:	f7fd ff72 	bl	8001150 <__aeabi_i2f>
 800326c:	1c02      	adds	r2, r0, #0
 800326e:	4b53      	ldr	r3, [pc, #332]	@ (80033bc <main+0x1e8>)
 8003270:	60da      	str	r2, [r3, #12]
			  sunroof_input.benzene_out = 0.002f;
 8003272:	4b52      	ldr	r3, [pc, #328]	@ (80033bc <main+0x1e8>)
 8003274:	4a53      	ldr	r2, [pc, #332]	@ (80033c4 <main+0x1f0>)
 8003276:	611a      	str	r2, [r3, #16]
			  sunroof_input.co_out =  rand() % 40;
 8003278:	f003 fc8c 	bl	8006b94 <rand>
 800327c:	0003      	movs	r3, r0
 800327e:	2128      	movs	r1, #40	@ 0x28
 8003280:	0018      	movs	r0, r3
 8003282:	f7fd f8cd 	bl	8000420 <__aeabi_idivmod>
 8003286:	000b      	movs	r3, r1
 8003288:	0018      	movs	r0, r3
 800328a:	f7fd ff61 	bl	8001150 <__aeabi_i2f>
 800328e:	1c02      	adds	r2, r0, #0
 8003290:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <main+0x1e8>)
 8003292:	615a      	str	r2, [r3, #20]
			  sunroof_input.co2_out = rand() % 2000;
 8003294:	f003 fc7e 	bl	8006b94 <rand>
 8003298:	0002      	movs	r2, r0
 800329a:	23fa      	movs	r3, #250	@ 0xfa
 800329c:	00d9      	lsls	r1, r3, #3
 800329e:	0010      	movs	r0, r2
 80032a0:	f7fd f8be 	bl	8000420 <__aeabi_idivmod>
 80032a4:	000b      	movs	r3, r1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fd ff52 	bl	8001150 <__aeabi_i2f>
 80032ac:	1c02      	adds	r2, r0, #0
 80032ae:	4b43      	ldr	r3, [pc, #268]	@ (80033bc <main+0x1e8>)
 80032b0:	619a      	str	r2, [r3, #24]
			  sunroof_input.smoke_out = rand() % 50;
 80032b2:	f003 fc6f 	bl	8006b94 <rand>
 80032b6:	0003      	movs	r3, r0
 80032b8:	2132      	movs	r1, #50	@ 0x32
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fd f8b0 	bl	8000420 <__aeabi_idivmod>
 80032c0:	000b      	movs	r3, r1
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fd ff44 	bl	8001150 <__aeabi_i2f>
 80032c8:	1c02      	adds	r2, r0, #0
 80032ca:	4b3c      	ldr	r3, [pc, #240]	@ (80033bc <main+0x1e8>)
 80032cc:	61da      	str	r2, [r3, #28]
			  sunroof_input.pm25_out = rand() % 30;
 80032ce:	f003 fc61 	bl	8006b94 <rand>
 80032d2:	0003      	movs	r3, r0
 80032d4:	211e      	movs	r1, #30
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fd f8a2 	bl	8000420 <__aeabi_idivmod>
 80032dc:	000b      	movs	r3, r1
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fd ff36 	bl	8001150 <__aeabi_i2f>
 80032e4:	1c02      	adds	r2, r0, #0
 80032e6:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <main+0x1e8>)
 80032e8:	621a      	str	r2, [r3, #32]
			  sunroof_input.light = out_illum;                     // uart 통해 선루프로부터 들어온 센서 값
 80032ea:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <main+0x1f4>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	001a      	movs	r2, r3
 80032f0:	4b32      	ldr	r3, [pc, #200]	@ (80033bc <main+0x1e8>)
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24
			  sunroof_input.rain_detected = rain_flag;             // uart 통해 선루프로부터 들어온 센서 값
 80032f4:	4b35      	ldr	r3, [pc, #212]	@ (80033cc <main+0x1f8>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	001a      	movs	r2, r3
 80032fa:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <main+0x1e8>)
 80032fc:	629a      	str	r2, [r3, #40]	@ 0x28
			  sunroof_input.velocity = rand() % 100;
 80032fe:	f003 fc49 	bl	8006b94 <rand>
 8003302:	0003      	movs	r3, r0
 8003304:	2164      	movs	r1, #100	@ 0x64
 8003306:	0018      	movs	r0, r3
 8003308:	f7fd f88a 	bl	8000420 <__aeabi_idivmod>
 800330c:	000b      	movs	r3, r1
 800330e:	0018      	movs	r0, r3
 8003310:	f7fd ff1e 	bl	8001150 <__aeabi_i2f>
 8003314:	1c02      	adds	r2, r0, #0
 8003316:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <main+0x1e8>)
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c
			  sunroof_input.current_state = sunroof_state_sun;
 800331a:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <main+0x1fc>)
 800331c:	7819      	ldrb	r1, [r3, #0]
 800331e:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <main+0x1e8>)
 8003320:	2230      	movs	r2, #48	@ 0x30
 8003322:	5499      	strb	r1, [r3, r2]
			  //sunroof_state = Smart_Sunroof_Control(sunroof_input);
			  sunroof_state = rand()%3;
 8003324:	f003 fc36 	bl	8006b94 <rand>
 8003328:	0003      	movs	r3, r0
 800332a:	2103      	movs	r1, #3
 800332c:	0018      	movs	r0, r3
 800332e:	f7fd f877 	bl	8000420 <__aeabi_idivmod>
 8003332:	000b      	movs	r3, r1
 8003334:	001a      	movs	r2, r3
 8003336:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <main+0x1dc>)
 8003338:	601a      	str	r2, [r3, #0]
			  transparency = calculate_transparency(0, sunroof_input.light, 0);
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <main+0x1e8>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	2200      	movs	r2, #0
 8003340:	0019      	movs	r1, r3
 8003342:	2000      	movs	r0, #0
 8003344:	f000 f9f6 	bl	8003734 <calculate_transparency>
 8003348:	0003      	movs	r3, r0
 800334a:	b2da      	uxtb	r2, r3
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <main+0x200>)
 800334e:	701a      	strb	r2, [r3, #0]
			  transparency /=5;
 8003350:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <main+0x200>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2105      	movs	r1, #5
 8003356:	0018      	movs	r0, r3
 8003358:	f7fc fef2 	bl	8000140 <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <main+0x200>)
 8003362:	701a      	strb	r2, [r3, #0]

			  tx_data[0] = (sunroof_state + '0');
 8003364:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <main+0x1dc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3330      	adds	r3, #48	@ 0x30
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <main+0x204>)
 8003370:	701a      	strb	r2, [r3, #0]
			  tx_data[1] = transparency;
 8003372:	4b18      	ldr	r3, [pc, #96]	@ (80033d4 <main+0x200>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <main+0x204>)
 8003378:	705a      	strb	r2, [r3, #1]
			  //if (sunroof_state != sunroof_state_sun)
			  //{
				  HAL_UART_Transmit(&huart4, (uint8_t *)tx_data, strlen(tx_data), 100);
 800337a:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <main+0x204>)
 800337c:	0018      	movs	r0, r3
 800337e:	f7fc fec3 	bl	8000108 <strlen>
 8003382:	0003      	movs	r3, r0
 8003384:	b29a      	uxth	r2, r3
 8003386:	4914      	ldr	r1, [pc, #80]	@ (80033d8 <main+0x204>)
 8003388:	4808      	ldr	r0, [pc, #32]	@ (80033ac <main+0x1d8>)
 800338a:	2364      	movs	r3, #100	@ 0x64
 800338c:	f002 f8da 	bl	8005544 <HAL_UART_Transmit>
				  printf("Send command %s %d \r\n", tx_data, tx_data[1]);
 8003390:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <main+0x204>)
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	001a      	movs	r2, r3
 8003396:	4910      	ldr	r1, [pc, #64]	@ (80033d8 <main+0x204>)
 8003398:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <main+0x208>)
 800339a:	0018      	movs	r0, r3
 800339c:	f004 f95e 	bl	800765c <iprintf>
				  //printf("No Send command \r\n");

			  //}
			  //rx_sensor_sun++;

			  rx_sensor_sun = 0;
 80033a0:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <main+0x1e0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
	  if (rx_sensor_sun)
 80033a6:	e72e      	b.n	8003206 <main+0x32>
 80033a8:	200001f8 	.word	0x200001f8
 80033ac:	20000358 	.word	0x20000358
 80033b0:	20000204 	.word	0x20000204
 80033b4:	2000020c 	.word	0x2000020c
 80033b8:	2000020b 	.word	0x2000020b
 80033bc:	20000210 	.word	0x20000210
 80033c0:	3b449ba6 	.word	0x3b449ba6
 80033c4:	3b03126f 	.word	0x3b03126f
 80033c8:	200001fe 	.word	0x200001fe
 80033cc:	20000200 	.word	0x20000200
 80033d0:	20000208 	.word	0x20000208
 80033d4:	2000020a 	.word	0x2000020a
 80033d8:	20000004 	.word	0x20000004
 80033dc:	08009a90 	.word	0x08009a90

080033e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b09f      	sub	sp, #124	@ 0x7c
 80033e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033e6:	2440      	movs	r4, #64	@ 0x40
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	0018      	movs	r0, r3
 80033ec:	2338      	movs	r3, #56	@ 0x38
 80033ee:	001a      	movs	r2, r3
 80033f0:	2100      	movs	r1, #0
 80033f2:	f004 fa4f 	bl	8007894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033f6:	232c      	movs	r3, #44	@ 0x2c
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	0018      	movs	r0, r3
 80033fc:	2314      	movs	r3, #20
 80033fe:	001a      	movs	r2, r3
 8003400:	2100      	movs	r1, #0
 8003402:	f004 fa47 	bl	8007894 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	0018      	movs	r0, r3
 800340a:	2328      	movs	r3, #40	@ 0x28
 800340c:	001a      	movs	r2, r3
 800340e:	2100      	movs	r1, #0
 8003410:	f004 fa40 	bl	8007894 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003414:	4b27      	ldr	r3, [pc, #156]	@ (80034b4 <SystemClock_Config+0xd4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a27      	ldr	r2, [pc, #156]	@ (80034b8 <SystemClock_Config+0xd8>)
 800341a:	401a      	ands	r2, r3
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <SystemClock_Config+0xd4>)
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	0109      	lsls	r1, r1, #4
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003426:	0021      	movs	r1, r4
 8003428:	187b      	adds	r3, r7, r1
 800342a:	2210      	movs	r2, #16
 800342c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800342e:	187b      	adds	r3, r7, r1
 8003430:	2201      	movs	r2, #1
 8003432:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003434:	187b      	adds	r3, r7, r1
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800343a:	187b      	adds	r3, r7, r1
 800343c:	22a0      	movs	r2, #160	@ 0xa0
 800343e:	0212      	lsls	r2, r2, #8
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2200      	movs	r2, #0
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003448:	187b      	adds	r3, r7, r1
 800344a:	0018      	movs	r0, r3
 800344c:	f001 f8b0 	bl	80045b0 <HAL_RCC_OscConfig>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d001      	beq.n	8003458 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003454:	f000 f846 	bl	80034e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003458:	212c      	movs	r1, #44	@ 0x2c
 800345a:	187b      	adds	r3, r7, r1
 800345c:	220f      	movs	r2, #15
 800345e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003460:	187b      	adds	r3, r7, r1
 8003462:	2200      	movs	r2, #0
 8003464:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003466:	187b      	adds	r3, r7, r1
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800346c:	187b      	adds	r3, r7, r1
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003472:	187b      	adds	r3, r7, r1
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003478:	187b      	adds	r3, r7, r1
 800347a:	2100      	movs	r1, #0
 800347c:	0018      	movs	r0, r3
 800347e:	f001 fc6b 	bl	8004d58 <HAL_RCC_ClockConfig>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003486:	f000 f82d 	bl	80034e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2203      	movs	r2, #3
 800348e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	0018      	movs	r0, r3
 80034a0:	f001 fe5e 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d001      	beq.n	80034ac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80034a8:	f000 f81c 	bl	80034e4 <Error_Handler>
  }
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b01f      	add	sp, #124	@ 0x7c
 80034b2:	bd90      	pop	{r4, r7, pc}
 80034b4:	40007000 	.word	0x40007000
 80034b8:	ffffe7ff 	.word	0xffffe7ff

080034bc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART4)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_UART_TxCpltCallback+0x20>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d102      	bne.n	80034d4 <HAL_UART_TxCpltCallback+0x18>
    {
        tx_done = 1;  // 송신 완료 표시
 80034ce:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <HAL_UART_TxCpltCallback+0x24>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
    }
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40004c00 	.word	0x40004c00
 80034e0:	20000000 	.word	0x20000000

080034e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034e8:	b672      	cpsid	i
}
 80034ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	e7fd      	b.n	80034ec <Error_Handler+0x8>

080034f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f4:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <HAL_MspInit+0x24>)
 80034f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_MspInit+0x24>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	430a      	orrs	r2, r1
 80034fe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b04      	ldr	r3, [pc, #16]	@ (8003514 <HAL_MspInit+0x24>)
 8003502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <HAL_MspInit+0x24>)
 8003506:	2180      	movs	r1, #128	@ 0x80
 8003508:	0549      	lsls	r1, r1, #21
 800350a:	430a      	orrs	r2, r1
 800350c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	e7fd      	b.n	800351c <NMI_Handler+0x4>

08003520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	e7fd      	b.n	8003524 <HardFault_Handler+0x4>

08003528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800352c:	46c0      	nop			@ (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003540:	f000 fb5e 	bl	8003c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003552:	0018      	movs	r0, r3
 8003554:	f000 fdb3 	bl	80040be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003558:	46c0      	nop			@ (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	20000428 	.word	0x20000428

08003564 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800356a:	0018      	movs	r0, r3
 800356c:	f000 fda7 	bl	80040be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003570:	46c0      	nop			@ (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	200003e0 	.word	0x200003e0

0800357c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <USART4_5_IRQHandler+0x14>)
 8003582:	0018      	movs	r0, r3
 8003584:	f002 f8dc 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	20000358 	.word	0x20000358

08003594 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <USART1_IRQHandler+0x14>)
 800359a:	0018      	movs	r0, r3
 800359c:	f002 f8d0 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	20000248 	.word	0x20000248

080035ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  return 1;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_kill>:

int _kill(int pid, int sig)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035c2:	f004 f9c1 	bl	8007948 <__errno>
 80035c6:	0003      	movs	r3, r0
 80035c8:	2216      	movs	r2, #22
 80035ca:	601a      	str	r2, [r3, #0]
  return -1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	425b      	negs	r3, r3
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_exit>:

void _exit (int status)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035e0:	2301      	movs	r3, #1
 80035e2:	425a      	negs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff ffe5 	bl	80035b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	e7fd      	b.n	80035ee <_exit+0x16>

080035f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e00a      	b.n	800361a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003604:	e000      	b.n	8003608 <_read+0x16>
 8003606:	bf00      	nop
 8003608:	0001      	movs	r1, r0
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	b2ca      	uxtb	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3301      	adds	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	dbf0      	blt.n	8003604 <_read+0x12>
  }

  return len;
 8003622:	687b      	ldr	r3, [r7, #4]
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b006      	add	sp, #24
 800362a:	bd80      	pop	{r7, pc}

0800362c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e009      	b.n	8003652 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	60ba      	str	r2, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	0018      	movs	r0, r3
 8003648:	f7ff fd3e 	bl	80030c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3301      	adds	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	dbf1      	blt.n	800363e <_write+0x12>
  }
  return len;
 800365a:	687b      	ldr	r3, [r7, #4]
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b006      	add	sp, #24
 8003662:	bd80      	pop	{r7, pc}

08003664 <_close>:

int _close(int file)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800366c:	2301      	movs	r3, #1
 800366e:	425b      	negs	r3, r3
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2280      	movs	r2, #128	@ 0x80
 8003686:	0192      	lsls	r2, r2, #6
 8003688:	605a      	str	r2, [r3, #4]
  return 0;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b002      	add	sp, #8
 8003692:	bd80      	pop	{r7, pc}

08003694 <_isatty>:

int _isatty(int file)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800369c:	2301      	movs	r3, #1
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b004      	add	sp, #16
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c4:	4a14      	ldr	r2, [pc, #80]	@ (8003718 <_sbrk+0x5c>)
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <_sbrk+0x60>)
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d0:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <_sbrk+0x64>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <_sbrk+0x64>)
 80036da:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <_sbrk+0x68>)
 80036dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <_sbrk+0x64>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d207      	bcs.n	80036fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036ec:	f004 f92c 	bl	8007948 <__errno>
 80036f0:	0003      	movs	r3, r0
 80036f2:	220c      	movs	r2, #12
 80036f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	425b      	negs	r3, r3
 80036fa:	e009      	b.n	8003710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036fc:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <_sbrk+0x64>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003702:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <_sbrk+0x64>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	18d2      	adds	r2, r2, r3
 800370a:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <_sbrk+0x64>)
 800370c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b006      	add	sp, #24
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20005000 	.word	0x20005000
 800371c:	00000400 	.word	0x00000400
 8003720:	20000244 	.word	0x20000244
 8003724:	200005c0 	.word	0x200005c0

08003728 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800372c:	46c0      	nop			@ (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <calculate_transparency>:
#include "transparency.h"


uint8_t calculate_transparency(int mode, int light_lux, int user_transparency)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
	uint8_t transparency = 0;
 8003740:	2317      	movs	r3, #23
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
	// 모드가 0이면 스마트 제어 상태
	if (mode == 0)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d126      	bne.n	800379c <calculate_transparency+0x68>
	{
	    // 밝기 기준은 0 ~ 200 lux
	    if (light_lux <= 0)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	dc01      	bgt.n	8003758 <calculate_transparency+0x24>
	        return 100;  // 완전 투명
 8003754:	2364      	movs	r3, #100	@ 0x64
 8003756:	e028      	b.n	80037aa <calculate_transparency+0x76>
	    else if (light_lux >= 200)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2bc7      	cmp	r3, #199	@ 0xc7
 800375c:	dd01      	ble.n	8003762 <calculate_transparency+0x2e>
	        return 0;    // 완전 불투명
 800375e:	2300      	movs	r3, #0
 8003760:	e023      	b.n	80037aa <calculate_transparency+0x76>

	    // 선형적으로 맵핑 (밝을수록 불투명하게)
	    float light_ratio = (float)light_lux / 200.0f;
 8003762:	68b8      	ldr	r0, [r7, #8]
 8003764:	f7fd fcf4 	bl	8001150 <__aeabi_i2f>
 8003768:	1c03      	adds	r3, r0, #0
 800376a:	4912      	ldr	r1, [pc, #72]	@ (80037b4 <calculate_transparency+0x80>)
 800376c:	1c18      	adds	r0, r3, #0
 800376e:	f7fd f807 	bl	8000780 <__aeabi_fdiv>
 8003772:	1c03      	adds	r3, r0, #0
 8003774:	613b      	str	r3, [r7, #16]
	    transparency = (uint8_t)((1.0f - light_ratio) * 100);
 8003776:	6939      	ldr	r1, [r7, #16]
 8003778:	20fe      	movs	r0, #254	@ 0xfe
 800377a:	0580      	lsls	r0, r0, #22
 800377c:	f7fd fb24 	bl	8000dc8 <__aeabi_fsub>
 8003780:	1c03      	adds	r3, r0, #0
 8003782:	490d      	ldr	r1, [pc, #52]	@ (80037b8 <calculate_transparency+0x84>)
 8003784:	1c18      	adds	r0, r3, #0
 8003786:	f7fd f9e1 	bl	8000b4c <__aeabi_fmul>
 800378a:	1c03      	adds	r3, r0, #0
 800378c:	2217      	movs	r2, #23
 800378e:	18bc      	adds	r4, r7, r2
 8003790:	1c18      	adds	r0, r3, #0
 8003792:	f7fc ff11 	bl	80005b8 <__aeabi_f2uiz>
 8003796:	0003      	movs	r3, r0
 8003798:	7023      	strb	r3, [r4, #0]
 800379a:	e003      	b.n	80037a4 <calculate_transparency+0x70>
	}
	// 모드가 1이면 사용자 제어 상태
	else
	{
		transparency = user_transparency;
 800379c:	2317      	movs	r3, #23
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	701a      	strb	r2, [r3, #0]
	}


    return transparency; // 0 ~ 100
 80037a4:	2317      	movs	r3, #23
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b007      	add	sp, #28
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	43480000 	.word	0x43480000
 80037b8:	42c80000 	.word	0x42c80000

080037bc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037c0:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037c2:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <MX_USART1_UART_Init+0x5c>)
 80037c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037c6:	4b13      	ldr	r3, [pc, #76]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037c8:	22e1      	movs	r2, #225	@ 0xe1
 80037ca:	0252      	lsls	r2, r2, #9
 80037cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037ce:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037fe:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <MX_USART1_UART_Init+0x58>)
 8003800:	0018      	movs	r0, r3
 8003802:	f001 fe4b 	bl	800549c <HAL_UART_Init>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d001      	beq.n	800380e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800380a:	f7ff fe6b 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000248 	.word	0x20000248
 8003818:	40013800 	.word	0x40013800

0800381c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003820:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003822:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <MX_USART2_UART_Init+0x5c>)
 8003824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003826:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003828:	2296      	movs	r2, #150	@ 0x96
 800382a:	0192      	lsls	r2, r2, #6
 800382c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800382e:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003834:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800383a:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003840:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003842:	220c      	movs	r2, #12
 8003844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003846:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003858:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800385e:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <MX_USART2_UART_Init+0x58>)
 8003860:	0018      	movs	r0, r3
 8003862:	f001 fe1b 	bl	800549c <HAL_UART_Init>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800386a:	f7ff fe3b 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200002d0 	.word	0x200002d0
 8003878:	40004400 	.word	0x40004400

0800387c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 8003882:	4a15      	ldr	r2, [pc, #84]	@ (80038d8 <MX_USART4_UART_Init+0x5c>)
 8003884:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003886:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 8003888:	2296      	movs	r2, #150	@ 0x96
 800388a:	0192      	lsls	r2, r2, #6
 800388c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <MX_USART4_UART_Init+0x58>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f001 fdeb 	bl	800549c <HAL_UART_Init>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80038ca:	f7ff fe0b 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000358 	.word	0x20000358
 80038d8:	40004c00 	.word	0x40004c00

080038dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b08b      	sub	sp, #44	@ 0x2c
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	2414      	movs	r4, #20
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	0018      	movs	r0, r3
 80038ea:	2314      	movs	r3, #20
 80038ec:	001a      	movs	r2, r3
 80038ee:	2100      	movs	r1, #0
 80038f0:	f003 ffd0 	bl	8007894 <memset>
  if(uartHandle->Instance==USART1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a79      	ldr	r2, [pc, #484]	@ (8003ae0 <HAL_UART_MspInit+0x204>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d133      	bne.n	8003966 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038fe:	4b79      	ldr	r3, [pc, #484]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003902:	4b78      	ldr	r3, [pc, #480]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003904:	2180      	movs	r1, #128	@ 0x80
 8003906:	01c9      	lsls	r1, r1, #7
 8003908:	430a      	orrs	r2, r1
 800390a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390c:	4b75      	ldr	r3, [pc, #468]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 800390e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003910:	4b74      	ldr	r3, [pc, #464]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003912:	2101      	movs	r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003918:	4b72      	ldr	r3, [pc, #456]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	2201      	movs	r2, #1
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003924:	193b      	adds	r3, r7, r4
 8003926:	22c0      	movs	r2, #192	@ 0xc0
 8003928:	00d2      	lsls	r2, r2, #3
 800392a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	0021      	movs	r1, r4
 800392e:	187b      	adds	r3, r7, r1
 8003930:	2202      	movs	r2, #2
 8003932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	187b      	adds	r3, r7, r1
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	187b      	adds	r3, r7, r1
 800393c:	2203      	movs	r2, #3
 800393e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003940:	187b      	adds	r3, r7, r1
 8003942:	2204      	movs	r2, #4
 8003944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003946:	187a      	adds	r2, r7, r1
 8003948:	23a0      	movs	r3, #160	@ 0xa0
 800394a:	05db      	lsls	r3, r3, #23
 800394c:	0011      	movs	r1, r2
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fc92 	bl	8004278 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	201b      	movs	r0, #27
 800395a:	f000 fa19 	bl	8003d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800395e:	201b      	movs	r0, #27
 8003960:	f000 fa2b 	bl	8003dba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8003964:	e0b8      	b.n	8003ad8 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ae8 <HAL_UART_MspInit+0x20c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d153      	bne.n	8003a18 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003970:	4b5c      	ldr	r3, [pc, #368]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003974:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003976:	2180      	movs	r1, #128	@ 0x80
 8003978:	0289      	lsls	r1, r1, #10
 800397a:	430a      	orrs	r2, r1
 800397c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003982:	4b58      	ldr	r3, [pc, #352]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003984:	2101      	movs	r1, #1
 8003986:	430a      	orrs	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	@ 0x2c
 800398a:	4b56      	ldr	r3, [pc, #344]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	2201      	movs	r2, #1
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003996:	2114      	movs	r1, #20
 8003998:	187b      	adds	r3, r7, r1
 800399a:	220c      	movs	r2, #12
 800399c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2202      	movs	r2, #2
 80039a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2203      	movs	r2, #3
 80039ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	2204      	movs	r2, #4
 80039b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b6:	187a      	adds	r2, r7, r1
 80039b8:	23a0      	movs	r3, #160	@ 0xa0
 80039ba:	05db      	lsls	r3, r3, #23
 80039bc:	0011      	movs	r1, r2
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 fc5a 	bl	8004278 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80039c4:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039c6:	4a4a      	ldr	r2, [pc, #296]	@ (8003af0 <HAL_UART_MspInit+0x214>)
 80039c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80039ca:	4b48      	ldr	r3, [pc, #288]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039cc:	2204      	movs	r2, #4
 80039ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039d0:	4b46      	ldr	r3, [pc, #280]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d6:	4b45      	ldr	r3, [pc, #276]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039dc:	4b43      	ldr	r3, [pc, #268]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039de:	2280      	movs	r2, #128	@ 0x80
 80039e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e2:	4b42      	ldr	r3, [pc, #264]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039e8:	4b40      	ldr	r3, [pc, #256]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039ee:	4b3f      	ldr	r3, [pc, #252]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039f4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039fa:	4b3c      	ldr	r3, [pc, #240]	@ (8003aec <HAL_UART_MspInit+0x210>)
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f9f9 	bl	8003df4 <HAL_DMA_Init>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8003a06:	f7ff fd6d 	bl	80034e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a37      	ldr	r2, [pc, #220]	@ (8003aec <HAL_UART_MspInit+0x210>)
 8003a0e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003a10:	4b36      	ldr	r3, [pc, #216]	@ (8003aec <HAL_UART_MspInit+0x210>)
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a16:	e05f      	b.n	8003ad8 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART4)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	@ (8003af4 <HAL_UART_MspInit+0x218>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d15a      	bne.n	8003ad8 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART4_CLK_ENABLE();
 8003a22:	4b30      	ldr	r3, [pc, #192]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003a28:	2180      	movs	r1, #128	@ 0x80
 8003a2a:	0309      	lsls	r1, r1, #12
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a30:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003a36:	2104      	movs	r1, #4
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <HAL_UART_MspInit+0x208>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	2204      	movs	r2, #4
 8003a42:	4013      	ands	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a48:	2114      	movs	r1, #20
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	22c0      	movs	r2, #192	@ 0xc0
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2202      	movs	r2, #2
 8003a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2203      	movs	r2, #3
 8003a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2206      	movs	r2, #6
 8003a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	4a22      	ldr	r2, [pc, #136]	@ (8003af8 <HAL_UART_MspInit+0x21c>)
 8003a6e:	0019      	movs	r1, r3
 8003a70:	0010      	movs	r0, r2
 8003a72:	f000 fc01 	bl	8004278 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8003a76:	4b21      	ldr	r3, [pc, #132]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a78:	4a21      	ldr	r2, [pc, #132]	@ (8003b00 <HAL_UART_MspInit+0x224>)
 8003a7a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a7e:	220c      	movs	r2, #12
 8003a80:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a82:	4b1e      	ldr	r3, [pc, #120]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a88:	4b1c      	ldr	r3, [pc, #112]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a94:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8003aac:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f9a0 	bl	8003df4 <HAL_DMA_Init>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8003ab8:	f7ff fd14 	bl	80034e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003ac0:	675a      	str	r2, [r3, #116]	@ 0x74
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <HAL_UART_MspInit+0x220>)
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	200e      	movs	r0, #14
 8003ace:	f000 f95f 	bl	8003d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003ad2:	200e      	movs	r0, #14
 8003ad4:	f000 f971 	bl	8003dba <HAL_NVIC_EnableIRQ>
}
 8003ad8:	46c0      	nop			@ (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b00b      	add	sp, #44	@ 0x2c
 8003ade:	bd90      	pop	{r4, r7, pc}
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40004400 	.word	0x40004400
 8003aec:	200003e0 	.word	0x200003e0
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40004c00 	.word	0x40004c00
 8003af8:	50000800 	.word	0x50000800
 8003afc:	20000428 	.word	0x20000428
 8003b00:	4002001c 	.word	0x4002001c

08003b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b04:	480d      	ldr	r0, [pc, #52]	@ (8003b3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b08:	f7ff fe0e 	bl	8003728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b0c:	480c      	ldr	r0, [pc, #48]	@ (8003b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b0e:	490d      	ldr	r1, [pc, #52]	@ (8003b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b10:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <LoopForever+0xe>)
  movs r3, #0
 8003b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b14:	e002      	b.n	8003b1c <LoopCopyDataInit>

08003b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b1a:	3304      	adds	r3, #4

08003b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b20:	d3f9      	bcc.n	8003b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b22:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b24:	4c0a      	ldr	r4, [pc, #40]	@ (8003b50 <LoopForever+0x16>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b28:	e001      	b.n	8003b2e <LoopFillZerobss>

08003b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b2c:	3204      	adds	r2, #4

08003b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b30:	d3fb      	bcc.n	8003b2a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003b32:	f003 ff0f 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b36:	f7ff fb4d 	bl	80031d4 <main>

08003b3a <LoopForever>:

LoopForever:
    b LoopForever
 8003b3a:	e7fe      	b.n	8003b3a <LoopForever>
   ldr   r0, =_estack
 8003b3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003b48:	08009fac 	.word	0x08009fac
  ldr r2, =_sbss
 8003b4c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003b50:	200005c0 	.word	0x200005c0

08003b54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b54:	e7fe      	b.n	8003b54 <ADC1_COMP_IRQHandler>
	...

08003b58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b5e:	1dfb      	adds	r3, r7, #7
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_Init+0x3c>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_Init+0x3c>)
 8003b6a:	2140      	movs	r1, #64	@ 0x40
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b70:	2003      	movs	r0, #3
 8003b72:	f000 f811 	bl	8003b98 <HAL_InitTick>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b7a:	1dfb      	adds	r3, r7, #7
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e001      	b.n	8003b86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b82:	f7ff fcb5 	bl	80034f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b86:	1dfb      	adds	r3, r7, #7
 8003b88:	781b      	ldrb	r3, [r3, #0]
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	40022000 	.word	0x40022000

08003b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ba0:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <HAL_InitTick+0x5c>)
 8003ba2:	681c      	ldr	r4, [r3, #0]
 8003ba4:	4b14      	ldr	r3, [pc, #80]	@ (8003bf8 <HAL_InitTick+0x60>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	0019      	movs	r1, r3
 8003baa:	23fa      	movs	r3, #250	@ 0xfa
 8003bac:	0098      	lsls	r0, r3, #2
 8003bae:	f7fc fac7 	bl	8000140 <__udivsi3>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	f7fc fac2 	bl	8000140 <__udivsi3>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f90b 	bl	8003dda <HAL_SYSTICK_Config>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e00f      	b.n	8003bec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d80b      	bhi.n	8003bea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	425b      	negs	r3, r3
 8003bd8:	2200      	movs	r2, #0
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f8d8 	bl	8003d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_InitTick+0x64>)
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b003      	add	sp, #12
 8003bf2:	bd90      	pop	{r4, r7, pc}
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	20000010 	.word	0x20000010
 8003bfc:	2000000c 	.word	0x2000000c

08003c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_IncTick+0x1c>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	001a      	movs	r2, r3
 8003c0a:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_IncTick+0x20>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	18d2      	adds	r2, r2, r3
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <HAL_IncTick+0x20>)
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	46c0      	nop			@ (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	20000010 	.word	0x20000010
 8003c20:	20000470 	.word	0x20000470

08003c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  return uwTick;
 8003c28:	4b02      	ldr	r3, [pc, #8]	@ (8003c34 <HAL_GetTick+0x10>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	20000470 	.word	0x20000470

08003c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	0002      	movs	r2, r0
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c4a:	d809      	bhi.n	8003c60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	001a      	movs	r2, r3
 8003c52:	231f      	movs	r3, #31
 8003c54:	401a      	ands	r2, r3
 8003c56:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <__NVIC_EnableIRQ+0x30>)
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4091      	lsls	r1, r2
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
  }
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	0002      	movs	r2, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	1dfb      	adds	r3, r7, #7
 8003c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	1dfb      	adds	r3, r7, #7
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c80:	d828      	bhi.n	8003cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c82:	4a2f      	ldr	r2, [pc, #188]	@ (8003d40 <__NVIC_SetPriority+0xd4>)
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	33c0      	adds	r3, #192	@ 0xc0
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	589b      	ldr	r3, [r3, r2]
 8003c92:	1dfa      	adds	r2, r7, #7
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	0011      	movs	r1, r2
 8003c98:	2203      	movs	r2, #3
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	00d2      	lsls	r2, r2, #3
 8003c9e:	21ff      	movs	r1, #255	@ 0xff
 8003ca0:	4091      	lsls	r1, r2
 8003ca2:	000a      	movs	r2, r1
 8003ca4:	43d2      	mvns	r2, r2
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	22ff      	movs	r2, #255	@ 0xff
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	2303      	movs	r3, #3
 8003cba:	4003      	ands	r3, r0
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc0:	481f      	ldr	r0, [pc, #124]	@ (8003d40 <__NVIC_SetPriority+0xd4>)
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	33c0      	adds	r3, #192	@ 0xc0
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cd2:	e031      	b.n	8003d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <__NVIC_SetPriority+0xd8>)
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	0019      	movs	r1, r3
 8003cdc:	230f      	movs	r3, #15
 8003cde:	400b      	ands	r3, r1
 8003ce0:	3b08      	subs	r3, #8
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	3306      	adds	r3, #6
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	3304      	adds	r3, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1dfa      	adds	r2, r7, #7
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	00d2      	lsls	r2, r2, #3
 8003cfa:	21ff      	movs	r1, #255	@ 0xff
 8003cfc:	4091      	lsls	r1, r2
 8003cfe:	000a      	movs	r2, r1
 8003d00:	43d2      	mvns	r2, r2
 8003d02:	401a      	ands	r2, r3
 8003d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	22ff      	movs	r2, #255	@ 0xff
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	0018      	movs	r0, r3
 8003d14:	2303      	movs	r3, #3
 8003d16:	4003      	ands	r3, r0
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d1c:	4809      	ldr	r0, [pc, #36]	@ (8003d44 <__NVIC_SetPriority+0xd8>)
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	001c      	movs	r4, r3
 8003d24:	230f      	movs	r3, #15
 8003d26:	4023      	ands	r3, r4
 8003d28:	3b08      	subs	r3, #8
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	3306      	adds	r3, #6
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	18c3      	adds	r3, r0, r3
 8003d34:	3304      	adds	r3, #4
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b003      	add	sp, #12
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	045b      	lsls	r3, r3, #17
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d301      	bcc.n	8003d60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e010      	b.n	8003d82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d60:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <SysTick_Config+0x44>)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	3a01      	subs	r2, #1
 8003d66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d68:	2301      	movs	r3, #1
 8003d6a:	425b      	negs	r3, r3
 8003d6c:	2103      	movs	r1, #3
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff ff7c 	bl	8003c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <SysTick_Config+0x44>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d7a:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <SysTick_Config+0x44>)
 8003d7c:	2207      	movs	r2, #7
 8003d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	e000e010 	.word	0xe000e010

08003d90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	1c02      	adds	r2, r0, #0
 8003da0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff ff5d 	bl	8003c6c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7ff ff33 	bl	8003c38 <__NVIC_EnableIRQ>
}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff ffaf 	bl	8003d48 <SysTick_Config>
 8003dea:	0003      	movs	r3, r0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e061      	b.n	8003eca <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a32      	ldr	r2, [pc, #200]	@ (8003ed4 <HAL_DMA_Init+0xe0>)
 8003e0c:	4694      	mov	ip, r2
 8003e0e:	4463      	add	r3, ip
 8003e10:	2114      	movs	r1, #20
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fc f994 	bl	8000140 <__udivsi3>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	009a      	lsls	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed8 <HAL_DMA_Init+0xe4>)
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2225      	movs	r2, #37	@ 0x25
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_DMA_Init+0xe8>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	01db      	lsls	r3, r3, #7
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e80:	4b17      	ldr	r3, [pc, #92]	@ (8003ee0 <HAL_DMA_Init+0xec>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	211c      	movs	r1, #28
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	4099      	lsls	r1, r3
 8003e90:	000b      	movs	r3, r1
 8003e92:	43d9      	mvns	r1, r3
 8003e94:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <HAL_DMA_Init+0xec>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <HAL_DMA_Init+0xec>)
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	201c      	movs	r0, #28
 8003ea8:	4003      	ands	r3, r0
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <HAL_DMA_Init+0xec>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2225      	movs	r2, #37	@ 0x25
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	@ 0x24
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b004      	add	sp, #16
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	bffdfff8 	.word	0xbffdfff8
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	ffff800f 	.word	0xffff800f
 8003ee0:	400200a8 	.word	0x400200a8

08003ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef2:	2317      	movs	r3, #23
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2224      	movs	r2, #36	@ 0x24
 8003efe:	5c9b      	ldrb	r3, [r3, r2]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA_Start_IT+0x24>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e04f      	b.n	8003fa8 <HAL_DMA_Start_IT+0xc4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2224      	movs	r2, #36	@ 0x24
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2225      	movs	r2, #37	@ 0x25
 8003f14:	5c9b      	ldrb	r3, [r3, r2]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d13a      	bne.n	8003f92 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2225      	movs	r2, #37	@ 0x25
 8003f20:	2102      	movs	r1, #2
 8003f22:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	438a      	bics	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f96a 	bl	800421a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	210e      	movs	r1, #14
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e00f      	b.n	8003f80 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	210a      	movs	r1, #10
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e007      	b.n	8003fa2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2224      	movs	r2, #36	@ 0x24
 8003f96:	2100      	movs	r1, #0
 8003f98:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f9a:	2317      	movs	r3, #23
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003fa2:	2317      	movs	r3, #23
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	230f      	movs	r3, #15
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2225      	movs	r2, #37	@ 0x25
 8003fc4:	5c9b      	ldrb	r3, [r3, r2]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d008      	beq.n	8003fde <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2224      	movs	r2, #36	@ 0x24
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e024      	b.n	8004028 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	210e      	movs	r1, #14
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	221c      	movs	r2, #28
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	2101      	movs	r1, #1
 800400c:	4091      	lsls	r1, r2
 800400e:	000a      	movs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2225      	movs	r2, #37	@ 0x25
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2224      	movs	r2, #36	@ 0x24
 800401e:	2100      	movs	r1, #0
 8004020:	5499      	strb	r1, [r3, r2]

    return status;
 8004022:	230f      	movs	r3, #15
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	210f      	movs	r1, #15
 800403a:	187b      	adds	r3, r7, r1
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2225      	movs	r2, #37	@ 0x25
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d006      	beq.n	800405a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2204      	movs	r2, #4
 8004050:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e02a      	b.n	80040b0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	210e      	movs	r1, #14
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	438a      	bics	r2, r1
 8004078:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	221c      	movs	r2, #28
 8004080:	401a      	ands	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2101      	movs	r1, #1
 8004088:	4091      	lsls	r1, r2
 800408a:	000a      	movs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2225      	movs	r2, #37	@ 0x25
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2224      	movs	r2, #36	@ 0x24
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	0010      	movs	r0, r2
 80040ae:	4798      	blx	r3
    }
  }
  return status;
 80040b0:	230f      	movs	r3, #15
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b004      	add	sp, #16
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	221c      	movs	r2, #28
 80040dc:	4013      	ands	r3, r2
 80040de:	2204      	movs	r2, #4
 80040e0:	409a      	lsls	r2, r3
 80040e2:	0013      	movs	r3, r2
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	d026      	beq.n	8004138 <HAL_DMA_IRQHandler+0x7a>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2204      	movs	r2, #4
 80040ee:	4013      	ands	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2220      	movs	r2, #32
 80040fa:	4013      	ands	r3, r2
 80040fc:	d107      	bne.n	800410e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2104      	movs	r1, #4
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	221c      	movs	r2, #28
 8004114:	401a      	ands	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	2104      	movs	r1, #4
 800411c:	4091      	lsls	r1, r2
 800411e:	000a      	movs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	2b00      	cmp	r3, #0
 8004128:	d100      	bne.n	800412c <HAL_DMA_IRQHandler+0x6e>
 800412a:	e071      	b.n	8004210 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	0010      	movs	r0, r2
 8004134:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004136:	e06b      	b.n	8004210 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413c:	221c      	movs	r2, #28
 800413e:	4013      	ands	r3, r2
 8004140:	2202      	movs	r2, #2
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4013      	ands	r3, r2
 800414a:	d02d      	beq.n	80041a8 <HAL_DMA_IRQHandler+0xea>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2202      	movs	r2, #2
 8004150:	4013      	ands	r3, r2
 8004152:	d029      	beq.n	80041a8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	4013      	ands	r3, r2
 800415e:	d10b      	bne.n	8004178 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	210a      	movs	r1, #10
 800416c:	438a      	bics	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2225      	movs	r2, #37	@ 0x25
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417c:	221c      	movs	r2, #28
 800417e:	401a      	ands	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	2102      	movs	r1, #2
 8004186:	4091      	lsls	r1, r2
 8004188:	000a      	movs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	@ 0x24
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d039      	beq.n	8004210 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	0010      	movs	r0, r2
 80041a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041a6:	e033      	b.n	8004210 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	221c      	movs	r2, #28
 80041ae:	4013      	ands	r3, r2
 80041b0:	2208      	movs	r2, #8
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4013      	ands	r3, r2
 80041ba:	d02a      	beq.n	8004212 <HAL_DMA_IRQHandler+0x154>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2208      	movs	r2, #8
 80041c0:	4013      	ands	r3, r2
 80041c2:	d026      	beq.n	8004212 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	210e      	movs	r1, #14
 80041d0:	438a      	bics	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	221c      	movs	r2, #28
 80041da:	401a      	ands	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	2101      	movs	r1, #1
 80041e2:	4091      	lsls	r1, r2
 80041e4:	000a      	movs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2225      	movs	r2, #37	@ 0x25
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2224      	movs	r2, #36	@ 0x24
 80041fa:	2100      	movs	r1, #0
 80041fc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	0010      	movs	r0, r2
 800420e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	46c0      	nop			@ (mov r8, r8)
}
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}

0800421a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	221c      	movs	r2, #28
 800422e:	401a      	ands	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	2101      	movs	r1, #1
 8004236:	4091      	lsls	r1, r2
 8004238:	000a      	movs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b10      	cmp	r3, #16
 800424a:	d108      	bne.n	800425e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800425c:	e007      	b.n	800426e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	60da      	str	r2, [r3, #12]
}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b004      	add	sp, #16
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800428e:	e155      	b.n	800453c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4091      	lsls	r1, r2
 800429a:	000a      	movs	r2, r1
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d100      	bne.n	80042a8 <HAL_GPIO_Init+0x30>
 80042a6:	e146      	b.n	8004536 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2203      	movs	r2, #3
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d005      	beq.n	80042c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2203      	movs	r2, #3
 80042ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d130      	bne.n	8004322 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	2203      	movs	r2, #3
 80042cc:	409a      	lsls	r2, r3
 80042ce:	0013      	movs	r3, r2
 80042d0:	43da      	mvns	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4013      	ands	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	0013      	movs	r3, r2
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f6:	2201      	movs	r2, #1
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	409a      	lsls	r2, r3
 80042fc:	0013      	movs	r3, r2
 80042fe:	43da      	mvns	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	2201      	movs	r2, #1
 800430e:	401a      	ands	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	409a      	lsls	r2, r3
 8004314:	0013      	movs	r3, r2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2203      	movs	r2, #3
 8004328:	4013      	ands	r3, r2
 800432a:	2b03      	cmp	r3, #3
 800432c:	d017      	beq.n	800435e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2203      	movs	r2, #3
 800433a:	409a      	lsls	r2, r3
 800433c:	0013      	movs	r3, r2
 800433e:	43da      	mvns	r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	0013      	movs	r3, r2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2203      	movs	r2, #3
 8004364:	4013      	ands	r3, r2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d123      	bne.n	80043b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	08da      	lsrs	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3208      	adds	r2, #8
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	58d3      	ldr	r3, [r2, r3]
 8004376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2207      	movs	r2, #7
 800437c:	4013      	ands	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	409a      	lsls	r2, r3
 8004384:	0013      	movs	r3, r2
 8004386:	43da      	mvns	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2107      	movs	r1, #7
 8004396:	400b      	ands	r3, r1
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	409a      	lsls	r2, r3
 800439c:	0013      	movs	r3, r2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	08da      	lsrs	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3208      	adds	r2, #8
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	6939      	ldr	r1, [r7, #16]
 80043b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	409a      	lsls	r2, r3
 80043c0:	0013      	movs	r3, r2
 80043c2:	43da      	mvns	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2203      	movs	r2, #3
 80043d0:	401a      	ands	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	0013      	movs	r3, r2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	23c0      	movs	r3, #192	@ 0xc0
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	4013      	ands	r3, r2
 80043f0:	d100      	bne.n	80043f4 <HAL_GPIO_Init+0x17c>
 80043f2:	e0a0      	b.n	8004536 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f4:	4b57      	ldr	r3, [pc, #348]	@ (8004554 <HAL_GPIO_Init+0x2dc>)
 80043f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043f8:	4b56      	ldr	r3, [pc, #344]	@ (8004554 <HAL_GPIO_Init+0x2dc>)
 80043fa:	2101      	movs	r1, #1
 80043fc:	430a      	orrs	r2, r1
 80043fe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004400:	4a55      	ldr	r2, [pc, #340]	@ (8004558 <HAL_GPIO_Init+0x2e0>)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	3302      	adds	r3, #2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	589b      	ldr	r3, [r3, r2]
 800440c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2203      	movs	r2, #3
 8004412:	4013      	ands	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	220f      	movs	r2, #15
 8004418:	409a      	lsls	r2, r3
 800441a:	0013      	movs	r3, r2
 800441c:	43da      	mvns	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	23a0      	movs	r3, #160	@ 0xa0
 8004428:	05db      	lsls	r3, r3, #23
 800442a:	429a      	cmp	r2, r3
 800442c:	d01f      	beq.n	800446e <HAL_GPIO_Init+0x1f6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4a      	ldr	r2, [pc, #296]	@ (800455c <HAL_GPIO_Init+0x2e4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x1f2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a49      	ldr	r2, [pc, #292]	@ (8004560 <HAL_GPIO_Init+0x2e8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x1ee>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a48      	ldr	r2, [pc, #288]	@ (8004564 <HAL_GPIO_Init+0x2ec>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x1ea>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a47      	ldr	r2, [pc, #284]	@ (8004568 <HAL_GPIO_Init+0x2f0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x1e6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a46      	ldr	r2, [pc, #280]	@ (800456c <HAL_GPIO_Init+0x2f4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x1e2>
 8004456:	2305      	movs	r3, #5
 8004458:	e00a      	b.n	8004470 <HAL_GPIO_Init+0x1f8>
 800445a:	2306      	movs	r3, #6
 800445c:	e008      	b.n	8004470 <HAL_GPIO_Init+0x1f8>
 800445e:	2304      	movs	r3, #4
 8004460:	e006      	b.n	8004470 <HAL_GPIO_Init+0x1f8>
 8004462:	2303      	movs	r3, #3
 8004464:	e004      	b.n	8004470 <HAL_GPIO_Init+0x1f8>
 8004466:	2302      	movs	r3, #2
 8004468:	e002      	b.n	8004470 <HAL_GPIO_Init+0x1f8>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_GPIO_Init+0x1f8>
 800446e:	2300      	movs	r3, #0
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	2103      	movs	r1, #3
 8004474:	400a      	ands	r2, r1
 8004476:	0092      	lsls	r2, r2, #2
 8004478:	4093      	lsls	r3, r2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004480:	4935      	ldr	r1, [pc, #212]	@ (8004558 <HAL_GPIO_Init+0x2e0>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3302      	adds	r3, #2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448e:	4b38      	ldr	r3, [pc, #224]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	43da      	mvns	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	035b      	lsls	r3, r3, #13
 80044a6:	4013      	ands	r3, r2
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80044b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	43da      	mvns	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	039b      	lsls	r3, r3, #14
 80044d0:	4013      	ands	r3, r2
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044dc:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80044e2:	4b23      	ldr	r3, [pc, #140]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	4013      	ands	r3, r2
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004506:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800450c:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	43da      	mvns	r2, r3
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	025b      	lsls	r3, r3, #9
 8004524:	4013      	ands	r3, r2
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004530:	4b0f      	ldr	r3, [pc, #60]	@ (8004570 <HAL_GPIO_Init+0x2f8>)
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3301      	adds	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	40da      	lsrs	r2, r3
 8004544:	1e13      	subs	r3, r2, #0
 8004546:	d000      	beq.n	800454a <HAL_GPIO_Init+0x2d2>
 8004548:	e6a2      	b.n	8004290 <HAL_GPIO_Init+0x18>
  }
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	46c0      	nop			@ (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b006      	add	sp, #24
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	40010000 	.word	0x40010000
 800455c:	50000400 	.word	0x50000400
 8004560:	50000800 	.word	0x50000800
 8004564:	50000c00 	.word	0x50000c00
 8004568:	50001000 	.word	0x50001000
 800456c:	50001c00 	.word	0x50001c00
 8004570:	40010400 	.word	0x40010400

08004574 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	0008      	movs	r0, r1
 800457e:	0011      	movs	r1, r2
 8004580:	1cbb      	adds	r3, r7, #2
 8004582:	1c02      	adds	r2, r0, #0
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	1c7b      	adds	r3, r7, #1
 8004588:	1c0a      	adds	r2, r1, #0
 800458a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800458c:	1c7b      	adds	r3, r7, #1
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004594:	1cbb      	adds	r3, r7, #2
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800459c:	e003      	b.n	80045a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800459e:	1cbb      	adds	r3, r7, #2
 80045a0:	881a      	ldrh	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b002      	add	sp, #8
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b0:	b5b0      	push	{r4, r5, r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f000 fbbf 	bl	8004d42 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c4:	4bc9      	ldr	r3, [pc, #804]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	220c      	movs	r2, #12
 80045ca:	4013      	ands	r3, r2
 80045cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ce:	4bc7      	ldr	r3, [pc, #796]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	4013      	ands	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d100      	bne.n	80045e6 <HAL_RCC_OscConfig+0x36>
 80045e4:	e07e      	b.n	80046e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d007      	beq.n	80045fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d112      	bne.n	8004618 <HAL_RCC_OscConfig+0x68>
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	025b      	lsls	r3, r3, #9
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d10d      	bne.n	8004618 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	4bbb      	ldr	r3, [pc, #748]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	4013      	ands	r3, r2
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x5a>
 8004608:	e06b      	b.n	80046e2 <HAL_RCC_OscConfig+0x132>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d167      	bne.n	80046e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f000 fb95 	bl	8004d42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	2380      	movs	r3, #128	@ 0x80
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	429a      	cmp	r2, r3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x84>
 8004624:	4bb1      	ldr	r3, [pc, #708]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4bb0      	ldr	r3, [pc, #704]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800462a:	2180      	movs	r1, #128	@ 0x80
 800462c:	0249      	lsls	r1, r1, #9
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e027      	b.n	8004684 <HAL_RCC_OscConfig+0xd4>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	23a0      	movs	r3, #160	@ 0xa0
 800463a:	02db      	lsls	r3, r3, #11
 800463c:	429a      	cmp	r2, r3
 800463e:	d10e      	bne.n	800465e <HAL_RCC_OscConfig+0xae>
 8004640:	4baa      	ldr	r3, [pc, #680]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4ba9      	ldr	r3, [pc, #676]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004646:	2180      	movs	r1, #128	@ 0x80
 8004648:	02c9      	lsls	r1, r1, #11
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	4ba7      	ldr	r3, [pc, #668]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4ba6      	ldr	r3, [pc, #664]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004654:	2180      	movs	r1, #128	@ 0x80
 8004656:	0249      	lsls	r1, r1, #9
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e012      	b.n	8004684 <HAL_RCC_OscConfig+0xd4>
 800465e:	4ba3      	ldr	r3, [pc, #652]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4ba2      	ldr	r3, [pc, #648]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004664:	49a2      	ldr	r1, [pc, #648]	@ (80048f0 <HAL_RCC_OscConfig+0x340>)
 8004666:	400a      	ands	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	4ba0      	ldr	r3, [pc, #640]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	2380      	movs	r3, #128	@ 0x80
 8004670:	025b      	lsls	r3, r3, #9
 8004672:	4013      	ands	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4b9c      	ldr	r3, [pc, #624]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b9b      	ldr	r3, [pc, #620]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800467e:	499d      	ldr	r1, [pc, #628]	@ (80048f4 <HAL_RCC_OscConfig+0x344>)
 8004680:	400a      	ands	r2, r1
 8004682:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7ff faca 	bl	8003c24 <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004694:	e009      	b.n	80046aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004696:	f7ff fac5 	bl	8003c24 <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b64      	cmp	r3, #100	@ 0x64
 80046a2:	d902      	bls.n	80046aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	f000 fb4c 	bl	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046aa:	4b90      	ldr	r3, [pc, #576]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	@ 0x80
 80046b0:	029b      	lsls	r3, r3, #10
 80046b2:	4013      	ands	r3, r2
 80046b4:	d0ef      	beq.n	8004696 <HAL_RCC_OscConfig+0xe6>
 80046b6:	e015      	b.n	80046e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7ff fab4 	bl	8003c24 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c2:	f7ff faaf 	bl	8003c24 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	@ 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e336      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046d4:	4b85      	ldr	r3, [pc, #532]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	029b      	lsls	r3, r3, #10
 80046dc:	4013      	ands	r3, r2
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x112>
 80046e0:	e000      	b.n	80046e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2202      	movs	r2, #2
 80046ea:	4013      	ands	r3, r2
 80046ec:	d100      	bne.n	80046f0 <HAL_RCC_OscConfig+0x140>
 80046ee:	e099      	b.n	8004824 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2220      	movs	r2, #32
 80046fa:	4013      	ands	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80046fe:	4b7b      	ldr	r3, [pc, #492]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b7a      	ldr	r3, [pc, #488]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004704:	2120      	movs	r1, #32
 8004706:	430a      	orrs	r2, r1
 8004708:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	2220      	movs	r2, #32
 800470e:	4393      	bics	r3, r2
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d13e      	bne.n	800479c <HAL_RCC_OscConfig+0x1ec>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d13b      	bne.n	800479c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004724:	4b71      	ldr	r3, [pc, #452]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2204      	movs	r2, #4
 800472a:	4013      	ands	r3, r2
 800472c:	d004      	beq.n	8004738 <HAL_RCC_OscConfig+0x188>
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e304      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004738:	4b6c      	ldr	r3, [pc, #432]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a6e      	ldr	r2, [pc, #440]	@ (80048f8 <HAL_RCC_OscConfig+0x348>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	4b68      	ldr	r3, [pc, #416]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800474e:	4b67      	ldr	r3, [pc, #412]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2209      	movs	r2, #9
 8004754:	4393      	bics	r3, r2
 8004756:	0019      	movs	r1, r3
 8004758:	4b64      	ldr	r3, [pc, #400]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800475a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800475c:	430a      	orrs	r2, r1
 800475e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004760:	f000 fc42 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 8004764:	0001      	movs	r1, r0
 8004766:	4b61      	ldr	r3, [pc, #388]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	220f      	movs	r2, #15
 800476e:	4013      	ands	r3, r2
 8004770:	4a62      	ldr	r2, [pc, #392]	@ (80048fc <HAL_RCC_OscConfig+0x34c>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	000a      	movs	r2, r1
 8004776:	40da      	lsrs	r2, r3
 8004778:	4b61      	ldr	r3, [pc, #388]	@ (8004900 <HAL_RCC_OscConfig+0x350>)
 800477a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800477c:	4b61      	ldr	r3, [pc, #388]	@ (8004904 <HAL_RCC_OscConfig+0x354>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2513      	movs	r5, #19
 8004782:	197c      	adds	r4, r7, r5
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff fa07 	bl	8003b98 <HAL_InitTick>
 800478a:	0003      	movs	r3, r0
 800478c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800478e:	197b      	adds	r3, r7, r5
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d046      	beq.n	8004824 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004796:	197b      	adds	r3, r7, r5
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	e2d2      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d027      	beq.n	80047f2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80047a2:	4b52      	ldr	r3, [pc, #328]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2209      	movs	r2, #9
 80047a8:	4393      	bics	r3, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	4b4f      	ldr	r3, [pc, #316]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7ff fa36 	bl	8003c24 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047be:	f7ff fa31 	bl	8003c24 <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e2b8      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d0:	4b46      	ldr	r3, [pc, #280]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2204      	movs	r2, #4
 80047d6:	4013      	ands	r3, r2
 80047d8:	d0f1      	beq.n	80047be <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047da:	4b44      	ldr	r3, [pc, #272]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4a46      	ldr	r2, [pc, #280]	@ (80048f8 <HAL_RCC_OscConfig+0x348>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	021a      	lsls	r2, r3, #8
 80047ea:	4b40      	ldr	r3, [pc, #256]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	e018      	b.n	8004824 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b3e      	ldr	r3, [pc, #248]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80047f8:	2101      	movs	r1, #1
 80047fa:	438a      	bics	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7ff fa11 	bl	8003c24 <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004808:	f7ff fa0c 	bl	8003c24 <HAL_GetTick>
 800480c:	0002      	movs	r2, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e293      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800481a:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2204      	movs	r2, #4
 8004820:	4013      	ands	r3, r2
 8004822:	d1f1      	bne.n	8004808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	4013      	ands	r3, r2
 800482c:	d100      	bne.n	8004830 <HAL_RCC_OscConfig+0x280>
 800482e:	e0a2      	b.n	8004976 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d140      	bne.n	80048b8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004836:	4b2d      	ldr	r3, [pc, #180]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	2380      	movs	r3, #128	@ 0x80
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4013      	ands	r3, r2
 8004840:	d005      	beq.n	800484e <HAL_RCC_OscConfig+0x29e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e279      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484e:	4b27      	ldr	r3, [pc, #156]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <HAL_RCC_OscConfig+0x358>)
 8004854:	4013      	ands	r3, r2
 8004856:	0019      	movs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800485c:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004862:	4b22      	ldr	r3, [pc, #136]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	0a19      	lsrs	r1, r3, #8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	061a      	lsls	r2, r3, #24
 8004870:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	3301      	adds	r3, #1
 800487e:	2280      	movs	r2, #128	@ 0x80
 8004880:	0212      	lsls	r2, r2, #8
 8004882:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004884:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	210f      	movs	r1, #15
 800488c:	400b      	ands	r3, r1
 800488e:	491b      	ldr	r1, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x34c>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004894:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <HAL_RCC_OscConfig+0x350>)
 8004896:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004898:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <HAL_RCC_OscConfig+0x354>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2513      	movs	r5, #19
 800489e:	197c      	adds	r4, r7, r5
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7ff f979 	bl	8003b98 <HAL_InitTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80048aa:	197b      	adds	r3, r7, r5
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d061      	beq.n	8004976 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80048b2:	197b      	adds	r3, r7, r5
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	e244      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d040      	beq.n	8004942 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048c0:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCC_OscConfig+0x33c>)
 80048c6:	2180      	movs	r1, #128	@ 0x80
 80048c8:	0049      	lsls	r1, r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7ff f9a9 	bl	8003c24 <HAL_GetTick>
 80048d2:	0003      	movs	r3, r0
 80048d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048d6:	e019      	b.n	800490c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d8:	f7ff f9a4 	bl	8003c24 <HAL_GetTick>
 80048dc:	0002      	movs	r2, r0
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d912      	bls.n	800490c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e22b      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	40021000 	.word	0x40021000
 80048f0:	fffeffff 	.word	0xfffeffff
 80048f4:	fffbffff 	.word	0xfffbffff
 80048f8:	ffffe0ff 	.word	0xffffe0ff
 80048fc:	08009b64 	.word	0x08009b64
 8004900:	20000008 	.word	0x20000008
 8004904:	2000000c 	.word	0x2000000c
 8004908:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800490c:	4bca      	ldr	r3, [pc, #808]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4013      	ands	r3, r2
 8004916:	d0df      	beq.n	80048d8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004918:	4bc7      	ldr	r3, [pc, #796]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4ac7      	ldr	r2, [pc, #796]	@ (8004c3c <HAL_RCC_OscConfig+0x68c>)
 800491e:	4013      	ands	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004926:	4bc4      	ldr	r3, [pc, #784]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492c:	4bc2      	ldr	r3, [pc, #776]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	0a19      	lsrs	r1, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	061a      	lsls	r2, r3, #24
 800493a:	4bbf      	ldr	r3, [pc, #764]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	e019      	b.n	8004976 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004942:	4bbd      	ldr	r3, [pc, #756]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4bbc      	ldr	r3, [pc, #752]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004948:	49bd      	ldr	r1, [pc, #756]	@ (8004c40 <HAL_RCC_OscConfig+0x690>)
 800494a:	400a      	ands	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7ff f969 	bl	8003c24 <HAL_GetTick>
 8004952:	0003      	movs	r3, r0
 8004954:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004958:	f7ff f964 	bl	8003c24 <HAL_GetTick>
 800495c:	0002      	movs	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1eb      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800496a:	4bb3      	ldr	r3, [pc, #716]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4013      	ands	r3, r2
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2208      	movs	r2, #8
 800497c:	4013      	ands	r3, r2
 800497e:	d036      	beq.n	80049ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d019      	beq.n	80049bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004988:	4bab      	ldr	r3, [pc, #684]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800498a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800498c:	4baa      	ldr	r3, [pc, #680]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 800498e:	2101      	movs	r1, #1
 8004990:	430a      	orrs	r2, r1
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004994:	f7ff f946 	bl	8003c24 <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499e:	f7ff f941 	bl	8003c24 <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e1c8      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	2202      	movs	r2, #2
 80049b6:	4013      	ands	r3, r2
 80049b8:	d0f1      	beq.n	800499e <HAL_RCC_OscConfig+0x3ee>
 80049ba:	e018      	b.n	80049ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 80049be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049c0:	4b9d      	ldr	r3, [pc, #628]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c8:	f7ff f92c 	bl	8003c24 <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d2:	f7ff f927 	bl	8003c24 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1ae      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049e4:	4b94      	ldr	r3, [pc, #592]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e8:	2202      	movs	r2, #2
 80049ea:	4013      	ands	r3, r2
 80049ec:	d1f1      	bne.n	80049d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2204      	movs	r2, #4
 80049f4:	4013      	ands	r3, r2
 80049f6:	d100      	bne.n	80049fa <HAL_RCC_OscConfig+0x44a>
 80049f8:	e0ae      	b.n	8004b58 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2023      	movs	r0, #35	@ 0x23
 80049fc:	183b      	adds	r3, r7, r0
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a02:	4b8d      	ldr	r3, [pc, #564]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	055b      	lsls	r3, r3, #21
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a12:	4b89      	ldr	r3, [pc, #548]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a14:	2180      	movs	r1, #128	@ 0x80
 8004a16:	0549      	lsls	r1, r1, #21
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004a1c:	183b      	adds	r3, r7, r0
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a22:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_RCC_OscConfig+0x694>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	@ 0x80
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d11a      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2e:	4b85      	ldr	r3, [pc, #532]	@ (8004c44 <HAL_RCC_OscConfig+0x694>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b84      	ldr	r3, [pc, #528]	@ (8004c44 <HAL_RCC_OscConfig+0x694>)
 8004a34:	2180      	movs	r1, #128	@ 0x80
 8004a36:	0049      	lsls	r1, r1, #1
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3c:	f7ff f8f2 	bl	8003c24 <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7ff f8ed 	bl	8003c24 <HAL_GetTick>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	@ 0x64
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e174      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b7a      	ldr	r3, [pc, #488]	@ (8004c44 <HAL_RCC_OscConfig+0x694>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4013      	ands	r3, r2
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	2380      	movs	r3, #128	@ 0x80
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4d0>
 8004a70:	4b71      	ldr	r3, [pc, #452]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a74:	4b70      	ldr	r3, [pc, #448]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a76:	2180      	movs	r1, #128	@ 0x80
 8004a78:	0049      	lsls	r1, r1, #1
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a7e:	e031      	b.n	8004ae4 <HAL_RCC_OscConfig+0x534>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x4f2>
 8004a88:	4b6b      	ldr	r3, [pc, #428]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a8e:	496c      	ldr	r1, [pc, #432]	@ (8004c40 <HAL_RCC_OscConfig+0x690>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a94:	4b68      	ldr	r3, [pc, #416]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a98:	4b67      	ldr	r3, [pc, #412]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004a9a:	496b      	ldr	r1, [pc, #428]	@ (8004c48 <HAL_RCC_OscConfig+0x698>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004aa0:	e020      	b.n	8004ae4 <HAL_RCC_OscConfig+0x534>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	23a0      	movs	r3, #160	@ 0xa0
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d10e      	bne.n	8004acc <HAL_RCC_OscConfig+0x51c>
 8004aae:	4b62      	ldr	r3, [pc, #392]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ab2:	4b61      	ldr	r3, [pc, #388]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ab4:	2180      	movs	r1, #128	@ 0x80
 8004ab6:	00c9      	lsls	r1, r1, #3
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	651a      	str	r2, [r3, #80]	@ 0x50
 8004abc:	4b5e      	ldr	r3, [pc, #376]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004abe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ac2:	2180      	movs	r1, #128	@ 0x80
 8004ac4:	0049      	lsls	r1, r1, #1
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x534>
 8004acc:	4b5a      	ldr	r3, [pc, #360]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ace:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ad0:	4b59      	ldr	r3, [pc, #356]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ad2:	495b      	ldr	r1, [pc, #364]	@ (8004c40 <HAL_RCC_OscConfig+0x690>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ad8:	4b57      	ldr	r3, [pc, #348]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004adc:	4b56      	ldr	r3, [pc, #344]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004ade:	495a      	ldr	r1, [pc, #360]	@ (8004c48 <HAL_RCC_OscConfig+0x698>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7ff f89a 	bl	8003c24 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af4:	e009      	b.n	8004b0a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7ff f895 	bl	8003c24 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	4a52      	ldr	r2, [pc, #328]	@ (8004c4c <HAL_RCC_OscConfig+0x69c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e11b      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b0e:	2380      	movs	r3, #128	@ 0x80
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4013      	ands	r3, r2
 8004b14:	d0ef      	beq.n	8004af6 <HAL_RCC_OscConfig+0x546>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b18:	f7ff f884 	bl	8003c24 <HAL_GetTick>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b20:	e009      	b.n	8004b36 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7ff f87f 	bl	8003c24 <HAL_GetTick>
 8004b26:	0002      	movs	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	4a47      	ldr	r2, [pc, #284]	@ (8004c4c <HAL_RCC_OscConfig+0x69c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e105      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b36:	4b40      	ldr	r3, [pc, #256]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b3a:	2380      	movs	r3, #128	@ 0x80
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d1ef      	bne.n	8004b22 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b42:	2323      	movs	r3, #35	@ 0x23
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b50:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b52:	493f      	ldr	r1, [pc, #252]	@ (8004c50 <HAL_RCC_OscConfig+0x6a0>)
 8004b54:	400a      	ands	r2, r1
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d049      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d026      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004b6a:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b32      	ldr	r3, [pc, #200]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b70:	2101      	movs	r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	4b30      	ldr	r3, [pc, #192]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0x6a4>)
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <HAL_RCC_OscConfig+0x6a4>)
 8004b88:	2180      	movs	r1, #128	@ 0x80
 8004b8a:	0189      	lsls	r1, r1, #6
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7ff f848 	bl	8003c24 <HAL_GetTick>
 8004b94:	0003      	movs	r3, r0
 8004b96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b9a:	f7ff f843 	bl	8003c24 <HAL_GetTick>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0ca      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bac:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d0f1      	beq.n	8004b9a <HAL_RCC_OscConfig+0x5ea>
 8004bb6:	e01e      	b.n	8004bf6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <HAL_RCC_OscConfig+0x6a4>)
 8004bc6:	6a1a      	ldr	r2, [r3, #32]
 8004bc8:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <HAL_RCC_OscConfig+0x6a4>)
 8004bca:	4923      	ldr	r1, [pc, #140]	@ (8004c58 <HAL_RCC_OscConfig+0x6a8>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7ff f828 	bl	8003c24 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bda:	f7ff f823 	bl	8003c24 <HAL_GetTick>
 8004bde:	0002      	movs	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0aa      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bec:	4b12      	ldr	r3, [pc, #72]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d1f1      	bne.n	8004bda <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d100      	bne.n	8004c00 <HAL_RCC_OscConfig+0x650>
 8004bfe:	e09f      	b.n	8004d40 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d100      	bne.n	8004c08 <HAL_RCC_OscConfig+0x658>
 8004c06:	e078      	b.n	8004cfa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d159      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c10:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_RCC_OscConfig+0x688>)
 8004c16:	4911      	ldr	r1, [pc, #68]	@ (8004c5c <HAL_RCC_OscConfig+0x6ac>)
 8004c18:	400a      	ands	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7ff f802 	bl	8003c24 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c24:	e01c      	b.n	8004c60 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c26:	f7fe fffd 	bl	8003c24 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d915      	bls.n	8004c60 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e084      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	ffff1fff 	.word	0xffff1fff
 8004c40:	fffffeff 	.word	0xfffffeff
 8004c44:	40007000 	.word	0x40007000
 8004c48:	fffffbff 	.word	0xfffffbff
 8004c4c:	00001388 	.word	0x00001388
 8004c50:	efffffff 	.word	0xefffffff
 8004c54:	40010000 	.word	0x40010000
 8004c58:	ffffdfff 	.word	0xffffdfff
 8004c5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c60:	4b3a      	ldr	r3, [pc, #232]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	049b      	lsls	r3, r3, #18
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d1dc      	bne.n	8004c26 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6c:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a37      	ldr	r2, [pc, #220]	@ (8004d50 <HAL_RCC_OscConfig+0x7a0>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c84:	431a      	orrs	r2, r3
 8004c86:	4b31      	ldr	r3, [pc, #196]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b2e      	ldr	r3, [pc, #184]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004c92:	2180      	movs	r1, #128	@ 0x80
 8004c94:	0449      	lsls	r1, r1, #17
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fe ffc3 	bl	8003c24 <HAL_GetTick>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fe ffbe 	bl	8003c24 <HAL_GetTick>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e045      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004cb6:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	049b      	lsls	r3, r3, #18
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x6f4>
 8004cc2:	e03d      	b.n	8004d40 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b21      	ldr	r3, [pc, #132]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004cca:	4922      	ldr	r1, [pc, #136]	@ (8004d54 <HAL_RCC_OscConfig+0x7a4>)
 8004ccc:	400a      	ands	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fe ffa8 	bl	8003c24 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fe ffa3 	bl	8003c24 <HAL_GetTick>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e02a      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	049b      	lsls	r3, r3, #18
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x72a>
 8004cf8:	e022      	b.n	8004d40 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e01d      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d06:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_OscConfig+0x79c>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	401a      	ands	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d10f      	bne.n	8004d3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	23f0      	movs	r3, #240	@ 0xf0
 8004d20:	039b      	lsls	r3, r3, #14
 8004d22:	401a      	ands	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	23c0      	movs	r3, #192	@ 0xc0
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	401a      	ands	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b00a      	add	sp, #40	@ 0x28
 8004d48:	bdb0      	pop	{r4, r5, r7, pc}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	ff02ffff 	.word	0xff02ffff
 8004d54:	feffffff 	.word	0xfeffffff

08004d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d58:	b5b0      	push	{r4, r5, r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e128      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b96      	ldr	r3, [pc, #600]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	4013      	ands	r3, r2
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d91e      	bls.n	8004db8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b93      	ldr	r3, [pc, #588]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4393      	bics	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	4b90      	ldr	r3, [pc, #576]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d8c:	f7fe ff4a 	bl	8003c24 <HAL_GetTick>
 8004d90:	0003      	movs	r3, r0
 8004d92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d94:	e009      	b.n	8004daa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d96:	f7fe ff45 	bl	8003c24 <HAL_GetTick>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	4a8a      	ldr	r2, [pc, #552]	@ (8004fcc <HAL_RCC_ClockConfig+0x274>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e109      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b87      	ldr	r3, [pc, #540]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	4013      	ands	r3, r2
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1ee      	bne.n	8004d96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc2:	4b83      	ldr	r3, [pc, #524]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	22f0      	movs	r2, #240	@ 0xf0
 8004dc8:	4393      	bics	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	4b7f      	ldr	r3, [pc, #508]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d100      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x8a>
 8004de0:	e089      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dea:	4b79      	ldr	r3, [pc, #484]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	029b      	lsls	r3, r3, #10
 8004df2:	4013      	ands	r3, r2
 8004df4:	d120      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0e1      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e02:	4b73      	ldr	r3, [pc, #460]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	049b      	lsls	r3, r3, #18
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d114      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0d5      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	4013      	ands	r3, r2
 8004e22:	d109      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0ca      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e28:	4b69      	ldr	r3, [pc, #420]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4013      	ands	r3, r2
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0c2      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e38:	4b65      	ldr	r3, [pc, #404]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	4393      	bics	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4b62      	ldr	r3, [pc, #392]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e4c:	f7fe feea 	bl	8003c24 <HAL_GetTick>
 8004e50:	0003      	movs	r3, r0
 8004e52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d111      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e5c:	e009      	b.n	8004e72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5e:	f7fe fee1 	bl	8003c24 <HAL_GetTick>
 8004e62:	0002      	movs	r2, r0
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	4a58      	ldr	r2, [pc, #352]	@ (8004fcc <HAL_RCC_ClockConfig+0x274>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0a5      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e72:	4b57      	ldr	r3, [pc, #348]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	220c      	movs	r2, #12
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d1ef      	bne.n	8004e5e <HAL_RCC_ClockConfig+0x106>
 8004e7e:	e03a      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d111      	bne.n	8004eac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e88:	e009      	b.n	8004e9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8a:	f7fe fecb 	bl	8003c24 <HAL_GetTick>
 8004e8e:	0002      	movs	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	4a4d      	ldr	r2, [pc, #308]	@ (8004fcc <HAL_RCC_ClockConfig+0x274>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e08f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d1ef      	bne.n	8004e8a <HAL_RCC_ClockConfig+0x132>
 8004eaa:	e024      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d11b      	bne.n	8004eec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eb4:	e009      	b.n	8004eca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb6:	f7fe feb5 	bl	8003c24 <HAL_GetTick>
 8004eba:	0002      	movs	r2, r0
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	4a42      	ldr	r2, [pc, #264]	@ (8004fcc <HAL_RCC_ClockConfig+0x274>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e079      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eca:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	220c      	movs	r2, #12
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d1ef      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0x15e>
 8004ed6:	e00e      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fe fea4 	bl	8003c24 <HAL_GetTick>
 8004edc:	0002      	movs	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8004fcc <HAL_RCC_ClockConfig+0x274>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e068      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eec:	4b38      	ldr	r3, [pc, #224]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	220c      	movs	r2, #12
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef6:	4b34      	ldr	r3, [pc, #208]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d21e      	bcs.n	8004f42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f04:	4b30      	ldr	r3, [pc, #192]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4393      	bics	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f16:	f7fe fe85 	bl	8003c24 <HAL_GetTick>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	e009      	b.n	8004f34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f20:	f7fe fe80 	bl	8003c24 <HAL_GetTick>
 8004f24:	0002      	movs	r2, r0
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	4a28      	ldr	r2, [pc, #160]	@ (8004fcc <HAL_RCC_ClockConfig+0x274>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e044      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f34:	4b24      	ldr	r3, [pc, #144]	@ (8004fc8 <HAL_RCC_ClockConfig+0x270>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d1ee      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2204      	movs	r2, #4
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f4c:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a20      	ldr	r2, [pc, #128]	@ (8004fd4 <HAL_RCC_ClockConfig+0x27c>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	0019      	movs	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2208      	movs	r2, #8
 8004f66:	4013      	ands	r3, r2
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f6a:	4b19      	ldr	r3, [pc, #100]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <HAL_RCC_ClockConfig+0x280>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	00da      	lsls	r2, r3, #3
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f80:	f000 f832 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 8004f84:	0001      	movs	r1, r0
 8004f86:	4b12      	ldr	r3, [pc, #72]	@ (8004fd0 <HAL_RCC_ClockConfig+0x278>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	4013      	ands	r3, r2
 8004f90:	4a12      	ldr	r2, [pc, #72]	@ (8004fdc <HAL_RCC_ClockConfig+0x284>)
 8004f92:	5cd3      	ldrb	r3, [r2, r3]
 8004f94:	000a      	movs	r2, r1
 8004f96:	40da      	lsrs	r2, r3
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_RCC_ClockConfig+0x288>)
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f9c:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <HAL_RCC_ClockConfig+0x28c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	250b      	movs	r5, #11
 8004fa2:	197c      	adds	r4, r7, r5
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fe fdf7 	bl	8003b98 <HAL_InitTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004fae:	197b      	adds	r3, r7, r5
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004fb6:	197b      	adds	r3, r7, r5
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	40022000 	.word	0x40022000
 8004fcc:	00001388 	.word	0x00001388
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	fffff8ff 	.word	0xfffff8ff
 8004fd8:	ffffc7ff 	.word	0xffffc7ff
 8004fdc:	08009b64 	.word	0x08009b64
 8004fe0:	20000008 	.word	0x20000008
 8004fe4:	2000000c 	.word	0x2000000c

08004fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004fee:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	220c      	movs	r2, #12
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d013      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x3e>
 8004ffe:	d85c      	bhi.n	80050ba <HAL_RCC_GetSysClockFreq+0xd2>
 8005000:	2b04      	cmp	r3, #4
 8005002:	d002      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x22>
 8005004:	2b08      	cmp	r3, #8
 8005006:	d00b      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x38>
 8005008:	e057      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800500a:	4b35      	ldr	r3, [pc, #212]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2210      	movs	r2, #16
 8005010:	4013      	ands	r3, r2
 8005012:	d002      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005014:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005016:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005018:	e05d      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800501a:	4b33      	ldr	r3, [pc, #204]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800501c:	613b      	str	r3, [r7, #16]
      break;
 800501e:	e05a      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005020:	4b32      	ldr	r3, [pc, #200]	@ (80050ec <HAL_RCC_GetSysClockFreq+0x104>)
 8005022:	613b      	str	r3, [r7, #16]
      break;
 8005024:	e057      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	0c9b      	lsrs	r3, r3, #18
 800502a:	220f      	movs	r2, #15
 800502c:	4013      	ands	r3, r2
 800502e:	4a30      	ldr	r2, [pc, #192]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	0d9b      	lsrs	r3, r3, #22
 8005038:	2203      	movs	r2, #3
 800503a:	4013      	ands	r3, r2
 800503c:	3301      	adds	r3, #1
 800503e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005040:	4b27      	ldr	r3, [pc, #156]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	2380      	movs	r3, #128	@ 0x80
 8005046:	025b      	lsls	r3, r3, #9
 8005048:	4013      	ands	r3, r2
 800504a:	d00f      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	000a      	movs	r2, r1
 8005050:	0152      	lsls	r2, r2, #5
 8005052:	1a52      	subs	r2, r2, r1
 8005054:	0193      	lsls	r3, r2, #6
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	185b      	adds	r3, r3, r1
 800505c:	025b      	lsls	r3, r3, #9
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f7fb f86d 	bl	8000140 <__udivsi3>
 8005066:	0003      	movs	r3, r0
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e023      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800506c:	4b1c      	ldr	r3, [pc, #112]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2210      	movs	r2, #16
 8005072:	4013      	ands	r3, r2
 8005074:	d00f      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	000a      	movs	r2, r1
 800507a:	0152      	lsls	r2, r2, #5
 800507c:	1a52      	subs	r2, r2, r1
 800507e:	0193      	lsls	r3, r2, #6
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	185b      	adds	r3, r3, r1
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	0018      	movs	r0, r3
 800508c:	f7fb f858 	bl	8000140 <__udivsi3>
 8005090:	0003      	movs	r3, r0
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e00e      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	000a      	movs	r2, r1
 800509a:	0152      	lsls	r2, r2, #5
 800509c:	1a52      	subs	r2, r2, r1
 800509e:	0193      	lsls	r3, r2, #6
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	185b      	adds	r3, r3, r1
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7fb f848 	bl	8000140 <__udivsi3>
 80050b0:	0003      	movs	r3, r0
 80050b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	613b      	str	r3, [r7, #16]
      break;
 80050b8:	e00d      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80050ba:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	0b5b      	lsrs	r3, r3, #13
 80050c0:	2207      	movs	r2, #7
 80050c2:	4013      	ands	r3, r2
 80050c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	2280      	movs	r2, #128	@ 0x80
 80050cc:	0212      	lsls	r2, r2, #8
 80050ce:	409a      	lsls	r2, r3
 80050d0:	0013      	movs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
      break;
 80050d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050d6:	693b      	ldr	r3, [r7, #16]
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b006      	add	sp, #24
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	003d0900 	.word	0x003d0900
 80050e8:	00f42400 	.word	0x00f42400
 80050ec:	007a1200 	.word	0x007a1200
 80050f0:	08009b7c 	.word	0x08009b7c

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b02      	ldr	r3, [pc, #8]	@ (8005104 <HAL_RCC_GetHCLKFreq+0x10>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	20000008 	.word	0x20000008

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800510c:	f7ff fff2 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005110:	0001      	movs	r1, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	@ (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	2207      	movs	r2, #7
 800511a:	4013      	ands	r3, r2
 800511c:	4a04      	ldr	r2, [pc, #16]	@ (8005130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	40d9      	lsrs	r1, r3
 8005122:	000b      	movs	r3, r1
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	40021000 	.word	0x40021000
 8005130:	08009b74 	.word	0x08009b74

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005138:	f7ff ffdc 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 800513c:	0001      	movs	r1, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	0adb      	lsrs	r3, r3, #11
 8005144:	2207      	movs	r2, #7
 8005146:	4013      	ands	r3, r2
 8005148:	4a04      	ldr	r2, [pc, #16]	@ (800515c <HAL_RCC_GetPCLK2Freq+0x28>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	40d9      	lsrs	r1, r3
 800514e:	000b      	movs	r3, r1
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	40021000 	.word	0x40021000
 800515c:	08009b74 	.word	0x08009b74

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005168:	2317      	movs	r3, #23
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2220      	movs	r2, #32
 8005176:	4013      	ands	r3, r2
 8005178:	d106      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	@ 0x80
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4013      	ands	r3, r2
 8005184:	d100      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005186:	e104      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005188:	4bb9      	ldr	r3, [pc, #740]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800518a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800518c:	2380      	movs	r3, #128	@ 0x80
 800518e:	055b      	lsls	r3, r3, #21
 8005190:	4013      	ands	r3, r2
 8005192:	d10a      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4bb6      	ldr	r3, [pc, #728]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005198:	4bb5      	ldr	r3, [pc, #724]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800519a:	2180      	movs	r1, #128	@ 0x80
 800519c:	0549      	lsls	r1, r1, #21
 800519e:	430a      	orrs	r2, r1
 80051a0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80051a2:	2317      	movs	r3, #23
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051aa:	4bb2      	ldr	r3, [pc, #712]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	2380      	movs	r3, #128	@ 0x80
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4013      	ands	r3, r2
 80051b4:	d11a      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b6:	4baf      	ldr	r3, [pc, #700]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4bae      	ldr	r3, [pc, #696]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80051bc:	2180      	movs	r1, #128	@ 0x80
 80051be:	0049      	lsls	r1, r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c4:	f7fe fd2e 	bl	8003c24 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051cc:	e008      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fe fd29 	bl	8003c24 <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b64      	cmp	r3, #100	@ 0x64
 80051da:	d901      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e143      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	4ba4      	ldr	r3, [pc, #656]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	@ 0x80
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80051ec:	4ba0      	ldr	r3, [pc, #640]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	23c0      	movs	r3, #192	@ 0xc0
 80051f2:	039b      	lsls	r3, r3, #14
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	23c0      	movs	r3, #192	@ 0xc0
 80051fe:	039b      	lsls	r3, r3, #14
 8005200:	4013      	ands	r3, r2
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	429a      	cmp	r2, r3
 8005206:	d107      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	23c0      	movs	r3, #192	@ 0xc0
 800520e:	039b      	lsls	r3, r3, #14
 8005210:	4013      	ands	r3, r2
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d013      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	23c0      	movs	r3, #192	@ 0xc0
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	401a      	ands	r2, r3
 8005222:	23c0      	movs	r3, #192	@ 0xc0
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	429a      	cmp	r2, r3
 8005228:	d10a      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800522a:	4b91      	ldr	r3, [pc, #580]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	2380      	movs	r3, #128	@ 0x80
 8005230:	029b      	lsls	r3, r3, #10
 8005232:	401a      	ands	r2, r3
 8005234:	2380      	movs	r3, #128	@ 0x80
 8005236:	029b      	lsls	r3, r3, #10
 8005238:	429a      	cmp	r2, r3
 800523a:	d101      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e113      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005240:	4b8b      	ldr	r3, [pc, #556]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005242:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005244:	23c0      	movs	r3, #192	@ 0xc0
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d049      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	23c0      	movs	r3, #192	@ 0xc0
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	4013      	ands	r3, r2
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	429a      	cmp	r2, r3
 8005260:	d004      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2220      	movs	r2, #32
 8005268:	4013      	ands	r3, r2
 800526a:	d10d      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	23c0      	movs	r3, #192	@ 0xc0
 8005272:	029b      	lsls	r3, r3, #10
 8005274:	4013      	ands	r3, r2
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	429a      	cmp	r2, r3
 800527a:	d034      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	4013      	ands	r3, r2
 8005286:	d02e      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005288:	4b79      	ldr	r3, [pc, #484]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800528a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528c:	4a7a      	ldr	r2, [pc, #488]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005292:	4b77      	ldr	r3, [pc, #476]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005296:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005298:	2180      	movs	r1, #128	@ 0x80
 800529a:	0309      	lsls	r1, r1, #12
 800529c:	430a      	orrs	r2, r1
 800529e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a0:	4b73      	ldr	r3, [pc, #460]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052a4:	4b72      	ldr	r3, [pc, #456]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052a6:	4975      	ldr	r1, [pc, #468]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80052ac:	4b70      	ldr	r3, [pc, #448]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	2380      	movs	r3, #128	@ 0x80
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4013      	ands	r3, r2
 80052ba:	d014      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fcb2 	bl	8003c24 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c4:	e009      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fe fcad 	bl	8003c24 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0c6      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052da:	4b65      	ldr	r3, [pc, #404]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052de:	2380      	movs	r3, #128	@ 0x80
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4013      	ands	r3, r2
 80052e4:	d0ef      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	2380      	movs	r3, #128	@ 0x80
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	4013      	ands	r3, r2
 80052f0:	d01f      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	23c0      	movs	r3, #192	@ 0xc0
 80052f8:	029b      	lsls	r3, r3, #10
 80052fa:	401a      	ands	r2, r3
 80052fc:	23c0      	movs	r3, #192	@ 0xc0
 80052fe:	029b      	lsls	r3, r3, #10
 8005300:	429a      	cmp	r2, r3
 8005302:	d10c      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005304:	4b5a      	ldr	r3, [pc, #360]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a5e      	ldr	r2, [pc, #376]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	23c0      	movs	r3, #192	@ 0xc0
 8005314:	039b      	lsls	r3, r3, #14
 8005316:	401a      	ands	r2, r3
 8005318:	4b55      	ldr	r3, [pc, #340]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	4b54      	ldr	r3, [pc, #336]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005320:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	23c0      	movs	r3, #192	@ 0xc0
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	401a      	ands	r2, r3
 800532c:	4b50      	ldr	r3, [pc, #320]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800532e:	430a      	orrs	r2, r1
 8005330:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2220      	movs	r2, #32
 8005338:	4013      	ands	r3, r2
 800533a:	d01f      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	23c0      	movs	r3, #192	@ 0xc0
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	401a      	ands	r2, r3
 8005346:	23c0      	movs	r3, #192	@ 0xc0
 8005348:	029b      	lsls	r3, r3, #10
 800534a:	429a      	cmp	r2, r3
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800534e:	4b48      	ldr	r3, [pc, #288]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a4c      	ldr	r2, [pc, #304]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	23c0      	movs	r3, #192	@ 0xc0
 800535e:	039b      	lsls	r3, r3, #14
 8005360:	401a      	ands	r2, r3
 8005362:	4b43      	ldr	r3, [pc, #268]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800536a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	23c0      	movs	r3, #192	@ 0xc0
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	401a      	ands	r2, r3
 8005376:	4b3e      	ldr	r3, [pc, #248]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005378:	430a      	orrs	r2, r1
 800537a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800537c:	2317      	movs	r3, #23
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4b3a      	ldr	r3, [pc, #232]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800538a:	4b39      	ldr	r3, [pc, #228]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800538c:	493e      	ldr	r1, [pc, #248]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800538e:	400a      	ands	r2, r1
 8005390:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	4013      	ands	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539c:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800539e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a0:	2203      	movs	r2, #3
 80053a2:	4393      	bics	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053ac:	430a      	orrs	r2, r1
 80053ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053be:	220c      	movs	r2, #12
 80053c0:	4393      	bics	r3, r2
 80053c2:	0019      	movs	r1, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	4b29      	ldr	r3, [pc, #164]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053ca:	430a      	orrs	r2, r1
 80053cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2204      	movs	r2, #4
 80053d4:	4013      	ands	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053d8:	4b25      	ldr	r3, [pc, #148]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053dc:	4a2b      	ldr	r2, [pc, #172]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80053de:	4013      	ands	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	4b22      	ldr	r3, [pc, #136]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	4013      	ands	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	4a25      	ldr	r2, [pc, #148]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	4b1a      	ldr	r3, [pc, #104]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005406:	430a      	orrs	r2, r1
 8005408:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	4013      	ands	r3, r2
 8005414:	d009      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005416:	4b16      	ldr	r3, [pc, #88]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541a:	4a17      	ldr	r2, [pc, #92]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800541c:	4013      	ands	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005426:	430a      	orrs	r2, r1
 8005428:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	4013      	ands	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005434:	4b0e      	ldr	r3, [pc, #56]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005438:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800543a:	4013      	ands	r3, r2
 800543c:	0019      	movs	r1, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005442:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005444:	430a      	orrs	r2, r1
 8005446:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2280      	movs	r2, #128	@ 0x80
 800544e:	4013      	ands	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005452:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005456:	4a10      	ldr	r2, [pc, #64]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005458:	4013      	ands	r3, r2
 800545a:	0019      	movs	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005462:	430a      	orrs	r2, r1
 8005464:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b006      	add	sp, #24
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	40007000 	.word	0x40007000
 8005478:	fffcffff 	.word	0xfffcffff
 800547c:	fff7ffff 	.word	0xfff7ffff
 8005480:	00001388 	.word	0x00001388
 8005484:	ffcfffff 	.word	0xffcfffff
 8005488:	efffffff 	.word	0xefffffff
 800548c:	fffff3ff 	.word	0xfffff3ff
 8005490:	ffffcfff 	.word	0xffffcfff
 8005494:	fbffffff 	.word	0xfbffffff
 8005498:	fff3ffff 	.word	0xfff3ffff

0800549c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e044      	b.n	8005538 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2278      	movs	r2, #120	@ 0x78
 80054ba:	2100      	movs	r1, #0
 80054bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f7fe fa0b 	bl	80038dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2224      	movs	r2, #36	@ 0x24
 80054ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2101      	movs	r1, #1
 80054d8:	438a      	bics	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 fee4 	bl	80062b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	0018      	movs	r0, r3
 80054f0:	f000 fc42 	bl	8005d78 <UART_SetConfig>
 80054f4:	0003      	movs	r3, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e01c      	b.n	8005538 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	490d      	ldr	r1, [pc, #52]	@ (8005540 <HAL_UART_Init+0xa4>)
 800550a:	400a      	ands	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	212a      	movs	r1, #42	@ 0x2a
 800551a:	438a      	bics	r2, r1
 800551c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2101      	movs	r1, #1
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0018      	movs	r0, r3
 8005532:	f000 ff73 	bl	800641c <UART_CheckIdleState>
 8005536:	0003      	movs	r3, r0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}
 8005540:	ffffb7ff 	.word	0xffffb7ff

08005544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	@ 0x28
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	1dbb      	adds	r3, r7, #6
 8005552:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005558:	2b20      	cmp	r3, #32
 800555a:	d000      	beq.n	800555e <HAL_UART_Transmit+0x1a>
 800555c:	e08c      	b.n	8005678 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_UART_Transmit+0x28>
 8005564:	1dbb      	adds	r3, r7, #6
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e084      	b.n	800567a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	2380      	movs	r3, #128	@ 0x80
 8005576:	015b      	lsls	r3, r3, #5
 8005578:	429a      	cmp	r2, r3
 800557a:	d109      	bne.n	8005590 <HAL_UART_Transmit+0x4c>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2201      	movs	r2, #1
 8005588:	4013      	ands	r3, r2
 800558a:	d001      	beq.n	8005590 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e074      	b.n	800567a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2284      	movs	r2, #132	@ 0x84
 8005594:	2100      	movs	r1, #0
 8005596:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2221      	movs	r2, #33	@ 0x21
 800559c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559e:	f7fe fb41 	bl	8003c24 <HAL_GetTick>
 80055a2:	0003      	movs	r3, r0
 80055a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1dba      	adds	r2, r7, #6
 80055aa:	2150      	movs	r1, #80	@ 0x50
 80055ac:	8812      	ldrh	r2, [r2, #0]
 80055ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1dba      	adds	r2, r7, #6
 80055b4:	2152      	movs	r1, #82	@ 0x52
 80055b6:	8812      	ldrh	r2, [r2, #0]
 80055b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	015b      	lsls	r3, r3, #5
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d108      	bne.n	80055d8 <HAL_UART_Transmit+0x94>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e003      	b.n	80055e0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055e0:	e02f      	b.n	8005642 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	0013      	movs	r3, r2
 80055ec:	2200      	movs	r2, #0
 80055ee:	2180      	movs	r1, #128	@ 0x80
 80055f0:	f000 ffbc 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	d004      	beq.n	8005602 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e03b      	b.n	800567a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	001a      	movs	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	05d2      	lsls	r2, r2, #23
 8005614:	0dd2      	lsrs	r2, r2, #23
 8005616:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	3302      	adds	r3, #2
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	e007      	b.n	8005630 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3301      	adds	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2252      	movs	r2, #82	@ 0x52
 8005634:	5a9b      	ldrh	r3, [r3, r2]
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b299      	uxth	r1, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2252      	movs	r2, #82	@ 0x52
 8005640:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2252      	movs	r2, #82	@ 0x52
 8005646:	5a9b      	ldrh	r3, [r3, r2]
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1c9      	bne.n	80055e2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	0013      	movs	r3, r2
 8005658:	2200      	movs	r2, #0
 800565a:	2140      	movs	r1, #64	@ 0x40
 800565c:	f000 ff86 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005660:	1e03      	subs	r3, r0, #0
 8005662:	d004      	beq.n	800566e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e005      	b.n	800567a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	0018      	movs	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	b008      	add	sp, #32
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	1dbb      	adds	r3, r7, #6
 8005690:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2280      	movs	r2, #128	@ 0x80
 8005696:	589b      	ldr	r3, [r3, r2]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d14a      	bne.n	8005732 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_Receive_DMA+0x26>
 80056a2:	1dbb      	adds	r3, r7, #6
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e042      	b.n	8005734 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	2380      	movs	r3, #128	@ 0x80
 80056b4:	015b      	lsls	r3, r3, #5
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d109      	bne.n	80056ce <HAL_UART_Receive_DMA+0x4a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d105      	bne.n	80056ce <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2201      	movs	r2, #1
 80056c6:	4013      	ands	r3, r2
 80056c8:	d001      	beq.n	80056ce <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e032      	b.n	8005734 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a18      	ldr	r2, [pc, #96]	@ (800573c <HAL_UART_Receive_DMA+0xb8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d020      	beq.n	8005720 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	4013      	ands	r3, r2
 80056ea:	d019      	beq.n	8005720 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ec:	f3ef 8310 	mrs	r3, PRIMASK
 80056f0:	613b      	str	r3, [r7, #16]
  return(result);
 80056f2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	2301      	movs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			@ (mov r8, r8)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2180      	movs	r1, #128	@ 0x80
 800570e:	04c9      	lsls	r1, r1, #19
 8005710:	430a      	orrs	r2, r1
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f383 8810 	msr	PRIMASK, r3
}
 800571e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005720:	1dbb      	adds	r3, r7, #6
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	0018      	movs	r0, r3
 800572a:	f000 ff8f 	bl	800664c <UART_Start_Receive_DMA>
 800572e:	0003      	movs	r3, r0
 8005730:	e000      	b.n	8005734 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
  }
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b008      	add	sp, #32
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40004800 	.word	0x40004800

08005740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b0ab      	sub	sp, #172	@ 0xac
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	22a4      	movs	r2, #164	@ 0xa4
 8005750:	18b9      	adds	r1, r7, r2
 8005752:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	20a0      	movs	r0, #160	@ 0xa0
 800575c:	1839      	adds	r1, r7, r0
 800575e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	219c      	movs	r1, #156	@ 0x9c
 8005768:	1879      	adds	r1, r7, r1
 800576a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800576c:	0011      	movs	r1, r2
 800576e:	18bb      	adds	r3, r7, r2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a99      	ldr	r2, [pc, #612]	@ (80059d8 <HAL_UART_IRQHandler+0x298>)
 8005774:	4013      	ands	r3, r2
 8005776:	2298      	movs	r2, #152	@ 0x98
 8005778:	18bc      	adds	r4, r7, r2
 800577a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800577c:	18bb      	adds	r3, r7, r2
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d114      	bne.n	80057ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005784:	187b      	adds	r3, r7, r1
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2220      	movs	r2, #32
 800578a:	4013      	ands	r3, r2
 800578c:	d00f      	beq.n	80057ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800578e:	183b      	adds	r3, r7, r0
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	4013      	ands	r3, r2
 8005796:	d00a      	beq.n	80057ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <HAL_UART_IRQHandler+0x62>
 80057a0:	e2be      	b.n	8005d20 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	0010      	movs	r0, r2
 80057aa:	4798      	blx	r3
      }
      return;
 80057ac:	e2b8      	b.n	8005d20 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057ae:	2398      	movs	r3, #152	@ 0x98
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d100      	bne.n	80057ba <HAL_UART_IRQHandler+0x7a>
 80057b8:	e114      	b.n	80059e4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057ba:	239c      	movs	r3, #156	@ 0x9c
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d106      	bne.n	80057d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057c6:	23a0      	movs	r3, #160	@ 0xa0
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a83      	ldr	r2, [pc, #524]	@ (80059dc <HAL_UART_IRQHandler+0x29c>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	d100      	bne.n	80057d4 <HAL_UART_IRQHandler+0x94>
 80057d2:	e107      	b.n	80059e4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057d4:	23a4      	movs	r3, #164	@ 0xa4
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	d012      	beq.n	8005806 <HAL_UART_IRQHandler+0xc6>
 80057e0:	23a0      	movs	r3, #160	@ 0xa0
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00b      	beq.n	8005806 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2284      	movs	r2, #132	@ 0x84
 80057fa:	589b      	ldr	r3, [r3, r2]
 80057fc:	2201      	movs	r2, #1
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2184      	movs	r1, #132	@ 0x84
 8005804:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005806:	23a4      	movs	r3, #164	@ 0xa4
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2202      	movs	r2, #2
 800580e:	4013      	ands	r3, r2
 8005810:	d011      	beq.n	8005836 <HAL_UART_IRQHandler+0xf6>
 8005812:	239c      	movs	r3, #156	@ 0x9c
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2201      	movs	r2, #1
 800581a:	4013      	ands	r3, r2
 800581c:	d00b      	beq.n	8005836 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2202      	movs	r2, #2
 8005824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2284      	movs	r2, #132	@ 0x84
 800582a:	589b      	ldr	r3, [r3, r2]
 800582c:	2204      	movs	r2, #4
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2184      	movs	r1, #132	@ 0x84
 8005834:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005836:	23a4      	movs	r3, #164	@ 0xa4
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2204      	movs	r2, #4
 800583e:	4013      	ands	r3, r2
 8005840:	d011      	beq.n	8005866 <HAL_UART_IRQHandler+0x126>
 8005842:	239c      	movs	r3, #156	@ 0x9c
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d00b      	beq.n	8005866 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2204      	movs	r2, #4
 8005854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2284      	movs	r2, #132	@ 0x84
 800585a:	589b      	ldr	r3, [r3, r2]
 800585c:	2202      	movs	r2, #2
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2184      	movs	r1, #132	@ 0x84
 8005864:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005866:	23a4      	movs	r3, #164	@ 0xa4
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2208      	movs	r2, #8
 800586e:	4013      	ands	r3, r2
 8005870:	d017      	beq.n	80058a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005872:	23a0      	movs	r3, #160	@ 0xa0
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2220      	movs	r2, #32
 800587a:	4013      	ands	r3, r2
 800587c:	d105      	bne.n	800588a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800587e:	239c      	movs	r3, #156	@ 0x9c
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005888:	d00b      	beq.n	80058a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2208      	movs	r2, #8
 8005890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2284      	movs	r2, #132	@ 0x84
 8005896:	589b      	ldr	r3, [r3, r2]
 8005898:	2208      	movs	r2, #8
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2184      	movs	r1, #132	@ 0x84
 80058a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058a2:	23a4      	movs	r3, #164	@ 0xa4
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4013      	ands	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_UART_IRQHandler+0x198>
 80058b0:	23a0      	movs	r3, #160	@ 0xa0
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	2380      	movs	r3, #128	@ 0x80
 80058b8:	04db      	lsls	r3, r3, #19
 80058ba:	4013      	ands	r3, r2
 80058bc:	d00c      	beq.n	80058d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	0112      	lsls	r2, r2, #4
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2284      	movs	r2, #132	@ 0x84
 80058cc:	589b      	ldr	r3, [r3, r2]
 80058ce:	2220      	movs	r2, #32
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2184      	movs	r1, #132	@ 0x84
 80058d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2284      	movs	r2, #132	@ 0x84
 80058dc:	589b      	ldr	r3, [r3, r2]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d100      	bne.n	80058e4 <HAL_UART_IRQHandler+0x1a4>
 80058e2:	e21f      	b.n	8005d24 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058e4:	23a4      	movs	r3, #164	@ 0xa4
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2220      	movs	r2, #32
 80058ec:	4013      	ands	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058f0:	23a0      	movs	r3, #160	@ 0xa0
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2220      	movs	r2, #32
 80058f8:	4013      	ands	r3, r2
 80058fa:	d008      	beq.n	800590e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	0010      	movs	r0, r2
 800590c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2284      	movs	r2, #132	@ 0x84
 8005912:	589b      	ldr	r3, [r3, r2]
 8005914:	2194      	movs	r1, #148	@ 0x94
 8005916:	187a      	adds	r2, r7, r1
 8005918:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2240      	movs	r2, #64	@ 0x40
 8005922:	4013      	ands	r3, r2
 8005924:	2b40      	cmp	r3, #64	@ 0x40
 8005926:	d004      	beq.n	8005932 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005928:	187b      	adds	r3, r7, r1
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2228      	movs	r2, #40	@ 0x28
 800592e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005930:	d047      	beq.n	80059c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 ff4d 	bl	80067d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2240      	movs	r2, #64	@ 0x40
 8005942:	4013      	ands	r3, r2
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d137      	bne.n	80059b8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800594e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005950:	2090      	movs	r0, #144	@ 0x90
 8005952:	183a      	adds	r2, r7, r0
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	2301      	movs	r3, #1
 8005958:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	46c0      	nop			@ (mov r8, r8)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2140      	movs	r1, #64	@ 0x40
 800596e:	438a      	bics	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	183b      	adds	r3, r7, r0
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800597a:	f383 8810 	msr	PRIMASK, r3
}
 800597e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598c:	4a14      	ldr	r2, [pc, #80]	@ (80059e0 <HAL_UART_IRQHandler+0x2a0>)
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005994:	0018      	movs	r0, r3
 8005996:	f7fe fb4b 	bl	8004030 <HAL_DMA_Abort_IT>
 800599a:	1e03      	subs	r3, r0, #0
 800599c:	d01a      	beq.n	80059d4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a8:	0018      	movs	r0, r3
 80059aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	e012      	b.n	80059d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f000 f9cd 	bl	8005d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b6:	e00d      	b.n	80059d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 f9c8 	bl	8005d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e008      	b.n	80059d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 f9c3 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2284      	movs	r2, #132	@ 0x84
 80059ce:	2100      	movs	r1, #0
 80059d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80059d2:	e1a7      	b.n	8005d24 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	46c0      	nop			@ (mov r8, r8)
    return;
 80059d6:	e1a5      	b.n	8005d24 <HAL_UART_IRQHandler+0x5e4>
 80059d8:	0000080f 	.word	0x0000080f
 80059dc:	04000120 	.word	0x04000120
 80059e0:	08006b07 	.word	0x08006b07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d000      	beq.n	80059ee <HAL_UART_IRQHandler+0x2ae>
 80059ec:	e159      	b.n	8005ca2 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059ee:	23a4      	movs	r3, #164	@ 0xa4
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2210      	movs	r2, #16
 80059f6:	4013      	ands	r3, r2
 80059f8:	d100      	bne.n	80059fc <HAL_UART_IRQHandler+0x2bc>
 80059fa:	e152      	b.n	8005ca2 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059fc:	23a0      	movs	r3, #160	@ 0xa0
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2210      	movs	r2, #16
 8005a04:	4013      	ands	r3, r2
 8005a06:	d100      	bne.n	8005a0a <HAL_UART_IRQHandler+0x2ca>
 8005a08:	e14b      	b.n	8005ca2 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2240      	movs	r2, #64	@ 0x40
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	d000      	beq.n	8005a22 <HAL_UART_IRQHandler+0x2e2>
 8005a20:	e0bf      	b.n	8005ba2 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	217e      	movs	r1, #126	@ 0x7e
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005a30:	187b      	adds	r3, r7, r1
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d100      	bne.n	8005a3a <HAL_UART_IRQHandler+0x2fa>
 8005a38:	e095      	b.n	8005b66 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2258      	movs	r2, #88	@ 0x58
 8005a3e:	5a9b      	ldrh	r3, [r3, r2]
 8005a40:	187a      	adds	r2, r7, r1
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d300      	bcc.n	8005a4a <HAL_UART_IRQHandler+0x30a>
 8005a48:	e08d      	b.n	8005b66 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	187a      	adds	r2, r7, r1
 8005a4e:	215a      	movs	r1, #90	@ 0x5a
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d16f      	bne.n	8005b42 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a62:	f3ef 8310 	mrs	r3, PRIMASK
 8005a66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	49ad      	ldr	r1, [pc, #692]	@ (8005d38 <HAL_UART_IRQHandler+0x5f8>)
 8005a84:	400a      	ands	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a94:	f3ef 8310 	mrs	r3, PRIMASK
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa4:	f383 8810 	msr	PRIMASK, r3
}
 8005aa8:	46c0      	nop			@ (mov r8, r8)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	438a      	bics	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005abc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac0:	f383 8810 	msr	PRIMASK, r3
}
 8005ac4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ace:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2140      	movs	r1, #64	@ 0x40
 8005ae8:	438a      	bics	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005af2:	f383 8810 	msr	PRIMASK, r3
}
 8005af6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2280      	movs	r2, #128	@ 0x80
 8005afc:	2120      	movs	r1, #32
 8005afe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b06:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b10:	2301      	movs	r3, #1
 8005b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b16:	f383 8810 	msr	PRIMASK, r3
}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2110      	movs	r1, #16
 8005b28:	438a      	bics	r2, r1
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b32:	f383 8810 	msr	PRIMASK, r3
}
 8005b36:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fe fa37 	bl	8003fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2258      	movs	r2, #88	@ 0x58
 8005b4c:	5a9a      	ldrh	r2, [r3, r2]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	215a      	movs	r1, #90	@ 0x5a
 8005b52:	5a5b      	ldrh	r3, [r3, r1]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0011      	movs	r1, r2
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 f8fe 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b64:	e0e0      	b.n	8005d28 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2258      	movs	r2, #88	@ 0x58
 8005b6a:	5a9b      	ldrh	r3, [r3, r2]
 8005b6c:	227e      	movs	r2, #126	@ 0x7e
 8005b6e:	18ba      	adds	r2, r7, r2
 8005b70:	8812      	ldrh	r2, [r2, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d000      	beq.n	8005b78 <HAL_UART_IRQHandler+0x438>
 8005b76:	e0d7      	b.n	8005d28 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2220      	movs	r2, #32
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d000      	beq.n	8005b8a <HAL_UART_IRQHandler+0x44a>
 8005b88:	e0ce      	b.n	8005d28 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2258      	movs	r2, #88	@ 0x58
 8005b94:	5a9a      	ldrh	r2, [r3, r2]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0011      	movs	r1, r2
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f000 f8e0 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
      return;
 8005ba0:	e0c2      	b.n	8005d28 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2258      	movs	r2, #88	@ 0x58
 8005ba6:	5a99      	ldrh	r1, [r3, r2]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	225a      	movs	r2, #90	@ 0x5a
 8005bac:	5a9b      	ldrh	r3, [r3, r2]
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	208e      	movs	r0, #142	@ 0x8e
 8005bb2:	183b      	adds	r3, r7, r0
 8005bb4:	1a8a      	subs	r2, r1, r2
 8005bb6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	225a      	movs	r2, #90	@ 0x5a
 8005bbc:	5a9b      	ldrh	r3, [r3, r2]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d100      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x486>
 8005bc4:	e0b2      	b.n	8005d2c <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8005bc6:	183b      	adds	r3, r7, r0
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d100      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x490>
 8005bce:	e0ad      	b.n	8005d2c <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd8:	2488      	movs	r4, #136	@ 0x88
 8005bda:	193a      	adds	r2, r7, r4
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	2301      	movs	r3, #1
 8005be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f383 8810 	msr	PRIMASK, r3
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4951      	ldr	r1, [pc, #324]	@ (8005d3c <HAL_UART_IRQHandler+0x5fc>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	193b      	adds	r3, r7, r4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f383 8810 	msr	PRIMASK, r3
}
 8005c06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c08:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c0e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	2484      	movs	r4, #132	@ 0x84
 8005c12:	193a      	adds	r2, r7, r4
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	2301      	movs	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			@ (mov r8, r8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	438a      	bics	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]
 8005c32:	193b      	adds	r3, r7, r4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2280      	movs	r2, #128	@ 0x80
 8005c44:	2120      	movs	r1, #32
 8005c46:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c54:	f3ef 8310 	mrs	r3, PRIMASK
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5c:	2480      	movs	r4, #128	@ 0x80
 8005c5e:	193a      	adds	r2, r7, r4
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	2301      	movs	r3, #1
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	f383 8810 	msr	PRIMASK, r3
}
 8005c6c:	46c0      	nop			@ (mov r8, r8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2110      	movs	r1, #16
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	193b      	adds	r3, r7, r4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c92:	183b      	adds	r3, r7, r0
 8005c94:	881a      	ldrh	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0011      	movs	r1, r2
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 f860 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ca0:	e044      	b.n	8005d2c <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ca2:	23a4      	movs	r3, #164	@ 0xa4
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	@ 0x80
 8005caa:	035b      	lsls	r3, r3, #13
 8005cac:	4013      	ands	r3, r2
 8005cae:	d010      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x592>
 8005cb0:	239c      	movs	r3, #156	@ 0x9c
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	03db      	lsls	r3, r3, #15
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2280      	movs	r2, #128	@ 0x80
 8005cc4:	0352      	lsls	r2, r2, #13
 8005cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 ff59 	bl	8006b82 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cd0:	e02f      	b.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cd2:	23a4      	movs	r3, #164	@ 0xa4
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2280      	movs	r2, #128	@ 0x80
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cde:	23a0      	movs	r3, #160	@ 0xa0
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2280      	movs	r2, #128	@ 0x80
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01e      	beq.n	8005d30 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	0010      	movs	r0, r2
 8005cfa:	4798      	blx	r3
    }
    return;
 8005cfc:	e018      	b.n	8005d30 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cfe:	23a4      	movs	r3, #164	@ 0xa4
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2240      	movs	r2, #64	@ 0x40
 8005d06:	4013      	ands	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
 8005d0a:	23a0      	movs	r3, #160	@ 0xa0
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2240      	movs	r2, #64	@ 0x40
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00d      	beq.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 ff07 	bl	8006b2c <UART_EndTransmit_IT>
    return;
 8005d1e:	e008      	b.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005d20:	46c0      	nop			@ (mov r8, r8)
 8005d22:	e006      	b.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	e004      	b.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005d28:	46c0      	nop			@ (mov r8, r8)
 8005d2a:	e002      	b.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005d2c:	46c0      	nop			@ (mov r8, r8)
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005d30:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b02b      	add	sp, #172	@ 0xac
 8005d36:	bd90      	pop	{r4, r7, pc}
 8005d38:	fffffeff 	.word	0xfffffeff
 8005d3c:	fffffedf 	.word	0xfffffedf

08005d40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b002      	add	sp, #8
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	000a      	movs	r2, r1
 8005d6a:	1cbb      	adds	r3, r7, #2
 8005d6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b002      	add	sp, #8
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b08e      	sub	sp, #56	@ 0x38
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d80:	231a      	movs	r3, #26
 8005d82:	2218      	movs	r2, #24
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	19db      	adds	r3, r3, r7
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4ac3      	ldr	r2, [pc, #780]	@ (80060b8 <UART_SetConfig+0x340>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	0019      	movs	r1, r3
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4abe      	ldr	r2, [pc, #760]	@ (80060bc <UART_SetConfig+0x344>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4ab8      	ldr	r2, [pc, #736]	@ (80060c0 <UART_SetConfig+0x348>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005de8:	4313      	orrs	r3, r2
 8005dea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	4ab4      	ldr	r2, [pc, #720]	@ (80060c4 <UART_SetConfig+0x34c>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4ab0      	ldr	r2, [pc, #704]	@ (80060c8 <UART_SetConfig+0x350>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d131      	bne.n	8005e70 <UART_SetConfig+0xf8>
 8005e0c:	4baf      	ldr	r3, [pc, #700]	@ (80060cc <UART_SetConfig+0x354>)
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e10:	2203      	movs	r2, #3
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d01d      	beq.n	8005e54 <UART_SetConfig+0xdc>
 8005e18:	d823      	bhi.n	8005e62 <UART_SetConfig+0xea>
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d00c      	beq.n	8005e38 <UART_SetConfig+0xc0>
 8005e1e:	d820      	bhi.n	8005e62 <UART_SetConfig+0xea>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <UART_SetConfig+0xb2>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d00e      	beq.n	8005e46 <UART_SetConfig+0xce>
 8005e28:	e01b      	b.n	8005e62 <UART_SetConfig+0xea>
 8005e2a:	231b      	movs	r3, #27
 8005e2c:	2218      	movs	r2, #24
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	19db      	adds	r3, r3, r7
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e0b4      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005e38:	231b      	movs	r3, #27
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	19db      	adds	r3, r3, r7
 8005e40:	2202      	movs	r2, #2
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e0ad      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005e46:	231b      	movs	r3, #27
 8005e48:	2218      	movs	r2, #24
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	19db      	adds	r3, r3, r7
 8005e4e:	2204      	movs	r2, #4
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e0a6      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005e54:	231b      	movs	r3, #27
 8005e56:	2218      	movs	r2, #24
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	19db      	adds	r3, r3, r7
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	e09f      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005e62:	231b      	movs	r3, #27
 8005e64:	2218      	movs	r2, #24
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	19db      	adds	r3, r3, r7
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e098      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a96      	ldr	r2, [pc, #600]	@ (80060d0 <UART_SetConfig+0x358>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d131      	bne.n	8005ede <UART_SetConfig+0x166>
 8005e7a:	4b94      	ldr	r3, [pc, #592]	@ (80060cc <UART_SetConfig+0x354>)
 8005e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7e:	220c      	movs	r2, #12
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b0c      	cmp	r3, #12
 8005e84:	d01d      	beq.n	8005ec2 <UART_SetConfig+0x14a>
 8005e86:	d823      	bhi.n	8005ed0 <UART_SetConfig+0x158>
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d00c      	beq.n	8005ea6 <UART_SetConfig+0x12e>
 8005e8c:	d820      	bhi.n	8005ed0 <UART_SetConfig+0x158>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <UART_SetConfig+0x120>
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d00e      	beq.n	8005eb4 <UART_SetConfig+0x13c>
 8005e96:	e01b      	b.n	8005ed0 <UART_SetConfig+0x158>
 8005e98:	231b      	movs	r3, #27
 8005e9a:	2218      	movs	r2, #24
 8005e9c:	189b      	adds	r3, r3, r2
 8005e9e:	19db      	adds	r3, r3, r7
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e07d      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005ea6:	231b      	movs	r3, #27
 8005ea8:	2218      	movs	r2, #24
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	19db      	adds	r3, r3, r7
 8005eae:	2202      	movs	r2, #2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e076      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005eb4:	231b      	movs	r3, #27
 8005eb6:	2218      	movs	r2, #24
 8005eb8:	189b      	adds	r3, r3, r2
 8005eba:	19db      	adds	r3, r3, r7
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e06f      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005ec2:	231b      	movs	r3, #27
 8005ec4:	2218      	movs	r2, #24
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	19db      	adds	r3, r3, r7
 8005eca:	2208      	movs	r2, #8
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e068      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005ed0:	231b      	movs	r3, #27
 8005ed2:	2218      	movs	r2, #24
 8005ed4:	189b      	adds	r3, r3, r2
 8005ed6:	19db      	adds	r3, r3, r7
 8005ed8:	2210      	movs	r2, #16
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e061      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80060d4 <UART_SetConfig+0x35c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d106      	bne.n	8005ef6 <UART_SetConfig+0x17e>
 8005ee8:	231b      	movs	r3, #27
 8005eea:	2218      	movs	r2, #24
 8005eec:	189b      	adds	r3, r3, r2
 8005eee:	19db      	adds	r3, r3, r7
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e055      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a77      	ldr	r2, [pc, #476]	@ (80060d8 <UART_SetConfig+0x360>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d106      	bne.n	8005f0e <UART_SetConfig+0x196>
 8005f00:	231b      	movs	r3, #27
 8005f02:	2218      	movs	r2, #24
 8005f04:	189b      	adds	r3, r3, r2
 8005f06:	19db      	adds	r3, r3, r7
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	e049      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6b      	ldr	r2, [pc, #428]	@ (80060c0 <UART_SetConfig+0x348>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d13e      	bne.n	8005f96 <UART_SetConfig+0x21e>
 8005f18:	4b6c      	ldr	r3, [pc, #432]	@ (80060cc <UART_SetConfig+0x354>)
 8005f1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f1c:	23c0      	movs	r3, #192	@ 0xc0
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	4013      	ands	r3, r2
 8005f22:	22c0      	movs	r2, #192	@ 0xc0
 8005f24:	0112      	lsls	r2, r2, #4
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d027      	beq.n	8005f7a <UART_SetConfig+0x202>
 8005f2a:	22c0      	movs	r2, #192	@ 0xc0
 8005f2c:	0112      	lsls	r2, r2, #4
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d82a      	bhi.n	8005f88 <UART_SetConfig+0x210>
 8005f32:	2280      	movs	r2, #128	@ 0x80
 8005f34:	0112      	lsls	r2, r2, #4
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d011      	beq.n	8005f5e <UART_SetConfig+0x1e6>
 8005f3a:	2280      	movs	r2, #128	@ 0x80
 8005f3c:	0112      	lsls	r2, r2, #4
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d822      	bhi.n	8005f88 <UART_SetConfig+0x210>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <UART_SetConfig+0x1d8>
 8005f46:	2280      	movs	r2, #128	@ 0x80
 8005f48:	00d2      	lsls	r2, r2, #3
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <UART_SetConfig+0x1f4>
 8005f4e:	e01b      	b.n	8005f88 <UART_SetConfig+0x210>
 8005f50:	231b      	movs	r3, #27
 8005f52:	2218      	movs	r2, #24
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	19db      	adds	r3, r3, r7
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e021      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005f5e:	231b      	movs	r3, #27
 8005f60:	2218      	movs	r2, #24
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	19db      	adds	r3, r3, r7
 8005f66:	2202      	movs	r2, #2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e01a      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005f6c:	231b      	movs	r3, #27
 8005f6e:	2218      	movs	r2, #24
 8005f70:	189b      	adds	r3, r3, r2
 8005f72:	19db      	adds	r3, r3, r7
 8005f74:	2204      	movs	r2, #4
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e013      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005f7a:	231b      	movs	r3, #27
 8005f7c:	2218      	movs	r2, #24
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	19db      	adds	r3, r3, r7
 8005f82:	2208      	movs	r2, #8
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e00c      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005f88:	231b      	movs	r3, #27
 8005f8a:	2218      	movs	r2, #24
 8005f8c:	189b      	adds	r3, r3, r2
 8005f8e:	19db      	adds	r3, r3, r7
 8005f90:	2210      	movs	r2, #16
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x22a>
 8005f96:	231b      	movs	r3, #27
 8005f98:	2218      	movs	r2, #24
 8005f9a:	189b      	adds	r3, r3, r2
 8005f9c:	19db      	adds	r3, r3, r7
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <UART_SetConfig+0x348>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d000      	beq.n	8005fae <UART_SetConfig+0x236>
 8005fac:	e09a      	b.n	80060e4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fae:	231b      	movs	r3, #27
 8005fb0:	2218      	movs	r2, #24
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	19db      	adds	r3, r3, r7
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d01d      	beq.n	8005ff8 <UART_SetConfig+0x280>
 8005fbc:	dc20      	bgt.n	8006000 <UART_SetConfig+0x288>
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d015      	beq.n	8005fee <UART_SetConfig+0x276>
 8005fc2:	dc1d      	bgt.n	8006000 <UART_SetConfig+0x288>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <UART_SetConfig+0x256>
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d005      	beq.n	8005fd8 <UART_SetConfig+0x260>
 8005fcc:	e018      	b.n	8006000 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fce:	f7ff f89b 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fd6:	e01c      	b.n	8006012 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80060cc <UART_SetConfig+0x354>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2210      	movs	r2, #16
 8005fde:	4013      	ands	r3, r2
 8005fe0:	d002      	beq.n	8005fe8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80060dc <UART_SetConfig+0x364>)
 8005fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fe6:	e014      	b.n	8006012 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80060e0 <UART_SetConfig+0x368>)
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fec:	e011      	b.n	8006012 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fee:	f7fe fffb 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ff6:	e00c      	b.n	8006012 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ffe:	e008      	b.n	8006012 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006004:	231a      	movs	r3, #26
 8006006:	2218      	movs	r2, #24
 8006008:	189b      	adds	r3, r3, r2
 800600a:	19db      	adds	r3, r3, r7
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
        break;
 8006010:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d100      	bne.n	800601a <UART_SetConfig+0x2a2>
 8006018:	e133      	b.n	8006282 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	0013      	movs	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	189b      	adds	r3, r3, r2
 8006024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006026:	429a      	cmp	r2, r3
 8006028:	d305      	bcc.n	8006036 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006032:	429a      	cmp	r2, r3
 8006034:	d906      	bls.n	8006044 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006036:	231a      	movs	r3, #26
 8006038:	2218      	movs	r2, #24
 800603a:	189b      	adds	r3, r3, r2
 800603c:	19db      	adds	r3, r3, r7
 800603e:	2201      	movs	r2, #1
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e11e      	b.n	8006282 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	6939      	ldr	r1, [r7, #16]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	000b      	movs	r3, r1
 8006052:	0e1b      	lsrs	r3, r3, #24
 8006054:	0010      	movs	r0, r2
 8006056:	0205      	lsls	r5, r0, #8
 8006058:	431d      	orrs	r5, r3
 800605a:	000b      	movs	r3, r1
 800605c:	021c      	lsls	r4, r3, #8
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	1900      	adds	r0, r0, r4
 8006070:	4169      	adcs	r1, r5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	2300      	movs	r3, #0
 800607a:	607b      	str	r3, [r7, #4]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f7fa fa4c 	bl	800051c <__aeabi_uldivmod>
 8006084:	0002      	movs	r2, r0
 8006086:	000b      	movs	r3, r1
 8006088:	0013      	movs	r3, r2
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800608c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800608e:	23c0      	movs	r3, #192	@ 0xc0
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	429a      	cmp	r2, r3
 8006094:	d309      	bcc.n	80060aa <UART_SetConfig+0x332>
 8006096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006098:	2380      	movs	r3, #128	@ 0x80
 800609a:	035b      	lsls	r3, r3, #13
 800609c:	429a      	cmp	r2, r3
 800609e:	d204      	bcs.n	80060aa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a6:	60da      	str	r2, [r3, #12]
 80060a8:	e0eb      	b.n	8006282 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80060aa:	231a      	movs	r3, #26
 80060ac:	2218      	movs	r2, #24
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	19db      	adds	r3, r3, r7
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e0e4      	b.n	8006282 <UART_SetConfig+0x50a>
 80060b8:	efff69f3 	.word	0xefff69f3
 80060bc:	ffffcfff 	.word	0xffffcfff
 80060c0:	40004800 	.word	0x40004800
 80060c4:	fffff4ff 	.word	0xfffff4ff
 80060c8:	40013800 	.word	0x40013800
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40004400 	.word	0x40004400
 80060d4:	40004c00 	.word	0x40004c00
 80060d8:	40005000 	.word	0x40005000
 80060dc:	003d0900 	.word	0x003d0900
 80060e0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	2380      	movs	r3, #128	@ 0x80
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d000      	beq.n	80060f2 <UART_SetConfig+0x37a>
 80060f0:	e070      	b.n	80061d4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80060f2:	231b      	movs	r3, #27
 80060f4:	2218      	movs	r2, #24
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	19db      	adds	r3, r3, r7
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d822      	bhi.n	8006146 <UART_SetConfig+0x3ce>
 8006100:	009a      	lsls	r2, r3, #2
 8006102:	4b67      	ldr	r3, [pc, #412]	@ (80062a0 <UART_SetConfig+0x528>)
 8006104:	18d3      	adds	r3, r2, r3
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610a:	f7fe fffd 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 800610e:	0003      	movs	r3, r0
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006112:	e021      	b.n	8006158 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7ff f80e 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8006118:	0003      	movs	r3, r0
 800611a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800611c:	e01c      	b.n	8006158 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800611e:	4b61      	ldr	r3, [pc, #388]	@ (80062a4 <UART_SetConfig+0x52c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2210      	movs	r2, #16
 8006124:	4013      	ands	r3, r2
 8006126:	d002      	beq.n	800612e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006128:	4b5f      	ldr	r3, [pc, #380]	@ (80062a8 <UART_SetConfig+0x530>)
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800612c:	e014      	b.n	8006158 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800612e:	4b5f      	ldr	r3, [pc, #380]	@ (80062ac <UART_SetConfig+0x534>)
 8006130:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006132:	e011      	b.n	8006158 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006134:	f7fe ff58 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 8006138:	0003      	movs	r3, r0
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800613c:	e00c      	b.n	8006158 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613e:	2380      	movs	r3, #128	@ 0x80
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006144:	e008      	b.n	8006158 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800614a:	231a      	movs	r3, #26
 800614c:	2218      	movs	r2, #24
 800614e:	189b      	adds	r3, r3, r2
 8006150:	19db      	adds	r3, r3, r7
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
        break;
 8006156:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d100      	bne.n	8006160 <UART_SetConfig+0x3e8>
 800615e:	e090      	b.n	8006282 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	005a      	lsls	r2, r3, #1
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	18d2      	adds	r2, r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	0019      	movs	r1, r3
 8006172:	0010      	movs	r0, r2
 8006174:	f7f9 ffe4 	bl	8000140 <__udivsi3>
 8006178:	0003      	movs	r3, r0
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	2b0f      	cmp	r3, #15
 8006180:	d921      	bls.n	80061c6 <UART_SetConfig+0x44e>
 8006182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	025b      	lsls	r3, r3, #9
 8006188:	429a      	cmp	r2, r3
 800618a:	d21c      	bcs.n	80061c6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	b29a      	uxth	r2, r3
 8006190:	200e      	movs	r0, #14
 8006192:	2418      	movs	r4, #24
 8006194:	1903      	adds	r3, r0, r4
 8006196:	19db      	adds	r3, r3, r7
 8006198:	210f      	movs	r1, #15
 800619a:	438a      	bics	r2, r1
 800619c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2207      	movs	r2, #7
 80061a6:	4013      	ands	r3, r2
 80061a8:	b299      	uxth	r1, r3
 80061aa:	1903      	adds	r3, r0, r4
 80061ac:	19db      	adds	r3, r3, r7
 80061ae:	1902      	adds	r2, r0, r4
 80061b0:	19d2      	adds	r2, r2, r7
 80061b2:	8812      	ldrh	r2, [r2, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	1902      	adds	r2, r0, r4
 80061be:	19d2      	adds	r2, r2, r7
 80061c0:	8812      	ldrh	r2, [r2, #0]
 80061c2:	60da      	str	r2, [r3, #12]
 80061c4:	e05d      	b.n	8006282 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80061c6:	231a      	movs	r3, #26
 80061c8:	2218      	movs	r2, #24
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	19db      	adds	r3, r3, r7
 80061ce:	2201      	movs	r2, #1
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	e056      	b.n	8006282 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061d4:	231b      	movs	r3, #27
 80061d6:	2218      	movs	r2, #24
 80061d8:	189b      	adds	r3, r3, r2
 80061da:	19db      	adds	r3, r3, r7
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d822      	bhi.n	8006228 <UART_SetConfig+0x4b0>
 80061e2:	009a      	lsls	r2, r3, #2
 80061e4:	4b32      	ldr	r3, [pc, #200]	@ (80062b0 <UART_SetConfig+0x538>)
 80061e6:	18d3      	adds	r3, r2, r3
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe ff8c 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 80061f0:	0003      	movs	r3, r0
 80061f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80061f4:	e021      	b.n	800623a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f6:	f7fe ff9d 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 80061fa:	0003      	movs	r3, r0
 80061fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80061fe:	e01c      	b.n	800623a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006200:	4b28      	ldr	r3, [pc, #160]	@ (80062a4 <UART_SetConfig+0x52c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2210      	movs	r2, #16
 8006206:	4013      	ands	r3, r2
 8006208:	d002      	beq.n	8006210 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800620a:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <UART_SetConfig+0x530>)
 800620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800620e:	e014      	b.n	800623a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006210:	4b26      	ldr	r3, [pc, #152]	@ (80062ac <UART_SetConfig+0x534>)
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006214:	e011      	b.n	800623a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fe fee7 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 800621a:	0003      	movs	r3, r0
 800621c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800621e:	e00c      	b.n	800623a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006220:	2380      	movs	r3, #128	@ 0x80
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006226:	e008      	b.n	800623a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800622c:	231a      	movs	r3, #26
 800622e:	2218      	movs	r2, #24
 8006230:	189b      	adds	r3, r3, r2
 8006232:	19db      	adds	r3, r3, r7
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
        break;
 8006238:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	085a      	lsrs	r2, r3, #1
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	18d2      	adds	r2, r2, r3
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	0019      	movs	r1, r3
 8006250:	0010      	movs	r0, r2
 8006252:	f7f9 ff75 	bl	8000140 <__udivsi3>
 8006256:	0003      	movs	r3, r0
 8006258:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625c:	2b0f      	cmp	r3, #15
 800625e:	d90a      	bls.n	8006276 <UART_SetConfig+0x4fe>
 8006260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006262:	2380      	movs	r3, #128	@ 0x80
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	429a      	cmp	r2, r3
 8006268:	d205      	bcs.n	8006276 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	b29a      	uxth	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e005      	b.n	8006282 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006276:	231a      	movs	r3, #26
 8006278:	2218      	movs	r2, #24
 800627a:	189b      	adds	r3, r3, r2
 800627c:	19db      	adds	r3, r3, r7
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2200      	movs	r2, #0
 8006286:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2200      	movs	r2, #0
 800628c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800628e:	231a      	movs	r3, #26
 8006290:	2218      	movs	r2, #24
 8006292:	189b      	adds	r3, r3, r2
 8006294:	19db      	adds	r3, r3, r7
 8006296:	781b      	ldrb	r3, [r3, #0]
}
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	b00e      	add	sp, #56	@ 0x38
 800629e:	bdb0      	pop	{r4, r5, r7, pc}
 80062a0:	08009b88 	.word	0x08009b88
 80062a4:	40021000 	.word	0x40021000
 80062a8:	003d0900 	.word	0x003d0900
 80062ac:	00f42400 	.word	0x00f42400
 80062b0:	08009bac 	.word	0x08009bac

080062b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	2208      	movs	r2, #8
 80062c2:	4013      	ands	r3, r2
 80062c4:	d00b      	beq.n	80062de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4a4a      	ldr	r2, [pc, #296]	@ (80063f8 <UART_AdvFeatureConfig+0x144>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	0019      	movs	r1, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	2201      	movs	r2, #1
 80062e4:	4013      	ands	r3, r2
 80062e6:	d00b      	beq.n	8006300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4a43      	ldr	r2, [pc, #268]	@ (80063fc <UART_AdvFeatureConfig+0x148>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	0019      	movs	r1, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	2202      	movs	r2, #2
 8006306:	4013      	ands	r3, r2
 8006308:	d00b      	beq.n	8006322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4a3b      	ldr	r2, [pc, #236]	@ (8006400 <UART_AdvFeatureConfig+0x14c>)
 8006312:	4013      	ands	r3, r2
 8006314:	0019      	movs	r1, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	2204      	movs	r2, #4
 8006328:	4013      	ands	r3, r2
 800632a:	d00b      	beq.n	8006344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4a34      	ldr	r2, [pc, #208]	@ (8006404 <UART_AdvFeatureConfig+0x150>)
 8006334:	4013      	ands	r3, r2
 8006336:	0019      	movs	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	2210      	movs	r2, #16
 800634a:	4013      	ands	r3, r2
 800634c:	d00b      	beq.n	8006366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a2c      	ldr	r2, [pc, #176]	@ (8006408 <UART_AdvFeatureConfig+0x154>)
 8006356:	4013      	ands	r3, r2
 8006358:	0019      	movs	r1, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	2220      	movs	r2, #32
 800636c:	4013      	ands	r3, r2
 800636e:	d00b      	beq.n	8006388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4a25      	ldr	r2, [pc, #148]	@ (800640c <UART_AdvFeatureConfig+0x158>)
 8006378:	4013      	ands	r3, r2
 800637a:	0019      	movs	r1, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	2240      	movs	r2, #64	@ 0x40
 800638e:	4013      	ands	r3, r2
 8006390:	d01d      	beq.n	80063ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a1d      	ldr	r2, [pc, #116]	@ (8006410 <UART_AdvFeatureConfig+0x15c>)
 800639a:	4013      	ands	r3, r2
 800639c:	0019      	movs	r1, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	035b      	lsls	r3, r3, #13
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d10b      	bne.n	80063ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	4a15      	ldr	r2, [pc, #84]	@ (8006414 <UART_AdvFeatureConfig+0x160>)
 80063be:	4013      	ands	r3, r2
 80063c0:	0019      	movs	r1, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	2280      	movs	r2, #128	@ 0x80
 80063d4:	4013      	ands	r3, r2
 80063d6:	d00b      	beq.n	80063f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	4a0e      	ldr	r2, [pc, #56]	@ (8006418 <UART_AdvFeatureConfig+0x164>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	0019      	movs	r1, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }
}
 80063f0:	46c0      	nop			@ (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b002      	add	sp, #8
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	ffff7fff 	.word	0xffff7fff
 80063fc:	fffdffff 	.word	0xfffdffff
 8006400:	fffeffff 	.word	0xfffeffff
 8006404:	fffbffff 	.word	0xfffbffff
 8006408:	ffffefff 	.word	0xffffefff
 800640c:	ffffdfff 	.word	0xffffdfff
 8006410:	ffefffff 	.word	0xffefffff
 8006414:	ff9fffff 	.word	0xff9fffff
 8006418:	fff7ffff 	.word	0xfff7ffff

0800641c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b092      	sub	sp, #72	@ 0x48
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2284      	movs	r2, #132	@ 0x84
 8006428:	2100      	movs	r1, #0
 800642a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800642c:	f7fd fbfa 	bl	8003c24 <HAL_GetTick>
 8006430:	0003      	movs	r3, r0
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2208      	movs	r2, #8
 800643c:	4013      	ands	r3, r2
 800643e:	2b08      	cmp	r3, #8
 8006440:	d12c      	bne.n	800649c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006444:	2280      	movs	r2, #128	@ 0x80
 8006446:	0391      	lsls	r1, r2, #14
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4a46      	ldr	r2, [pc, #280]	@ (8006564 <UART_CheckIdleState+0x148>)
 800644c:	9200      	str	r2, [sp, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	f000 f88c 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8006454:	1e03      	subs	r3, r0, #0
 8006456:	d021      	beq.n	800649c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006458:	f3ef 8310 	mrs	r3, PRIMASK
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006462:	2301      	movs	r3, #1
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	f383 8810 	msr	PRIMASK, r3
}
 800646c:	46c0      	nop			@ (mov r8, r8)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2180      	movs	r1, #128	@ 0x80
 800647a:	438a      	bics	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006484:	f383 8810 	msr	PRIMASK, r3
}
 8006488:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2278      	movs	r2, #120	@ 0x78
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e05f      	b.n	800655c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2204      	movs	r2, #4
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d146      	bne.n	8006538 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ac:	2280      	movs	r2, #128	@ 0x80
 80064ae:	03d1      	lsls	r1, r2, #15
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006564 <UART_CheckIdleState+0x148>)
 80064b4:	9200      	str	r2, [sp, #0]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f000 f858 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 80064bc:	1e03      	subs	r3, r0, #0
 80064be:	d03b      	beq.n	8006538 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c0:	f3ef 8310 	mrs	r3, PRIMASK
 80064c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ca:	2301      	movs	r3, #1
 80064cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f383 8810 	msr	PRIMASK, r3
}
 80064d4:	46c0      	nop			@ (mov r8, r8)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4921      	ldr	r1, [pc, #132]	@ (8006568 <UART_CheckIdleState+0x14c>)
 80064e2:	400a      	ands	r2, r1
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f383 8810 	msr	PRIMASK, r3
}
 80064f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f2:	f3ef 8310 	mrs	r3, PRIMASK
 80064f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80064f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80064fc:	2301      	movs	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f383 8810 	msr	PRIMASK, r3
}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2101      	movs	r1, #1
 8006514:	438a      	bics	r2, r1
 8006516:	609a      	str	r2, [r3, #8]
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	f383 8810 	msr	PRIMASK, r3
}
 8006522:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2280      	movs	r2, #128	@ 0x80
 8006528:	2120      	movs	r1, #32
 800652a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2278      	movs	r2, #120	@ 0x78
 8006530:	2100      	movs	r1, #0
 8006532:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e011      	b.n	800655c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2280      	movs	r2, #128	@ 0x80
 8006542:	2120      	movs	r1, #32
 8006544:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2278      	movs	r2, #120	@ 0x78
 8006556:	2100      	movs	r1, #0
 8006558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	0018      	movs	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	b010      	add	sp, #64	@ 0x40
 8006562:	bd80      	pop	{r7, pc}
 8006564:	01ffffff 	.word	0x01ffffff
 8006568:	fffffedf 	.word	0xfffffedf

0800656c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	1dfb      	adds	r3, r7, #7
 800657a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	e051      	b.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	3301      	adds	r3, #1
 8006582:	d04e      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006584:	f7fd fb4e 	bl	8003c24 <HAL_GetTick>
 8006588:	0002      	movs	r2, r0
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d302      	bcc.n	800659a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e051      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2204      	movs	r2, #4
 80065a6:	4013      	ands	r3, r2
 80065a8:	d03b      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb6>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b80      	cmp	r3, #128	@ 0x80
 80065ae:	d038      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb6>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	d035      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	2208      	movs	r2, #8
 80065be:	4013      	ands	r3, r2
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d111      	bne.n	80065e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2208      	movs	r2, #8
 80065ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	0018      	movs	r0, r3
 80065d0:	f000 f900 	bl	80067d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2284      	movs	r2, #132	@ 0x84
 80065d8:	2108      	movs	r1, #8
 80065da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2278      	movs	r2, #120	@ 0x78
 80065e0:	2100      	movs	r1, #0
 80065e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e02c      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	401a      	ands	r2, r3
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d112      	bne.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2280      	movs	r2, #128	@ 0x80
 8006602:	0112      	lsls	r2, r2, #4
 8006604:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 f8e3 	bl	80067d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2284      	movs	r2, #132	@ 0x84
 8006612:	2120      	movs	r1, #32
 8006614:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2278      	movs	r2, #120	@ 0x78
 800661a:	2100      	movs	r1, #0
 800661c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e00f      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	425a      	negs	r2, r3
 8006632:	4153      	adcs	r3, r2
 8006634:	b2db      	uxtb	r3, r3
 8006636:	001a      	movs	r2, r3
 8006638:	1dfb      	adds	r3, r7, #7
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d09e      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	0018      	movs	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	b004      	add	sp, #16
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b090      	sub	sp, #64	@ 0x40
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	1dbb      	adds	r3, r7, #6
 8006658:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1dba      	adds	r2, r7, #6
 8006664:	2158      	movs	r1, #88	@ 0x58
 8006666:	8812      	ldrh	r2, [r2, #0]
 8006668:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2284      	movs	r2, #132	@ 0x84
 800666e:	2100      	movs	r1, #0
 8006670:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2280      	movs	r2, #128	@ 0x80
 8006676:	2122      	movs	r1, #34	@ 0x22
 8006678:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667e:	2b00      	cmp	r3, #0
 8006680:	d028      	beq.n	80066d4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006686:	4a3e      	ldr	r2, [pc, #248]	@ (8006780 <UART_Start_Receive_DMA+0x134>)
 8006688:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668e:	4a3d      	ldr	r2, [pc, #244]	@ (8006784 <UART_Start_Receive_DMA+0x138>)
 8006690:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	4a3c      	ldr	r2, [pc, #240]	@ (8006788 <UART_Start_Receive_DMA+0x13c>)
 8006698:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669e:	2200      	movs	r2, #0
 80066a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3324      	adds	r3, #36	@ 0x24
 80066ac:	0019      	movs	r1, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	001a      	movs	r2, r3
 80066b4:	1dbb      	adds	r3, r7, #6
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	f7fd fc14 	bl	8003ee4 <HAL_DMA_Start_IT>
 80066bc:	1e03      	subs	r3, r0, #0
 80066be:	d009      	beq.n	80066d4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2284      	movs	r2, #132	@ 0x84
 80066c4:	2110      	movs	r1, #16
 80066c6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2280      	movs	r2, #128	@ 0x80
 80066cc:	2120      	movs	r1, #32
 80066ce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e050      	b.n	8006776 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066dc:	f3ef 8310 	mrs	r3, PRIMASK
 80066e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e6:	2301      	movs	r3, #1
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	f383 8810 	msr	PRIMASK, r3
}
 80066f0:	46c0      	nop			@ (mov r8, r8)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2180      	movs	r1, #128	@ 0x80
 80066fe:	0049      	lsls	r1, r1, #1
 8006700:	430a      	orrs	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006706:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	f383 8810 	msr	PRIMASK, r3
}
 800670e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006710:	f3ef 8310 	mrs	r3, PRIMASK
 8006714:	613b      	str	r3, [r7, #16]
  return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800671a:	2301      	movs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f383 8810 	msr	PRIMASK, r3
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2101      	movs	r1, #1
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
 8006736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f383 8810 	msr	PRIMASK, r3
}
 8006740:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	61fb      	str	r3, [r7, #28]
  return(result);
 8006748:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674a:	637b      	str	r3, [r7, #52]	@ 0x34
 800674c:	2301      	movs	r3, #1
 800674e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2140      	movs	r1, #64	@ 0x40
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b010      	add	sp, #64	@ 0x40
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	0800689d 	.word	0x0800689d
 8006784:	08006a05 	.word	0x08006a05
 8006788:	08006a83 	.word	0x08006a83

0800678c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006794:	f3ef 8310 	mrs	r3, PRIMASK
 8006798:	60bb      	str	r3, [r7, #8]
  return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	2301      	movs	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f383 8810 	msr	PRIMASK, r3
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	21c0      	movs	r1, #192	@ 0xc0
 80067b6:	438a      	bics	r2, r1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f383 8810 	msr	PRIMASK, r3
}
 80067c4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80067cc:	46c0      	nop			@ (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b006      	add	sp, #24
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08e      	sub	sp, #56	@ 0x38
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067dc:	f3ef 8310 	mrs	r3, PRIMASK
 80067e0:	617b      	str	r3, [r7, #20]
  return(result);
 80067e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e6:	2301      	movs	r3, #1
 80067e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f383 8810 	msr	PRIMASK, r3
}
 80067f0:	46c0      	nop			@ (mov r8, r8)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4926      	ldr	r1, [pc, #152]	@ (8006898 <UART_EndRxTransfer+0xc4>)
 80067fe:	400a      	ands	r2, r1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f383 8810 	msr	PRIMASK, r3
}
 800680c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800680e:	f3ef 8310 	mrs	r3, PRIMASK
 8006812:	623b      	str	r3, [r7, #32]
  return(result);
 8006814:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
 8006818:	2301      	movs	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	f383 8810 	msr	PRIMASK, r3
}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2101      	movs	r1, #1
 8006830:	438a      	bics	r2, r1
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	f383 8810 	msr	PRIMASK, r3
}
 800683e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006844:	2b01      	cmp	r3, #1
 8006846:	d118      	bne.n	800687a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006848:	f3ef 8310 	mrs	r3, PRIMASK
 800684c:	60bb      	str	r3, [r7, #8]
  return(result);
 800684e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006852:	2301      	movs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f383 8810 	msr	PRIMASK, r3
}
 800685c:	46c0      	nop			@ (mov r8, r8)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2110      	movs	r1, #16
 800686a:	438a      	bics	r2, r1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f383 8810 	msr	PRIMASK, r3
}
 8006878:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2280      	movs	r2, #128	@ 0x80
 800687e:	2120      	movs	r1, #32
 8006880:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	46bd      	mov	sp, r7
 8006892:	b00e      	add	sp, #56	@ 0x38
 8006894:	bd80      	pop	{r7, pc}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	fffffedf 	.word	0xfffffedf

0800689c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b094      	sub	sp, #80	@ 0x50
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2220      	movs	r2, #32
 80068b2:	4013      	ands	r3, r2
 80068b4:	d16f      	bne.n	8006996 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80068b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b8:	225a      	movs	r2, #90	@ 0x5a
 80068ba:	2100      	movs	r1, #0
 80068bc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068be:	f3ef 8310 	mrs	r3, PRIMASK
 80068c2:	617b      	str	r3, [r7, #20]
  return(result);
 80068c4:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068c8:	2301      	movs	r3, #1
 80068ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f383 8810 	msr	PRIMASK, r3
}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4948      	ldr	r1, [pc, #288]	@ (8006a00 <UART_DMAReceiveCplt+0x164>)
 80068e0:	400a      	ands	r2, r1
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f383 8810 	msr	PRIMASK, r3
}
 80068ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f0:	f3ef 8310 	mrs	r3, PRIMASK
 80068f4:	623b      	str	r3, [r7, #32]
  return(result);
 80068f6:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068fa:	2301      	movs	r3, #1
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	f383 8810 	msr	PRIMASK, r3
}
 8006904:	46c0      	nop			@ (mov r8, r8)
 8006906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2101      	movs	r1, #1
 8006912:	438a      	bics	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
 8006916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	f383 8810 	msr	PRIMASK, r3
}
 8006920:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006922:	f3ef 8310 	mrs	r3, PRIMASK
 8006926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	643b      	str	r3, [r7, #64]	@ 0x40
 800692c:	2301      	movs	r3, #1
 800692e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2140      	movs	r1, #64	@ 0x40
 8006944:	438a      	bics	r2, r1
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800694a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694e:	f383 8810 	msr	PRIMASK, r3
}
 8006952:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006956:	2280      	movs	r2, #128	@ 0x80
 8006958:	2120      	movs	r1, #32
 800695a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006960:	2b01      	cmp	r3, #1
 8006962:	d118      	bne.n	8006996 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006964:	f3ef 8310 	mrs	r3, PRIMASK
 8006968:	60bb      	str	r3, [r7, #8]
  return(result);
 800696a:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800696e:	2301      	movs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f383 8810 	msr	PRIMASK, r3
}
 8006978:	46c0      	nop			@ (mov r8, r8)
 800697a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2110      	movs	r1, #16
 8006986:	438a      	bics	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f383 8810 	msr	PRIMASK, r3
}
 8006994:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006998:	2200      	movs	r2, #0
 800699a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800699e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d124      	bne.n	80069ee <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	225a      	movs	r2, #90	@ 0x5a
 80069a8:	2100      	movs	r1, #0
 80069aa:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	213a      	movs	r1, #58	@ 0x3a
 80069b4:	187b      	adds	r3, r7, r1
 80069b6:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 80069b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ba:	2258      	movs	r2, #88	@ 0x58
 80069bc:	5a9b      	ldrh	r3, [r3, r2]
 80069be:	187a      	adds	r2, r7, r1
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d204      	bcs.n	80069d0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80069c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c8:	187a      	adds	r2, r7, r1
 80069ca:	215a      	movs	r1, #90	@ 0x5a
 80069cc:	8812      	ldrh	r2, [r2, #0]
 80069ce:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d2:	2258      	movs	r2, #88	@ 0x58
 80069d4:	5a9a      	ldrh	r2, [r3, r2]
 80069d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d8:	215a      	movs	r1, #90	@ 0x5a
 80069da:	5a5b      	ldrh	r3, [r3, r1]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	0011      	movs	r1, r2
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff f9ba 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069ec:	e003      	b.n	80069f6 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 80069ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7fc fb7b 	bl	80030ec <HAL_UART_RxCpltCallback>
}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b014      	add	sp, #80	@ 0x50
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	fffffeff 	.word	0xfffffeff

08006a04 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d128      	bne.n	8006a72 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2258      	movs	r2, #88	@ 0x58
 8006a24:	5a9b      	ldrh	r3, [r3, r2]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	225a      	movs	r2, #90	@ 0x5a
 8006a2e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	210a      	movs	r1, #10
 8006a38:	187b      	adds	r3, r7, r1
 8006a3a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2258      	movs	r2, #88	@ 0x58
 8006a40:	5a9b      	ldrh	r3, [r3, r2]
 8006a42:	187a      	adds	r2, r7, r1
 8006a44:	8812      	ldrh	r2, [r2, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d804      	bhi.n	8006a54 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	187a      	adds	r2, r7, r1
 8006a4e:	215a      	movs	r1, #90	@ 0x5a
 8006a50:	8812      	ldrh	r2, [r2, #0]
 8006a52:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2258      	movs	r2, #88	@ 0x58
 8006a58:	5a9a      	ldrh	r2, [r3, r2]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	215a      	movs	r1, #90	@ 0x5a
 8006a5e:	5a5b      	ldrh	r3, [r3, r1]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	0011      	movs	r1, r2
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7ff f978 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a70:	e003      	b.n	8006a7a <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	0018      	movs	r0, r3
 8006a76:	f7ff f963 	bl	8005d40 <HAL_UART_RxHalfCpltCallback>
}
 8006a7a:	46c0      	nop			@ (mov r8, r8)
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	b004      	add	sp, #16
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2280      	movs	r2, #128	@ 0x80
 8006a9a:	589b      	ldr	r3, [r3, r2]
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2280      	movs	r2, #128	@ 0x80
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b80      	cmp	r3, #128	@ 0x80
 8006aaa:	d10a      	bne.n	8006ac2 <UART_DMAError+0x40>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b21      	cmp	r3, #33	@ 0x21
 8006ab0:	d107      	bne.n	8006ac2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2252      	movs	r2, #82	@ 0x52
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7ff fe65 	bl	800678c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2240      	movs	r2, #64	@ 0x40
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b40      	cmp	r3, #64	@ 0x40
 8006ace:	d10a      	bne.n	8006ae6 <UART_DMAError+0x64>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b22      	cmp	r3, #34	@ 0x22
 8006ad4:	d107      	bne.n	8006ae6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	225a      	movs	r2, #90	@ 0x5a
 8006ada:	2100      	movs	r1, #0
 8006adc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7ff fe77 	bl	80067d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2284      	movs	r2, #132	@ 0x84
 8006aea:	589b      	ldr	r3, [r3, r2]
 8006aec:	2210      	movs	r2, #16
 8006aee:	431a      	orrs	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2184      	movs	r1, #132	@ 0x84
 8006af4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7ff f929 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afe:	46c0      	nop			@ (mov r8, r8)
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b006      	add	sp, #24
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	225a      	movs	r2, #90	@ 0x5a
 8006b18:	2100      	movs	r1, #0
 8006b1a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7ff f916 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b24:	46c0      	nop			@ (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b004      	add	sp, #16
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b34:	f3ef 8310 	mrs	r3, PRIMASK
 8006b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	2301      	movs	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f383 8810 	msr	PRIMASK, r3
}
 8006b48:	46c0      	nop			@ (mov r8, r8)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2140      	movs	r1, #64	@ 0x40
 8006b56:	438a      	bics	r2, r1
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f383 8810 	msr	PRIMASK, r3
}
 8006b64:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0018      	movs	r0, r3
 8006b76:	f7fc fca1 	bl	80034bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7a:	46c0      	nop			@ (mov r8, r8)
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	b006      	add	sp, #24
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b8a:	46c0      	nop			@ (mov r8, r8)
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b002      	add	sp, #8
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <rand>:
 8006b94:	4b16      	ldr	r3, [pc, #88]	@ (8006bf0 <rand+0x5c>)
 8006b96:	b510      	push	{r4, lr}
 8006b98:	681c      	ldr	r4, [r3, #0]
 8006b9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d116      	bne.n	8006bce <rand+0x3a>
 8006ba0:	2018      	movs	r0, #24
 8006ba2:	f001 fdf3 	bl	800878c <malloc>
 8006ba6:	1e02      	subs	r2, r0, #0
 8006ba8:	6320      	str	r0, [r4, #48]	@ 0x30
 8006baa:	d104      	bne.n	8006bb6 <rand+0x22>
 8006bac:	2152      	movs	r1, #82	@ 0x52
 8006bae:	4b11      	ldr	r3, [pc, #68]	@ (8006bf4 <rand+0x60>)
 8006bb0:	4811      	ldr	r0, [pc, #68]	@ (8006bf8 <rand+0x64>)
 8006bb2:	f000 ff01 	bl	80079b8 <__assert_func>
 8006bb6:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <rand+0x68>)
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6003      	str	r3, [r0, #0]
 8006bbc:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <rand+0x6c>)
 8006bbe:	6043      	str	r3, [r0, #4]
 8006bc0:	4b10      	ldr	r3, [pc, #64]	@ (8006c04 <rand+0x70>)
 8006bc2:	6083      	str	r3, [r0, #8]
 8006bc4:	230b      	movs	r3, #11
 8006bc6:	8183      	strh	r3, [r0, #12]
 8006bc8:	2001      	movs	r0, #1
 8006bca:	6110      	str	r0, [r2, #16]
 8006bcc:	6151      	str	r1, [r2, #20]
 8006bce:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8006bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8006c08 <rand+0x74>)
 8006bd2:	6920      	ldr	r0, [r4, #16]
 8006bd4:	6961      	ldr	r1, [r4, #20]
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <rand+0x78>)
 8006bd8:	f7f9 fcc0 	bl	800055c <__aeabi_lmul>
 8006bdc:	2201      	movs	r2, #1
 8006bde:	2300      	movs	r3, #0
 8006be0:	1880      	adds	r0, r0, r2
 8006be2:	4159      	adcs	r1, r3
 8006be4:	6120      	str	r0, [r4, #16]
 8006be6:	6161      	str	r1, [r4, #20]
 8006be8:	0048      	lsls	r0, r1, #1
 8006bea:	0840      	lsrs	r0, r0, #1
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	20000020 	.word	0x20000020
 8006bf4:	08009bd0 	.word	0x08009bd0
 8006bf8:	08009be7 	.word	0x08009be7
 8006bfc:	abcd330e 	.word	0xabcd330e
 8006c00:	e66d1234 	.word	0xe66d1234
 8006c04:	0005deec 	.word	0x0005deec
 8006c08:	4c957f2d 	.word	0x4c957f2d
 8006c0c:	5851f42d 	.word	0x5851f42d

08006c10 <__cvt>:
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	001f      	movs	r7, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	0016      	movs	r6, r2
 8006c18:	b08b      	sub	sp, #44	@ 0x2c
 8006c1a:	429f      	cmp	r7, r3
 8006c1c:	da04      	bge.n	8006c28 <__cvt+0x18>
 8006c1e:	2180      	movs	r1, #128	@ 0x80
 8006c20:	0609      	lsls	r1, r1, #24
 8006c22:	187b      	adds	r3, r7, r1
 8006c24:	001f      	movs	r7, r3
 8006c26:	232d      	movs	r3, #45	@ 0x2d
 8006c28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c2a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006c2c:	7013      	strb	r3, [r2, #0]
 8006c2e:	2320      	movs	r3, #32
 8006c30:	2203      	movs	r2, #3
 8006c32:	439d      	bics	r5, r3
 8006c34:	2d46      	cmp	r5, #70	@ 0x46
 8006c36:	d007      	beq.n	8006c48 <__cvt+0x38>
 8006c38:	002b      	movs	r3, r5
 8006c3a:	3b45      	subs	r3, #69	@ 0x45
 8006c3c:	4259      	negs	r1, r3
 8006c3e:	414b      	adcs	r3, r1
 8006c40:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006c42:	3a01      	subs	r2, #1
 8006c44:	18cb      	adds	r3, r1, r3
 8006c46:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c48:	ab09      	add	r3, sp, #36	@ 0x24
 8006c4a:	9304      	str	r3, [sp, #16]
 8006c4c:	ab08      	add	r3, sp, #32
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c52:	9200      	str	r2, [sp, #0]
 8006c54:	9302      	str	r3, [sp, #8]
 8006c56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c58:	0032      	movs	r2, r6
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	003b      	movs	r3, r7
 8006c5e:	f000 ff57 	bl	8007b10 <_dtoa_r>
 8006c62:	0004      	movs	r4, r0
 8006c64:	2d47      	cmp	r5, #71	@ 0x47
 8006c66:	d11b      	bne.n	8006ca0 <__cvt+0x90>
 8006c68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c6a:	07db      	lsls	r3, r3, #31
 8006c6c:	d511      	bpl.n	8006c92 <__cvt+0x82>
 8006c6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c70:	18c3      	adds	r3, r0, r3
 8006c72:	9307      	str	r3, [sp, #28]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2300      	movs	r3, #0
 8006c78:	0030      	movs	r0, r6
 8006c7a:	0039      	movs	r1, r7
 8006c7c:	f7f9 fbe6 	bl	800044c <__aeabi_dcmpeq>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d001      	beq.n	8006c88 <__cvt+0x78>
 8006c84:	9b07      	ldr	r3, [sp, #28]
 8006c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c88:	2230      	movs	r2, #48	@ 0x30
 8006c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8c:	9907      	ldr	r1, [sp, #28]
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	d320      	bcc.n	8006cd4 <__cvt+0xc4>
 8006c92:	0020      	movs	r0, r4
 8006c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c96:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c98:	1b1b      	subs	r3, r3, r4
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	b00b      	add	sp, #44	@ 0x2c
 8006c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ca2:	18c3      	adds	r3, r0, r3
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	2d46      	cmp	r5, #70	@ 0x46
 8006ca8:	d1e4      	bne.n	8006c74 <__cvt+0x64>
 8006caa:	7803      	ldrb	r3, [r0, #0]
 8006cac:	2b30      	cmp	r3, #48	@ 0x30
 8006cae:	d10c      	bne.n	8006cca <__cvt+0xba>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	0030      	movs	r0, r6
 8006cb6:	0039      	movs	r1, r7
 8006cb8:	f7f9 fbc8 	bl	800044c <__aeabi_dcmpeq>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d104      	bne.n	8006cca <__cvt+0xba>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ccc:	9a07      	ldr	r2, [sp, #28]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	18d3      	adds	r3, r2, r3
 8006cd2:	e7ce      	b.n	8006c72 <__cvt+0x62>
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	e7d6      	b.n	8006c8a <__cvt+0x7a>

08006cdc <__exponent>:
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	232b      	movs	r3, #43	@ 0x2b
 8006ce0:	0005      	movs	r5, r0
 8006ce2:	000c      	movs	r4, r1
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	7002      	strb	r2, [r0, #0]
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	da01      	bge.n	8006cf0 <__exponent+0x14>
 8006cec:	424c      	negs	r4, r1
 8006cee:	3302      	adds	r3, #2
 8006cf0:	706b      	strb	r3, [r5, #1]
 8006cf2:	2c09      	cmp	r4, #9
 8006cf4:	dd2c      	ble.n	8006d50 <__exponent+0x74>
 8006cf6:	ab02      	add	r3, sp, #8
 8006cf8:	1dde      	adds	r6, r3, #7
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	210a      	movs	r1, #10
 8006cfe:	f7f9 fb8f 	bl	8000420 <__aeabi_idivmod>
 8006d02:	0037      	movs	r7, r6
 8006d04:	3130      	adds	r1, #48	@ 0x30
 8006d06:	3e01      	subs	r6, #1
 8006d08:	0020      	movs	r0, r4
 8006d0a:	7031      	strb	r1, [r6, #0]
 8006d0c:	210a      	movs	r1, #10
 8006d0e:	9401      	str	r4, [sp, #4]
 8006d10:	f7f9 faa0 	bl	8000254 <__divsi3>
 8006d14:	9b01      	ldr	r3, [sp, #4]
 8006d16:	0004      	movs	r4, r0
 8006d18:	2b63      	cmp	r3, #99	@ 0x63
 8006d1a:	dcee      	bgt.n	8006cfa <__exponent+0x1e>
 8006d1c:	1eba      	subs	r2, r7, #2
 8006d1e:	1ca8      	adds	r0, r5, #2
 8006d20:	0001      	movs	r1, r0
 8006d22:	0013      	movs	r3, r2
 8006d24:	3430      	adds	r4, #48	@ 0x30
 8006d26:	7014      	strb	r4, [r2, #0]
 8006d28:	ac02      	add	r4, sp, #8
 8006d2a:	3407      	adds	r4, #7
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d80a      	bhi.n	8006d46 <__exponent+0x6a>
 8006d30:	2300      	movs	r3, #0
 8006d32:	42a2      	cmp	r2, r4
 8006d34:	d803      	bhi.n	8006d3e <__exponent+0x62>
 8006d36:	3309      	adds	r3, #9
 8006d38:	aa02      	add	r2, sp, #8
 8006d3a:	189b      	adds	r3, r3, r2
 8006d3c:	1bdb      	subs	r3, r3, r7
 8006d3e:	18c0      	adds	r0, r0, r3
 8006d40:	1b40      	subs	r0, r0, r5
 8006d42:	b005      	add	sp, #20
 8006d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d46:	781c      	ldrb	r4, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	700c      	strb	r4, [r1, #0]
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	e7eb      	b.n	8006d28 <__exponent+0x4c>
 8006d50:	2330      	movs	r3, #48	@ 0x30
 8006d52:	18e4      	adds	r4, r4, r3
 8006d54:	70ab      	strb	r3, [r5, #2]
 8006d56:	1d28      	adds	r0, r5, #4
 8006d58:	70ec      	strb	r4, [r5, #3]
 8006d5a:	e7f1      	b.n	8006d40 <__exponent+0x64>

08006d5c <_printf_float>:
 8006d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5e:	b097      	sub	sp, #92	@ 0x5c
 8006d60:	000d      	movs	r5, r1
 8006d62:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d64:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d68:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d6a:	f000 fd9b 	bl	80078a4 <_localeconv_r>
 8006d6e:	6803      	ldr	r3, [r0, #0]
 8006d70:	0018      	movs	r0, r3
 8006d72:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d74:	f7f9 f9c8 	bl	8000108 <strlen>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006d7c:	9314      	str	r3, [sp, #80]	@ 0x50
 8006d7e:	7e2b      	ldrb	r3, [r5, #24]
 8006d80:	2207      	movs	r2, #7
 8006d82:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	05c9      	lsls	r1, r1, #23
 8006d8e:	d545      	bpl.n	8006e1c <_printf_float+0xc0>
 8006d90:	189b      	adds	r3, r3, r2
 8006d92:	4393      	bics	r3, r2
 8006d94:	001a      	movs	r2, r3
 8006d96:	3208      	adds	r2, #8
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	681e      	ldr	r6, [r3, #0]
 8006d9e:	685f      	ldr	r7, [r3, #4]
 8006da0:	007b      	lsls	r3, r7, #1
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	9311      	str	r3, [sp, #68]	@ 0x44
 8006da6:	9610      	str	r6, [sp, #64]	@ 0x40
 8006da8:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006daa:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006dac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006dae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006db0:	4ba7      	ldr	r3, [pc, #668]	@ (8007050 <_printf_float+0x2f4>)
 8006db2:	4252      	negs	r2, r2
 8006db4:	f7fc f824 	bl	8002e00 <__aeabi_dcmpun>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d131      	bne.n	8006e20 <_printf_float+0xc4>
 8006dbc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006dbe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4ba3      	ldr	r3, [pc, #652]	@ (8007050 <_printf_float+0x2f4>)
 8006dc4:	4252      	negs	r2, r2
 8006dc6:	f7f9 fb51 	bl	800046c <__aeabi_dcmple>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d128      	bne.n	8006e20 <_printf_float+0xc4>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	0030      	movs	r0, r6
 8006dd4:	0039      	movs	r1, r7
 8006dd6:	f7f9 fb3f 	bl	8000458 <__aeabi_dcmplt>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d003      	beq.n	8006de6 <_printf_float+0x8a>
 8006dde:	002b      	movs	r3, r5
 8006de0:	222d      	movs	r2, #45	@ 0x2d
 8006de2:	3343      	adds	r3, #67	@ 0x43
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006de8:	4f9a      	ldr	r7, [pc, #616]	@ (8007054 <_printf_float+0x2f8>)
 8006dea:	2b47      	cmp	r3, #71	@ 0x47
 8006dec:	d900      	bls.n	8006df0 <_printf_float+0x94>
 8006dee:	4f9a      	ldr	r7, [pc, #616]	@ (8007058 <_printf_float+0x2fc>)
 8006df0:	2303      	movs	r3, #3
 8006df2:	2400      	movs	r4, #0
 8006df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006df6:	612b      	str	r3, [r5, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	439a      	bics	r2, r3
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e00:	0029      	movs	r1, r5
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e08:	aa15      	add	r2, sp, #84	@ 0x54
 8006e0a:	f000 f9e5 	bl	80071d8 <_printf_common>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d000      	beq.n	8006e14 <_printf_float+0xb8>
 8006e12:	e09f      	b.n	8006f54 <_printf_float+0x1f8>
 8006e14:	2001      	movs	r0, #1
 8006e16:	4240      	negs	r0, r0
 8006e18:	b017      	add	sp, #92	@ 0x5c
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	e7b8      	b.n	8006d92 <_printf_float+0x36>
 8006e20:	0032      	movs	r2, r6
 8006e22:	003b      	movs	r3, r7
 8006e24:	0030      	movs	r0, r6
 8006e26:	0039      	movs	r1, r7
 8006e28:	f7fb ffea 	bl	8002e00 <__aeabi_dcmpun>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d00b      	beq.n	8006e48 <_printf_float+0xec>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	da03      	bge.n	8006e3c <_printf_float+0xe0>
 8006e34:	002b      	movs	r3, r5
 8006e36:	222d      	movs	r2, #45	@ 0x2d
 8006e38:	3343      	adds	r3, #67	@ 0x43
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e3e:	4f87      	ldr	r7, [pc, #540]	@ (800705c <_printf_float+0x300>)
 8006e40:	2b47      	cmp	r3, #71	@ 0x47
 8006e42:	d9d5      	bls.n	8006df0 <_printf_float+0x94>
 8006e44:	4f86      	ldr	r7, [pc, #536]	@ (8007060 <_printf_float+0x304>)
 8006e46:	e7d3      	b.n	8006df0 <_printf_float+0x94>
 8006e48:	2220      	movs	r2, #32
 8006e4a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006e4c:	686b      	ldr	r3, [r5, #4]
 8006e4e:	4394      	bics	r4, r2
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	d146      	bne.n	8006ee2 <_printf_float+0x186>
 8006e54:	3307      	adds	r3, #7
 8006e56:	606b      	str	r3, [r5, #4]
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	2200      	movs	r2, #0
 8006e62:	602b      	str	r3, [r5, #0]
 8006e64:	9206      	str	r2, [sp, #24]
 8006e66:	aa14      	add	r2, sp, #80	@ 0x50
 8006e68:	9205      	str	r2, [sp, #20]
 8006e6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e6c:	a90a      	add	r1, sp, #40	@ 0x28
 8006e6e:	9204      	str	r2, [sp, #16]
 8006e70:	aa13      	add	r2, sp, #76	@ 0x4c
 8006e72:	9203      	str	r2, [sp, #12]
 8006e74:	2223      	movs	r2, #35	@ 0x23
 8006e76:	1852      	adds	r2, r2, r1
 8006e78:	9202      	str	r2, [sp, #8]
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	686b      	ldr	r3, [r5, #4]
 8006e7e:	0032      	movs	r2, r6
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e84:	003b      	movs	r3, r7
 8006e86:	f7ff fec3 	bl	8006c10 <__cvt>
 8006e8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e8c:	0007      	movs	r7, r0
 8006e8e:	2c47      	cmp	r4, #71	@ 0x47
 8006e90:	d12d      	bne.n	8006eee <_printf_float+0x192>
 8006e92:	1cd3      	adds	r3, r2, #3
 8006e94:	db02      	blt.n	8006e9c <_printf_float+0x140>
 8006e96:	686b      	ldr	r3, [r5, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	dd48      	ble.n	8006f2e <_printf_float+0x1d2>
 8006e9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ea0:	3b02      	subs	r3, #2
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006eaa:	3901      	subs	r1, #1
 8006eac:	3050      	adds	r0, #80	@ 0x50
 8006eae:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006eb0:	f7ff ff14 	bl	8006cdc <__exponent>
 8006eb4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006eb6:	0004      	movs	r4, r0
 8006eb8:	1813      	adds	r3, r2, r0
 8006eba:	612b      	str	r3, [r5, #16]
 8006ebc:	2a01      	cmp	r2, #1
 8006ebe:	dc02      	bgt.n	8006ec6 <_printf_float+0x16a>
 8006ec0:	682a      	ldr	r2, [r5, #0]
 8006ec2:	07d2      	lsls	r2, r2, #31
 8006ec4:	d501      	bpl.n	8006eca <_printf_float+0x16e>
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	612b      	str	r3, [r5, #16]
 8006eca:	2323      	movs	r3, #35	@ 0x23
 8006ecc:	aa0a      	add	r2, sp, #40	@ 0x28
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d100      	bne.n	8006ed8 <_printf_float+0x17c>
 8006ed6:	e792      	b.n	8006dfe <_printf_float+0xa2>
 8006ed8:	002b      	movs	r3, r5
 8006eda:	222d      	movs	r2, #45	@ 0x2d
 8006edc:	3343      	adds	r3, #67	@ 0x43
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e78d      	b.n	8006dfe <_printf_float+0xa2>
 8006ee2:	2c47      	cmp	r4, #71	@ 0x47
 8006ee4:	d1b8      	bne.n	8006e58 <_printf_float+0xfc>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1b6      	bne.n	8006e58 <_printf_float+0xfc>
 8006eea:	3301      	adds	r3, #1
 8006eec:	e7b3      	b.n	8006e56 <_printf_float+0xfa>
 8006eee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ef0:	0011      	movs	r1, r2
 8006ef2:	2b65      	cmp	r3, #101	@ 0x65
 8006ef4:	d9d7      	bls.n	8006ea6 <_printf_float+0x14a>
 8006ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ef8:	2b66      	cmp	r3, #102	@ 0x66
 8006efa:	d11a      	bne.n	8006f32 <_printf_float+0x1d6>
 8006efc:	686b      	ldr	r3, [r5, #4]
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	dd09      	ble.n	8006f16 <_printf_float+0x1ba>
 8006f02:	612a      	str	r2, [r5, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <_printf_float+0x1b2>
 8006f08:	6829      	ldr	r1, [r5, #0]
 8006f0a:	07c9      	lsls	r1, r1, #31
 8006f0c:	d50b      	bpl.n	8006f26 <_printf_float+0x1ca>
 8006f0e:	3301      	adds	r3, #1
 8006f10:	189b      	adds	r3, r3, r2
 8006f12:	612b      	str	r3, [r5, #16]
 8006f14:	e007      	b.n	8006f26 <_printf_float+0x1ca>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <_printf_float+0x1c6>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	6829      	ldr	r1, [r5, #0]
 8006f1e:	4211      	tst	r1, r2
 8006f20:	d000      	beq.n	8006f24 <_printf_float+0x1c8>
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	612a      	str	r2, [r5, #16]
 8006f26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f28:	2400      	movs	r4, #0
 8006f2a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006f2c:	e7cd      	b.n	8006eca <_printf_float+0x16e>
 8006f2e:	2367      	movs	r3, #103	@ 0x67
 8006f30:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f36:	4299      	cmp	r1, r3
 8006f38:	db06      	blt.n	8006f48 <_printf_float+0x1ec>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	6129      	str	r1, [r5, #16]
 8006f3e:	07db      	lsls	r3, r3, #31
 8006f40:	d5f1      	bpl.n	8006f26 <_printf_float+0x1ca>
 8006f42:	3101      	adds	r1, #1
 8006f44:	6129      	str	r1, [r5, #16]
 8006f46:	e7ee      	b.n	8006f26 <_printf_float+0x1ca>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	2900      	cmp	r1, #0
 8006f4c:	dce0      	bgt.n	8006f10 <_printf_float+0x1b4>
 8006f4e:	1892      	adds	r2, r2, r2
 8006f50:	1a52      	subs	r2, r2, r1
 8006f52:	e7dd      	b.n	8006f10 <_printf_float+0x1b4>
 8006f54:	682a      	ldr	r2, [r5, #0]
 8006f56:	0553      	lsls	r3, r2, #21
 8006f58:	d408      	bmi.n	8006f6c <_printf_float+0x210>
 8006f5a:	692b      	ldr	r3, [r5, #16]
 8006f5c:	003a      	movs	r2, r7
 8006f5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f64:	47a0      	blx	r4
 8006f66:	3001      	adds	r0, #1
 8006f68:	d129      	bne.n	8006fbe <_printf_float+0x262>
 8006f6a:	e753      	b.n	8006e14 <_printf_float+0xb8>
 8006f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f6e:	2b65      	cmp	r3, #101	@ 0x65
 8006f70:	d800      	bhi.n	8006f74 <_printf_float+0x218>
 8006f72:	e0da      	b.n	800712a <_printf_float+0x3ce>
 8006f74:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006f76:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f7f9 fa66 	bl	800044c <__aeabi_dcmpeq>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d033      	beq.n	8006fec <_printf_float+0x290>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4a37      	ldr	r2, [pc, #220]	@ (8007064 <_printf_float+0x308>)
 8006f88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f8e:	47a0      	blx	r4
 8006f90:	3001      	adds	r0, #1
 8006f92:	d100      	bne.n	8006f96 <_printf_float+0x23a>
 8006f94:	e73e      	b.n	8006e14 <_printf_float+0xb8>
 8006f96:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006f98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f9a:	42b3      	cmp	r3, r6
 8006f9c:	db02      	blt.n	8006fa4 <_printf_float+0x248>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	07db      	lsls	r3, r3, #31
 8006fa2:	d50c      	bpl.n	8006fbe <_printf_float+0x262>
 8006fa4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006faa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fae:	47a0      	blx	r4
 8006fb0:	2400      	movs	r4, #0
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d100      	bne.n	8006fb8 <_printf_float+0x25c>
 8006fb6:	e72d      	b.n	8006e14 <_printf_float+0xb8>
 8006fb8:	1e73      	subs	r3, r6, #1
 8006fba:	42a3      	cmp	r3, r4
 8006fbc:	dc0a      	bgt.n	8006fd4 <_printf_float+0x278>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	079b      	lsls	r3, r3, #30
 8006fc2:	d500      	bpl.n	8006fc6 <_printf_float+0x26a>
 8006fc4:	e105      	b.n	80071d2 <_printf_float+0x476>
 8006fc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006fc8:	68e8      	ldr	r0, [r5, #12]
 8006fca:	4298      	cmp	r0, r3
 8006fcc:	db00      	blt.n	8006fd0 <_printf_float+0x274>
 8006fce:	e723      	b.n	8006e18 <_printf_float+0xbc>
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	e721      	b.n	8006e18 <_printf_float+0xbc>
 8006fd4:	002a      	movs	r2, r5
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fdc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006fde:	321a      	adds	r2, #26
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d100      	bne.n	8006fe8 <_printf_float+0x28c>
 8006fe6:	e715      	b.n	8006e14 <_printf_float+0xb8>
 8006fe8:	3401      	adds	r4, #1
 8006fea:	e7e5      	b.n	8006fb8 <_printf_float+0x25c>
 8006fec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dc3a      	bgt.n	8007068 <_printf_float+0x30c>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8007064 <_printf_float+0x308>)
 8006ff6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ff8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ffa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ffc:	47a0      	blx	r4
 8006ffe:	3001      	adds	r0, #1
 8007000:	d100      	bne.n	8007004 <_printf_float+0x2a8>
 8007002:	e707      	b.n	8006e14 <_printf_float+0xb8>
 8007004:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007006:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007008:	4333      	orrs	r3, r6
 800700a:	d102      	bne.n	8007012 <_printf_float+0x2b6>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d5d5      	bpl.n	8006fbe <_printf_float+0x262>
 8007012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007014:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007016:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007018:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800701a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800701c:	47a0      	blx	r4
 800701e:	2300      	movs	r3, #0
 8007020:	3001      	adds	r0, #1
 8007022:	d100      	bne.n	8007026 <_printf_float+0x2ca>
 8007024:	e6f6      	b.n	8006e14 <_printf_float+0xb8>
 8007026:	930c      	str	r3, [sp, #48]	@ 0x30
 8007028:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800702a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800702c:	425b      	negs	r3, r3
 800702e:	4293      	cmp	r3, r2
 8007030:	dc01      	bgt.n	8007036 <_printf_float+0x2da>
 8007032:	0033      	movs	r3, r6
 8007034:	e792      	b.n	8006f5c <_printf_float+0x200>
 8007036:	002a      	movs	r2, r5
 8007038:	2301      	movs	r3, #1
 800703a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800703c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800703e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007040:	321a      	adds	r2, #26
 8007042:	47a0      	blx	r4
 8007044:	3001      	adds	r0, #1
 8007046:	d100      	bne.n	800704a <_printf_float+0x2ee>
 8007048:	e6e4      	b.n	8006e14 <_printf_float+0xb8>
 800704a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800704c:	3301      	adds	r3, #1
 800704e:	e7ea      	b.n	8007026 <_printf_float+0x2ca>
 8007050:	7fefffff 	.word	0x7fefffff
 8007054:	08009c3f 	.word	0x08009c3f
 8007058:	08009c43 	.word	0x08009c43
 800705c:	08009c47 	.word	0x08009c47
 8007060:	08009c4b 	.word	0x08009c4b
 8007064:	08009c4f 	.word	0x08009c4f
 8007068:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800706a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800706c:	930c      	str	r3, [sp, #48]	@ 0x30
 800706e:	429e      	cmp	r6, r3
 8007070:	dd00      	ble.n	8007074 <_printf_float+0x318>
 8007072:	001e      	movs	r6, r3
 8007074:	2e00      	cmp	r6, #0
 8007076:	dc31      	bgt.n	80070dc <_printf_float+0x380>
 8007078:	43f3      	mvns	r3, r6
 800707a:	2400      	movs	r4, #0
 800707c:	17db      	asrs	r3, r3, #31
 800707e:	4033      	ands	r3, r6
 8007080:	930e      	str	r3, [sp, #56]	@ 0x38
 8007082:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007086:	1af3      	subs	r3, r6, r3
 8007088:	42a3      	cmp	r3, r4
 800708a:	dc30      	bgt.n	80070ee <_printf_float+0x392>
 800708c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800708e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007090:	429a      	cmp	r2, r3
 8007092:	dc38      	bgt.n	8007106 <_printf_float+0x3aa>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d435      	bmi.n	8007106 <_printf_float+0x3aa>
 800709a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800709c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800709e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070a0:	1b9b      	subs	r3, r3, r6
 80070a2:	1b14      	subs	r4, r2, r4
 80070a4:	429c      	cmp	r4, r3
 80070a6:	dd00      	ble.n	80070aa <_printf_float+0x34e>
 80070a8:	001c      	movs	r4, r3
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	dc34      	bgt.n	8007118 <_printf_float+0x3bc>
 80070ae:	43e3      	mvns	r3, r4
 80070b0:	2600      	movs	r6, #0
 80070b2:	17db      	asrs	r3, r3, #31
 80070b4:	401c      	ands	r4, r3
 80070b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	1b1b      	subs	r3, r3, r4
 80070be:	42b3      	cmp	r3, r6
 80070c0:	dc00      	bgt.n	80070c4 <_printf_float+0x368>
 80070c2:	e77c      	b.n	8006fbe <_printf_float+0x262>
 80070c4:	002a      	movs	r2, r5
 80070c6:	2301      	movs	r3, #1
 80070c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80070ce:	321a      	adds	r2, #26
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	d100      	bne.n	80070d8 <_printf_float+0x37c>
 80070d6:	e69d      	b.n	8006e14 <_printf_float+0xb8>
 80070d8:	3601      	adds	r6, #1
 80070da:	e7ec      	b.n	80070b6 <_printf_float+0x35a>
 80070dc:	0033      	movs	r3, r6
 80070de:	003a      	movs	r2, r7
 80070e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80070e6:	47a0      	blx	r4
 80070e8:	3001      	adds	r0, #1
 80070ea:	d1c5      	bne.n	8007078 <_printf_float+0x31c>
 80070ec:	e692      	b.n	8006e14 <_printf_float+0xb8>
 80070ee:	002a      	movs	r2, r5
 80070f0:	2301      	movs	r3, #1
 80070f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80070f8:	321a      	adds	r2, #26
 80070fa:	47b0      	blx	r6
 80070fc:	3001      	adds	r0, #1
 80070fe:	d100      	bne.n	8007102 <_printf_float+0x3a6>
 8007100:	e688      	b.n	8006e14 <_printf_float+0xb8>
 8007102:	3401      	adds	r4, #1
 8007104:	e7bd      	b.n	8007082 <_printf_float+0x326>
 8007106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007108:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800710a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800710c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800710e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007110:	47a0      	blx	r4
 8007112:	3001      	adds	r0, #1
 8007114:	d1c1      	bne.n	800709a <_printf_float+0x33e>
 8007116:	e67d      	b.n	8006e14 <_printf_float+0xb8>
 8007118:	19ba      	adds	r2, r7, r6
 800711a:	0023      	movs	r3, r4
 800711c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800711e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007120:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007122:	47b0      	blx	r6
 8007124:	3001      	adds	r0, #1
 8007126:	d1c2      	bne.n	80070ae <_printf_float+0x352>
 8007128:	e674      	b.n	8006e14 <_printf_float+0xb8>
 800712a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800712c:	930c      	str	r3, [sp, #48]	@ 0x30
 800712e:	2b01      	cmp	r3, #1
 8007130:	dc02      	bgt.n	8007138 <_printf_float+0x3dc>
 8007132:	2301      	movs	r3, #1
 8007134:	421a      	tst	r2, r3
 8007136:	d039      	beq.n	80071ac <_printf_float+0x450>
 8007138:	2301      	movs	r3, #1
 800713a:	003a      	movs	r2, r7
 800713c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800713e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007140:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007142:	47b0      	blx	r6
 8007144:	3001      	adds	r0, #1
 8007146:	d100      	bne.n	800714a <_printf_float+0x3ee>
 8007148:	e664      	b.n	8006e14 <_printf_float+0xb8>
 800714a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800714c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800714e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007150:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007152:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007154:	47b0      	blx	r6
 8007156:	3001      	adds	r0, #1
 8007158:	d100      	bne.n	800715c <_printf_float+0x400>
 800715a:	e65b      	b.n	8006e14 <_printf_float+0xb8>
 800715c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800715e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007162:	2200      	movs	r2, #0
 8007164:	3b01      	subs	r3, #1
 8007166:	930c      	str	r3, [sp, #48]	@ 0x30
 8007168:	2300      	movs	r3, #0
 800716a:	f7f9 f96f 	bl	800044c <__aeabi_dcmpeq>
 800716e:	2800      	cmp	r0, #0
 8007170:	d11a      	bne.n	80071a8 <_printf_float+0x44c>
 8007172:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007174:	1c7a      	adds	r2, r7, #1
 8007176:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007178:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800717a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800717c:	47b0      	blx	r6
 800717e:	3001      	adds	r0, #1
 8007180:	d10e      	bne.n	80071a0 <_printf_float+0x444>
 8007182:	e647      	b.n	8006e14 <_printf_float+0xb8>
 8007184:	002a      	movs	r2, r5
 8007186:	2301      	movs	r3, #1
 8007188:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800718a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800718c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800718e:	321a      	adds	r2, #26
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	d100      	bne.n	8007198 <_printf_float+0x43c>
 8007196:	e63d      	b.n	8006e14 <_printf_float+0xb8>
 8007198:	3601      	adds	r6, #1
 800719a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800719c:	429e      	cmp	r6, r3
 800719e:	dbf1      	blt.n	8007184 <_printf_float+0x428>
 80071a0:	002a      	movs	r2, r5
 80071a2:	0023      	movs	r3, r4
 80071a4:	3250      	adds	r2, #80	@ 0x50
 80071a6:	e6da      	b.n	8006f5e <_printf_float+0x202>
 80071a8:	2600      	movs	r6, #0
 80071aa:	e7f6      	b.n	800719a <_printf_float+0x43e>
 80071ac:	003a      	movs	r2, r7
 80071ae:	e7e2      	b.n	8007176 <_printf_float+0x41a>
 80071b0:	002a      	movs	r2, r5
 80071b2:	2301      	movs	r3, #1
 80071b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80071ba:	3219      	adds	r2, #25
 80071bc:	47b0      	blx	r6
 80071be:	3001      	adds	r0, #1
 80071c0:	d100      	bne.n	80071c4 <_printf_float+0x468>
 80071c2:	e627      	b.n	8006e14 <_printf_float+0xb8>
 80071c4:	3401      	adds	r4, #1
 80071c6:	68eb      	ldr	r3, [r5, #12]
 80071c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	dcef      	bgt.n	80071b0 <_printf_float+0x454>
 80071d0:	e6f9      	b.n	8006fc6 <_printf_float+0x26a>
 80071d2:	2400      	movs	r4, #0
 80071d4:	e7f7      	b.n	80071c6 <_printf_float+0x46a>
 80071d6:	46c0      	nop			@ (mov r8, r8)

080071d8 <_printf_common>:
 80071d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071da:	0016      	movs	r6, r2
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	688a      	ldr	r2, [r1, #8]
 80071e0:	690b      	ldr	r3, [r1, #16]
 80071e2:	000c      	movs	r4, r1
 80071e4:	9000      	str	r0, [sp, #0]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	da00      	bge.n	80071ec <_printf_common+0x14>
 80071ea:	0013      	movs	r3, r2
 80071ec:	0022      	movs	r2, r4
 80071ee:	6033      	str	r3, [r6, #0]
 80071f0:	3243      	adds	r2, #67	@ 0x43
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	2a00      	cmp	r2, #0
 80071f6:	d001      	beq.n	80071fc <_printf_common+0x24>
 80071f8:	3301      	adds	r3, #1
 80071fa:	6033      	str	r3, [r6, #0]
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	069b      	lsls	r3, r3, #26
 8007200:	d502      	bpl.n	8007208 <_printf_common+0x30>
 8007202:	6833      	ldr	r3, [r6, #0]
 8007204:	3302      	adds	r3, #2
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	6822      	ldr	r2, [r4, #0]
 800720a:	2306      	movs	r3, #6
 800720c:	0015      	movs	r5, r2
 800720e:	401d      	ands	r5, r3
 8007210:	421a      	tst	r2, r3
 8007212:	d027      	beq.n	8007264 <_printf_common+0x8c>
 8007214:	0023      	movs	r3, r4
 8007216:	3343      	adds	r3, #67	@ 0x43
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	1e5a      	subs	r2, r3, #1
 800721c:	4193      	sbcs	r3, r2
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	0692      	lsls	r2, r2, #26
 8007222:	d430      	bmi.n	8007286 <_printf_common+0xae>
 8007224:	0022      	movs	r2, r4
 8007226:	9901      	ldr	r1, [sp, #4]
 8007228:	9800      	ldr	r0, [sp, #0]
 800722a:	9d08      	ldr	r5, [sp, #32]
 800722c:	3243      	adds	r2, #67	@ 0x43
 800722e:	47a8      	blx	r5
 8007230:	3001      	adds	r0, #1
 8007232:	d025      	beq.n	8007280 <_printf_common+0xa8>
 8007234:	2206      	movs	r2, #6
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	2500      	movs	r5, #0
 800723a:	4013      	ands	r3, r2
 800723c:	2b04      	cmp	r3, #4
 800723e:	d105      	bne.n	800724c <_printf_common+0x74>
 8007240:	6833      	ldr	r3, [r6, #0]
 8007242:	68e5      	ldr	r5, [r4, #12]
 8007244:	1aed      	subs	r5, r5, r3
 8007246:	43eb      	mvns	r3, r5
 8007248:	17db      	asrs	r3, r3, #31
 800724a:	401d      	ands	r5, r3
 800724c:	68a3      	ldr	r3, [r4, #8]
 800724e:	6922      	ldr	r2, [r4, #16]
 8007250:	4293      	cmp	r3, r2
 8007252:	dd01      	ble.n	8007258 <_printf_common+0x80>
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	18ed      	adds	r5, r5, r3
 8007258:	2600      	movs	r6, #0
 800725a:	42b5      	cmp	r5, r6
 800725c:	d120      	bne.n	80072a0 <_printf_common+0xc8>
 800725e:	2000      	movs	r0, #0
 8007260:	e010      	b.n	8007284 <_printf_common+0xac>
 8007262:	3501      	adds	r5, #1
 8007264:	68e3      	ldr	r3, [r4, #12]
 8007266:	6832      	ldr	r2, [r6, #0]
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	42ab      	cmp	r3, r5
 800726c:	ddd2      	ble.n	8007214 <_printf_common+0x3c>
 800726e:	0022      	movs	r2, r4
 8007270:	2301      	movs	r3, #1
 8007272:	9901      	ldr	r1, [sp, #4]
 8007274:	9800      	ldr	r0, [sp, #0]
 8007276:	9f08      	ldr	r7, [sp, #32]
 8007278:	3219      	adds	r2, #25
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	d1f0      	bne.n	8007262 <_printf_common+0x8a>
 8007280:	2001      	movs	r0, #1
 8007282:	4240      	negs	r0, r0
 8007284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007286:	2030      	movs	r0, #48	@ 0x30
 8007288:	18e1      	adds	r1, r4, r3
 800728a:	3143      	adds	r1, #67	@ 0x43
 800728c:	7008      	strb	r0, [r1, #0]
 800728e:	0021      	movs	r1, r4
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	3145      	adds	r1, #69	@ 0x45
 8007294:	7809      	ldrb	r1, [r1, #0]
 8007296:	18a2      	adds	r2, r4, r2
 8007298:	3243      	adds	r2, #67	@ 0x43
 800729a:	3302      	adds	r3, #2
 800729c:	7011      	strb	r1, [r2, #0]
 800729e:	e7c1      	b.n	8007224 <_printf_common+0x4c>
 80072a0:	0022      	movs	r2, r4
 80072a2:	2301      	movs	r3, #1
 80072a4:	9901      	ldr	r1, [sp, #4]
 80072a6:	9800      	ldr	r0, [sp, #0]
 80072a8:	9f08      	ldr	r7, [sp, #32]
 80072aa:	321a      	adds	r2, #26
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	d0e6      	beq.n	8007280 <_printf_common+0xa8>
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7d1      	b.n	800725a <_printf_common+0x82>
	...

080072b8 <_printf_i>:
 80072b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ba:	b08b      	sub	sp, #44	@ 0x2c
 80072bc:	9206      	str	r2, [sp, #24]
 80072be:	000a      	movs	r2, r1
 80072c0:	3243      	adds	r2, #67	@ 0x43
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	9005      	str	r0, [sp, #20]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	7e0a      	ldrb	r2, [r1, #24]
 80072ca:	000c      	movs	r4, r1
 80072cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072ce:	2a78      	cmp	r2, #120	@ 0x78
 80072d0:	d809      	bhi.n	80072e6 <_printf_i+0x2e>
 80072d2:	2a62      	cmp	r2, #98	@ 0x62
 80072d4:	d80b      	bhi.n	80072ee <_printf_i+0x36>
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d100      	bne.n	80072dc <_printf_i+0x24>
 80072da:	e0bc      	b.n	8007456 <_printf_i+0x19e>
 80072dc:	497b      	ldr	r1, [pc, #492]	@ (80074cc <_printf_i+0x214>)
 80072de:	9104      	str	r1, [sp, #16]
 80072e0:	2a58      	cmp	r2, #88	@ 0x58
 80072e2:	d100      	bne.n	80072e6 <_printf_i+0x2e>
 80072e4:	e090      	b.n	8007408 <_printf_i+0x150>
 80072e6:	0025      	movs	r5, r4
 80072e8:	3542      	adds	r5, #66	@ 0x42
 80072ea:	702a      	strb	r2, [r5, #0]
 80072ec:	e022      	b.n	8007334 <_printf_i+0x7c>
 80072ee:	0010      	movs	r0, r2
 80072f0:	3863      	subs	r0, #99	@ 0x63
 80072f2:	2815      	cmp	r0, #21
 80072f4:	d8f7      	bhi.n	80072e6 <_printf_i+0x2e>
 80072f6:	f7f8 ff19 	bl	800012c <__gnu_thumb1_case_shi>
 80072fa:	0016      	.short	0x0016
 80072fc:	fff6001f 	.word	0xfff6001f
 8007300:	fff6fff6 	.word	0xfff6fff6
 8007304:	001ffff6 	.word	0x001ffff6
 8007308:	fff6fff6 	.word	0xfff6fff6
 800730c:	fff6fff6 	.word	0xfff6fff6
 8007310:	003600a1 	.word	0x003600a1
 8007314:	fff60080 	.word	0xfff60080
 8007318:	00b2fff6 	.word	0x00b2fff6
 800731c:	0036fff6 	.word	0x0036fff6
 8007320:	fff6fff6 	.word	0xfff6fff6
 8007324:	0084      	.short	0x0084
 8007326:	0025      	movs	r5, r4
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	3542      	adds	r5, #66	@ 0x42
 800732c:	1d11      	adds	r1, r2, #4
 800732e:	6019      	str	r1, [r3, #0]
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	702b      	strb	r3, [r5, #0]
 8007334:	2301      	movs	r3, #1
 8007336:	e0a0      	b.n	800747a <_printf_i+0x1c2>
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	6809      	ldr	r1, [r1, #0]
 800733c:	1d02      	adds	r2, r0, #4
 800733e:	060d      	lsls	r5, r1, #24
 8007340:	d50b      	bpl.n	800735a <_printf_i+0xa2>
 8007342:	6806      	ldr	r6, [r0, #0]
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	2e00      	cmp	r6, #0
 8007348:	da03      	bge.n	8007352 <_printf_i+0x9a>
 800734a:	232d      	movs	r3, #45	@ 0x2d
 800734c:	9a03      	ldr	r2, [sp, #12]
 800734e:	4276      	negs	r6, r6
 8007350:	7013      	strb	r3, [r2, #0]
 8007352:	4b5e      	ldr	r3, [pc, #376]	@ (80074cc <_printf_i+0x214>)
 8007354:	270a      	movs	r7, #10
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	e018      	b.n	800738c <_printf_i+0xd4>
 800735a:	6806      	ldr	r6, [r0, #0]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	0649      	lsls	r1, r1, #25
 8007360:	d5f1      	bpl.n	8007346 <_printf_i+0x8e>
 8007362:	b236      	sxth	r6, r6
 8007364:	e7ef      	b.n	8007346 <_printf_i+0x8e>
 8007366:	6808      	ldr	r0, [r1, #0]
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	c940      	ldmia	r1!, {r6}
 800736c:	0605      	lsls	r5, r0, #24
 800736e:	d402      	bmi.n	8007376 <_printf_i+0xbe>
 8007370:	0640      	lsls	r0, r0, #25
 8007372:	d500      	bpl.n	8007376 <_printf_i+0xbe>
 8007374:	b2b6      	uxth	r6, r6
 8007376:	6019      	str	r1, [r3, #0]
 8007378:	4b54      	ldr	r3, [pc, #336]	@ (80074cc <_printf_i+0x214>)
 800737a:	270a      	movs	r7, #10
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007380:	d100      	bne.n	8007384 <_printf_i+0xcc>
 8007382:	3f02      	subs	r7, #2
 8007384:	0023      	movs	r3, r4
 8007386:	2200      	movs	r2, #0
 8007388:	3343      	adds	r3, #67	@ 0x43
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	6863      	ldr	r3, [r4, #4]
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db03      	blt.n	800739c <_printf_i+0xe4>
 8007394:	2104      	movs	r1, #4
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	438a      	bics	r2, r1
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	2e00      	cmp	r6, #0
 800739e:	d102      	bne.n	80073a6 <_printf_i+0xee>
 80073a0:	9d03      	ldr	r5, [sp, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00c      	beq.n	80073c0 <_printf_i+0x108>
 80073a6:	9d03      	ldr	r5, [sp, #12]
 80073a8:	0030      	movs	r0, r6
 80073aa:	0039      	movs	r1, r7
 80073ac:	f7f8 ff4e 	bl	800024c <__aeabi_uidivmod>
 80073b0:	9b04      	ldr	r3, [sp, #16]
 80073b2:	3d01      	subs	r5, #1
 80073b4:	5c5b      	ldrb	r3, [r3, r1]
 80073b6:	702b      	strb	r3, [r5, #0]
 80073b8:	0033      	movs	r3, r6
 80073ba:	0006      	movs	r6, r0
 80073bc:	429f      	cmp	r7, r3
 80073be:	d9f3      	bls.n	80073a8 <_printf_i+0xf0>
 80073c0:	2f08      	cmp	r7, #8
 80073c2:	d109      	bne.n	80073d8 <_printf_i+0x120>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	07db      	lsls	r3, r3, #31
 80073c8:	d506      	bpl.n	80073d8 <_printf_i+0x120>
 80073ca:	6862      	ldr	r2, [r4, #4]
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	dc02      	bgt.n	80073d8 <_printf_i+0x120>
 80073d2:	2330      	movs	r3, #48	@ 0x30
 80073d4:	3d01      	subs	r5, #1
 80073d6:	702b      	strb	r3, [r5, #0]
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1b5b      	subs	r3, r3, r5
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	0021      	movs	r1, r4
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	9805      	ldr	r0, [sp, #20]
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	aa09      	add	r2, sp, #36	@ 0x24
 80073ea:	f7ff fef5 	bl	80071d8 <_printf_common>
 80073ee:	3001      	adds	r0, #1
 80073f0:	d148      	bne.n	8007484 <_printf_i+0x1cc>
 80073f2:	2001      	movs	r0, #1
 80073f4:	4240      	negs	r0, r0
 80073f6:	b00b      	add	sp, #44	@ 0x2c
 80073f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fa:	2220      	movs	r2, #32
 80073fc:	6809      	ldr	r1, [r1, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	2278      	movs	r2, #120	@ 0x78
 8007404:	4932      	ldr	r1, [pc, #200]	@ (80074d0 <_printf_i+0x218>)
 8007406:	9104      	str	r1, [sp, #16]
 8007408:	0021      	movs	r1, r4
 800740a:	3145      	adds	r1, #69	@ 0x45
 800740c:	700a      	strb	r2, [r1, #0]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	6822      	ldr	r2, [r4, #0]
 8007412:	c940      	ldmia	r1!, {r6}
 8007414:	0610      	lsls	r0, r2, #24
 8007416:	d402      	bmi.n	800741e <_printf_i+0x166>
 8007418:	0650      	lsls	r0, r2, #25
 800741a:	d500      	bpl.n	800741e <_printf_i+0x166>
 800741c:	b2b6      	uxth	r6, r6
 800741e:	6019      	str	r1, [r3, #0]
 8007420:	07d3      	lsls	r3, r2, #31
 8007422:	d502      	bpl.n	800742a <_printf_i+0x172>
 8007424:	2320      	movs	r3, #32
 8007426:	4313      	orrs	r3, r2
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	2e00      	cmp	r6, #0
 800742c:	d001      	beq.n	8007432 <_printf_i+0x17a>
 800742e:	2710      	movs	r7, #16
 8007430:	e7a8      	b.n	8007384 <_printf_i+0xcc>
 8007432:	2220      	movs	r2, #32
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	4393      	bics	r3, r2
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	e7f8      	b.n	800742e <_printf_i+0x176>
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	680d      	ldr	r5, [r1, #0]
 8007440:	1d10      	adds	r0, r2, #4
 8007442:	6949      	ldr	r1, [r1, #20]
 8007444:	6018      	str	r0, [r3, #0]
 8007446:	6813      	ldr	r3, [r2, #0]
 8007448:	062e      	lsls	r6, r5, #24
 800744a:	d501      	bpl.n	8007450 <_printf_i+0x198>
 800744c:	6019      	str	r1, [r3, #0]
 800744e:	e002      	b.n	8007456 <_printf_i+0x19e>
 8007450:	066d      	lsls	r5, r5, #25
 8007452:	d5fb      	bpl.n	800744c <_printf_i+0x194>
 8007454:	8019      	strh	r1, [r3, #0]
 8007456:	2300      	movs	r3, #0
 8007458:	9d03      	ldr	r5, [sp, #12]
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	e7bf      	b.n	80073de <_printf_i+0x126>
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	1d11      	adds	r1, r2, #4
 8007462:	6019      	str	r1, [r3, #0]
 8007464:	6815      	ldr	r5, [r2, #0]
 8007466:	2100      	movs	r1, #0
 8007468:	0028      	movs	r0, r5
 800746a:	6862      	ldr	r2, [r4, #4]
 800746c:	f000 fa99 	bl	80079a2 <memchr>
 8007470:	2800      	cmp	r0, #0
 8007472:	d001      	beq.n	8007478 <_printf_i+0x1c0>
 8007474:	1b40      	subs	r0, r0, r5
 8007476:	6060      	str	r0, [r4, #4]
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	2300      	movs	r3, #0
 800747e:	9a03      	ldr	r2, [sp, #12]
 8007480:	7013      	strb	r3, [r2, #0]
 8007482:	e7ac      	b.n	80073de <_printf_i+0x126>
 8007484:	002a      	movs	r2, r5
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	9906      	ldr	r1, [sp, #24]
 800748a:	9805      	ldr	r0, [sp, #20]
 800748c:	9d07      	ldr	r5, [sp, #28]
 800748e:	47a8      	blx	r5
 8007490:	3001      	adds	r0, #1
 8007492:	d0ae      	beq.n	80073f2 <_printf_i+0x13a>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	079b      	lsls	r3, r3, #30
 8007498:	d415      	bmi.n	80074c6 <_printf_i+0x20e>
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	68e0      	ldr	r0, [r4, #12]
 800749e:	4298      	cmp	r0, r3
 80074a0:	daa9      	bge.n	80073f6 <_printf_i+0x13e>
 80074a2:	0018      	movs	r0, r3
 80074a4:	e7a7      	b.n	80073f6 <_printf_i+0x13e>
 80074a6:	0022      	movs	r2, r4
 80074a8:	2301      	movs	r3, #1
 80074aa:	9906      	ldr	r1, [sp, #24]
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	9e07      	ldr	r6, [sp, #28]
 80074b0:	3219      	adds	r2, #25
 80074b2:	47b0      	blx	r6
 80074b4:	3001      	adds	r0, #1
 80074b6:	d09c      	beq.n	80073f2 <_printf_i+0x13a>
 80074b8:	3501      	adds	r5, #1
 80074ba:	68e3      	ldr	r3, [r4, #12]
 80074bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	dcf0      	bgt.n	80074a6 <_printf_i+0x1ee>
 80074c4:	e7e9      	b.n	800749a <_printf_i+0x1e2>
 80074c6:	2500      	movs	r5, #0
 80074c8:	e7f7      	b.n	80074ba <_printf_i+0x202>
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	08009c51 	.word	0x08009c51
 80074d0:	08009c62 	.word	0x08009c62

080074d4 <std>:
 80074d4:	2300      	movs	r3, #0
 80074d6:	b510      	push	{r4, lr}
 80074d8:	0004      	movs	r4, r0
 80074da:	6003      	str	r3, [r0, #0]
 80074dc:	6043      	str	r3, [r0, #4]
 80074de:	6083      	str	r3, [r0, #8]
 80074e0:	8181      	strh	r1, [r0, #12]
 80074e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074e4:	81c2      	strh	r2, [r0, #14]
 80074e6:	6103      	str	r3, [r0, #16]
 80074e8:	6143      	str	r3, [r0, #20]
 80074ea:	6183      	str	r3, [r0, #24]
 80074ec:	0019      	movs	r1, r3
 80074ee:	2208      	movs	r2, #8
 80074f0:	305c      	adds	r0, #92	@ 0x5c
 80074f2:	f000 f9cf 	bl	8007894 <memset>
 80074f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <std+0x50>)
 80074f8:	6224      	str	r4, [r4, #32]
 80074fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80074fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <std+0x54>)
 80074fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007500:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <std+0x58>)
 8007502:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007504:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <std+0x5c>)
 8007506:	6323      	str	r3, [r4, #48]	@ 0x30
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <std+0x60>)
 800750a:	429c      	cmp	r4, r3
 800750c:	d005      	beq.n	800751a <std+0x46>
 800750e:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <std+0x64>)
 8007510:	429c      	cmp	r4, r3
 8007512:	d002      	beq.n	800751a <std+0x46>
 8007514:	4b09      	ldr	r3, [pc, #36]	@ (800753c <std+0x68>)
 8007516:	429c      	cmp	r4, r3
 8007518:	d103      	bne.n	8007522 <std+0x4e>
 800751a:	0020      	movs	r0, r4
 800751c:	3058      	adds	r0, #88	@ 0x58
 800751e:	f000 fa3d 	bl	800799c <__retarget_lock_init_recursive>
 8007522:	bd10      	pop	{r4, pc}
 8007524:	080076bd 	.word	0x080076bd
 8007528:	080076e5 	.word	0x080076e5
 800752c:	0800771d 	.word	0x0800771d
 8007530:	08007749 	.word	0x08007749
 8007534:	20000474 	.word	0x20000474
 8007538:	200004dc 	.word	0x200004dc
 800753c:	20000544 	.word	0x20000544

08007540 <stdio_exit_handler>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4a03      	ldr	r2, [pc, #12]	@ (8007550 <stdio_exit_handler+0x10>)
 8007544:	4903      	ldr	r1, [pc, #12]	@ (8007554 <stdio_exit_handler+0x14>)
 8007546:	4804      	ldr	r0, [pc, #16]	@ (8007558 <stdio_exit_handler+0x18>)
 8007548:	f000 f86c 	bl	8007624 <_fwalk_sglue>
 800754c:	bd10      	pop	{r4, pc}
 800754e:	46c0      	nop			@ (mov r8, r8)
 8007550:	20000014 	.word	0x20000014
 8007554:	0800969d 	.word	0x0800969d
 8007558:	20000024 	.word	0x20000024

0800755c <cleanup_stdio>:
 800755c:	6841      	ldr	r1, [r0, #4]
 800755e:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <cleanup_stdio+0x30>)
 8007560:	b510      	push	{r4, lr}
 8007562:	0004      	movs	r4, r0
 8007564:	4299      	cmp	r1, r3
 8007566:	d001      	beq.n	800756c <cleanup_stdio+0x10>
 8007568:	f002 f898 	bl	800969c <_fflush_r>
 800756c:	68a1      	ldr	r1, [r4, #8]
 800756e:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <cleanup_stdio+0x34>)
 8007570:	4299      	cmp	r1, r3
 8007572:	d002      	beq.n	800757a <cleanup_stdio+0x1e>
 8007574:	0020      	movs	r0, r4
 8007576:	f002 f891 	bl	800969c <_fflush_r>
 800757a:	68e1      	ldr	r1, [r4, #12]
 800757c:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <cleanup_stdio+0x38>)
 800757e:	4299      	cmp	r1, r3
 8007580:	d002      	beq.n	8007588 <cleanup_stdio+0x2c>
 8007582:	0020      	movs	r0, r4
 8007584:	f002 f88a 	bl	800969c <_fflush_r>
 8007588:	bd10      	pop	{r4, pc}
 800758a:	46c0      	nop			@ (mov r8, r8)
 800758c:	20000474 	.word	0x20000474
 8007590:	200004dc 	.word	0x200004dc
 8007594:	20000544 	.word	0x20000544

08007598 <global_stdio_init.part.0>:
 8007598:	b510      	push	{r4, lr}
 800759a:	4b09      	ldr	r3, [pc, #36]	@ (80075c0 <global_stdio_init.part.0+0x28>)
 800759c:	4a09      	ldr	r2, [pc, #36]	@ (80075c4 <global_stdio_init.part.0+0x2c>)
 800759e:	2104      	movs	r1, #4
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	4809      	ldr	r0, [pc, #36]	@ (80075c8 <global_stdio_init.part.0+0x30>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	f7ff ff95 	bl	80074d4 <std>
 80075aa:	2201      	movs	r2, #1
 80075ac:	2109      	movs	r1, #9
 80075ae:	4807      	ldr	r0, [pc, #28]	@ (80075cc <global_stdio_init.part.0+0x34>)
 80075b0:	f7ff ff90 	bl	80074d4 <std>
 80075b4:	2202      	movs	r2, #2
 80075b6:	2112      	movs	r1, #18
 80075b8:	4805      	ldr	r0, [pc, #20]	@ (80075d0 <global_stdio_init.part.0+0x38>)
 80075ba:	f7ff ff8b 	bl	80074d4 <std>
 80075be:	bd10      	pop	{r4, pc}
 80075c0:	200005ac 	.word	0x200005ac
 80075c4:	08007541 	.word	0x08007541
 80075c8:	20000474 	.word	0x20000474
 80075cc:	200004dc 	.word	0x200004dc
 80075d0:	20000544 	.word	0x20000544

080075d4 <__sfp_lock_acquire>:
 80075d4:	b510      	push	{r4, lr}
 80075d6:	4802      	ldr	r0, [pc, #8]	@ (80075e0 <__sfp_lock_acquire+0xc>)
 80075d8:	f000 f9e1 	bl	800799e <__retarget_lock_acquire_recursive>
 80075dc:	bd10      	pop	{r4, pc}
 80075de:	46c0      	nop			@ (mov r8, r8)
 80075e0:	200005b5 	.word	0x200005b5

080075e4 <__sfp_lock_release>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4802      	ldr	r0, [pc, #8]	@ (80075f0 <__sfp_lock_release+0xc>)
 80075e8:	f000 f9da 	bl	80079a0 <__retarget_lock_release_recursive>
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	46c0      	nop			@ (mov r8, r8)
 80075f0:	200005b5 	.word	0x200005b5

080075f4 <__sinit>:
 80075f4:	b510      	push	{r4, lr}
 80075f6:	0004      	movs	r4, r0
 80075f8:	f7ff ffec 	bl	80075d4 <__sfp_lock_acquire>
 80075fc:	6a23      	ldr	r3, [r4, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <__sinit+0x14>
 8007602:	f7ff ffef 	bl	80075e4 <__sfp_lock_release>
 8007606:	bd10      	pop	{r4, pc}
 8007608:	4b04      	ldr	r3, [pc, #16]	@ (800761c <__sinit+0x28>)
 800760a:	6223      	str	r3, [r4, #32]
 800760c:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__sinit+0x2c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1f6      	bne.n	8007602 <__sinit+0xe>
 8007614:	f7ff ffc0 	bl	8007598 <global_stdio_init.part.0>
 8007618:	e7f3      	b.n	8007602 <__sinit+0xe>
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	0800755d 	.word	0x0800755d
 8007620:	200005ac 	.word	0x200005ac

08007624 <_fwalk_sglue>:
 8007624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007626:	0014      	movs	r4, r2
 8007628:	2600      	movs	r6, #0
 800762a:	9000      	str	r0, [sp, #0]
 800762c:	9101      	str	r1, [sp, #4]
 800762e:	68a5      	ldr	r5, [r4, #8]
 8007630:	6867      	ldr	r7, [r4, #4]
 8007632:	3f01      	subs	r7, #1
 8007634:	d504      	bpl.n	8007640 <_fwalk_sglue+0x1c>
 8007636:	6824      	ldr	r4, [r4, #0]
 8007638:	2c00      	cmp	r4, #0
 800763a:	d1f8      	bne.n	800762e <_fwalk_sglue+0xa>
 800763c:	0030      	movs	r0, r6
 800763e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007640:	89ab      	ldrh	r3, [r5, #12]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d908      	bls.n	8007658 <_fwalk_sglue+0x34>
 8007646:	220e      	movs	r2, #14
 8007648:	5eab      	ldrsh	r3, [r5, r2]
 800764a:	3301      	adds	r3, #1
 800764c:	d004      	beq.n	8007658 <_fwalk_sglue+0x34>
 800764e:	0029      	movs	r1, r5
 8007650:	9800      	ldr	r0, [sp, #0]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	4798      	blx	r3
 8007656:	4306      	orrs	r6, r0
 8007658:	3568      	adds	r5, #104	@ 0x68
 800765a:	e7ea      	b.n	8007632 <_fwalk_sglue+0xe>

0800765c <iprintf>:
 800765c:	b40f      	push	{r0, r1, r2, r3}
 800765e:	b507      	push	{r0, r1, r2, lr}
 8007660:	4905      	ldr	r1, [pc, #20]	@ (8007678 <iprintf+0x1c>)
 8007662:	ab04      	add	r3, sp, #16
 8007664:	6808      	ldr	r0, [r1, #0]
 8007666:	cb04      	ldmia	r3!, {r2}
 8007668:	6881      	ldr	r1, [r0, #8]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	f001 fe74 	bl	8009358 <_vfiprintf_r>
 8007670:	b003      	add	sp, #12
 8007672:	bc08      	pop	{r3}
 8007674:	b004      	add	sp, #16
 8007676:	4718      	bx	r3
 8007678:	20000020 	.word	0x20000020

0800767c <siprintf>:
 800767c:	b40e      	push	{r1, r2, r3}
 800767e:	b500      	push	{lr}
 8007680:	490b      	ldr	r1, [pc, #44]	@ (80076b0 <siprintf+0x34>)
 8007682:	b09c      	sub	sp, #112	@ 0x70
 8007684:	ab1d      	add	r3, sp, #116	@ 0x74
 8007686:	9002      	str	r0, [sp, #8]
 8007688:	9006      	str	r0, [sp, #24]
 800768a:	9107      	str	r1, [sp, #28]
 800768c:	9104      	str	r1, [sp, #16]
 800768e:	4809      	ldr	r0, [pc, #36]	@ (80076b4 <siprintf+0x38>)
 8007690:	4909      	ldr	r1, [pc, #36]	@ (80076b8 <siprintf+0x3c>)
 8007692:	cb04      	ldmia	r3!, {r2}
 8007694:	9105      	str	r1, [sp, #20]
 8007696:	6800      	ldr	r0, [r0, #0]
 8007698:	a902      	add	r1, sp, #8
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	f001 fd36 	bl	800910c <_svfiprintf_r>
 80076a0:	2200      	movs	r2, #0
 80076a2:	9b02      	ldr	r3, [sp, #8]
 80076a4:	701a      	strb	r2, [r3, #0]
 80076a6:	b01c      	add	sp, #112	@ 0x70
 80076a8:	bc08      	pop	{r3}
 80076aa:	b003      	add	sp, #12
 80076ac:	4718      	bx	r3
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	7fffffff 	.word	0x7fffffff
 80076b4:	20000020 	.word	0x20000020
 80076b8:	ffff0208 	.word	0xffff0208

080076bc <__sread>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	000c      	movs	r4, r1
 80076c0:	250e      	movs	r5, #14
 80076c2:	5f49      	ldrsh	r1, [r1, r5]
 80076c4:	f000 f918 	bl	80078f8 <_read_r>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	db03      	blt.n	80076d4 <__sread+0x18>
 80076cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80076ce:	181b      	adds	r3, r3, r0
 80076d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	4a02      	ldr	r2, [pc, #8]	@ (80076e0 <__sread+0x24>)
 80076d8:	4013      	ands	r3, r2
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	e7f9      	b.n	80076d2 <__sread+0x16>
 80076de:	46c0      	nop			@ (mov r8, r8)
 80076e0:	ffffefff 	.word	0xffffefff

080076e4 <__swrite>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	001f      	movs	r7, r3
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	0005      	movs	r5, r0
 80076ec:	000c      	movs	r4, r1
 80076ee:	0016      	movs	r6, r2
 80076f0:	05db      	lsls	r3, r3, #23
 80076f2:	d505      	bpl.n	8007700 <__swrite+0x1c>
 80076f4:	230e      	movs	r3, #14
 80076f6:	5ec9      	ldrsh	r1, [r1, r3]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2302      	movs	r3, #2
 80076fc:	f000 f8e8 	bl	80078d0 <_lseek_r>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	4a05      	ldr	r2, [pc, #20]	@ (8007718 <__swrite+0x34>)
 8007704:	0028      	movs	r0, r5
 8007706:	4013      	ands	r3, r2
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	0032      	movs	r2, r6
 800770c:	230e      	movs	r3, #14
 800770e:	5ee1      	ldrsh	r1, [r4, r3]
 8007710:	003b      	movs	r3, r7
 8007712:	f000 f905 	bl	8007920 <_write_r>
 8007716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007718:	ffffefff 	.word	0xffffefff

0800771c <__sseek>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	000c      	movs	r4, r1
 8007720:	250e      	movs	r5, #14
 8007722:	5f49      	ldrsh	r1, [r1, r5]
 8007724:	f000 f8d4 	bl	80078d0 <_lseek_r>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	1c42      	adds	r2, r0, #1
 800772c:	d103      	bne.n	8007736 <__sseek+0x1a>
 800772e:	4a05      	ldr	r2, [pc, #20]	@ (8007744 <__sseek+0x28>)
 8007730:	4013      	ands	r3, r2
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	2280      	movs	r2, #128	@ 0x80
 8007738:	0152      	lsls	r2, r2, #5
 800773a:	4313      	orrs	r3, r2
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007740:	e7f8      	b.n	8007734 <__sseek+0x18>
 8007742:	46c0      	nop			@ (mov r8, r8)
 8007744:	ffffefff 	.word	0xffffefff

08007748 <__sclose>:
 8007748:	b510      	push	{r4, lr}
 800774a:	230e      	movs	r3, #14
 800774c:	5ec9      	ldrsh	r1, [r1, r3]
 800774e:	f000 f8ad 	bl	80078ac <_close_r>
 8007752:	bd10      	pop	{r4, pc}

08007754 <__swbuf_r>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	0006      	movs	r6, r0
 8007758:	000d      	movs	r5, r1
 800775a:	0014      	movs	r4, r2
 800775c:	2800      	cmp	r0, #0
 800775e:	d004      	beq.n	800776a <__swbuf_r+0x16>
 8007760:	6a03      	ldr	r3, [r0, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <__swbuf_r+0x16>
 8007766:	f7ff ff45 	bl	80075f4 <__sinit>
 800776a:	69a3      	ldr	r3, [r4, #24]
 800776c:	60a3      	str	r3, [r4, #8]
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	071b      	lsls	r3, r3, #28
 8007772:	d502      	bpl.n	800777a <__swbuf_r+0x26>
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <__swbuf_r+0x3a>
 800777a:	0021      	movs	r1, r4
 800777c:	0030      	movs	r0, r6
 800777e:	f000 f82b 	bl	80077d8 <__swsetup_r>
 8007782:	2800      	cmp	r0, #0
 8007784:	d003      	beq.n	800778e <__swbuf_r+0x3a>
 8007786:	2501      	movs	r5, #1
 8007788:	426d      	negs	r5, r5
 800778a:	0028      	movs	r0, r5
 800778c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	b2ef      	uxtb	r7, r5
 8007794:	1ac0      	subs	r0, r0, r3
 8007796:	6963      	ldr	r3, [r4, #20]
 8007798:	b2ed      	uxtb	r5, r5
 800779a:	4283      	cmp	r3, r0
 800779c:	dc05      	bgt.n	80077aa <__swbuf_r+0x56>
 800779e:	0021      	movs	r1, r4
 80077a0:	0030      	movs	r0, r6
 80077a2:	f001 ff7b 	bl	800969c <_fflush_r>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d1ed      	bne.n	8007786 <__swbuf_r+0x32>
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	3001      	adds	r0, #1
 80077ae:	3b01      	subs	r3, #1
 80077b0:	60a3      	str	r3, [r4, #8]
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	701f      	strb	r7, [r3, #0]
 80077ba:	6963      	ldr	r3, [r4, #20]
 80077bc:	4283      	cmp	r3, r0
 80077be:	d004      	beq.n	80077ca <__swbuf_r+0x76>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	07db      	lsls	r3, r3, #31
 80077c4:	d5e1      	bpl.n	800778a <__swbuf_r+0x36>
 80077c6:	2d0a      	cmp	r5, #10
 80077c8:	d1df      	bne.n	800778a <__swbuf_r+0x36>
 80077ca:	0021      	movs	r1, r4
 80077cc:	0030      	movs	r0, r6
 80077ce:	f001 ff65 	bl	800969c <_fflush_r>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0d9      	beq.n	800778a <__swbuf_r+0x36>
 80077d6:	e7d6      	b.n	8007786 <__swbuf_r+0x32>

080077d8 <__swsetup_r>:
 80077d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <__swsetup_r+0xb8>)
 80077da:	b570      	push	{r4, r5, r6, lr}
 80077dc:	0005      	movs	r5, r0
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	000c      	movs	r4, r1
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d004      	beq.n	80077f0 <__swsetup_r+0x18>
 80077e6:	6a03      	ldr	r3, [r0, #32]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <__swsetup_r+0x18>
 80077ec:	f7ff ff02 	bl	80075f4 <__sinit>
 80077f0:	230c      	movs	r3, #12
 80077f2:	5ee2      	ldrsh	r2, [r4, r3]
 80077f4:	0713      	lsls	r3, r2, #28
 80077f6:	d423      	bmi.n	8007840 <__swsetup_r+0x68>
 80077f8:	06d3      	lsls	r3, r2, #27
 80077fa:	d407      	bmi.n	800780c <__swsetup_r+0x34>
 80077fc:	2309      	movs	r3, #9
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	2340      	movs	r3, #64	@ 0x40
 8007802:	2001      	movs	r0, #1
 8007804:	4313      	orrs	r3, r2
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	4240      	negs	r0, r0
 800780a:	e03a      	b.n	8007882 <__swsetup_r+0xaa>
 800780c:	0752      	lsls	r2, r2, #29
 800780e:	d513      	bpl.n	8007838 <__swsetup_r+0x60>
 8007810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007812:	2900      	cmp	r1, #0
 8007814:	d008      	beq.n	8007828 <__swsetup_r+0x50>
 8007816:	0023      	movs	r3, r4
 8007818:	3344      	adds	r3, #68	@ 0x44
 800781a:	4299      	cmp	r1, r3
 800781c:	d002      	beq.n	8007824 <__swsetup_r+0x4c>
 800781e:	0028      	movs	r0, r5
 8007820:	f000 ff6a 	bl	80086f8 <_free_r>
 8007824:	2300      	movs	r3, #0
 8007826:	6363      	str	r3, [r4, #52]	@ 0x34
 8007828:	2224      	movs	r2, #36	@ 0x24
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	4393      	bics	r3, r2
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	2300      	movs	r3, #0
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	2308      	movs	r3, #8
 800783a:	89a2      	ldrh	r2, [r4, #12]
 800783c:	4313      	orrs	r3, r2
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <__swsetup_r+0x86>
 8007846:	21a0      	movs	r1, #160	@ 0xa0
 8007848:	2280      	movs	r2, #128	@ 0x80
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	0089      	lsls	r1, r1, #2
 800784e:	0092      	lsls	r2, r2, #2
 8007850:	400b      	ands	r3, r1
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <__swsetup_r+0x86>
 8007856:	0021      	movs	r1, r4
 8007858:	0028      	movs	r0, r5
 800785a:	f001 ff85 	bl	8009768 <__smakebuf_r>
 800785e:	230c      	movs	r3, #12
 8007860:	5ee2      	ldrsh	r2, [r4, r3]
 8007862:	2101      	movs	r1, #1
 8007864:	0013      	movs	r3, r2
 8007866:	400b      	ands	r3, r1
 8007868:	420a      	tst	r2, r1
 800786a:	d00b      	beq.n	8007884 <__swsetup_r+0xac>
 800786c:	2300      	movs	r3, #0
 800786e:	60a3      	str	r3, [r4, #8]
 8007870:	6963      	ldr	r3, [r4, #20]
 8007872:	425b      	negs	r3, r3
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	2000      	movs	r0, #0
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	4283      	cmp	r3, r0
 800787c:	d101      	bne.n	8007882 <__swsetup_r+0xaa>
 800787e:	0613      	lsls	r3, r2, #24
 8007880:	d4be      	bmi.n	8007800 <__swsetup_r+0x28>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	0791      	lsls	r1, r2, #30
 8007886:	d400      	bmi.n	800788a <__swsetup_r+0xb2>
 8007888:	6963      	ldr	r3, [r4, #20]
 800788a:	60a3      	str	r3, [r4, #8]
 800788c:	e7f3      	b.n	8007876 <__swsetup_r+0x9e>
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	20000020 	.word	0x20000020

08007894 <memset>:
 8007894:	0003      	movs	r3, r0
 8007896:	1882      	adds	r2, r0, r2
 8007898:	4293      	cmp	r3, r2
 800789a:	d100      	bne.n	800789e <memset+0xa>
 800789c:	4770      	bx	lr
 800789e:	7019      	strb	r1, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	e7f9      	b.n	8007898 <memset+0x4>

080078a4 <_localeconv_r>:
 80078a4:	4800      	ldr	r0, [pc, #0]	@ (80078a8 <_localeconv_r+0x4>)
 80078a6:	4770      	bx	lr
 80078a8:	20000160 	.word	0x20000160

080078ac <_close_r>:
 80078ac:	2300      	movs	r3, #0
 80078ae:	b570      	push	{r4, r5, r6, lr}
 80078b0:	4d06      	ldr	r5, [pc, #24]	@ (80078cc <_close_r+0x20>)
 80078b2:	0004      	movs	r4, r0
 80078b4:	0008      	movs	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fb fed4 	bl	8003664 <_close>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d103      	bne.n	80078c8 <_close_r+0x1c>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d000      	beq.n	80078c8 <_close_r+0x1c>
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
 80078ca:	46c0      	nop			@ (mov r8, r8)
 80078cc:	200005b0 	.word	0x200005b0

080078d0 <_lseek_r>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	0004      	movs	r4, r0
 80078d4:	0008      	movs	r0, r1
 80078d6:	0011      	movs	r1, r2
 80078d8:	001a      	movs	r2, r3
 80078da:	2300      	movs	r3, #0
 80078dc:	4d05      	ldr	r5, [pc, #20]	@ (80078f4 <_lseek_r+0x24>)
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7fb fee1 	bl	80036a6 <_lseek>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d103      	bne.n	80078f0 <_lseek_r+0x20>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d000      	beq.n	80078f0 <_lseek_r+0x20>
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	200005b0 	.word	0x200005b0

080078f8 <_read_r>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	0004      	movs	r4, r0
 80078fc:	0008      	movs	r0, r1
 80078fe:	0011      	movs	r1, r2
 8007900:	001a      	movs	r2, r3
 8007902:	2300      	movs	r3, #0
 8007904:	4d05      	ldr	r5, [pc, #20]	@ (800791c <_read_r+0x24>)
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7fb fe73 	bl	80035f2 <_read>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d103      	bne.n	8007918 <_read_r+0x20>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d000      	beq.n	8007918 <_read_r+0x20>
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	46c0      	nop			@ (mov r8, r8)
 800791c:	200005b0 	.word	0x200005b0

08007920 <_write_r>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	0004      	movs	r4, r0
 8007924:	0008      	movs	r0, r1
 8007926:	0011      	movs	r1, r2
 8007928:	001a      	movs	r2, r3
 800792a:	2300      	movs	r3, #0
 800792c:	4d05      	ldr	r5, [pc, #20]	@ (8007944 <_write_r+0x24>)
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7fb fe7c 	bl	800362c <_write>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d103      	bne.n	8007940 <_write_r+0x20>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d000      	beq.n	8007940 <_write_r+0x20>
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	200005b0 	.word	0x200005b0

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	@ (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	20000020 	.word	0x20000020

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	2600      	movs	r6, #0
 8007958:	4c0c      	ldr	r4, [pc, #48]	@ (800798c <__libc_init_array+0x38>)
 800795a:	4d0d      	ldr	r5, [pc, #52]	@ (8007990 <__libc_init_array+0x3c>)
 800795c:	1b64      	subs	r4, r4, r5
 800795e:	10a4      	asrs	r4, r4, #2
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	2600      	movs	r6, #0
 8007966:	f002 f865 	bl	8009a34 <_init>
 800796a:	4c0a      	ldr	r4, [pc, #40]	@ (8007994 <__libc_init_array+0x40>)
 800796c:	4d0a      	ldr	r5, [pc, #40]	@ (8007998 <__libc_init_array+0x44>)
 800796e:	1b64      	subs	r4, r4, r5
 8007970:	10a4      	asrs	r4, r4, #2
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	00b3      	lsls	r3, r6, #2
 800797a:	58eb      	ldr	r3, [r5, r3]
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	00b3      	lsls	r3, r6, #2
 8007984:	58eb      	ldr	r3, [r5, r3]
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	08009fa4 	.word	0x08009fa4
 8007990:	08009fa4 	.word	0x08009fa4
 8007994:	08009fa8 	.word	0x08009fa8
 8007998:	08009fa4 	.word	0x08009fa4

0800799c <__retarget_lock_init_recursive>:
 800799c:	4770      	bx	lr

0800799e <__retarget_lock_acquire_recursive>:
 800799e:	4770      	bx	lr

080079a0 <__retarget_lock_release_recursive>:
 80079a0:	4770      	bx	lr

080079a2 <memchr>:
 80079a2:	b2c9      	uxtb	r1, r1
 80079a4:	1882      	adds	r2, r0, r2
 80079a6:	4290      	cmp	r0, r2
 80079a8:	d101      	bne.n	80079ae <memchr+0xc>
 80079aa:	2000      	movs	r0, #0
 80079ac:	4770      	bx	lr
 80079ae:	7803      	ldrb	r3, [r0, #0]
 80079b0:	428b      	cmp	r3, r1
 80079b2:	d0fb      	beq.n	80079ac <memchr+0xa>
 80079b4:	3001      	adds	r0, #1
 80079b6:	e7f6      	b.n	80079a6 <memchr+0x4>

080079b8 <__assert_func>:
 80079b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80079ba:	0014      	movs	r4, r2
 80079bc:	001a      	movs	r2, r3
 80079be:	4b09      	ldr	r3, [pc, #36]	@ (80079e4 <__assert_func+0x2c>)
 80079c0:	0005      	movs	r5, r0
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	000e      	movs	r6, r1
 80079c6:	68d8      	ldr	r0, [r3, #12]
 80079c8:	4b07      	ldr	r3, [pc, #28]	@ (80079e8 <__assert_func+0x30>)
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	d101      	bne.n	80079d2 <__assert_func+0x1a>
 80079ce:	4b07      	ldr	r3, [pc, #28]	@ (80079ec <__assert_func+0x34>)
 80079d0:	001c      	movs	r4, r3
 80079d2:	4907      	ldr	r1, [pc, #28]	@ (80079f0 <__assert_func+0x38>)
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	9402      	str	r4, [sp, #8]
 80079d8:	002b      	movs	r3, r5
 80079da:	9600      	str	r6, [sp, #0]
 80079dc:	f001 fe8a 	bl	80096f4 <fiprintf>
 80079e0:	f001 ff55 	bl	800988e <abort>
 80079e4:	20000020 	.word	0x20000020
 80079e8:	08009c73 	.word	0x08009c73
 80079ec:	08009cae 	.word	0x08009cae
 80079f0:	08009c80 	.word	0x08009c80

080079f4 <quorem>:
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f6:	6902      	ldr	r2, [r0, #16]
 80079f8:	690f      	ldr	r7, [r1, #16]
 80079fa:	b087      	sub	sp, #28
 80079fc:	0006      	movs	r6, r0
 80079fe:	000b      	movs	r3, r1
 8007a00:	2000      	movs	r0, #0
 8007a02:	9102      	str	r1, [sp, #8]
 8007a04:	42ba      	cmp	r2, r7
 8007a06:	db6d      	blt.n	8007ae4 <quorem+0xf0>
 8007a08:	3f01      	subs	r7, #1
 8007a0a:	00bc      	lsls	r4, r7, #2
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	191b      	adds	r3, r3, r4
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	0033      	movs	r3, r6
 8007a16:	3314      	adds	r3, #20
 8007a18:	191c      	adds	r4, r3, r4
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	9804      	ldr	r0, [sp, #16]
 8007a24:	681d      	ldr	r5, [r3, #0]
 8007a26:	3501      	adds	r5, #1
 8007a28:	0029      	movs	r1, r5
 8007a2a:	f7f8 fb89 	bl	8000140 <__udivsi3>
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	9000      	str	r0, [sp, #0]
 8007a32:	42ab      	cmp	r3, r5
 8007a34:	d32b      	bcc.n	8007a8e <quorem+0x9a>
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	9d01      	ldr	r5, [sp, #4]
 8007a3a:	469c      	mov	ip, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9305      	str	r3, [sp, #20]
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	4662      	mov	r2, ip
 8007a44:	ca08      	ldmia	r2!, {r3}
 8007a46:	6828      	ldr	r0, [r5, #0]
 8007a48:	4694      	mov	ip, r2
 8007a4a:	9a00      	ldr	r2, [sp, #0]
 8007a4c:	b299      	uxth	r1, r3
 8007a4e:	4351      	muls	r1, r2
 8007a50:	9a05      	ldr	r2, [sp, #20]
 8007a52:	0c1b      	lsrs	r3, r3, #16
 8007a54:	1889      	adds	r1, r1, r2
 8007a56:	9a00      	ldr	r2, [sp, #0]
 8007a58:	4353      	muls	r3, r2
 8007a5a:	0c0a      	lsrs	r2, r1, #16
 8007a5c:	189b      	adds	r3, r3, r2
 8007a5e:	0c1a      	lsrs	r2, r3, #16
 8007a60:	b289      	uxth	r1, r1
 8007a62:	9205      	str	r2, [sp, #20]
 8007a64:	b282      	uxth	r2, r0
 8007a66:	1a52      	subs	r2, r2, r1
 8007a68:	9904      	ldr	r1, [sp, #16]
 8007a6a:	0c00      	lsrs	r0, r0, #16
 8007a6c:	1852      	adds	r2, r2, r1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	1411      	asrs	r1, r2, #16
 8007a72:	1ac3      	subs	r3, r0, r3
 8007a74:	185b      	adds	r3, r3, r1
 8007a76:	1419      	asrs	r1, r3, #16
 8007a78:	b292      	uxth	r2, r2
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	9104      	str	r1, [sp, #16]
 8007a82:	c504      	stmia	r5!, {r2}
 8007a84:	4563      	cmp	r3, ip
 8007a86:	d2dc      	bcs.n	8007a42 <quorem+0x4e>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d030      	beq.n	8007af0 <quorem+0xfc>
 8007a8e:	0030      	movs	r0, r6
 8007a90:	9902      	ldr	r1, [sp, #8]
 8007a92:	f001 f9c5 	bl	8008e20 <__mcmp>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	db23      	blt.n	8007ae2 <quorem+0xee>
 8007a9a:	0034      	movs	r4, r6
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	9902      	ldr	r1, [sp, #8]
 8007aa0:	3414      	adds	r4, #20
 8007aa2:	3114      	adds	r1, #20
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	c901      	ldmia	r1!, {r0}
 8007aa8:	9302      	str	r3, [sp, #8]
 8007aaa:	466b      	mov	r3, sp
 8007aac:	891b      	ldrh	r3, [r3, #8]
 8007aae:	b282      	uxth	r2, r0
 8007ab0:	1a9a      	subs	r2, r3, r2
 8007ab2:	9b02      	ldr	r3, [sp, #8]
 8007ab4:	1952      	adds	r2, r2, r5
 8007ab6:	0c00      	lsrs	r0, r0, #16
 8007ab8:	0c1b      	lsrs	r3, r3, #16
 8007aba:	1a1b      	subs	r3, r3, r0
 8007abc:	1410      	asrs	r0, r2, #16
 8007abe:	181b      	adds	r3, r3, r0
 8007ac0:	141d      	asrs	r5, r3, #16
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	041b      	lsls	r3, r3, #16
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	c404      	stmia	r4!, {r2}
 8007acc:	428b      	cmp	r3, r1
 8007ace:	d2e9      	bcs.n	8007aa4 <quorem+0xb0>
 8007ad0:	9a01      	ldr	r2, [sp, #4]
 8007ad2:	00bb      	lsls	r3, r7, #2
 8007ad4:	18d3      	adds	r3, r2, r3
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	d013      	beq.n	8007b04 <quorem+0x110>
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	9800      	ldr	r0, [sp, #0]
 8007ae4:	b007      	add	sp, #28
 8007ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <quorem+0x104>
 8007aee:	3f01      	subs	r7, #1
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	3c04      	subs	r4, #4
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	d3f7      	bcc.n	8007ae8 <quorem+0xf4>
 8007af8:	6137      	str	r7, [r6, #16]
 8007afa:	e7c8      	b.n	8007a8e <quorem+0x9a>
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	d104      	bne.n	8007b0c <quorem+0x118>
 8007b02:	3f01      	subs	r7, #1
 8007b04:	9a01      	ldr	r2, [sp, #4]
 8007b06:	3b04      	subs	r3, #4
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d3f7      	bcc.n	8007afc <quorem+0x108>
 8007b0c:	6137      	str	r7, [r6, #16]
 8007b0e:	e7e5      	b.n	8007adc <quorem+0xe8>

08007b10 <_dtoa_r>:
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	0014      	movs	r4, r2
 8007b14:	001d      	movs	r5, r3
 8007b16:	69c6      	ldr	r6, [r0, #28]
 8007b18:	b09d      	sub	sp, #116	@ 0x74
 8007b1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b1c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007b1e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007b20:	9003      	str	r0, [sp, #12]
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	d10f      	bne.n	8007b46 <_dtoa_r+0x36>
 8007b26:	2010      	movs	r0, #16
 8007b28:	f000 fe30 	bl	800878c <malloc>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	1e02      	subs	r2, r0, #0
 8007b30:	61d8      	str	r0, [r3, #28]
 8007b32:	d104      	bne.n	8007b3e <_dtoa_r+0x2e>
 8007b34:	21ef      	movs	r1, #239	@ 0xef
 8007b36:	4bc7      	ldr	r3, [pc, #796]	@ (8007e54 <_dtoa_r+0x344>)
 8007b38:	48c7      	ldr	r0, [pc, #796]	@ (8007e58 <_dtoa_r+0x348>)
 8007b3a:	f7ff ff3d 	bl	80079b8 <__assert_func>
 8007b3e:	6046      	str	r6, [r0, #4]
 8007b40:	6086      	str	r6, [r0, #8]
 8007b42:	6006      	str	r6, [r0, #0]
 8007b44:	60c6      	str	r6, [r0, #12]
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	6819      	ldr	r1, [r3, #0]
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	d00b      	beq.n	8007b68 <_dtoa_r+0x58>
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	2301      	movs	r3, #1
 8007b54:	4093      	lsls	r3, r2
 8007b56:	604a      	str	r2, [r1, #4]
 8007b58:	608b      	str	r3, [r1, #8]
 8007b5a:	9803      	ldr	r0, [sp, #12]
 8007b5c:	f000 ff16 	bl	800898c <_Bfree>
 8007b60:	2200      	movs	r2, #0
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	da1e      	bge.n	8007baa <_dtoa_r+0x9a>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	006b      	lsls	r3, r5, #1
 8007b72:	085b      	lsrs	r3, r3, #1
 8007b74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b76:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007b78:	4bb8      	ldr	r3, [pc, #736]	@ (8007e5c <_dtoa_r+0x34c>)
 8007b7a:	4ab8      	ldr	r2, [pc, #736]	@ (8007e5c <_dtoa_r+0x34c>)
 8007b7c:	403b      	ands	r3, r7
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d116      	bne.n	8007bb0 <_dtoa_r+0xa0>
 8007b82:	4bb7      	ldr	r3, [pc, #732]	@ (8007e60 <_dtoa_r+0x350>)
 8007b84:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	033b      	lsls	r3, r7, #12
 8007b8a:	0b1b      	lsrs	r3, r3, #12
 8007b8c:	4323      	orrs	r3, r4
 8007b8e:	d101      	bne.n	8007b94 <_dtoa_r+0x84>
 8007b90:	f000 fd83 	bl	800869a <_dtoa_r+0xb8a>
 8007b94:	4bb3      	ldr	r3, [pc, #716]	@ (8007e64 <_dtoa_r+0x354>)
 8007b96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d002      	beq.n	8007ba4 <_dtoa_r+0x94>
 8007b9e:	4bb2      	ldr	r3, [pc, #712]	@ (8007e68 <_dtoa_r+0x358>)
 8007ba0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	9808      	ldr	r0, [sp, #32]
 8007ba6:	b01d      	add	sp, #116	@ 0x74
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007baa:	2300      	movs	r3, #0
 8007bac:	603b      	str	r3, [r7, #0]
 8007bae:	e7e2      	b.n	8007b76 <_dtoa_r+0x66>
 8007bb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8007bb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007bba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f7f8 fc44 	bl	800044c <__aeabi_dcmpeq>
 8007bc4:	1e06      	subs	r6, r0, #0
 8007bc6:	d00b      	beq.n	8007be0 <_dtoa_r+0xd0>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <_dtoa_r+0xca>
 8007bd4:	4ba5      	ldr	r3, [pc, #660]	@ (8007e6c <_dtoa_r+0x35c>)
 8007bd6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	4ba5      	ldr	r3, [pc, #660]	@ (8007e70 <_dtoa_r+0x360>)
 8007bdc:	9308      	str	r3, [sp, #32]
 8007bde:	e7e1      	b.n	8007ba4 <_dtoa_r+0x94>
 8007be0:	ab1a      	add	r3, sp, #104	@ 0x68
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	9803      	ldr	r0, [sp, #12]
 8007bea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bee:	f001 f9cd 	bl	8008f8c <__d2b>
 8007bf2:	007a      	lsls	r2, r7, #1
 8007bf4:	9005      	str	r0, [sp, #20]
 8007bf6:	0d52      	lsrs	r2, r2, #21
 8007bf8:	d100      	bne.n	8007bfc <_dtoa_r+0xec>
 8007bfa:	e07b      	b.n	8007cf4 <_dtoa_r+0x1e4>
 8007bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bfe:	9618      	str	r6, [sp, #96]	@ 0x60
 8007c00:	0319      	lsls	r1, r3, #12
 8007c02:	4b9c      	ldr	r3, [pc, #624]	@ (8007e74 <_dtoa_r+0x364>)
 8007c04:	0b09      	lsrs	r1, r1, #12
 8007c06:	430b      	orrs	r3, r1
 8007c08:	499b      	ldr	r1, [pc, #620]	@ (8007e78 <_dtoa_r+0x368>)
 8007c0a:	1857      	adds	r7, r2, r1
 8007c0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c10:	0019      	movs	r1, r3
 8007c12:	2200      	movs	r2, #0
 8007c14:	4b99      	ldr	r3, [pc, #612]	@ (8007e7c <_dtoa_r+0x36c>)
 8007c16:	f7fa fd57 	bl	80026c8 <__aeabi_dsub>
 8007c1a:	4a99      	ldr	r2, [pc, #612]	@ (8007e80 <_dtoa_r+0x370>)
 8007c1c:	4b99      	ldr	r3, [pc, #612]	@ (8007e84 <_dtoa_r+0x374>)
 8007c1e:	f7fa fa8b 	bl	8002138 <__aeabi_dmul>
 8007c22:	4a99      	ldr	r2, [pc, #612]	@ (8007e88 <_dtoa_r+0x378>)
 8007c24:	4b99      	ldr	r3, [pc, #612]	@ (8007e8c <_dtoa_r+0x37c>)
 8007c26:	f7f9 fadf 	bl	80011e8 <__aeabi_dadd>
 8007c2a:	0004      	movs	r4, r0
 8007c2c:	0038      	movs	r0, r7
 8007c2e:	000d      	movs	r5, r1
 8007c30:	f7fb f944 	bl	8002ebc <__aeabi_i2d>
 8007c34:	4a96      	ldr	r2, [pc, #600]	@ (8007e90 <_dtoa_r+0x380>)
 8007c36:	4b97      	ldr	r3, [pc, #604]	@ (8007e94 <_dtoa_r+0x384>)
 8007c38:	f7fa fa7e 	bl	8002138 <__aeabi_dmul>
 8007c3c:	0002      	movs	r2, r0
 8007c3e:	000b      	movs	r3, r1
 8007c40:	0020      	movs	r0, r4
 8007c42:	0029      	movs	r1, r5
 8007c44:	f7f9 fad0 	bl	80011e8 <__aeabi_dadd>
 8007c48:	0004      	movs	r4, r0
 8007c4a:	000d      	movs	r5, r1
 8007c4c:	f7fb f8fa 	bl	8002e44 <__aeabi_d2iz>
 8007c50:	2200      	movs	r2, #0
 8007c52:	9004      	str	r0, [sp, #16]
 8007c54:	2300      	movs	r3, #0
 8007c56:	0020      	movs	r0, r4
 8007c58:	0029      	movs	r1, r5
 8007c5a:	f7f8 fbfd 	bl	8000458 <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d00b      	beq.n	8007c7a <_dtoa_r+0x16a>
 8007c62:	9804      	ldr	r0, [sp, #16]
 8007c64:	f7fb f92a 	bl	8002ebc <__aeabi_i2d>
 8007c68:	002b      	movs	r3, r5
 8007c6a:	0022      	movs	r2, r4
 8007c6c:	f7f8 fbee 	bl	800044c <__aeabi_dcmpeq>
 8007c70:	4243      	negs	r3, r0
 8007c72:	4158      	adcs	r0, r3
 8007c74:	9b04      	ldr	r3, [sp, #16]
 8007c76:	1a1b      	subs	r3, r3, r0
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	2b16      	cmp	r3, #22
 8007c82:	d810      	bhi.n	8007ca6 <_dtoa_r+0x196>
 8007c84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	4b83      	ldr	r3, [pc, #524]	@ (8007e98 <_dtoa_r+0x388>)
 8007c8c:	00d2      	lsls	r2, r2, #3
 8007c8e:	189b      	adds	r3, r3, r2
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f7f8 fbe0 	bl	8000458 <__aeabi_dcmplt>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d047      	beq.n	8007d2c <_dtoa_r+0x21c>
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007caa:	9206      	str	r2, [sp, #24]
 8007cac:	1bdb      	subs	r3, r3, r7
 8007cae:	1e5a      	subs	r2, r3, #1
 8007cb0:	d53e      	bpl.n	8007d30 <_dtoa_r+0x220>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	9306      	str	r3, [sp, #24]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	930d      	str	r3, [sp, #52]	@ 0x34
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	db38      	blt.n	8007d34 <_dtoa_r+0x224>
 8007cc2:	9a04      	ldr	r2, [sp, #16]
 8007cc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cc6:	4694      	mov	ip, r2
 8007cc8:	4463      	add	r3, ip
 8007cca:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007cd4:	2401      	movs	r4, #1
 8007cd6:	2b09      	cmp	r3, #9
 8007cd8:	d867      	bhi.n	8007daa <_dtoa_r+0x29a>
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	dd02      	ble.n	8007ce4 <_dtoa_r+0x1d4>
 8007cde:	2400      	movs	r4, #0
 8007ce0:	3b04      	subs	r3, #4
 8007ce2:	9322      	str	r3, [sp, #136]	@ 0x88
 8007ce4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ce6:	1e98      	subs	r0, r3, #2
 8007ce8:	2803      	cmp	r0, #3
 8007cea:	d867      	bhi.n	8007dbc <_dtoa_r+0x2ac>
 8007cec:	f7f8 fa14 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007cf0:	5b383a2b 	.word	0x5b383a2b
 8007cf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007cf6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007cf8:	18f6      	adds	r6, r6, r3
 8007cfa:	4b68      	ldr	r3, [pc, #416]	@ (8007e9c <_dtoa_r+0x38c>)
 8007cfc:	18f2      	adds	r2, r6, r3
 8007cfe:	2a20      	cmp	r2, #32
 8007d00:	dd0f      	ble.n	8007d22 <_dtoa_r+0x212>
 8007d02:	2340      	movs	r3, #64	@ 0x40
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	409f      	lsls	r7, r3
 8007d08:	4b65      	ldr	r3, [pc, #404]	@ (8007ea0 <_dtoa_r+0x390>)
 8007d0a:	0038      	movs	r0, r7
 8007d0c:	18f3      	adds	r3, r6, r3
 8007d0e:	40dc      	lsrs	r4, r3
 8007d10:	4320      	orrs	r0, r4
 8007d12:	f7fb f901 	bl	8002f18 <__aeabi_ui2d>
 8007d16:	2201      	movs	r2, #1
 8007d18:	4b62      	ldr	r3, [pc, #392]	@ (8007ea4 <_dtoa_r+0x394>)
 8007d1a:	1e77      	subs	r7, r6, #1
 8007d1c:	18cb      	adds	r3, r1, r3
 8007d1e:	9218      	str	r2, [sp, #96]	@ 0x60
 8007d20:	e776      	b.n	8007c10 <_dtoa_r+0x100>
 8007d22:	2320      	movs	r3, #32
 8007d24:	0020      	movs	r0, r4
 8007d26:	1a9b      	subs	r3, r3, r2
 8007d28:	4098      	lsls	r0, r3
 8007d2a:	e7f2      	b.n	8007d12 <_dtoa_r+0x202>
 8007d2c:	9015      	str	r0, [sp, #84]	@ 0x54
 8007d2e:	e7ba      	b.n	8007ca6 <_dtoa_r+0x196>
 8007d30:	920d      	str	r2, [sp, #52]	@ 0x34
 8007d32:	e7c3      	b.n	8007cbc <_dtoa_r+0x1ac>
 8007d34:	9b06      	ldr	r3, [sp, #24]
 8007d36:	9a04      	ldr	r2, [sp, #16]
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	9306      	str	r3, [sp, #24]
 8007d3c:	4253      	negs	r3, r2
 8007d3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d40:	2300      	movs	r3, #0
 8007d42:	9314      	str	r3, [sp, #80]	@ 0x50
 8007d44:	e7c5      	b.n	8007cd2 <_dtoa_r+0x1c2>
 8007d46:	2300      	movs	r3, #0
 8007d48:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc13      	bgt.n	8007d7c <_dtoa_r+0x26c>
 8007d54:	2301      	movs	r3, #1
 8007d56:	001a      	movs	r2, r3
 8007d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007d5e:	e00d      	b.n	8007d7c <_dtoa_r+0x26c>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e7f1      	b.n	8007d48 <_dtoa_r+0x238>
 8007d64:	2300      	movs	r3, #0
 8007d66:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d68:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d6a:	4694      	mov	ip, r2
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	4463      	add	r3, ip
 8007d70:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d72:	3301      	adds	r3, #1
 8007d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dc00      	bgt.n	8007d7c <_dtoa_r+0x26c>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	9a03      	ldr	r2, [sp, #12]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	69d0      	ldr	r0, [r2, #28]
 8007d82:	2204      	movs	r2, #4
 8007d84:	0015      	movs	r5, r2
 8007d86:	3514      	adds	r5, #20
 8007d88:	429d      	cmp	r5, r3
 8007d8a:	d91b      	bls.n	8007dc4 <_dtoa_r+0x2b4>
 8007d8c:	6041      	str	r1, [r0, #4]
 8007d8e:	9803      	ldr	r0, [sp, #12]
 8007d90:	f000 fdb8 	bl	8008904 <_Balloc>
 8007d94:	9008      	str	r0, [sp, #32]
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d117      	bne.n	8007dca <_dtoa_r+0x2ba>
 8007d9a:	21b0      	movs	r1, #176	@ 0xb0
 8007d9c:	4b42      	ldr	r3, [pc, #264]	@ (8007ea8 <_dtoa_r+0x398>)
 8007d9e:	482e      	ldr	r0, [pc, #184]	@ (8007e58 <_dtoa_r+0x348>)
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	31ff      	adds	r1, #255	@ 0xff
 8007da4:	e6c9      	b.n	8007b3a <_dtoa_r+0x2a>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e7dd      	b.n	8007d66 <_dtoa_r+0x256>
 8007daa:	2300      	movs	r3, #0
 8007dac:	9410      	str	r4, [sp, #64]	@ 0x40
 8007dae:	9322      	str	r3, [sp, #136]	@ 0x88
 8007db0:	3b01      	subs	r3, #1
 8007db2:	930e      	str	r3, [sp, #56]	@ 0x38
 8007db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db6:	2200      	movs	r2, #0
 8007db8:	3313      	adds	r3, #19
 8007dba:	e7cf      	b.n	8007d5c <_dtoa_r+0x24c>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc0:	3b02      	subs	r3, #2
 8007dc2:	e7f6      	b.n	8007db2 <_dtoa_r+0x2a2>
 8007dc4:	3101      	adds	r1, #1
 8007dc6:	0052      	lsls	r2, r2, #1
 8007dc8:	e7dc      	b.n	8007d84 <_dtoa_r+0x274>
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	9a08      	ldr	r2, [sp, #32]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd4:	2b0e      	cmp	r3, #14
 8007dd6:	d900      	bls.n	8007dda <_dtoa_r+0x2ca>
 8007dd8:	e0d9      	b.n	8007f8e <_dtoa_r+0x47e>
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d100      	bne.n	8007de0 <_dtoa_r+0x2d0>
 8007dde:	e0d6      	b.n	8007f8e <_dtoa_r+0x47e>
 8007de0:	9b04      	ldr	r3, [sp, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dd64      	ble.n	8007eb0 <_dtoa_r+0x3a0>
 8007de6:	210f      	movs	r1, #15
 8007de8:	9a04      	ldr	r2, [sp, #16]
 8007dea:	4b2b      	ldr	r3, [pc, #172]	@ (8007e98 <_dtoa_r+0x388>)
 8007dec:	400a      	ands	r2, r1
 8007dee:	00d2      	lsls	r2, r2, #3
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	681e      	ldr	r6, [r3, #0]
 8007df4:	685f      	ldr	r7, [r3, #4]
 8007df6:	9b04      	ldr	r3, [sp, #16]
 8007df8:	2402      	movs	r4, #2
 8007dfa:	111d      	asrs	r5, r3, #4
 8007dfc:	05db      	lsls	r3, r3, #23
 8007dfe:	d50a      	bpl.n	8007e16 <_dtoa_r+0x306>
 8007e00:	4b2a      	ldr	r3, [pc, #168]	@ (8007eac <_dtoa_r+0x39c>)
 8007e02:	400d      	ands	r5, r1
 8007e04:	6a1a      	ldr	r2, [r3, #32]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e0c:	f7f9 fd50 	bl	80018b0 <__aeabi_ddiv>
 8007e10:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007e14:	3401      	adds	r4, #1
 8007e16:	4b25      	ldr	r3, [pc, #148]	@ (8007eac <_dtoa_r+0x39c>)
 8007e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	d108      	bne.n	8007e30 <_dtoa_r+0x320>
 8007e1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e22:	0032      	movs	r2, r6
 8007e24:	003b      	movs	r3, r7
 8007e26:	f7f9 fd43 	bl	80018b0 <__aeabi_ddiv>
 8007e2a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007e2e:	e05a      	b.n	8007ee6 <_dtoa_r+0x3d6>
 8007e30:	2301      	movs	r3, #1
 8007e32:	421d      	tst	r5, r3
 8007e34:	d009      	beq.n	8007e4a <_dtoa_r+0x33a>
 8007e36:	18e4      	adds	r4, r4, r3
 8007e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e3a:	0030      	movs	r0, r6
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	0039      	movs	r1, r7
 8007e42:	f7fa f979 	bl	8002138 <__aeabi_dmul>
 8007e46:	0006      	movs	r6, r0
 8007e48:	000f      	movs	r7, r1
 8007e4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e4c:	106d      	asrs	r5, r5, #1
 8007e4e:	3308      	adds	r3, #8
 8007e50:	e7e2      	b.n	8007e18 <_dtoa_r+0x308>
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	08009bd0 	.word	0x08009bd0
 8007e58:	08009cbc 	.word	0x08009cbc
 8007e5c:	7ff00000 	.word	0x7ff00000
 8007e60:	0000270f 	.word	0x0000270f
 8007e64:	08009cb8 	.word	0x08009cb8
 8007e68:	08009cbb 	.word	0x08009cbb
 8007e6c:	08009c50 	.word	0x08009c50
 8007e70:	08009c4f 	.word	0x08009c4f
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	fffffc01 	.word	0xfffffc01
 8007e7c:	3ff80000 	.word	0x3ff80000
 8007e80:	636f4361 	.word	0x636f4361
 8007e84:	3fd287a7 	.word	0x3fd287a7
 8007e88:	8b60c8b3 	.word	0x8b60c8b3
 8007e8c:	3fc68a28 	.word	0x3fc68a28
 8007e90:	509f79fb 	.word	0x509f79fb
 8007e94:	3fd34413 	.word	0x3fd34413
 8007e98:	08009db8 	.word	0x08009db8
 8007e9c:	00000432 	.word	0x00000432
 8007ea0:	00000412 	.word	0x00000412
 8007ea4:	fe100000 	.word	0xfe100000
 8007ea8:	08009d14 	.word	0x08009d14
 8007eac:	08009d90 	.word	0x08009d90
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	2402      	movs	r4, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d016      	beq.n	8007ee6 <_dtoa_r+0x3d6>
 8007eb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007eba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007ebc:	220f      	movs	r2, #15
 8007ebe:	425d      	negs	r5, r3
 8007ec0:	402a      	ands	r2, r5
 8007ec2:	4bd7      	ldr	r3, [pc, #860]	@ (8008220 <_dtoa_r+0x710>)
 8007ec4:	00d2      	lsls	r2, r2, #3
 8007ec6:	189b      	adds	r3, r3, r2
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f7fa f934 	bl	8002138 <__aeabi_dmul>
 8007ed0:	2701      	movs	r7, #1
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ed6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ed8:	4ed2      	ldr	r6, [pc, #840]	@ (8008224 <_dtoa_r+0x714>)
 8007eda:	112d      	asrs	r5, r5, #4
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	d000      	beq.n	8007ee2 <_dtoa_r+0x3d2>
 8007ee0:	e0ba      	b.n	8008058 <_dtoa_r+0x548>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1a1      	bne.n	8007e2a <_dtoa_r+0x31a>
 8007ee6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ee8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007eea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d100      	bne.n	8007ef2 <_dtoa_r+0x3e2>
 8007ef0:	e0bd      	b.n	800806e <_dtoa_r+0x55e>
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	0030      	movs	r0, r6
 8007ef6:	0039      	movs	r1, r7
 8007ef8:	4bcb      	ldr	r3, [pc, #812]	@ (8008228 <_dtoa_r+0x718>)
 8007efa:	f7f8 faad 	bl	8000458 <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d100      	bne.n	8007f04 <_dtoa_r+0x3f4>
 8007f02:	e0b4      	b.n	800806e <_dtoa_r+0x55e>
 8007f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d100      	bne.n	8007f0c <_dtoa_r+0x3fc>
 8007f0a:	e0b0      	b.n	800806e <_dtoa_r+0x55e>
 8007f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dd39      	ble.n	8007f86 <_dtoa_r+0x476>
 8007f12:	9b04      	ldr	r3, [sp, #16]
 8007f14:	2200      	movs	r2, #0
 8007f16:	3b01      	subs	r3, #1
 8007f18:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f1a:	0030      	movs	r0, r6
 8007f1c:	4bc3      	ldr	r3, [pc, #780]	@ (800822c <_dtoa_r+0x71c>)
 8007f1e:	0039      	movs	r1, r7
 8007f20:	f7fa f90a 	bl	8002138 <__aeabi_dmul>
 8007f24:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f26:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	0020      	movs	r0, r4
 8007f2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f30:	f7fa ffc4 	bl	8002ebc <__aeabi_i2d>
 8007f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f38:	f7fa f8fe 	bl	8002138 <__aeabi_dmul>
 8007f3c:	4bbc      	ldr	r3, [pc, #752]	@ (8008230 <_dtoa_r+0x720>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f7f9 f952 	bl	80011e8 <__aeabi_dadd>
 8007f44:	4bbb      	ldr	r3, [pc, #748]	@ (8008234 <_dtoa_r+0x724>)
 8007f46:	0006      	movs	r6, r0
 8007f48:	18cf      	adds	r7, r1, r3
 8007f4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d000      	beq.n	8007f52 <_dtoa_r+0x442>
 8007f50:	e091      	b.n	8008076 <_dtoa_r+0x566>
 8007f52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f56:	2200      	movs	r2, #0
 8007f58:	4bb7      	ldr	r3, [pc, #732]	@ (8008238 <_dtoa_r+0x728>)
 8007f5a:	f7fa fbb5 	bl	80026c8 <__aeabi_dsub>
 8007f5e:	0032      	movs	r2, r6
 8007f60:	003b      	movs	r3, r7
 8007f62:	0004      	movs	r4, r0
 8007f64:	000d      	movs	r5, r1
 8007f66:	f7f8 fa8b 	bl	8000480 <__aeabi_dcmpgt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d000      	beq.n	8007f70 <_dtoa_r+0x460>
 8007f6e:	e29d      	b.n	80084ac <_dtoa_r+0x99c>
 8007f70:	2180      	movs	r1, #128	@ 0x80
 8007f72:	0609      	lsls	r1, r1, #24
 8007f74:	187b      	adds	r3, r7, r1
 8007f76:	0032      	movs	r2, r6
 8007f78:	0020      	movs	r0, r4
 8007f7a:	0029      	movs	r1, r5
 8007f7c:	f7f8 fa6c 	bl	8000458 <__aeabi_dcmplt>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d000      	beq.n	8007f86 <_dtoa_r+0x476>
 8007f84:	e130      	b.n	80081e8 <_dtoa_r+0x6d8>
 8007f86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f88:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f8c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da00      	bge.n	8007f96 <_dtoa_r+0x486>
 8007f94:	e177      	b.n	8008286 <_dtoa_r+0x776>
 8007f96:	9a04      	ldr	r2, [sp, #16]
 8007f98:	2a0e      	cmp	r2, #14
 8007f9a:	dd00      	ble.n	8007f9e <_dtoa_r+0x48e>
 8007f9c:	e173      	b.n	8008286 <_dtoa_r+0x776>
 8007f9e:	4ba0      	ldr	r3, [pc, #640]	@ (8008220 <_dtoa_r+0x710>)
 8007fa0:	00d2      	lsls	r2, r2, #3
 8007fa2:	189b      	adds	r3, r3, r2
 8007fa4:	685c      	ldr	r4, [r3, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	9306      	str	r3, [sp, #24]
 8007faa:	9407      	str	r4, [sp, #28]
 8007fac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	da03      	bge.n	8007fba <_dtoa_r+0x4aa>
 8007fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dc00      	bgt.n	8007fba <_dtoa_r+0x4aa>
 8007fb8:	e106      	b.n	80081c8 <_dtoa_r+0x6b8>
 8007fba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007fbc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc0:	9d08      	ldr	r5, [sp, #32]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	195b      	adds	r3, r3, r5
 8007fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fc8:	9a06      	ldr	r2, [sp, #24]
 8007fca:	9b07      	ldr	r3, [sp, #28]
 8007fcc:	0030      	movs	r0, r6
 8007fce:	0039      	movs	r1, r7
 8007fd0:	f7f9 fc6e 	bl	80018b0 <__aeabi_ddiv>
 8007fd4:	f7fa ff36 	bl	8002e44 <__aeabi_d2iz>
 8007fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007fda:	f7fa ff6f 	bl	8002ebc <__aeabi_i2d>
 8007fde:	9a06      	ldr	r2, [sp, #24]
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	f7fa f8a9 	bl	8002138 <__aeabi_dmul>
 8007fe6:	0002      	movs	r2, r0
 8007fe8:	000b      	movs	r3, r1
 8007fea:	0030      	movs	r0, r6
 8007fec:	0039      	movs	r1, r7
 8007fee:	f7fa fb6b 	bl	80026c8 <__aeabi_dsub>
 8007ff2:	002b      	movs	r3, r5
 8007ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff6:	3501      	adds	r5, #1
 8007ff8:	3230      	adds	r2, #48	@ 0x30
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ffe:	002c      	movs	r4, r5
 8008000:	429a      	cmp	r2, r3
 8008002:	d000      	beq.n	8008006 <_dtoa_r+0x4f6>
 8008004:	e131      	b.n	800826a <_dtoa_r+0x75a>
 8008006:	0002      	movs	r2, r0
 8008008:	000b      	movs	r3, r1
 800800a:	f7f9 f8ed 	bl	80011e8 <__aeabi_dadd>
 800800e:	9a06      	ldr	r2, [sp, #24]
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	0006      	movs	r6, r0
 8008014:	000f      	movs	r7, r1
 8008016:	f7f8 fa33 	bl	8000480 <__aeabi_dcmpgt>
 800801a:	2800      	cmp	r0, #0
 800801c:	d000      	beq.n	8008020 <_dtoa_r+0x510>
 800801e:	e10f      	b.n	8008240 <_dtoa_r+0x730>
 8008020:	9a06      	ldr	r2, [sp, #24]
 8008022:	9b07      	ldr	r3, [sp, #28]
 8008024:	0030      	movs	r0, r6
 8008026:	0039      	movs	r1, r7
 8008028:	f7f8 fa10 	bl	800044c <__aeabi_dcmpeq>
 800802c:	2800      	cmp	r0, #0
 800802e:	d003      	beq.n	8008038 <_dtoa_r+0x528>
 8008030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008032:	07dd      	lsls	r5, r3, #31
 8008034:	d500      	bpl.n	8008038 <_dtoa_r+0x528>
 8008036:	e103      	b.n	8008240 <_dtoa_r+0x730>
 8008038:	9905      	ldr	r1, [sp, #20]
 800803a:	9803      	ldr	r0, [sp, #12]
 800803c:	f000 fca6 	bl	800898c <_Bfree>
 8008040:	2300      	movs	r3, #0
 8008042:	7023      	strb	r3, [r4, #0]
 8008044:	9b04      	ldr	r3, [sp, #16]
 8008046:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008048:	3301      	adds	r3, #1
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800804e:	2b00      	cmp	r3, #0
 8008050:	d100      	bne.n	8008054 <_dtoa_r+0x544>
 8008052:	e5a7      	b.n	8007ba4 <_dtoa_r+0x94>
 8008054:	601c      	str	r4, [r3, #0]
 8008056:	e5a5      	b.n	8007ba4 <_dtoa_r+0x94>
 8008058:	423d      	tst	r5, r7
 800805a:	d005      	beq.n	8008068 <_dtoa_r+0x558>
 800805c:	6832      	ldr	r2, [r6, #0]
 800805e:	6873      	ldr	r3, [r6, #4]
 8008060:	f7fa f86a 	bl	8002138 <__aeabi_dmul>
 8008064:	003b      	movs	r3, r7
 8008066:	3401      	adds	r4, #1
 8008068:	106d      	asrs	r5, r5, #1
 800806a:	3608      	adds	r6, #8
 800806c:	e736      	b.n	8007edc <_dtoa_r+0x3cc>
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	930c      	str	r3, [sp, #48]	@ 0x30
 8008072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008074:	e75a      	b.n	8007f2c <_dtoa_r+0x41c>
 8008076:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008078:	4b69      	ldr	r3, [pc, #420]	@ (8008220 <_dtoa_r+0x710>)
 800807a:	3a01      	subs	r2, #1
 800807c:	00d2      	lsls	r2, r2, #3
 800807e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008080:	189b      	adds	r3, r3, r2
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2900      	cmp	r1, #0
 8008088:	d04c      	beq.n	8008124 <_dtoa_r+0x614>
 800808a:	2000      	movs	r0, #0
 800808c:	496b      	ldr	r1, [pc, #428]	@ (800823c <_dtoa_r+0x72c>)
 800808e:	f7f9 fc0f 	bl	80018b0 <__aeabi_ddiv>
 8008092:	0032      	movs	r2, r6
 8008094:	003b      	movs	r3, r7
 8008096:	f7fa fb17 	bl	80026c8 <__aeabi_dsub>
 800809a:	9a08      	ldr	r2, [sp, #32]
 800809c:	0006      	movs	r6, r0
 800809e:	4694      	mov	ip, r2
 80080a0:	000f      	movs	r7, r1
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	9316      	str	r3, [sp, #88]	@ 0x58
 80080a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080a8:	4463      	add	r3, ip
 80080aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80080ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080b0:	f7fa fec8 	bl	8002e44 <__aeabi_d2iz>
 80080b4:	0005      	movs	r5, r0
 80080b6:	f7fa ff01 	bl	8002ebc <__aeabi_i2d>
 80080ba:	0002      	movs	r2, r0
 80080bc:	000b      	movs	r3, r1
 80080be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080c2:	f7fa fb01 	bl	80026c8 <__aeabi_dsub>
 80080c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080c8:	3530      	adds	r5, #48	@ 0x30
 80080ca:	1c5c      	adds	r4, r3, #1
 80080cc:	701d      	strb	r5, [r3, #0]
 80080ce:	0032      	movs	r2, r6
 80080d0:	003b      	movs	r3, r7
 80080d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80080d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080d6:	f7f8 f9bf 	bl	8000458 <__aeabi_dcmplt>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d16a      	bne.n	80081b4 <_dtoa_r+0x6a4>
 80080de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e2:	2000      	movs	r0, #0
 80080e4:	4950      	ldr	r1, [pc, #320]	@ (8008228 <_dtoa_r+0x718>)
 80080e6:	f7fa faef 	bl	80026c8 <__aeabi_dsub>
 80080ea:	0032      	movs	r2, r6
 80080ec:	003b      	movs	r3, r7
 80080ee:	f7f8 f9b3 	bl	8000458 <__aeabi_dcmplt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d000      	beq.n	80080f8 <_dtoa_r+0x5e8>
 80080f6:	e0a5      	b.n	8008244 <_dtoa_r+0x734>
 80080f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	d100      	bne.n	8008100 <_dtoa_r+0x5f0>
 80080fe:	e742      	b.n	8007f86 <_dtoa_r+0x476>
 8008100:	2200      	movs	r2, #0
 8008102:	0030      	movs	r0, r6
 8008104:	0039      	movs	r1, r7
 8008106:	4b49      	ldr	r3, [pc, #292]	@ (800822c <_dtoa_r+0x71c>)
 8008108:	f7fa f816 	bl	8002138 <__aeabi_dmul>
 800810c:	2200      	movs	r2, #0
 800810e:	0006      	movs	r6, r0
 8008110:	000f      	movs	r7, r1
 8008112:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008116:	4b45      	ldr	r3, [pc, #276]	@ (800822c <_dtoa_r+0x71c>)
 8008118:	f7fa f80e 	bl	8002138 <__aeabi_dmul>
 800811c:	9416      	str	r4, [sp, #88]	@ 0x58
 800811e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008120:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008122:	e7c3      	b.n	80080ac <_dtoa_r+0x59c>
 8008124:	0030      	movs	r0, r6
 8008126:	0039      	movs	r1, r7
 8008128:	f7fa f806 	bl	8002138 <__aeabi_dmul>
 800812c:	9d08      	ldr	r5, [sp, #32]
 800812e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008130:	002b      	movs	r3, r5
 8008132:	4694      	mov	ip, r2
 8008134:	9016      	str	r0, [sp, #88]	@ 0x58
 8008136:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008138:	4463      	add	r3, ip
 800813a:	9319      	str	r3, [sp, #100]	@ 0x64
 800813c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800813e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008140:	f7fa fe80 	bl	8002e44 <__aeabi_d2iz>
 8008144:	0004      	movs	r4, r0
 8008146:	f7fa feb9 	bl	8002ebc <__aeabi_i2d>
 800814a:	000b      	movs	r3, r1
 800814c:	0002      	movs	r2, r0
 800814e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008152:	f7fa fab9 	bl	80026c8 <__aeabi_dsub>
 8008156:	3430      	adds	r4, #48	@ 0x30
 8008158:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800815a:	702c      	strb	r4, [r5, #0]
 800815c:	3501      	adds	r5, #1
 800815e:	0006      	movs	r6, r0
 8008160:	000f      	movs	r7, r1
 8008162:	42ab      	cmp	r3, r5
 8008164:	d129      	bne.n	80081ba <_dtoa_r+0x6aa>
 8008166:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008168:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800816a:	9b08      	ldr	r3, [sp, #32]
 800816c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800816e:	469c      	mov	ip, r3
 8008170:	2200      	movs	r2, #0
 8008172:	4b32      	ldr	r3, [pc, #200]	@ (800823c <_dtoa_r+0x72c>)
 8008174:	4464      	add	r4, ip
 8008176:	f7f9 f837 	bl	80011e8 <__aeabi_dadd>
 800817a:	0002      	movs	r2, r0
 800817c:	000b      	movs	r3, r1
 800817e:	0030      	movs	r0, r6
 8008180:	0039      	movs	r1, r7
 8008182:	f7f8 f97d 	bl	8000480 <__aeabi_dcmpgt>
 8008186:	2800      	cmp	r0, #0
 8008188:	d15c      	bne.n	8008244 <_dtoa_r+0x734>
 800818a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800818c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800818e:	2000      	movs	r0, #0
 8008190:	492a      	ldr	r1, [pc, #168]	@ (800823c <_dtoa_r+0x72c>)
 8008192:	f7fa fa99 	bl	80026c8 <__aeabi_dsub>
 8008196:	0002      	movs	r2, r0
 8008198:	000b      	movs	r3, r1
 800819a:	0030      	movs	r0, r6
 800819c:	0039      	movs	r1, r7
 800819e:	f7f8 f95b 	bl	8000458 <__aeabi_dcmplt>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d100      	bne.n	80081a8 <_dtoa_r+0x698>
 80081a6:	e6ee      	b.n	8007f86 <_dtoa_r+0x476>
 80081a8:	0023      	movs	r3, r4
 80081aa:	3c01      	subs	r4, #1
 80081ac:	7822      	ldrb	r2, [r4, #0]
 80081ae:	2a30      	cmp	r2, #48	@ 0x30
 80081b0:	d0fa      	beq.n	80081a8 <_dtoa_r+0x698>
 80081b2:	001c      	movs	r4, r3
 80081b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	e73e      	b.n	8008038 <_dtoa_r+0x528>
 80081ba:	2200      	movs	r2, #0
 80081bc:	4b1b      	ldr	r3, [pc, #108]	@ (800822c <_dtoa_r+0x71c>)
 80081be:	f7f9 ffbb 	bl	8002138 <__aeabi_dmul>
 80081c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80081c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081c6:	e7b9      	b.n	800813c <_dtoa_r+0x62c>
 80081c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10c      	bne.n	80081e8 <_dtoa_r+0x6d8>
 80081ce:	9806      	ldr	r0, [sp, #24]
 80081d0:	9907      	ldr	r1, [sp, #28]
 80081d2:	2200      	movs	r2, #0
 80081d4:	4b18      	ldr	r3, [pc, #96]	@ (8008238 <_dtoa_r+0x728>)
 80081d6:	f7f9 ffaf 	bl	8002138 <__aeabi_dmul>
 80081da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081de:	f7f8 f959 	bl	8000494 <__aeabi_dcmpge>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d100      	bne.n	80081e8 <_dtoa_r+0x6d8>
 80081e6:	e164      	b.n	80084b2 <_dtoa_r+0x9a2>
 80081e8:	2600      	movs	r6, #0
 80081ea:	0037      	movs	r7, r6
 80081ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081ee:	9c08      	ldr	r4, [sp, #32]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80081f4:	2300      	movs	r3, #0
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	0031      	movs	r1, r6
 80081fa:	9803      	ldr	r0, [sp, #12]
 80081fc:	f000 fbc6 	bl	800898c <_Bfree>
 8008200:	2f00      	cmp	r7, #0
 8008202:	d0d7      	beq.n	80081b4 <_dtoa_r+0x6a4>
 8008204:	9b04      	ldr	r3, [sp, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d005      	beq.n	8008216 <_dtoa_r+0x706>
 800820a:	42bb      	cmp	r3, r7
 800820c:	d003      	beq.n	8008216 <_dtoa_r+0x706>
 800820e:	0019      	movs	r1, r3
 8008210:	9803      	ldr	r0, [sp, #12]
 8008212:	f000 fbbb 	bl	800898c <_Bfree>
 8008216:	0039      	movs	r1, r7
 8008218:	9803      	ldr	r0, [sp, #12]
 800821a:	f000 fbb7 	bl	800898c <_Bfree>
 800821e:	e7c9      	b.n	80081b4 <_dtoa_r+0x6a4>
 8008220:	08009db8 	.word	0x08009db8
 8008224:	08009d90 	.word	0x08009d90
 8008228:	3ff00000 	.word	0x3ff00000
 800822c:	40240000 	.word	0x40240000
 8008230:	401c0000 	.word	0x401c0000
 8008234:	fcc00000 	.word	0xfcc00000
 8008238:	40140000 	.word	0x40140000
 800823c:	3fe00000 	.word	0x3fe00000
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	930c      	str	r3, [sp, #48]	@ 0x30
 8008244:	0023      	movs	r3, r4
 8008246:	001c      	movs	r4, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	2a39      	cmp	r2, #57	@ 0x39
 800824e:	d108      	bne.n	8008262 <_dtoa_r+0x752>
 8008250:	9a08      	ldr	r2, [sp, #32]
 8008252:	429a      	cmp	r2, r3
 8008254:	d1f7      	bne.n	8008246 <_dtoa_r+0x736>
 8008256:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008258:	9908      	ldr	r1, [sp, #32]
 800825a:	3201      	adds	r2, #1
 800825c:	920c      	str	r2, [sp, #48]	@ 0x30
 800825e:	2230      	movs	r2, #48	@ 0x30
 8008260:	700a      	strb	r2, [r1, #0]
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	3201      	adds	r2, #1
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	e7a4      	b.n	80081b4 <_dtoa_r+0x6a4>
 800826a:	2200      	movs	r2, #0
 800826c:	4bc6      	ldr	r3, [pc, #792]	@ (8008588 <_dtoa_r+0xa78>)
 800826e:	f7f9 ff63 	bl	8002138 <__aeabi_dmul>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	0006      	movs	r6, r0
 8008278:	000f      	movs	r7, r1
 800827a:	f7f8 f8e7 	bl	800044c <__aeabi_dcmpeq>
 800827e:	2800      	cmp	r0, #0
 8008280:	d100      	bne.n	8008284 <_dtoa_r+0x774>
 8008282:	e6a1      	b.n	8007fc8 <_dtoa_r+0x4b8>
 8008284:	e6d8      	b.n	8008038 <_dtoa_r+0x528>
 8008286:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008288:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800828a:	9c06      	ldr	r4, [sp, #24]
 800828c:	2f00      	cmp	r7, #0
 800828e:	d014      	beq.n	80082ba <_dtoa_r+0x7aa>
 8008290:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008292:	2a01      	cmp	r2, #1
 8008294:	dd00      	ble.n	8008298 <_dtoa_r+0x788>
 8008296:	e0c8      	b.n	800842a <_dtoa_r+0x91a>
 8008298:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800829a:	2a00      	cmp	r2, #0
 800829c:	d100      	bne.n	80082a0 <_dtoa_r+0x790>
 800829e:	e0be      	b.n	800841e <_dtoa_r+0x90e>
 80082a0:	4aba      	ldr	r2, [pc, #744]	@ (800858c <_dtoa_r+0xa7c>)
 80082a2:	189b      	adds	r3, r3, r2
 80082a4:	9a06      	ldr	r2, [sp, #24]
 80082a6:	2101      	movs	r1, #1
 80082a8:	18d2      	adds	r2, r2, r3
 80082aa:	9206      	str	r2, [sp, #24]
 80082ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082ae:	9803      	ldr	r0, [sp, #12]
 80082b0:	18d3      	adds	r3, r2, r3
 80082b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80082b4:	f000 fc22 	bl	8008afc <__i2b>
 80082b8:	0007      	movs	r7, r0
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	d00e      	beq.n	80082dc <_dtoa_r+0x7cc>
 80082be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dd0b      	ble.n	80082dc <_dtoa_r+0x7cc>
 80082c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082c6:	0023      	movs	r3, r4
 80082c8:	4294      	cmp	r4, r2
 80082ca:	dd00      	ble.n	80082ce <_dtoa_r+0x7be>
 80082cc:	0013      	movs	r3, r2
 80082ce:	9a06      	ldr	r2, [sp, #24]
 80082d0:	1ae4      	subs	r4, r4, r3
 80082d2:	1ad2      	subs	r2, r2, r3
 80082d4:	9206      	str	r2, [sp, #24]
 80082d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	930d      	str	r3, [sp, #52]	@ 0x34
 80082dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01f      	beq.n	8008322 <_dtoa_r+0x812>
 80082e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d100      	bne.n	80082ea <_dtoa_r+0x7da>
 80082e8:	e0b5      	b.n	8008456 <_dtoa_r+0x946>
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	d010      	beq.n	8008310 <_dtoa_r+0x800>
 80082ee:	0039      	movs	r1, r7
 80082f0:	002a      	movs	r2, r5
 80082f2:	9803      	ldr	r0, [sp, #12]
 80082f4:	f000 fccc 	bl	8008c90 <__pow5mult>
 80082f8:	9a05      	ldr	r2, [sp, #20]
 80082fa:	0001      	movs	r1, r0
 80082fc:	0007      	movs	r7, r0
 80082fe:	9803      	ldr	r0, [sp, #12]
 8008300:	f000 fc14 	bl	8008b2c <__multiply>
 8008304:	0006      	movs	r6, r0
 8008306:	9905      	ldr	r1, [sp, #20]
 8008308:	9803      	ldr	r0, [sp, #12]
 800830a:	f000 fb3f 	bl	800898c <_Bfree>
 800830e:	9605      	str	r6, [sp, #20]
 8008310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008312:	1b5a      	subs	r2, r3, r5
 8008314:	42ab      	cmp	r3, r5
 8008316:	d004      	beq.n	8008322 <_dtoa_r+0x812>
 8008318:	9905      	ldr	r1, [sp, #20]
 800831a:	9803      	ldr	r0, [sp, #12]
 800831c:	f000 fcb8 	bl	8008c90 <__pow5mult>
 8008320:	9005      	str	r0, [sp, #20]
 8008322:	2101      	movs	r1, #1
 8008324:	9803      	ldr	r0, [sp, #12]
 8008326:	f000 fbe9 	bl	8008afc <__i2b>
 800832a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800832c:	0006      	movs	r6, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d100      	bne.n	8008334 <_dtoa_r+0x824>
 8008332:	e1bc      	b.n	80086ae <_dtoa_r+0xb9e>
 8008334:	001a      	movs	r2, r3
 8008336:	0001      	movs	r1, r0
 8008338:	9803      	ldr	r0, [sp, #12]
 800833a:	f000 fca9 	bl	8008c90 <__pow5mult>
 800833e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008340:	0006      	movs	r6, r0
 8008342:	2500      	movs	r5, #0
 8008344:	2b01      	cmp	r3, #1
 8008346:	dc16      	bgt.n	8008376 <_dtoa_r+0x866>
 8008348:	2500      	movs	r5, #0
 800834a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800834c:	42ab      	cmp	r3, r5
 800834e:	d10e      	bne.n	800836e <_dtoa_r+0x85e>
 8008350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008352:	031b      	lsls	r3, r3, #12
 8008354:	42ab      	cmp	r3, r5
 8008356:	d10a      	bne.n	800836e <_dtoa_r+0x85e>
 8008358:	4b8d      	ldr	r3, [pc, #564]	@ (8008590 <_dtoa_r+0xa80>)
 800835a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800835c:	4213      	tst	r3, r2
 800835e:	d006      	beq.n	800836e <_dtoa_r+0x85e>
 8008360:	9b06      	ldr	r3, [sp, #24]
 8008362:	3501      	adds	r5, #1
 8008364:	3301      	adds	r3, #1
 8008366:	9306      	str	r3, [sp, #24]
 8008368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800836a:	3301      	adds	r3, #1
 800836c:	930d      	str	r3, [sp, #52]	@ 0x34
 800836e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008370:	2001      	movs	r0, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d008      	beq.n	8008388 <_dtoa_r+0x878>
 8008376:	6933      	ldr	r3, [r6, #16]
 8008378:	3303      	adds	r3, #3
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	18f3      	adds	r3, r6, r3
 800837e:	6858      	ldr	r0, [r3, #4]
 8008380:	f000 fb6c 	bl	8008a5c <__hi0bits>
 8008384:	2320      	movs	r3, #32
 8008386:	1a18      	subs	r0, r3, r0
 8008388:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800838a:	1818      	adds	r0, r3, r0
 800838c:	0002      	movs	r2, r0
 800838e:	231f      	movs	r3, #31
 8008390:	401a      	ands	r2, r3
 8008392:	4218      	tst	r0, r3
 8008394:	d065      	beq.n	8008462 <_dtoa_r+0x952>
 8008396:	3301      	adds	r3, #1
 8008398:	1a9b      	subs	r3, r3, r2
 800839a:	2b04      	cmp	r3, #4
 800839c:	dd5d      	ble.n	800845a <_dtoa_r+0x94a>
 800839e:	231c      	movs	r3, #28
 80083a0:	1a9b      	subs	r3, r3, r2
 80083a2:	9a06      	ldr	r2, [sp, #24]
 80083a4:	18e4      	adds	r4, r4, r3
 80083a6:	18d2      	adds	r2, r2, r3
 80083a8:	9206      	str	r2, [sp, #24]
 80083aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083ac:	18d3      	adds	r3, r2, r3
 80083ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd05      	ble.n	80083c2 <_dtoa_r+0x8b2>
 80083b6:	001a      	movs	r2, r3
 80083b8:	9905      	ldr	r1, [sp, #20]
 80083ba:	9803      	ldr	r0, [sp, #12]
 80083bc:	f000 fcc4 	bl	8008d48 <__lshift>
 80083c0:	9005      	str	r0, [sp, #20]
 80083c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dd05      	ble.n	80083d4 <_dtoa_r+0x8c4>
 80083c8:	0031      	movs	r1, r6
 80083ca:	001a      	movs	r2, r3
 80083cc:	9803      	ldr	r0, [sp, #12]
 80083ce:	f000 fcbb 	bl	8008d48 <__lshift>
 80083d2:	0006      	movs	r6, r0
 80083d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d045      	beq.n	8008466 <_dtoa_r+0x956>
 80083da:	0031      	movs	r1, r6
 80083dc:	9805      	ldr	r0, [sp, #20]
 80083de:	f000 fd1f 	bl	8008e20 <__mcmp>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	da3f      	bge.n	8008466 <_dtoa_r+0x956>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	220a      	movs	r2, #10
 80083ea:	3b01      	subs	r3, #1
 80083ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ee:	9905      	ldr	r1, [sp, #20]
 80083f0:	2300      	movs	r3, #0
 80083f2:	9803      	ldr	r0, [sp, #12]
 80083f4:	f000 faee 	bl	80089d4 <__multadd>
 80083f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083fa:	9005      	str	r0, [sp, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d100      	bne.n	8008402 <_dtoa_r+0x8f2>
 8008400:	e15c      	b.n	80086bc <_dtoa_r+0xbac>
 8008402:	2300      	movs	r3, #0
 8008404:	0039      	movs	r1, r7
 8008406:	220a      	movs	r2, #10
 8008408:	9803      	ldr	r0, [sp, #12]
 800840a:	f000 fae3 	bl	80089d4 <__multadd>
 800840e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008410:	0007      	movs	r7, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	dc55      	bgt.n	80084c2 <_dtoa_r+0x9b2>
 8008416:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008418:	2b02      	cmp	r3, #2
 800841a:	dc2d      	bgt.n	8008478 <_dtoa_r+0x968>
 800841c:	e051      	b.n	80084c2 <_dtoa_r+0x9b2>
 800841e:	2336      	movs	r3, #54	@ 0x36
 8008420:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008422:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008424:	9c06      	ldr	r4, [sp, #24]
 8008426:	1a9b      	subs	r3, r3, r2
 8008428:	e73c      	b.n	80082a4 <_dtoa_r+0x794>
 800842a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842c:	1e5d      	subs	r5, r3, #1
 800842e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008430:	42ab      	cmp	r3, r5
 8008432:	db08      	blt.n	8008446 <_dtoa_r+0x936>
 8008434:	1b5d      	subs	r5, r3, r5
 8008436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008438:	9c06      	ldr	r4, [sp, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	db00      	blt.n	8008440 <_dtoa_r+0x930>
 800843e:	e731      	b.n	80082a4 <_dtoa_r+0x794>
 8008440:	1ae4      	subs	r4, r4, r3
 8008442:	2300      	movs	r3, #0
 8008444:	e72e      	b.n	80082a4 <_dtoa_r+0x794>
 8008446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008448:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800844a:	1aeb      	subs	r3, r5, r3
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008450:	9314      	str	r3, [sp, #80]	@ 0x50
 8008452:	2500      	movs	r5, #0
 8008454:	e7ef      	b.n	8008436 <_dtoa_r+0x926>
 8008456:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008458:	e75e      	b.n	8008318 <_dtoa_r+0x808>
 800845a:	2b04      	cmp	r3, #4
 800845c:	d0a8      	beq.n	80083b0 <_dtoa_r+0x8a0>
 800845e:	331c      	adds	r3, #28
 8008460:	e79f      	b.n	80083a2 <_dtoa_r+0x892>
 8008462:	0013      	movs	r3, r2
 8008464:	e7fb      	b.n	800845e <_dtoa_r+0x94e>
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	930c      	str	r3, [sp, #48]	@ 0x30
 800846a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846c:	930e      	str	r3, [sp, #56]	@ 0x38
 800846e:	2b00      	cmp	r3, #0
 8008470:	dc23      	bgt.n	80084ba <_dtoa_r+0x9aa>
 8008472:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008474:	2b02      	cmp	r3, #2
 8008476:	dd20      	ble.n	80084ba <_dtoa_r+0x9aa>
 8008478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d000      	beq.n	8008480 <_dtoa_r+0x970>
 800847e:	e6b5      	b.n	80081ec <_dtoa_r+0x6dc>
 8008480:	0031      	movs	r1, r6
 8008482:	2205      	movs	r2, #5
 8008484:	9803      	ldr	r0, [sp, #12]
 8008486:	f000 faa5 	bl	80089d4 <__multadd>
 800848a:	0006      	movs	r6, r0
 800848c:	0001      	movs	r1, r0
 800848e:	9805      	ldr	r0, [sp, #20]
 8008490:	f000 fcc6 	bl	8008e20 <__mcmp>
 8008494:	2800      	cmp	r0, #0
 8008496:	dc00      	bgt.n	800849a <_dtoa_r+0x98a>
 8008498:	e6a8      	b.n	80081ec <_dtoa_r+0x6dc>
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	9a08      	ldr	r2, [sp, #32]
 800849e:	1c5c      	adds	r4, r3, #1
 80084a0:	2331      	movs	r3, #49	@ 0x31
 80084a2:	7013      	strb	r3, [r2, #0]
 80084a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084a6:	3301      	adds	r3, #1
 80084a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80084aa:	e6a3      	b.n	80081f4 <_dtoa_r+0x6e4>
 80084ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80084ae:	0037      	movs	r7, r6
 80084b0:	e7f3      	b.n	800849a <_dtoa_r+0x98a>
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80084b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80084b8:	e7f9      	b.n	80084ae <_dtoa_r+0x99e>
 80084ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d100      	bne.n	80084c2 <_dtoa_r+0x9b2>
 80084c0:	e100      	b.n	80086c4 <_dtoa_r+0xbb4>
 80084c2:	2c00      	cmp	r4, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x9c2>
 80084c6:	0039      	movs	r1, r7
 80084c8:	0022      	movs	r2, r4
 80084ca:	9803      	ldr	r0, [sp, #12]
 80084cc:	f000 fc3c 	bl	8008d48 <__lshift>
 80084d0:	0007      	movs	r7, r0
 80084d2:	0038      	movs	r0, r7
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	d018      	beq.n	800850a <_dtoa_r+0x9fa>
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	9803      	ldr	r0, [sp, #12]
 80084dc:	f000 fa12 	bl	8008904 <_Balloc>
 80084e0:	1e04      	subs	r4, r0, #0
 80084e2:	d105      	bne.n	80084f0 <_dtoa_r+0x9e0>
 80084e4:	0022      	movs	r2, r4
 80084e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008594 <_dtoa_r+0xa84>)
 80084e8:	482b      	ldr	r0, [pc, #172]	@ (8008598 <_dtoa_r+0xa88>)
 80084ea:	492c      	ldr	r1, [pc, #176]	@ (800859c <_dtoa_r+0xa8c>)
 80084ec:	f7ff fb25 	bl	8007b3a <_dtoa_r+0x2a>
 80084f0:	0039      	movs	r1, r7
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	310c      	adds	r1, #12
 80084f6:	3202      	adds	r2, #2
 80084f8:	0092      	lsls	r2, r2, #2
 80084fa:	300c      	adds	r0, #12
 80084fc:	f001 f9be 	bl	800987c <memcpy>
 8008500:	2201      	movs	r2, #1
 8008502:	0021      	movs	r1, r4
 8008504:	9803      	ldr	r0, [sp, #12]
 8008506:	f000 fc1f 	bl	8008d48 <__lshift>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800850e:	9306      	str	r3, [sp, #24]
 8008510:	3b01      	subs	r3, #1
 8008512:	189b      	adds	r3, r3, r2
 8008514:	2201      	movs	r2, #1
 8008516:	9704      	str	r7, [sp, #16]
 8008518:	0007      	movs	r7, r0
 800851a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800851c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800851e:	4013      	ands	r3, r2
 8008520:	930e      	str	r3, [sp, #56]	@ 0x38
 8008522:	0031      	movs	r1, r6
 8008524:	9805      	ldr	r0, [sp, #20]
 8008526:	f7ff fa65 	bl	80079f4 <quorem>
 800852a:	9904      	ldr	r1, [sp, #16]
 800852c:	0005      	movs	r5, r0
 800852e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008530:	9805      	ldr	r0, [sp, #20]
 8008532:	f000 fc75 	bl	8008e20 <__mcmp>
 8008536:	003a      	movs	r2, r7
 8008538:	900d      	str	r0, [sp, #52]	@ 0x34
 800853a:	0031      	movs	r1, r6
 800853c:	9803      	ldr	r0, [sp, #12]
 800853e:	f000 fc8b 	bl	8008e58 <__mdiff>
 8008542:	2201      	movs	r2, #1
 8008544:	68c3      	ldr	r3, [r0, #12]
 8008546:	0004      	movs	r4, r0
 8008548:	3530      	adds	r5, #48	@ 0x30
 800854a:	9209      	str	r2, [sp, #36]	@ 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <_dtoa_r+0xa4a>
 8008550:	0001      	movs	r1, r0
 8008552:	9805      	ldr	r0, [sp, #20]
 8008554:	f000 fc64 	bl	8008e20 <__mcmp>
 8008558:	9009      	str	r0, [sp, #36]	@ 0x24
 800855a:	0021      	movs	r1, r4
 800855c:	9803      	ldr	r0, [sp, #12]
 800855e:	f000 fa15 	bl	800898c <_Bfree>
 8008562:	9b06      	ldr	r3, [sp, #24]
 8008564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008566:	1c5c      	adds	r4, r3, #1
 8008568:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800856a:	4313      	orrs	r3, r2
 800856c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800856e:	4313      	orrs	r3, r2
 8008570:	d116      	bne.n	80085a0 <_dtoa_r+0xa90>
 8008572:	2d39      	cmp	r5, #57	@ 0x39
 8008574:	d02f      	beq.n	80085d6 <_dtoa_r+0xac6>
 8008576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008578:	2b00      	cmp	r3, #0
 800857a:	dd01      	ble.n	8008580 <_dtoa_r+0xa70>
 800857c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800857e:	3531      	adds	r5, #49	@ 0x31
 8008580:	9b06      	ldr	r3, [sp, #24]
 8008582:	701d      	strb	r5, [r3, #0]
 8008584:	e638      	b.n	80081f8 <_dtoa_r+0x6e8>
 8008586:	46c0      	nop			@ (mov r8, r8)
 8008588:	40240000 	.word	0x40240000
 800858c:	00000433 	.word	0x00000433
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	08009d14 	.word	0x08009d14
 8008598:	08009cbc 	.word	0x08009cbc
 800859c:	000002ef 	.word	0x000002ef
 80085a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	db04      	blt.n	80085b0 <_dtoa_r+0xaa0>
 80085a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085a8:	4313      	orrs	r3, r2
 80085aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d11e      	bne.n	80085ee <_dtoa_r+0xade>
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dde4      	ble.n	8008580 <_dtoa_r+0xa70>
 80085b6:	9905      	ldr	r1, [sp, #20]
 80085b8:	2201      	movs	r2, #1
 80085ba:	9803      	ldr	r0, [sp, #12]
 80085bc:	f000 fbc4 	bl	8008d48 <__lshift>
 80085c0:	0031      	movs	r1, r6
 80085c2:	9005      	str	r0, [sp, #20]
 80085c4:	f000 fc2c 	bl	8008e20 <__mcmp>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	dc02      	bgt.n	80085d2 <_dtoa_r+0xac2>
 80085cc:	d1d8      	bne.n	8008580 <_dtoa_r+0xa70>
 80085ce:	07eb      	lsls	r3, r5, #31
 80085d0:	d5d6      	bpl.n	8008580 <_dtoa_r+0xa70>
 80085d2:	2d39      	cmp	r5, #57	@ 0x39
 80085d4:	d1d2      	bne.n	800857c <_dtoa_r+0xa6c>
 80085d6:	2339      	movs	r3, #57	@ 0x39
 80085d8:	9a06      	ldr	r2, [sp, #24]
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	0023      	movs	r3, r4
 80085de:	001c      	movs	r4, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	2a39      	cmp	r2, #57	@ 0x39
 80085e6:	d04f      	beq.n	8008688 <_dtoa_r+0xb78>
 80085e8:	3201      	adds	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	e604      	b.n	80081f8 <_dtoa_r+0x6e8>
 80085ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd03      	ble.n	80085fc <_dtoa_r+0xaec>
 80085f4:	2d39      	cmp	r5, #57	@ 0x39
 80085f6:	d0ee      	beq.n	80085d6 <_dtoa_r+0xac6>
 80085f8:	3501      	adds	r5, #1
 80085fa:	e7c1      	b.n	8008580 <_dtoa_r+0xa70>
 80085fc:	9b06      	ldr	r3, [sp, #24]
 80085fe:	9a06      	ldr	r2, [sp, #24]
 8008600:	701d      	strb	r5, [r3, #0]
 8008602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008604:	4293      	cmp	r3, r2
 8008606:	d02a      	beq.n	800865e <_dtoa_r+0xb4e>
 8008608:	2300      	movs	r3, #0
 800860a:	220a      	movs	r2, #10
 800860c:	9905      	ldr	r1, [sp, #20]
 800860e:	9803      	ldr	r0, [sp, #12]
 8008610:	f000 f9e0 	bl	80089d4 <__multadd>
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	9005      	str	r0, [sp, #20]
 8008618:	42bb      	cmp	r3, r7
 800861a:	d109      	bne.n	8008630 <_dtoa_r+0xb20>
 800861c:	2300      	movs	r3, #0
 800861e:	220a      	movs	r2, #10
 8008620:	9904      	ldr	r1, [sp, #16]
 8008622:	9803      	ldr	r0, [sp, #12]
 8008624:	f000 f9d6 	bl	80089d4 <__multadd>
 8008628:	9004      	str	r0, [sp, #16]
 800862a:	0007      	movs	r7, r0
 800862c:	9406      	str	r4, [sp, #24]
 800862e:	e778      	b.n	8008522 <_dtoa_r+0xa12>
 8008630:	9904      	ldr	r1, [sp, #16]
 8008632:	2300      	movs	r3, #0
 8008634:	220a      	movs	r2, #10
 8008636:	9803      	ldr	r0, [sp, #12]
 8008638:	f000 f9cc 	bl	80089d4 <__multadd>
 800863c:	2300      	movs	r3, #0
 800863e:	9004      	str	r0, [sp, #16]
 8008640:	220a      	movs	r2, #10
 8008642:	0039      	movs	r1, r7
 8008644:	9803      	ldr	r0, [sp, #12]
 8008646:	f000 f9c5 	bl	80089d4 <__multadd>
 800864a:	e7ee      	b.n	800862a <_dtoa_r+0xb1a>
 800864c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800864e:	2401      	movs	r4, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd00      	ble.n	8008656 <_dtoa_r+0xb46>
 8008654:	001c      	movs	r4, r3
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	191c      	adds	r4, r3, r4
 800865a:	2300      	movs	r3, #0
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	9905      	ldr	r1, [sp, #20]
 8008660:	2201      	movs	r2, #1
 8008662:	9803      	ldr	r0, [sp, #12]
 8008664:	f000 fb70 	bl	8008d48 <__lshift>
 8008668:	0031      	movs	r1, r6
 800866a:	9005      	str	r0, [sp, #20]
 800866c:	f000 fbd8 	bl	8008e20 <__mcmp>
 8008670:	2800      	cmp	r0, #0
 8008672:	dcb3      	bgt.n	80085dc <_dtoa_r+0xacc>
 8008674:	d101      	bne.n	800867a <_dtoa_r+0xb6a>
 8008676:	07ed      	lsls	r5, r5, #31
 8008678:	d4b0      	bmi.n	80085dc <_dtoa_r+0xacc>
 800867a:	0023      	movs	r3, r4
 800867c:	001c      	movs	r4, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	2a30      	cmp	r2, #48	@ 0x30
 8008684:	d0fa      	beq.n	800867c <_dtoa_r+0xb6c>
 8008686:	e5b7      	b.n	80081f8 <_dtoa_r+0x6e8>
 8008688:	9a08      	ldr	r2, [sp, #32]
 800868a:	429a      	cmp	r2, r3
 800868c:	d1a7      	bne.n	80085de <_dtoa_r+0xace>
 800868e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008690:	3301      	adds	r3, #1
 8008692:	930c      	str	r3, [sp, #48]	@ 0x30
 8008694:	2331      	movs	r3, #49	@ 0x31
 8008696:	7013      	strb	r3, [r2, #0]
 8008698:	e5ae      	b.n	80081f8 <_dtoa_r+0x6e8>
 800869a:	4b15      	ldr	r3, [pc, #84]	@ (80086f0 <_dtoa_r+0xbe0>)
 800869c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800869e:	9308      	str	r3, [sp, #32]
 80086a0:	4b14      	ldr	r3, [pc, #80]	@ (80086f4 <_dtoa_r+0xbe4>)
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d001      	beq.n	80086aa <_dtoa_r+0xb9a>
 80086a6:	f7ff fa7b 	bl	8007ba0 <_dtoa_r+0x90>
 80086aa:	f7ff fa7b 	bl	8007ba4 <_dtoa_r+0x94>
 80086ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	dc00      	bgt.n	80086b6 <_dtoa_r+0xba6>
 80086b4:	e648      	b.n	8008348 <_dtoa_r+0x838>
 80086b6:	2001      	movs	r0, #1
 80086b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80086ba:	e665      	b.n	8008388 <_dtoa_r+0x878>
 80086bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc00      	bgt.n	80086c4 <_dtoa_r+0xbb4>
 80086c2:	e6d6      	b.n	8008472 <_dtoa_r+0x962>
 80086c4:	2400      	movs	r4, #0
 80086c6:	0031      	movs	r1, r6
 80086c8:	9805      	ldr	r0, [sp, #20]
 80086ca:	f7ff f993 	bl	80079f4 <quorem>
 80086ce:	9b08      	ldr	r3, [sp, #32]
 80086d0:	3030      	adds	r0, #48	@ 0x30
 80086d2:	5518      	strb	r0, [r3, r4]
 80086d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086d6:	3401      	adds	r4, #1
 80086d8:	0005      	movs	r5, r0
 80086da:	429c      	cmp	r4, r3
 80086dc:	dab6      	bge.n	800864c <_dtoa_r+0xb3c>
 80086de:	2300      	movs	r3, #0
 80086e0:	220a      	movs	r2, #10
 80086e2:	9905      	ldr	r1, [sp, #20]
 80086e4:	9803      	ldr	r0, [sp, #12]
 80086e6:	f000 f975 	bl	80089d4 <__multadd>
 80086ea:	9005      	str	r0, [sp, #20]
 80086ec:	e7eb      	b.n	80086c6 <_dtoa_r+0xbb6>
 80086ee:	46c0      	nop			@ (mov r8, r8)
 80086f0:	08009caf 	.word	0x08009caf
 80086f4:	08009cb7 	.word	0x08009cb7

080086f8 <_free_r>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	0005      	movs	r5, r0
 80086fc:	1e0c      	subs	r4, r1, #0
 80086fe:	d010      	beq.n	8008722 <_free_r+0x2a>
 8008700:	3c04      	subs	r4, #4
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	da00      	bge.n	800870a <_free_r+0x12>
 8008708:	18e4      	adds	r4, r4, r3
 800870a:	0028      	movs	r0, r5
 800870c:	f000 f8ea 	bl	80088e4 <__malloc_lock>
 8008710:	4a1d      	ldr	r2, [pc, #116]	@ (8008788 <_free_r+0x90>)
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d105      	bne.n	8008724 <_free_r+0x2c>
 8008718:	6063      	str	r3, [r4, #4]
 800871a:	6014      	str	r4, [r2, #0]
 800871c:	0028      	movs	r0, r5
 800871e:	f000 f8e9 	bl	80088f4 <__malloc_unlock>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	42a3      	cmp	r3, r4
 8008726:	d908      	bls.n	800873a <_free_r+0x42>
 8008728:	6820      	ldr	r0, [r4, #0]
 800872a:	1821      	adds	r1, r4, r0
 800872c:	428b      	cmp	r3, r1
 800872e:	d1f3      	bne.n	8008718 <_free_r+0x20>
 8008730:	6819      	ldr	r1, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	1809      	adds	r1, r1, r0
 8008736:	6021      	str	r1, [r4, #0]
 8008738:	e7ee      	b.n	8008718 <_free_r+0x20>
 800873a:	001a      	movs	r2, r3
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <_free_r+0x4e>
 8008742:	42a3      	cmp	r3, r4
 8008744:	d9f9      	bls.n	800873a <_free_r+0x42>
 8008746:	6811      	ldr	r1, [r2, #0]
 8008748:	1850      	adds	r0, r2, r1
 800874a:	42a0      	cmp	r0, r4
 800874c:	d10b      	bne.n	8008766 <_free_r+0x6e>
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	1809      	adds	r1, r1, r0
 8008752:	1850      	adds	r0, r2, r1
 8008754:	6011      	str	r1, [r2, #0]
 8008756:	4283      	cmp	r3, r0
 8008758:	d1e0      	bne.n	800871c <_free_r+0x24>
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	1841      	adds	r1, r0, r1
 8008760:	6011      	str	r1, [r2, #0]
 8008762:	6053      	str	r3, [r2, #4]
 8008764:	e7da      	b.n	800871c <_free_r+0x24>
 8008766:	42a0      	cmp	r0, r4
 8008768:	d902      	bls.n	8008770 <_free_r+0x78>
 800876a:	230c      	movs	r3, #12
 800876c:	602b      	str	r3, [r5, #0]
 800876e:	e7d5      	b.n	800871c <_free_r+0x24>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	1821      	adds	r1, r4, r0
 8008774:	428b      	cmp	r3, r1
 8008776:	d103      	bne.n	8008780 <_free_r+0x88>
 8008778:	6819      	ldr	r1, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	1809      	adds	r1, r1, r0
 800877e:	6021      	str	r1, [r4, #0]
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	6054      	str	r4, [r2, #4]
 8008784:	e7ca      	b.n	800871c <_free_r+0x24>
 8008786:	46c0      	nop			@ (mov r8, r8)
 8008788:	200005bc 	.word	0x200005bc

0800878c <malloc>:
 800878c:	b510      	push	{r4, lr}
 800878e:	4b03      	ldr	r3, [pc, #12]	@ (800879c <malloc+0x10>)
 8008790:	0001      	movs	r1, r0
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	f000 f826 	bl	80087e4 <_malloc_r>
 8008798:	bd10      	pop	{r4, pc}
 800879a:	46c0      	nop			@ (mov r8, r8)
 800879c:	20000020 	.word	0x20000020

080087a0 <sbrk_aligned>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	4e0f      	ldr	r6, [pc, #60]	@ (80087e0 <sbrk_aligned+0x40>)
 80087a4:	000d      	movs	r5, r1
 80087a6:	6831      	ldr	r1, [r6, #0]
 80087a8:	0004      	movs	r4, r0
 80087aa:	2900      	cmp	r1, #0
 80087ac:	d102      	bne.n	80087b4 <sbrk_aligned+0x14>
 80087ae:	f001 f853 	bl	8009858 <_sbrk_r>
 80087b2:	6030      	str	r0, [r6, #0]
 80087b4:	0029      	movs	r1, r5
 80087b6:	0020      	movs	r0, r4
 80087b8:	f001 f84e 	bl	8009858 <_sbrk_r>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d103      	bne.n	80087c8 <sbrk_aligned+0x28>
 80087c0:	2501      	movs	r5, #1
 80087c2:	426d      	negs	r5, r5
 80087c4:	0028      	movs	r0, r5
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	2303      	movs	r3, #3
 80087ca:	1cc5      	adds	r5, r0, #3
 80087cc:	439d      	bics	r5, r3
 80087ce:	42a8      	cmp	r0, r5
 80087d0:	d0f8      	beq.n	80087c4 <sbrk_aligned+0x24>
 80087d2:	1a29      	subs	r1, r5, r0
 80087d4:	0020      	movs	r0, r4
 80087d6:	f001 f83f 	bl	8009858 <_sbrk_r>
 80087da:	3001      	adds	r0, #1
 80087dc:	d1f2      	bne.n	80087c4 <sbrk_aligned+0x24>
 80087de:	e7ef      	b.n	80087c0 <sbrk_aligned+0x20>
 80087e0:	200005b8 	.word	0x200005b8

080087e4 <_malloc_r>:
 80087e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087e6:	2203      	movs	r2, #3
 80087e8:	1ccb      	adds	r3, r1, #3
 80087ea:	4393      	bics	r3, r2
 80087ec:	3308      	adds	r3, #8
 80087ee:	0005      	movs	r5, r0
 80087f0:	001f      	movs	r7, r3
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d234      	bcs.n	8008860 <_malloc_r+0x7c>
 80087f6:	270c      	movs	r7, #12
 80087f8:	42b9      	cmp	r1, r7
 80087fa:	d833      	bhi.n	8008864 <_malloc_r+0x80>
 80087fc:	0028      	movs	r0, r5
 80087fe:	f000 f871 	bl	80088e4 <__malloc_lock>
 8008802:	4e37      	ldr	r6, [pc, #220]	@ (80088e0 <_malloc_r+0xfc>)
 8008804:	6833      	ldr	r3, [r6, #0]
 8008806:	001c      	movs	r4, r3
 8008808:	2c00      	cmp	r4, #0
 800880a:	d12f      	bne.n	800886c <_malloc_r+0x88>
 800880c:	0039      	movs	r1, r7
 800880e:	0028      	movs	r0, r5
 8008810:	f7ff ffc6 	bl	80087a0 <sbrk_aligned>
 8008814:	0004      	movs	r4, r0
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	d15f      	bne.n	80088da <_malloc_r+0xf6>
 800881a:	6834      	ldr	r4, [r6, #0]
 800881c:	9400      	str	r4, [sp, #0]
 800881e:	9b00      	ldr	r3, [sp, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d14a      	bne.n	80088ba <_malloc_r+0xd6>
 8008824:	2c00      	cmp	r4, #0
 8008826:	d052      	beq.n	80088ce <_malloc_r+0xea>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	0028      	movs	r0, r5
 800882c:	18e3      	adds	r3, r4, r3
 800882e:	9900      	ldr	r1, [sp, #0]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f001 f811 	bl	8009858 <_sbrk_r>
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	4283      	cmp	r3, r0
 800883a:	d148      	bne.n	80088ce <_malloc_r+0xea>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	0028      	movs	r0, r5
 8008840:	1aff      	subs	r7, r7, r3
 8008842:	0039      	movs	r1, r7
 8008844:	f7ff ffac 	bl	80087a0 <sbrk_aligned>
 8008848:	3001      	adds	r0, #1
 800884a:	d040      	beq.n	80088ce <_malloc_r+0xea>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	19db      	adds	r3, r3, r7
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	6833      	ldr	r3, [r6, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	2a00      	cmp	r2, #0
 8008858:	d133      	bne.n	80088c2 <_malloc_r+0xde>
 800885a:	9b00      	ldr	r3, [sp, #0]
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	e019      	b.n	8008894 <_malloc_r+0xb0>
 8008860:	2b00      	cmp	r3, #0
 8008862:	dac9      	bge.n	80087f8 <_malloc_r+0x14>
 8008864:	230c      	movs	r3, #12
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	2000      	movs	r0, #0
 800886a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800886c:	6821      	ldr	r1, [r4, #0]
 800886e:	1bc9      	subs	r1, r1, r7
 8008870:	d420      	bmi.n	80088b4 <_malloc_r+0xd0>
 8008872:	290b      	cmp	r1, #11
 8008874:	d90a      	bls.n	800888c <_malloc_r+0xa8>
 8008876:	19e2      	adds	r2, r4, r7
 8008878:	6027      	str	r7, [r4, #0]
 800887a:	42a3      	cmp	r3, r4
 800887c:	d104      	bne.n	8008888 <_malloc_r+0xa4>
 800887e:	6032      	str	r2, [r6, #0]
 8008880:	6863      	ldr	r3, [r4, #4]
 8008882:	6011      	str	r1, [r2, #0]
 8008884:	6053      	str	r3, [r2, #4]
 8008886:	e005      	b.n	8008894 <_malloc_r+0xb0>
 8008888:	605a      	str	r2, [r3, #4]
 800888a:	e7f9      	b.n	8008880 <_malloc_r+0x9c>
 800888c:	6862      	ldr	r2, [r4, #4]
 800888e:	42a3      	cmp	r3, r4
 8008890:	d10e      	bne.n	80088b0 <_malloc_r+0xcc>
 8008892:	6032      	str	r2, [r6, #0]
 8008894:	0028      	movs	r0, r5
 8008896:	f000 f82d 	bl	80088f4 <__malloc_unlock>
 800889a:	0020      	movs	r0, r4
 800889c:	2207      	movs	r2, #7
 800889e:	300b      	adds	r0, #11
 80088a0:	1d23      	adds	r3, r4, #4
 80088a2:	4390      	bics	r0, r2
 80088a4:	1ac2      	subs	r2, r0, r3
 80088a6:	4298      	cmp	r0, r3
 80088a8:	d0df      	beq.n	800886a <_malloc_r+0x86>
 80088aa:	1a1b      	subs	r3, r3, r0
 80088ac:	50a3      	str	r3, [r4, r2]
 80088ae:	e7dc      	b.n	800886a <_malloc_r+0x86>
 80088b0:	605a      	str	r2, [r3, #4]
 80088b2:	e7ef      	b.n	8008894 <_malloc_r+0xb0>
 80088b4:	0023      	movs	r3, r4
 80088b6:	6864      	ldr	r4, [r4, #4]
 80088b8:	e7a6      	b.n	8008808 <_malloc_r+0x24>
 80088ba:	9c00      	ldr	r4, [sp, #0]
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	e7ad      	b.n	800881e <_malloc_r+0x3a>
 80088c2:	001a      	movs	r2, r3
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	d1fb      	bne.n	80088c2 <_malloc_r+0xde>
 80088ca:	2300      	movs	r3, #0
 80088cc:	e7da      	b.n	8008884 <_malloc_r+0xa0>
 80088ce:	230c      	movs	r3, #12
 80088d0:	0028      	movs	r0, r5
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f000 f80e 	bl	80088f4 <__malloc_unlock>
 80088d8:	e7c6      	b.n	8008868 <_malloc_r+0x84>
 80088da:	6007      	str	r7, [r0, #0]
 80088dc:	e7da      	b.n	8008894 <_malloc_r+0xb0>
 80088de:	46c0      	nop			@ (mov r8, r8)
 80088e0:	200005bc 	.word	0x200005bc

080088e4 <__malloc_lock>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4802      	ldr	r0, [pc, #8]	@ (80088f0 <__malloc_lock+0xc>)
 80088e8:	f7ff f859 	bl	800799e <__retarget_lock_acquire_recursive>
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	200005b4 	.word	0x200005b4

080088f4 <__malloc_unlock>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	4802      	ldr	r0, [pc, #8]	@ (8008900 <__malloc_unlock+0xc>)
 80088f8:	f7ff f852 	bl	80079a0 <__retarget_lock_release_recursive>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	46c0      	nop			@ (mov r8, r8)
 8008900:	200005b4 	.word	0x200005b4

08008904 <_Balloc>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	69c5      	ldr	r5, [r0, #28]
 8008908:	0006      	movs	r6, r0
 800890a:	000c      	movs	r4, r1
 800890c:	2d00      	cmp	r5, #0
 800890e:	d10e      	bne.n	800892e <_Balloc+0x2a>
 8008910:	2010      	movs	r0, #16
 8008912:	f7ff ff3b 	bl	800878c <malloc>
 8008916:	1e02      	subs	r2, r0, #0
 8008918:	61f0      	str	r0, [r6, #28]
 800891a:	d104      	bne.n	8008926 <_Balloc+0x22>
 800891c:	216b      	movs	r1, #107	@ 0x6b
 800891e:	4b19      	ldr	r3, [pc, #100]	@ (8008984 <_Balloc+0x80>)
 8008920:	4819      	ldr	r0, [pc, #100]	@ (8008988 <_Balloc+0x84>)
 8008922:	f7ff f849 	bl	80079b8 <__assert_func>
 8008926:	6045      	str	r5, [r0, #4]
 8008928:	6085      	str	r5, [r0, #8]
 800892a:	6005      	str	r5, [r0, #0]
 800892c:	60c5      	str	r5, [r0, #12]
 800892e:	69f5      	ldr	r5, [r6, #28]
 8008930:	68eb      	ldr	r3, [r5, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d013      	beq.n	800895e <_Balloc+0x5a>
 8008936:	69f3      	ldr	r3, [r6, #28]
 8008938:	00a2      	lsls	r2, r4, #2
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	189b      	adds	r3, r3, r2
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	2800      	cmp	r0, #0
 8008942:	d118      	bne.n	8008976 <_Balloc+0x72>
 8008944:	2101      	movs	r1, #1
 8008946:	000d      	movs	r5, r1
 8008948:	40a5      	lsls	r5, r4
 800894a:	1d6a      	adds	r2, r5, #5
 800894c:	0030      	movs	r0, r6
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	f000 ffa4 	bl	800989c <_calloc_r>
 8008954:	2800      	cmp	r0, #0
 8008956:	d00c      	beq.n	8008972 <_Balloc+0x6e>
 8008958:	6044      	str	r4, [r0, #4]
 800895a:	6085      	str	r5, [r0, #8]
 800895c:	e00d      	b.n	800897a <_Balloc+0x76>
 800895e:	2221      	movs	r2, #33	@ 0x21
 8008960:	2104      	movs	r1, #4
 8008962:	0030      	movs	r0, r6
 8008964:	f000 ff9a 	bl	800989c <_calloc_r>
 8008968:	69f3      	ldr	r3, [r6, #28]
 800896a:	60e8      	str	r0, [r5, #12]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e1      	bne.n	8008936 <_Balloc+0x32>
 8008972:	2000      	movs	r0, #0
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	6802      	ldr	r2, [r0, #0]
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	6103      	str	r3, [r0, #16]
 800897e:	60c3      	str	r3, [r0, #12]
 8008980:	e7f8      	b.n	8008974 <_Balloc+0x70>
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	08009bd0 	.word	0x08009bd0
 8008988:	08009d25 	.word	0x08009d25

0800898c <_Bfree>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	69c6      	ldr	r6, [r0, #28]
 8008990:	0005      	movs	r5, r0
 8008992:	000c      	movs	r4, r1
 8008994:	2e00      	cmp	r6, #0
 8008996:	d10e      	bne.n	80089b6 <_Bfree+0x2a>
 8008998:	2010      	movs	r0, #16
 800899a:	f7ff fef7 	bl	800878c <malloc>
 800899e:	1e02      	subs	r2, r0, #0
 80089a0:	61e8      	str	r0, [r5, #28]
 80089a2:	d104      	bne.n	80089ae <_Bfree+0x22>
 80089a4:	218f      	movs	r1, #143	@ 0x8f
 80089a6:	4b09      	ldr	r3, [pc, #36]	@ (80089cc <_Bfree+0x40>)
 80089a8:	4809      	ldr	r0, [pc, #36]	@ (80089d0 <_Bfree+0x44>)
 80089aa:	f7ff f805 	bl	80079b8 <__assert_func>
 80089ae:	6046      	str	r6, [r0, #4]
 80089b0:	6086      	str	r6, [r0, #8]
 80089b2:	6006      	str	r6, [r0, #0]
 80089b4:	60c6      	str	r6, [r0, #12]
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	d007      	beq.n	80089ca <_Bfree+0x3e>
 80089ba:	69eb      	ldr	r3, [r5, #28]
 80089bc:	6862      	ldr	r2, [r4, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	189b      	adds	r3, r3, r2
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	601c      	str	r4, [r3, #0]
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	08009bd0 	.word	0x08009bd0
 80089d0:	08009d25 	.word	0x08009d25

080089d4 <__multadd>:
 80089d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d6:	000f      	movs	r7, r1
 80089d8:	9001      	str	r0, [sp, #4]
 80089da:	000c      	movs	r4, r1
 80089dc:	001e      	movs	r6, r3
 80089de:	2000      	movs	r0, #0
 80089e0:	690d      	ldr	r5, [r1, #16]
 80089e2:	3714      	adds	r7, #20
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	3001      	adds	r0, #1
 80089e8:	b299      	uxth	r1, r3
 80089ea:	4351      	muls	r1, r2
 80089ec:	0c1b      	lsrs	r3, r3, #16
 80089ee:	4353      	muls	r3, r2
 80089f0:	1989      	adds	r1, r1, r6
 80089f2:	0c0e      	lsrs	r6, r1, #16
 80089f4:	199b      	adds	r3, r3, r6
 80089f6:	0c1e      	lsrs	r6, r3, #16
 80089f8:	b289      	uxth	r1, r1
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	185b      	adds	r3, r3, r1
 80089fe:	c708      	stmia	r7!, {r3}
 8008a00:	4285      	cmp	r5, r0
 8008a02:	dcef      	bgt.n	80089e4 <__multadd+0x10>
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	d022      	beq.n	8008a4e <__multadd+0x7a>
 8008a08:	68a3      	ldr	r3, [r4, #8]
 8008a0a:	42ab      	cmp	r3, r5
 8008a0c:	dc19      	bgt.n	8008a42 <__multadd+0x6e>
 8008a0e:	6861      	ldr	r1, [r4, #4]
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	3101      	adds	r1, #1
 8008a14:	f7ff ff76 	bl	8008904 <_Balloc>
 8008a18:	1e07      	subs	r7, r0, #0
 8008a1a:	d105      	bne.n	8008a28 <__multadd+0x54>
 8008a1c:	003a      	movs	r2, r7
 8008a1e:	21ba      	movs	r1, #186	@ 0xba
 8008a20:	4b0c      	ldr	r3, [pc, #48]	@ (8008a54 <__multadd+0x80>)
 8008a22:	480d      	ldr	r0, [pc, #52]	@ (8008a58 <__multadd+0x84>)
 8008a24:	f7fe ffc8 	bl	80079b8 <__assert_func>
 8008a28:	0021      	movs	r1, r4
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	310c      	adds	r1, #12
 8008a2e:	3202      	adds	r2, #2
 8008a30:	0092      	lsls	r2, r2, #2
 8008a32:	300c      	adds	r0, #12
 8008a34:	f000 ff22 	bl	800987c <memcpy>
 8008a38:	0021      	movs	r1, r4
 8008a3a:	9801      	ldr	r0, [sp, #4]
 8008a3c:	f7ff ffa6 	bl	800898c <_Bfree>
 8008a40:	003c      	movs	r4, r7
 8008a42:	1d2b      	adds	r3, r5, #4
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	18e3      	adds	r3, r4, r3
 8008a48:	3501      	adds	r5, #1
 8008a4a:	605e      	str	r6, [r3, #4]
 8008a4c:	6125      	str	r5, [r4, #16]
 8008a4e:	0020      	movs	r0, r4
 8008a50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a52:	46c0      	nop			@ (mov r8, r8)
 8008a54:	08009d14 	.word	0x08009d14
 8008a58:	08009d25 	.word	0x08009d25

08008a5c <__hi0bits>:
 8008a5c:	2280      	movs	r2, #128	@ 0x80
 8008a5e:	0003      	movs	r3, r0
 8008a60:	0252      	lsls	r2, r2, #9
 8008a62:	2000      	movs	r0, #0
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d201      	bcs.n	8008a6c <__hi0bits+0x10>
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	3010      	adds	r0, #16
 8008a6c:	2280      	movs	r2, #128	@ 0x80
 8008a6e:	0452      	lsls	r2, r2, #17
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d201      	bcs.n	8008a78 <__hi0bits+0x1c>
 8008a74:	3008      	adds	r0, #8
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	2280      	movs	r2, #128	@ 0x80
 8008a7a:	0552      	lsls	r2, r2, #21
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d201      	bcs.n	8008a84 <__hi0bits+0x28>
 8008a80:	3004      	adds	r0, #4
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	2280      	movs	r2, #128	@ 0x80
 8008a86:	05d2      	lsls	r2, r2, #23
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d201      	bcs.n	8008a90 <__hi0bits+0x34>
 8008a8c:	3002      	adds	r0, #2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	db03      	blt.n	8008a9c <__hi0bits+0x40>
 8008a94:	3001      	adds	r0, #1
 8008a96:	4213      	tst	r3, r2
 8008a98:	d100      	bne.n	8008a9c <__hi0bits+0x40>
 8008a9a:	2020      	movs	r0, #32
 8008a9c:	4770      	bx	lr

08008a9e <__lo0bits>:
 8008a9e:	6803      	ldr	r3, [r0, #0]
 8008aa0:	0001      	movs	r1, r0
 8008aa2:	2207      	movs	r2, #7
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	4010      	ands	r0, r2
 8008aa8:	4213      	tst	r3, r2
 8008aaa:	d00d      	beq.n	8008ac8 <__lo0bits+0x2a>
 8008aac:	3a06      	subs	r2, #6
 8008aae:	2000      	movs	r0, #0
 8008ab0:	4213      	tst	r3, r2
 8008ab2:	d105      	bne.n	8008ac0 <__lo0bits+0x22>
 8008ab4:	3002      	adds	r0, #2
 8008ab6:	4203      	tst	r3, r0
 8008ab8:	d003      	beq.n	8008ac2 <__lo0bits+0x24>
 8008aba:	40d3      	lsrs	r3, r2
 8008abc:	0010      	movs	r0, r2
 8008abe:	600b      	str	r3, [r1, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	600b      	str	r3, [r1, #0]
 8008ac6:	e7fb      	b.n	8008ac0 <__lo0bits+0x22>
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	d101      	bne.n	8008ad2 <__lo0bits+0x34>
 8008ace:	2010      	movs	r0, #16
 8008ad0:	0c1b      	lsrs	r3, r3, #16
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	d101      	bne.n	8008adc <__lo0bits+0x3e>
 8008ad8:	3008      	adds	r0, #8
 8008ada:	0a1b      	lsrs	r3, r3, #8
 8008adc:	071a      	lsls	r2, r3, #28
 8008ade:	d101      	bne.n	8008ae4 <__lo0bits+0x46>
 8008ae0:	3004      	adds	r0, #4
 8008ae2:	091b      	lsrs	r3, r3, #4
 8008ae4:	079a      	lsls	r2, r3, #30
 8008ae6:	d101      	bne.n	8008aec <__lo0bits+0x4e>
 8008ae8:	3002      	adds	r0, #2
 8008aea:	089b      	lsrs	r3, r3, #2
 8008aec:	07da      	lsls	r2, r3, #31
 8008aee:	d4e9      	bmi.n	8008ac4 <__lo0bits+0x26>
 8008af0:	3001      	adds	r0, #1
 8008af2:	085b      	lsrs	r3, r3, #1
 8008af4:	d1e6      	bne.n	8008ac4 <__lo0bits+0x26>
 8008af6:	2020      	movs	r0, #32
 8008af8:	e7e2      	b.n	8008ac0 <__lo0bits+0x22>
	...

08008afc <__i2b>:
 8008afc:	b510      	push	{r4, lr}
 8008afe:	000c      	movs	r4, r1
 8008b00:	2101      	movs	r1, #1
 8008b02:	f7ff feff 	bl	8008904 <_Balloc>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d107      	bne.n	8008b1a <__i2b+0x1e>
 8008b0a:	2146      	movs	r1, #70	@ 0x46
 8008b0c:	4c05      	ldr	r4, [pc, #20]	@ (8008b24 <__i2b+0x28>)
 8008b0e:	0002      	movs	r2, r0
 8008b10:	4b05      	ldr	r3, [pc, #20]	@ (8008b28 <__i2b+0x2c>)
 8008b12:	0020      	movs	r0, r4
 8008b14:	31ff      	adds	r1, #255	@ 0xff
 8008b16:	f7fe ff4f 	bl	80079b8 <__assert_func>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	6144      	str	r4, [r0, #20]
 8008b1e:	6103      	str	r3, [r0, #16]
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	46c0      	nop			@ (mov r8, r8)
 8008b24:	08009d25 	.word	0x08009d25
 8008b28:	08009d14 	.word	0x08009d14

08008b2c <__multiply>:
 8008b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b2e:	0014      	movs	r4, r2
 8008b30:	690a      	ldr	r2, [r1, #16]
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	000d      	movs	r5, r1
 8008b36:	b08b      	sub	sp, #44	@ 0x2c
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	db02      	blt.n	8008b42 <__multiply+0x16>
 8008b3c:	0023      	movs	r3, r4
 8008b3e:	000c      	movs	r4, r1
 8008b40:	001d      	movs	r5, r3
 8008b42:	6927      	ldr	r7, [r4, #16]
 8008b44:	692e      	ldr	r6, [r5, #16]
 8008b46:	6861      	ldr	r1, [r4, #4]
 8008b48:	19bb      	adds	r3, r7, r6
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	68a3      	ldr	r3, [r4, #8]
 8008b4e:	19ba      	adds	r2, r7, r6
 8008b50:	4293      	cmp	r3, r2
 8008b52:	da00      	bge.n	8008b56 <__multiply+0x2a>
 8008b54:	3101      	adds	r1, #1
 8008b56:	f7ff fed5 	bl	8008904 <_Balloc>
 8008b5a:	9002      	str	r0, [sp, #8]
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d106      	bne.n	8008b6e <__multiply+0x42>
 8008b60:	21b1      	movs	r1, #177	@ 0xb1
 8008b62:	4b49      	ldr	r3, [pc, #292]	@ (8008c88 <__multiply+0x15c>)
 8008b64:	4849      	ldr	r0, [pc, #292]	@ (8008c8c <__multiply+0x160>)
 8008b66:	9a02      	ldr	r2, [sp, #8]
 8008b68:	0049      	lsls	r1, r1, #1
 8008b6a:	f7fe ff25 	bl	80079b8 <__assert_func>
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	3314      	adds	r3, #20
 8008b74:	469c      	mov	ip, r3
 8008b76:	19bb      	adds	r3, r7, r6
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4463      	add	r3, ip
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	4663      	mov	r3, ip
 8008b80:	9904      	ldr	r1, [sp, #16]
 8008b82:	428b      	cmp	r3, r1
 8008b84:	d32a      	bcc.n	8008bdc <__multiply+0xb0>
 8008b86:	0023      	movs	r3, r4
 8008b88:	00bf      	lsls	r7, r7, #2
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	3514      	adds	r5, #20
 8008b8e:	9308      	str	r3, [sp, #32]
 8008b90:	00b6      	lsls	r6, r6, #2
 8008b92:	19db      	adds	r3, r3, r7
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	19ab      	adds	r3, r5, r6
 8008b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	9306      	str	r3, [sp, #24]
 8008b9e:	0023      	movs	r3, r4
 8008ba0:	9a05      	ldr	r2, [sp, #20]
 8008ba2:	3315      	adds	r3, #21
 8008ba4:	9501      	str	r5, [sp, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d305      	bcc.n	8008bb6 <__multiply+0x8a>
 8008baa:	1b13      	subs	r3, r2, r4
 8008bac:	3b15      	subs	r3, #21
 8008bae:	089b      	lsrs	r3, r3, #2
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	9306      	str	r3, [sp, #24]
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d310      	bcc.n	8008be0 <__multiply+0xb4>
 8008bbe:	9b03      	ldr	r3, [sp, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	dd05      	ble.n	8008bd0 <__multiply+0xa4>
 8008bc4:	9b04      	ldr	r3, [sp, #16]
 8008bc6:	3b04      	subs	r3, #4
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d056      	beq.n	8008c7e <__multiply+0x152>
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	9a03      	ldr	r2, [sp, #12]
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	611a      	str	r2, [r3, #16]
 8008bd8:	b00b      	add	sp, #44	@ 0x2c
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bdc:	c304      	stmia	r3!, {r2}
 8008bde:	e7cf      	b.n	8008b80 <__multiply+0x54>
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	b280      	uxth	r0, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d01e      	beq.n	8008c28 <__multiply+0xfc>
 8008bea:	4667      	mov	r7, ip
 8008bec:	2500      	movs	r5, #0
 8008bee:	9e08      	ldr	r6, [sp, #32]
 8008bf0:	ce02      	ldmia	r6!, {r1}
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	b28b      	uxth	r3, r1
 8008bf8:	4343      	muls	r3, r0
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	466b      	mov	r3, sp
 8008bfe:	0c09      	lsrs	r1, r1, #16
 8008c00:	8b9b      	ldrh	r3, [r3, #28]
 8008c02:	4341      	muls	r1, r0
 8008c04:	18d3      	adds	r3, r2, r3
 8008c06:	9a07      	ldr	r2, [sp, #28]
 8008c08:	195b      	adds	r3, r3, r5
 8008c0a:	0c12      	lsrs	r2, r2, #16
 8008c0c:	1889      	adds	r1, r1, r2
 8008c0e:	0c1a      	lsrs	r2, r3, #16
 8008c10:	188a      	adds	r2, r1, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	0c15      	lsrs	r5, r2, #16
 8008c16:	0412      	lsls	r2, r2, #16
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	9b05      	ldr	r3, [sp, #20]
 8008c1c:	c704      	stmia	r7!, {r2}
 8008c1e:	42b3      	cmp	r3, r6
 8008c20:	d8e6      	bhi.n	8008bf0 <__multiply+0xc4>
 8008c22:	4663      	mov	r3, ip
 8008c24:	9a06      	ldr	r2, [sp, #24]
 8008c26:	509d      	str	r5, [r3, r2]
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	0c00      	lsrs	r0, r0, #16
 8008c2e:	d020      	beq.n	8008c72 <__multiply+0x146>
 8008c30:	4663      	mov	r3, ip
 8008c32:	0025      	movs	r5, r4
 8008c34:	4661      	mov	r1, ip
 8008c36:	2700      	movs	r7, #0
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3514      	adds	r5, #20
 8008c3c:	682a      	ldr	r2, [r5, #0]
 8008c3e:	680e      	ldr	r6, [r1, #0]
 8008c40:	b292      	uxth	r2, r2
 8008c42:	4342      	muls	r2, r0
 8008c44:	0c36      	lsrs	r6, r6, #16
 8008c46:	1992      	adds	r2, r2, r6
 8008c48:	19d2      	adds	r2, r2, r7
 8008c4a:	0416      	lsls	r6, r2, #16
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	431e      	orrs	r6, r3
 8008c50:	600e      	str	r6, [r1, #0]
 8008c52:	cd40      	ldmia	r5!, {r6}
 8008c54:	684b      	ldr	r3, [r1, #4]
 8008c56:	0c36      	lsrs	r6, r6, #16
 8008c58:	4346      	muls	r6, r0
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	0c12      	lsrs	r2, r2, #16
 8008c5e:	18f3      	adds	r3, r6, r3
 8008c60:	189b      	adds	r3, r3, r2
 8008c62:	9a05      	ldr	r2, [sp, #20]
 8008c64:	0c1f      	lsrs	r7, r3, #16
 8008c66:	3104      	adds	r1, #4
 8008c68:	42aa      	cmp	r2, r5
 8008c6a:	d8e7      	bhi.n	8008c3c <__multiply+0x110>
 8008c6c:	4662      	mov	r2, ip
 8008c6e:	9906      	ldr	r1, [sp, #24]
 8008c70:	5053      	str	r3, [r2, r1]
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	3304      	adds	r3, #4
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	2304      	movs	r3, #4
 8008c7a:	449c      	add	ip, r3
 8008c7c:	e79b      	b.n	8008bb6 <__multiply+0x8a>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	9303      	str	r3, [sp, #12]
 8008c84:	e79b      	b.n	8008bbe <__multiply+0x92>
 8008c86:	46c0      	nop			@ (mov r8, r8)
 8008c88:	08009d14 	.word	0x08009d14
 8008c8c:	08009d25 	.word	0x08009d25

08008c90 <__pow5mult>:
 8008c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c92:	2303      	movs	r3, #3
 8008c94:	0015      	movs	r5, r2
 8008c96:	0007      	movs	r7, r0
 8008c98:	000e      	movs	r6, r1
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	421d      	tst	r5, r3
 8008c9e:	d008      	beq.n	8008cb2 <__pow5mult+0x22>
 8008ca0:	4925      	ldr	r1, [pc, #148]	@ (8008d38 <__pow5mult+0xa8>)
 8008ca2:	3a01      	subs	r2, #1
 8008ca4:	0092      	lsls	r2, r2, #2
 8008ca6:	5852      	ldr	r2, [r2, r1]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	0031      	movs	r1, r6
 8008cac:	f7ff fe92 	bl	80089d4 <__multadd>
 8008cb0:	0006      	movs	r6, r0
 8008cb2:	10ad      	asrs	r5, r5, #2
 8008cb4:	d03d      	beq.n	8008d32 <__pow5mult+0xa2>
 8008cb6:	69fc      	ldr	r4, [r7, #28]
 8008cb8:	2c00      	cmp	r4, #0
 8008cba:	d10f      	bne.n	8008cdc <__pow5mult+0x4c>
 8008cbc:	2010      	movs	r0, #16
 8008cbe:	f7ff fd65 	bl	800878c <malloc>
 8008cc2:	1e02      	subs	r2, r0, #0
 8008cc4:	61f8      	str	r0, [r7, #28]
 8008cc6:	d105      	bne.n	8008cd4 <__pow5mult+0x44>
 8008cc8:	21b4      	movs	r1, #180	@ 0xb4
 8008cca:	4b1c      	ldr	r3, [pc, #112]	@ (8008d3c <__pow5mult+0xac>)
 8008ccc:	481c      	ldr	r0, [pc, #112]	@ (8008d40 <__pow5mult+0xb0>)
 8008cce:	31ff      	adds	r1, #255	@ 0xff
 8008cd0:	f7fe fe72 	bl	80079b8 <__assert_func>
 8008cd4:	6044      	str	r4, [r0, #4]
 8008cd6:	6084      	str	r4, [r0, #8]
 8008cd8:	6004      	str	r4, [r0, #0]
 8008cda:	60c4      	str	r4, [r0, #12]
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	689c      	ldr	r4, [r3, #8]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	2c00      	cmp	r4, #0
 8008ce4:	d108      	bne.n	8008cf8 <__pow5mult+0x68>
 8008ce6:	0038      	movs	r0, r7
 8008ce8:	4916      	ldr	r1, [pc, #88]	@ (8008d44 <__pow5mult+0xb4>)
 8008cea:	f7ff ff07 	bl	8008afc <__i2b>
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	0004      	movs	r4, r0
 8008cf2:	6098      	str	r0, [r3, #8]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6003      	str	r3, [r0, #0]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	421d      	tst	r5, r3
 8008cfc:	d00a      	beq.n	8008d14 <__pow5mult+0x84>
 8008cfe:	0031      	movs	r1, r6
 8008d00:	0022      	movs	r2, r4
 8008d02:	0038      	movs	r0, r7
 8008d04:	f7ff ff12 	bl	8008b2c <__multiply>
 8008d08:	0031      	movs	r1, r6
 8008d0a:	9001      	str	r0, [sp, #4]
 8008d0c:	0038      	movs	r0, r7
 8008d0e:	f7ff fe3d 	bl	800898c <_Bfree>
 8008d12:	9e01      	ldr	r6, [sp, #4]
 8008d14:	106d      	asrs	r5, r5, #1
 8008d16:	d00c      	beq.n	8008d32 <__pow5mult+0xa2>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d107      	bne.n	8008d2e <__pow5mult+0x9e>
 8008d1e:	0022      	movs	r2, r4
 8008d20:	0021      	movs	r1, r4
 8008d22:	0038      	movs	r0, r7
 8008d24:	f7ff ff02 	bl	8008b2c <__multiply>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6020      	str	r0, [r4, #0]
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	0004      	movs	r4, r0
 8008d30:	e7e2      	b.n	8008cf8 <__pow5mult+0x68>
 8008d32:	0030      	movs	r0, r6
 8008d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d36:	46c0      	nop			@ (mov r8, r8)
 8008d38:	08009d80 	.word	0x08009d80
 8008d3c:	08009bd0 	.word	0x08009bd0
 8008d40:	08009d25 	.word	0x08009d25
 8008d44:	00000271 	.word	0x00000271

08008d48 <__lshift>:
 8008d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4a:	000c      	movs	r4, r1
 8008d4c:	0016      	movs	r6, r2
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	1157      	asrs	r7, r2, #5
 8008d52:	b085      	sub	sp, #20
 8008d54:	18fb      	adds	r3, r7, r3
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	6849      	ldr	r1, [r1, #4]
 8008d5e:	68a3      	ldr	r3, [r4, #8]
 8008d60:	9002      	str	r0, [sp, #8]
 8008d62:	9a00      	ldr	r2, [sp, #0]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	db10      	blt.n	8008d8a <__lshift+0x42>
 8008d68:	9802      	ldr	r0, [sp, #8]
 8008d6a:	f7ff fdcb 	bl	8008904 <_Balloc>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	0001      	movs	r1, r0
 8008d72:	0005      	movs	r5, r0
 8008d74:	001a      	movs	r2, r3
 8008d76:	3114      	adds	r1, #20
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	d10c      	bne.n	8008d96 <__lshift+0x4e>
 8008d7c:	21ef      	movs	r1, #239	@ 0xef
 8008d7e:	002a      	movs	r2, r5
 8008d80:	4b25      	ldr	r3, [pc, #148]	@ (8008e18 <__lshift+0xd0>)
 8008d82:	4826      	ldr	r0, [pc, #152]	@ (8008e1c <__lshift+0xd4>)
 8008d84:	0049      	lsls	r1, r1, #1
 8008d86:	f7fe fe17 	bl	80079b8 <__assert_func>
 8008d8a:	3101      	adds	r1, #1
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	e7e8      	b.n	8008d62 <__lshift+0x1a>
 8008d90:	0098      	lsls	r0, r3, #2
 8008d92:	500a      	str	r2, [r1, r0]
 8008d94:	3301      	adds	r3, #1
 8008d96:	42bb      	cmp	r3, r7
 8008d98:	dbfa      	blt.n	8008d90 <__lshift+0x48>
 8008d9a:	43fb      	mvns	r3, r7
 8008d9c:	17db      	asrs	r3, r3, #31
 8008d9e:	401f      	ands	r7, r3
 8008da0:	00bf      	lsls	r7, r7, #2
 8008da2:	0023      	movs	r3, r4
 8008da4:	201f      	movs	r0, #31
 8008da6:	19c9      	adds	r1, r1, r7
 8008da8:	0037      	movs	r7, r6
 8008daa:	6922      	ldr	r2, [r4, #16]
 8008dac:	3314      	adds	r3, #20
 8008dae:	0092      	lsls	r2, r2, #2
 8008db0:	189a      	adds	r2, r3, r2
 8008db2:	4007      	ands	r7, r0
 8008db4:	4206      	tst	r6, r0
 8008db6:	d029      	beq.n	8008e0c <__lshift+0xc4>
 8008db8:	3001      	adds	r0, #1
 8008dba:	1bc0      	subs	r0, r0, r7
 8008dbc:	9003      	str	r0, [sp, #12]
 8008dbe:	468c      	mov	ip, r1
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	681e      	ldr	r6, [r3, #0]
 8008dc4:	40be      	lsls	r6, r7
 8008dc6:	4306      	orrs	r6, r0
 8008dc8:	4660      	mov	r0, ip
 8008dca:	c040      	stmia	r0!, {r6}
 8008dcc:	4684      	mov	ip, r0
 8008dce:	9e03      	ldr	r6, [sp, #12]
 8008dd0:	cb01      	ldmia	r3!, {r0}
 8008dd2:	40f0      	lsrs	r0, r6
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d8f4      	bhi.n	8008dc2 <__lshift+0x7a>
 8008dd8:	0026      	movs	r6, r4
 8008dda:	3615      	adds	r6, #21
 8008ddc:	2304      	movs	r3, #4
 8008dde:	42b2      	cmp	r2, r6
 8008de0:	d304      	bcc.n	8008dec <__lshift+0xa4>
 8008de2:	1b13      	subs	r3, r2, r4
 8008de4:	3b15      	subs	r3, #21
 8008de6:	089b      	lsrs	r3, r3, #2
 8008de8:	3301      	adds	r3, #1
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	50c8      	str	r0, [r1, r3]
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d002      	beq.n	8008df8 <__lshift+0xb0>
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	3302      	adds	r3, #2
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	9b00      	ldr	r3, [sp, #0]
 8008dfa:	9802      	ldr	r0, [sp, #8]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	0021      	movs	r1, r4
 8008e00:	612b      	str	r3, [r5, #16]
 8008e02:	f7ff fdc3 	bl	800898c <_Bfree>
 8008e06:	0028      	movs	r0, r5
 8008e08:	b005      	add	sp, #20
 8008e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e0c:	cb01      	ldmia	r3!, {r0}
 8008e0e:	c101      	stmia	r1!, {r0}
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d8fb      	bhi.n	8008e0c <__lshift+0xc4>
 8008e14:	e7f0      	b.n	8008df8 <__lshift+0xb0>
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	08009d14 	.word	0x08009d14
 8008e1c:	08009d25 	.word	0x08009d25

08008e20 <__mcmp>:
 8008e20:	b530      	push	{r4, r5, lr}
 8008e22:	690b      	ldr	r3, [r1, #16]
 8008e24:	6904      	ldr	r4, [r0, #16]
 8008e26:	0002      	movs	r2, r0
 8008e28:	1ae0      	subs	r0, r4, r3
 8008e2a:	429c      	cmp	r4, r3
 8008e2c:	d10f      	bne.n	8008e4e <__mcmp+0x2e>
 8008e2e:	3214      	adds	r2, #20
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	3114      	adds	r1, #20
 8008e34:	0014      	movs	r4, r2
 8008e36:	18c9      	adds	r1, r1, r3
 8008e38:	18d2      	adds	r2, r2, r3
 8008e3a:	3a04      	subs	r2, #4
 8008e3c:	3904      	subs	r1, #4
 8008e3e:	6815      	ldr	r5, [r2, #0]
 8008e40:	680b      	ldr	r3, [r1, #0]
 8008e42:	429d      	cmp	r5, r3
 8008e44:	d004      	beq.n	8008e50 <__mcmp+0x30>
 8008e46:	2001      	movs	r0, #1
 8008e48:	429d      	cmp	r5, r3
 8008e4a:	d200      	bcs.n	8008e4e <__mcmp+0x2e>
 8008e4c:	3802      	subs	r0, #2
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	4294      	cmp	r4, r2
 8008e52:	d3f2      	bcc.n	8008e3a <__mcmp+0x1a>
 8008e54:	e7fb      	b.n	8008e4e <__mcmp+0x2e>
	...

08008e58 <__mdiff>:
 8008e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e5a:	000c      	movs	r4, r1
 8008e5c:	b087      	sub	sp, #28
 8008e5e:	9000      	str	r0, [sp, #0]
 8008e60:	0011      	movs	r1, r2
 8008e62:	0020      	movs	r0, r4
 8008e64:	0017      	movs	r7, r2
 8008e66:	f7ff ffdb 	bl	8008e20 <__mcmp>
 8008e6a:	1e05      	subs	r5, r0, #0
 8008e6c:	d110      	bne.n	8008e90 <__mdiff+0x38>
 8008e6e:	0001      	movs	r1, r0
 8008e70:	9800      	ldr	r0, [sp, #0]
 8008e72:	f7ff fd47 	bl	8008904 <_Balloc>
 8008e76:	1e02      	subs	r2, r0, #0
 8008e78:	d104      	bne.n	8008e84 <__mdiff+0x2c>
 8008e7a:	4b40      	ldr	r3, [pc, #256]	@ (8008f7c <__mdiff+0x124>)
 8008e7c:	4840      	ldr	r0, [pc, #256]	@ (8008f80 <__mdiff+0x128>)
 8008e7e:	4941      	ldr	r1, [pc, #260]	@ (8008f84 <__mdiff+0x12c>)
 8008e80:	f7fe fd9a 	bl	80079b8 <__assert_func>
 8008e84:	2301      	movs	r3, #1
 8008e86:	6145      	str	r5, [r0, #20]
 8008e88:	6103      	str	r3, [r0, #16]
 8008e8a:	0010      	movs	r0, r2
 8008e8c:	b007      	add	sp, #28
 8008e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e90:	2600      	movs	r6, #0
 8008e92:	42b0      	cmp	r0, r6
 8008e94:	da03      	bge.n	8008e9e <__mdiff+0x46>
 8008e96:	0023      	movs	r3, r4
 8008e98:	003c      	movs	r4, r7
 8008e9a:	001f      	movs	r7, r3
 8008e9c:	3601      	adds	r6, #1
 8008e9e:	6861      	ldr	r1, [r4, #4]
 8008ea0:	9800      	ldr	r0, [sp, #0]
 8008ea2:	f7ff fd2f 	bl	8008904 <_Balloc>
 8008ea6:	1e02      	subs	r2, r0, #0
 8008ea8:	d103      	bne.n	8008eb2 <__mdiff+0x5a>
 8008eaa:	4b34      	ldr	r3, [pc, #208]	@ (8008f7c <__mdiff+0x124>)
 8008eac:	4834      	ldr	r0, [pc, #208]	@ (8008f80 <__mdiff+0x128>)
 8008eae:	4936      	ldr	r1, [pc, #216]	@ (8008f88 <__mdiff+0x130>)
 8008eb0:	e7e6      	b.n	8008e80 <__mdiff+0x28>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	3414      	adds	r4, #20
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	18e3      	adds	r3, r4, r3
 8008ebc:	0021      	movs	r1, r4
 8008ebe:	9401      	str	r4, [sp, #4]
 8008ec0:	003c      	movs	r4, r7
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	3414      	adds	r4, #20
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	18e3      	adds	r3, r4, r3
 8008ecc:	9303      	str	r3, [sp, #12]
 8008ece:	0003      	movs	r3, r0
 8008ed0:	60c6      	str	r6, [r0, #12]
 8008ed2:	468c      	mov	ip, r1
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	3314      	adds	r3, #20
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	4663      	mov	r3, ip
 8008ede:	cb20      	ldmia	r3!, {r5}
 8008ee0:	b2a9      	uxth	r1, r5
 8008ee2:	000e      	movs	r6, r1
 8008ee4:	469c      	mov	ip, r3
 8008ee6:	cc08      	ldmia	r4!, {r3}
 8008ee8:	0c2d      	lsrs	r5, r5, #16
 8008eea:	b299      	uxth	r1, r3
 8008eec:	1a71      	subs	r1, r6, r1
 8008eee:	1809      	adds	r1, r1, r0
 8008ef0:	0c1b      	lsrs	r3, r3, #16
 8008ef2:	1408      	asrs	r0, r1, #16
 8008ef4:	1aeb      	subs	r3, r5, r3
 8008ef6:	181b      	adds	r3, r3, r0
 8008ef8:	1418      	asrs	r0, r3, #16
 8008efa:	b289      	uxth	r1, r1
 8008efc:	041b      	lsls	r3, r3, #16
 8008efe:	4319      	orrs	r1, r3
 8008f00:	9b05      	ldr	r3, [sp, #20]
 8008f02:	c302      	stmia	r3!, {r1}
 8008f04:	9305      	str	r3, [sp, #20]
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d8e7      	bhi.n	8008edc <__mdiff+0x84>
 8008f0c:	0039      	movs	r1, r7
 8008f0e:	9c03      	ldr	r4, [sp, #12]
 8008f10:	3115      	adds	r1, #21
 8008f12:	2304      	movs	r3, #4
 8008f14:	428c      	cmp	r4, r1
 8008f16:	d304      	bcc.n	8008f22 <__mdiff+0xca>
 8008f18:	1be3      	subs	r3, r4, r7
 8008f1a:	3b15      	subs	r3, #21
 8008f1c:	089b      	lsrs	r3, r3, #2
 8008f1e:	3301      	adds	r3, #1
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	9901      	ldr	r1, [sp, #4]
 8008f24:	18cd      	adds	r5, r1, r3
 8008f26:	9904      	ldr	r1, [sp, #16]
 8008f28:	002e      	movs	r6, r5
 8008f2a:	18cb      	adds	r3, r1, r3
 8008f2c:	001f      	movs	r7, r3
 8008f2e:	9902      	ldr	r1, [sp, #8]
 8008f30:	428e      	cmp	r6, r1
 8008f32:	d311      	bcc.n	8008f58 <__mdiff+0x100>
 8008f34:	9c02      	ldr	r4, [sp, #8]
 8008f36:	1ee9      	subs	r1, r5, #3
 8008f38:	2000      	movs	r0, #0
 8008f3a:	428c      	cmp	r4, r1
 8008f3c:	d304      	bcc.n	8008f48 <__mdiff+0xf0>
 8008f3e:	0021      	movs	r1, r4
 8008f40:	3103      	adds	r1, #3
 8008f42:	1b49      	subs	r1, r1, r5
 8008f44:	0889      	lsrs	r1, r1, #2
 8008f46:	0088      	lsls	r0, r1, #2
 8008f48:	181b      	adds	r3, r3, r0
 8008f4a:	3b04      	subs	r3, #4
 8008f4c:	6819      	ldr	r1, [r3, #0]
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	d010      	beq.n	8008f74 <__mdiff+0x11c>
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	6113      	str	r3, [r2, #16]
 8008f56:	e798      	b.n	8008e8a <__mdiff+0x32>
 8008f58:	4684      	mov	ip, r0
 8008f5a:	ce02      	ldmia	r6!, {r1}
 8008f5c:	b288      	uxth	r0, r1
 8008f5e:	4460      	add	r0, ip
 8008f60:	1400      	asrs	r0, r0, #16
 8008f62:	0c0c      	lsrs	r4, r1, #16
 8008f64:	1904      	adds	r4, r0, r4
 8008f66:	4461      	add	r1, ip
 8008f68:	1420      	asrs	r0, r4, #16
 8008f6a:	b289      	uxth	r1, r1
 8008f6c:	0424      	lsls	r4, r4, #16
 8008f6e:	4321      	orrs	r1, r4
 8008f70:	c702      	stmia	r7!, {r1}
 8008f72:	e7dc      	b.n	8008f2e <__mdiff+0xd6>
 8008f74:	9900      	ldr	r1, [sp, #0]
 8008f76:	3901      	subs	r1, #1
 8008f78:	9100      	str	r1, [sp, #0]
 8008f7a:	e7e6      	b.n	8008f4a <__mdiff+0xf2>
 8008f7c:	08009d14 	.word	0x08009d14
 8008f80:	08009d25 	.word	0x08009d25
 8008f84:	00000237 	.word	0x00000237
 8008f88:	00000245 	.word	0x00000245

08008f8c <__d2b>:
 8008f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f8e:	2101      	movs	r1, #1
 8008f90:	0016      	movs	r6, r2
 8008f92:	001f      	movs	r7, r3
 8008f94:	f7ff fcb6 	bl	8008904 <_Balloc>
 8008f98:	1e04      	subs	r4, r0, #0
 8008f9a:	d105      	bne.n	8008fa8 <__d2b+0x1c>
 8008f9c:	0022      	movs	r2, r4
 8008f9e:	4b25      	ldr	r3, [pc, #148]	@ (8009034 <__d2b+0xa8>)
 8008fa0:	4825      	ldr	r0, [pc, #148]	@ (8009038 <__d2b+0xac>)
 8008fa2:	4926      	ldr	r1, [pc, #152]	@ (800903c <__d2b+0xb0>)
 8008fa4:	f7fe fd08 	bl	80079b8 <__assert_func>
 8008fa8:	033b      	lsls	r3, r7, #12
 8008faa:	007d      	lsls	r5, r7, #1
 8008fac:	0b1b      	lsrs	r3, r3, #12
 8008fae:	0d6d      	lsrs	r5, r5, #21
 8008fb0:	d002      	beq.n	8008fb8 <__d2b+0x2c>
 8008fb2:	2280      	movs	r2, #128	@ 0x80
 8008fb4:	0352      	lsls	r2, r2, #13
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d025      	beq.n	800900a <__d2b+0x7e>
 8008fbe:	4668      	mov	r0, sp
 8008fc0:	9600      	str	r6, [sp, #0]
 8008fc2:	f7ff fd6c 	bl	8008a9e <__lo0bits>
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	9900      	ldr	r1, [sp, #0]
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d01b      	beq.n	8009006 <__d2b+0x7a>
 8008fce:	2220      	movs	r2, #32
 8008fd0:	001e      	movs	r6, r3
 8008fd2:	1a12      	subs	r2, r2, r0
 8008fd4:	4096      	lsls	r6, r2
 8008fd6:	0032      	movs	r2, r6
 8008fd8:	40c3      	lsrs	r3, r0
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	6162      	str	r2, [r4, #20]
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	9e01      	ldr	r6, [sp, #4]
 8008fe2:	61a6      	str	r6, [r4, #24]
 8008fe4:	1e73      	subs	r3, r6, #1
 8008fe6:	419e      	sbcs	r6, r3
 8008fe8:	3601      	adds	r6, #1
 8008fea:	6126      	str	r6, [r4, #16]
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	d014      	beq.n	800901a <__d2b+0x8e>
 8008ff0:	2635      	movs	r6, #53	@ 0x35
 8008ff2:	4b13      	ldr	r3, [pc, #76]	@ (8009040 <__d2b+0xb4>)
 8008ff4:	18ed      	adds	r5, r5, r3
 8008ff6:	9b08      	ldr	r3, [sp, #32]
 8008ff8:	182d      	adds	r5, r5, r0
 8008ffa:	601d      	str	r5, [r3, #0]
 8008ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffe:	1a36      	subs	r6, r6, r0
 8009000:	601e      	str	r6, [r3, #0]
 8009002:	0020      	movs	r0, r4
 8009004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009006:	6161      	str	r1, [r4, #20]
 8009008:	e7ea      	b.n	8008fe0 <__d2b+0x54>
 800900a:	a801      	add	r0, sp, #4
 800900c:	f7ff fd47 	bl	8008a9e <__lo0bits>
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	2601      	movs	r6, #1
 8009014:	6163      	str	r3, [r4, #20]
 8009016:	3020      	adds	r0, #32
 8009018:	e7e7      	b.n	8008fea <__d2b+0x5e>
 800901a:	4b0a      	ldr	r3, [pc, #40]	@ (8009044 <__d2b+0xb8>)
 800901c:	18c0      	adds	r0, r0, r3
 800901e:	9b08      	ldr	r3, [sp, #32]
 8009020:	6018      	str	r0, [r3, #0]
 8009022:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <__d2b+0xbc>)
 8009024:	18f3      	adds	r3, r6, r3
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	18e3      	adds	r3, r4, r3
 800902a:	6958      	ldr	r0, [r3, #20]
 800902c:	f7ff fd16 	bl	8008a5c <__hi0bits>
 8009030:	0176      	lsls	r6, r6, #5
 8009032:	e7e3      	b.n	8008ffc <__d2b+0x70>
 8009034:	08009d14 	.word	0x08009d14
 8009038:	08009d25 	.word	0x08009d25
 800903c:	0000030f 	.word	0x0000030f
 8009040:	fffffbcd 	.word	0xfffffbcd
 8009044:	fffffbce 	.word	0xfffffbce
 8009048:	3fffffff 	.word	0x3fffffff

0800904c <__ssputs_r>:
 800904c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904e:	688e      	ldr	r6, [r1, #8]
 8009050:	b085      	sub	sp, #20
 8009052:	001f      	movs	r7, r3
 8009054:	000c      	movs	r4, r1
 8009056:	680b      	ldr	r3, [r1, #0]
 8009058:	9002      	str	r0, [sp, #8]
 800905a:	9203      	str	r2, [sp, #12]
 800905c:	42be      	cmp	r6, r7
 800905e:	d830      	bhi.n	80090c2 <__ssputs_r+0x76>
 8009060:	210c      	movs	r1, #12
 8009062:	5e62      	ldrsh	r2, [r4, r1]
 8009064:	2190      	movs	r1, #144	@ 0x90
 8009066:	00c9      	lsls	r1, r1, #3
 8009068:	420a      	tst	r2, r1
 800906a:	d028      	beq.n	80090be <__ssputs_r+0x72>
 800906c:	2003      	movs	r0, #3
 800906e:	6921      	ldr	r1, [r4, #16]
 8009070:	1a5b      	subs	r3, r3, r1
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	6963      	ldr	r3, [r4, #20]
 8009076:	4343      	muls	r3, r0
 8009078:	9801      	ldr	r0, [sp, #4]
 800907a:	0fdd      	lsrs	r5, r3, #31
 800907c:	18ed      	adds	r5, r5, r3
 800907e:	1c7b      	adds	r3, r7, #1
 8009080:	181b      	adds	r3, r3, r0
 8009082:	106d      	asrs	r5, r5, #1
 8009084:	42ab      	cmp	r3, r5
 8009086:	d900      	bls.n	800908a <__ssputs_r+0x3e>
 8009088:	001d      	movs	r5, r3
 800908a:	0552      	lsls	r2, r2, #21
 800908c:	d528      	bpl.n	80090e0 <__ssputs_r+0x94>
 800908e:	0029      	movs	r1, r5
 8009090:	9802      	ldr	r0, [sp, #8]
 8009092:	f7ff fba7 	bl	80087e4 <_malloc_r>
 8009096:	1e06      	subs	r6, r0, #0
 8009098:	d02c      	beq.n	80090f4 <__ssputs_r+0xa8>
 800909a:	9a01      	ldr	r2, [sp, #4]
 800909c:	6921      	ldr	r1, [r4, #16]
 800909e:	f000 fbed 	bl	800987c <memcpy>
 80090a2:	89a2      	ldrh	r2, [r4, #12]
 80090a4:	4b18      	ldr	r3, [pc, #96]	@ (8009108 <__ssputs_r+0xbc>)
 80090a6:	401a      	ands	r2, r3
 80090a8:	2380      	movs	r3, #128	@ 0x80
 80090aa:	4313      	orrs	r3, r2
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	6126      	str	r6, [r4, #16]
 80090b2:	18f6      	adds	r6, r6, r3
 80090b4:	6026      	str	r6, [r4, #0]
 80090b6:	003e      	movs	r6, r7
 80090b8:	6165      	str	r5, [r4, #20]
 80090ba:	1aed      	subs	r5, r5, r3
 80090bc:	60a5      	str	r5, [r4, #8]
 80090be:	42be      	cmp	r6, r7
 80090c0:	d900      	bls.n	80090c4 <__ssputs_r+0x78>
 80090c2:	003e      	movs	r6, r7
 80090c4:	0032      	movs	r2, r6
 80090c6:	9903      	ldr	r1, [sp, #12]
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	f000 fb8e 	bl	80097ea <memmove>
 80090ce:	2000      	movs	r0, #0
 80090d0:	68a3      	ldr	r3, [r4, #8]
 80090d2:	1b9b      	subs	r3, r3, r6
 80090d4:	60a3      	str	r3, [r4, #8]
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	199b      	adds	r3, r3, r6
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	b005      	add	sp, #20
 80090de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e0:	002a      	movs	r2, r5
 80090e2:	9802      	ldr	r0, [sp, #8]
 80090e4:	f000 fc19 	bl	800991a <_realloc_r>
 80090e8:	1e06      	subs	r6, r0, #0
 80090ea:	d1e0      	bne.n	80090ae <__ssputs_r+0x62>
 80090ec:	6921      	ldr	r1, [r4, #16]
 80090ee:	9802      	ldr	r0, [sp, #8]
 80090f0:	f7ff fb02 	bl	80086f8 <_free_r>
 80090f4:	230c      	movs	r3, #12
 80090f6:	2001      	movs	r0, #1
 80090f8:	9a02      	ldr	r2, [sp, #8]
 80090fa:	4240      	negs	r0, r0
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	89a2      	ldrh	r2, [r4, #12]
 8009100:	3334      	adds	r3, #52	@ 0x34
 8009102:	4313      	orrs	r3, r2
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e7e9      	b.n	80090dc <__ssputs_r+0x90>
 8009108:	fffffb7f 	.word	0xfffffb7f

0800910c <_svfiprintf_r>:
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	b0a1      	sub	sp, #132	@ 0x84
 8009110:	9003      	str	r0, [sp, #12]
 8009112:	001d      	movs	r5, r3
 8009114:	898b      	ldrh	r3, [r1, #12]
 8009116:	000f      	movs	r7, r1
 8009118:	0016      	movs	r6, r2
 800911a:	061b      	lsls	r3, r3, #24
 800911c:	d511      	bpl.n	8009142 <_svfiprintf_r+0x36>
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10e      	bne.n	8009142 <_svfiprintf_r+0x36>
 8009124:	2140      	movs	r1, #64	@ 0x40
 8009126:	f7ff fb5d 	bl	80087e4 <_malloc_r>
 800912a:	6038      	str	r0, [r7, #0]
 800912c:	6138      	str	r0, [r7, #16]
 800912e:	2800      	cmp	r0, #0
 8009130:	d105      	bne.n	800913e <_svfiprintf_r+0x32>
 8009132:	230c      	movs	r3, #12
 8009134:	9a03      	ldr	r2, [sp, #12]
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	2001      	movs	r0, #1
 800913a:	4240      	negs	r0, r0
 800913c:	e0cf      	b.n	80092de <_svfiprintf_r+0x1d2>
 800913e:	2340      	movs	r3, #64	@ 0x40
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	2300      	movs	r3, #0
 8009144:	ac08      	add	r4, sp, #32
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	3320      	adds	r3, #32
 800914a:	7663      	strb	r3, [r4, #25]
 800914c:	3310      	adds	r3, #16
 800914e:	76a3      	strb	r3, [r4, #26]
 8009150:	9507      	str	r5, [sp, #28]
 8009152:	0035      	movs	r5, r6
 8009154:	782b      	ldrb	r3, [r5, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <_svfiprintf_r+0x52>
 800915a:	2b25      	cmp	r3, #37	@ 0x25
 800915c:	d148      	bne.n	80091f0 <_svfiprintf_r+0xe4>
 800915e:	1bab      	subs	r3, r5, r6
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	42b5      	cmp	r5, r6
 8009164:	d00b      	beq.n	800917e <_svfiprintf_r+0x72>
 8009166:	0032      	movs	r2, r6
 8009168:	0039      	movs	r1, r7
 800916a:	9803      	ldr	r0, [sp, #12]
 800916c:	f7ff ff6e 	bl	800904c <__ssputs_r>
 8009170:	3001      	adds	r0, #1
 8009172:	d100      	bne.n	8009176 <_svfiprintf_r+0x6a>
 8009174:	e0ae      	b.n	80092d4 <_svfiprintf_r+0x1c8>
 8009176:	6963      	ldr	r3, [r4, #20]
 8009178:	9a05      	ldr	r2, [sp, #20]
 800917a:	189b      	adds	r3, r3, r2
 800917c:	6163      	str	r3, [r4, #20]
 800917e:	782b      	ldrb	r3, [r5, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d100      	bne.n	8009186 <_svfiprintf_r+0x7a>
 8009184:	e0a6      	b.n	80092d4 <_svfiprintf_r+0x1c8>
 8009186:	2201      	movs	r2, #1
 8009188:	2300      	movs	r3, #0
 800918a:	4252      	negs	r2, r2
 800918c:	6062      	str	r2, [r4, #4]
 800918e:	a904      	add	r1, sp, #16
 8009190:	3254      	adds	r2, #84	@ 0x54
 8009192:	1852      	adds	r2, r2, r1
 8009194:	1c6e      	adds	r6, r5, #1
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	60e3      	str	r3, [r4, #12]
 800919a:	60a3      	str	r3, [r4, #8]
 800919c:	7013      	strb	r3, [r2, #0]
 800919e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80091a0:	4b54      	ldr	r3, [pc, #336]	@ (80092f4 <_svfiprintf_r+0x1e8>)
 80091a2:	2205      	movs	r2, #5
 80091a4:	0018      	movs	r0, r3
 80091a6:	7831      	ldrb	r1, [r6, #0]
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	f7fe fbfa 	bl	80079a2 <memchr>
 80091ae:	1c75      	adds	r5, r6, #1
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d11f      	bne.n	80091f4 <_svfiprintf_r+0xe8>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	06d3      	lsls	r3, r2, #27
 80091b8:	d504      	bpl.n	80091c4 <_svfiprintf_r+0xb8>
 80091ba:	2353      	movs	r3, #83	@ 0x53
 80091bc:	a904      	add	r1, sp, #16
 80091be:	185b      	adds	r3, r3, r1
 80091c0:	2120      	movs	r1, #32
 80091c2:	7019      	strb	r1, [r3, #0]
 80091c4:	0713      	lsls	r3, r2, #28
 80091c6:	d504      	bpl.n	80091d2 <_svfiprintf_r+0xc6>
 80091c8:	2353      	movs	r3, #83	@ 0x53
 80091ca:	a904      	add	r1, sp, #16
 80091cc:	185b      	adds	r3, r3, r1
 80091ce:	212b      	movs	r1, #43	@ 0x2b
 80091d0:	7019      	strb	r1, [r3, #0]
 80091d2:	7833      	ldrb	r3, [r6, #0]
 80091d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d6:	d016      	beq.n	8009206 <_svfiprintf_r+0xfa>
 80091d8:	0035      	movs	r5, r6
 80091da:	2100      	movs	r1, #0
 80091dc:	200a      	movs	r0, #10
 80091de:	68e3      	ldr	r3, [r4, #12]
 80091e0:	782a      	ldrb	r2, [r5, #0]
 80091e2:	1c6e      	adds	r6, r5, #1
 80091e4:	3a30      	subs	r2, #48	@ 0x30
 80091e6:	2a09      	cmp	r2, #9
 80091e8:	d950      	bls.n	800928c <_svfiprintf_r+0x180>
 80091ea:	2900      	cmp	r1, #0
 80091ec:	d111      	bne.n	8009212 <_svfiprintf_r+0x106>
 80091ee:	e017      	b.n	8009220 <_svfiprintf_r+0x114>
 80091f0:	3501      	adds	r5, #1
 80091f2:	e7af      	b.n	8009154 <_svfiprintf_r+0x48>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	6822      	ldr	r2, [r4, #0]
 80091f8:	1ac0      	subs	r0, r0, r3
 80091fa:	2301      	movs	r3, #1
 80091fc:	4083      	lsls	r3, r0
 80091fe:	4313      	orrs	r3, r2
 8009200:	002e      	movs	r6, r5
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	e7cc      	b.n	80091a0 <_svfiprintf_r+0x94>
 8009206:	9b07      	ldr	r3, [sp, #28]
 8009208:	1d19      	adds	r1, r3, #4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	9107      	str	r1, [sp, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	db01      	blt.n	8009216 <_svfiprintf_r+0x10a>
 8009212:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009214:	e004      	b.n	8009220 <_svfiprintf_r+0x114>
 8009216:	425b      	negs	r3, r3
 8009218:	60e3      	str	r3, [r4, #12]
 800921a:	2302      	movs	r3, #2
 800921c:	4313      	orrs	r3, r2
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	782b      	ldrb	r3, [r5, #0]
 8009222:	2b2e      	cmp	r3, #46	@ 0x2e
 8009224:	d10c      	bne.n	8009240 <_svfiprintf_r+0x134>
 8009226:	786b      	ldrb	r3, [r5, #1]
 8009228:	2b2a      	cmp	r3, #42	@ 0x2a
 800922a:	d134      	bne.n	8009296 <_svfiprintf_r+0x18a>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	3502      	adds	r5, #2
 8009230:	1d1a      	adds	r2, r3, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	9207      	str	r2, [sp, #28]
 8009236:	2b00      	cmp	r3, #0
 8009238:	da01      	bge.n	800923e <_svfiprintf_r+0x132>
 800923a:	2301      	movs	r3, #1
 800923c:	425b      	negs	r3, r3
 800923e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009240:	4e2d      	ldr	r6, [pc, #180]	@ (80092f8 <_svfiprintf_r+0x1ec>)
 8009242:	2203      	movs	r2, #3
 8009244:	0030      	movs	r0, r6
 8009246:	7829      	ldrb	r1, [r5, #0]
 8009248:	f7fe fbab 	bl	80079a2 <memchr>
 800924c:	2800      	cmp	r0, #0
 800924e:	d006      	beq.n	800925e <_svfiprintf_r+0x152>
 8009250:	2340      	movs	r3, #64	@ 0x40
 8009252:	1b80      	subs	r0, r0, r6
 8009254:	4083      	lsls	r3, r0
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	3501      	adds	r5, #1
 800925a:	4313      	orrs	r3, r2
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	7829      	ldrb	r1, [r5, #0]
 8009260:	2206      	movs	r2, #6
 8009262:	4826      	ldr	r0, [pc, #152]	@ (80092fc <_svfiprintf_r+0x1f0>)
 8009264:	1c6e      	adds	r6, r5, #1
 8009266:	7621      	strb	r1, [r4, #24]
 8009268:	f7fe fb9b 	bl	80079a2 <memchr>
 800926c:	2800      	cmp	r0, #0
 800926e:	d038      	beq.n	80092e2 <_svfiprintf_r+0x1d6>
 8009270:	4b23      	ldr	r3, [pc, #140]	@ (8009300 <_svfiprintf_r+0x1f4>)
 8009272:	2b00      	cmp	r3, #0
 8009274:	d122      	bne.n	80092bc <_svfiprintf_r+0x1b0>
 8009276:	2207      	movs	r2, #7
 8009278:	9b07      	ldr	r3, [sp, #28]
 800927a:	3307      	adds	r3, #7
 800927c:	4393      	bics	r3, r2
 800927e:	3308      	adds	r3, #8
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	6963      	ldr	r3, [r4, #20]
 8009284:	9a04      	ldr	r2, [sp, #16]
 8009286:	189b      	adds	r3, r3, r2
 8009288:	6163      	str	r3, [r4, #20]
 800928a:	e762      	b.n	8009152 <_svfiprintf_r+0x46>
 800928c:	4343      	muls	r3, r0
 800928e:	0035      	movs	r5, r6
 8009290:	2101      	movs	r1, #1
 8009292:	189b      	adds	r3, r3, r2
 8009294:	e7a4      	b.n	80091e0 <_svfiprintf_r+0xd4>
 8009296:	2300      	movs	r3, #0
 8009298:	200a      	movs	r0, #10
 800929a:	0019      	movs	r1, r3
 800929c:	3501      	adds	r5, #1
 800929e:	6063      	str	r3, [r4, #4]
 80092a0:	782a      	ldrb	r2, [r5, #0]
 80092a2:	1c6e      	adds	r6, r5, #1
 80092a4:	3a30      	subs	r2, #48	@ 0x30
 80092a6:	2a09      	cmp	r2, #9
 80092a8:	d903      	bls.n	80092b2 <_svfiprintf_r+0x1a6>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0c8      	beq.n	8009240 <_svfiprintf_r+0x134>
 80092ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80092b0:	e7c6      	b.n	8009240 <_svfiprintf_r+0x134>
 80092b2:	4341      	muls	r1, r0
 80092b4:	0035      	movs	r5, r6
 80092b6:	2301      	movs	r3, #1
 80092b8:	1889      	adds	r1, r1, r2
 80092ba:	e7f1      	b.n	80092a0 <_svfiprintf_r+0x194>
 80092bc:	aa07      	add	r2, sp, #28
 80092be:	9200      	str	r2, [sp, #0]
 80092c0:	0021      	movs	r1, r4
 80092c2:	003a      	movs	r2, r7
 80092c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009304 <_svfiprintf_r+0x1f8>)
 80092c6:	9803      	ldr	r0, [sp, #12]
 80092c8:	f7fd fd48 	bl	8006d5c <_printf_float>
 80092cc:	9004      	str	r0, [sp, #16]
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	3301      	adds	r3, #1
 80092d2:	d1d6      	bne.n	8009282 <_svfiprintf_r+0x176>
 80092d4:	89bb      	ldrh	r3, [r7, #12]
 80092d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80092d8:	065b      	lsls	r3, r3, #25
 80092da:	d500      	bpl.n	80092de <_svfiprintf_r+0x1d2>
 80092dc:	e72c      	b.n	8009138 <_svfiprintf_r+0x2c>
 80092de:	b021      	add	sp, #132	@ 0x84
 80092e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e2:	aa07      	add	r2, sp, #28
 80092e4:	9200      	str	r2, [sp, #0]
 80092e6:	0021      	movs	r1, r4
 80092e8:	003a      	movs	r2, r7
 80092ea:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <_svfiprintf_r+0x1f8>)
 80092ec:	9803      	ldr	r0, [sp, #12]
 80092ee:	f7fd ffe3 	bl	80072b8 <_printf_i>
 80092f2:	e7eb      	b.n	80092cc <_svfiprintf_r+0x1c0>
 80092f4:	08009e80 	.word	0x08009e80
 80092f8:	08009e86 	.word	0x08009e86
 80092fc:	08009e8a 	.word	0x08009e8a
 8009300:	08006d5d 	.word	0x08006d5d
 8009304:	0800904d 	.word	0x0800904d

08009308 <__sfputc_r>:
 8009308:	6893      	ldr	r3, [r2, #8]
 800930a:	b510      	push	{r4, lr}
 800930c:	3b01      	subs	r3, #1
 800930e:	6093      	str	r3, [r2, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	da04      	bge.n	800931e <__sfputc_r+0x16>
 8009314:	6994      	ldr	r4, [r2, #24]
 8009316:	42a3      	cmp	r3, r4
 8009318:	db07      	blt.n	800932a <__sfputc_r+0x22>
 800931a:	290a      	cmp	r1, #10
 800931c:	d005      	beq.n	800932a <__sfputc_r+0x22>
 800931e:	6813      	ldr	r3, [r2, #0]
 8009320:	1c58      	adds	r0, r3, #1
 8009322:	6010      	str	r0, [r2, #0]
 8009324:	7019      	strb	r1, [r3, #0]
 8009326:	0008      	movs	r0, r1
 8009328:	bd10      	pop	{r4, pc}
 800932a:	f7fe fa13 	bl	8007754 <__swbuf_r>
 800932e:	0001      	movs	r1, r0
 8009330:	e7f9      	b.n	8009326 <__sfputc_r+0x1e>

08009332 <__sfputs_r>:
 8009332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009334:	0006      	movs	r6, r0
 8009336:	000f      	movs	r7, r1
 8009338:	0014      	movs	r4, r2
 800933a:	18d5      	adds	r5, r2, r3
 800933c:	42ac      	cmp	r4, r5
 800933e:	d101      	bne.n	8009344 <__sfputs_r+0x12>
 8009340:	2000      	movs	r0, #0
 8009342:	e007      	b.n	8009354 <__sfputs_r+0x22>
 8009344:	7821      	ldrb	r1, [r4, #0]
 8009346:	003a      	movs	r2, r7
 8009348:	0030      	movs	r0, r6
 800934a:	f7ff ffdd 	bl	8009308 <__sfputc_r>
 800934e:	3401      	adds	r4, #1
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d1f3      	bne.n	800933c <__sfputs_r+0xa>
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009358 <_vfiprintf_r>:
 8009358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935a:	b0a1      	sub	sp, #132	@ 0x84
 800935c:	000f      	movs	r7, r1
 800935e:	0015      	movs	r5, r2
 8009360:	001e      	movs	r6, r3
 8009362:	9003      	str	r0, [sp, #12]
 8009364:	2800      	cmp	r0, #0
 8009366:	d004      	beq.n	8009372 <_vfiprintf_r+0x1a>
 8009368:	6a03      	ldr	r3, [r0, #32]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <_vfiprintf_r+0x1a>
 800936e:	f7fe f941 	bl	80075f4 <__sinit>
 8009372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009374:	07db      	lsls	r3, r3, #31
 8009376:	d405      	bmi.n	8009384 <_vfiprintf_r+0x2c>
 8009378:	89bb      	ldrh	r3, [r7, #12]
 800937a:	059b      	lsls	r3, r3, #22
 800937c:	d402      	bmi.n	8009384 <_vfiprintf_r+0x2c>
 800937e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009380:	f7fe fb0d 	bl	800799e <__retarget_lock_acquire_recursive>
 8009384:	89bb      	ldrh	r3, [r7, #12]
 8009386:	071b      	lsls	r3, r3, #28
 8009388:	d502      	bpl.n	8009390 <_vfiprintf_r+0x38>
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d113      	bne.n	80093b8 <_vfiprintf_r+0x60>
 8009390:	0039      	movs	r1, r7
 8009392:	9803      	ldr	r0, [sp, #12]
 8009394:	f7fe fa20 	bl	80077d8 <__swsetup_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	d00d      	beq.n	80093b8 <_vfiprintf_r+0x60>
 800939c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800939e:	07db      	lsls	r3, r3, #31
 80093a0:	d503      	bpl.n	80093aa <_vfiprintf_r+0x52>
 80093a2:	2001      	movs	r0, #1
 80093a4:	4240      	negs	r0, r0
 80093a6:	b021      	add	sp, #132	@ 0x84
 80093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093aa:	89bb      	ldrh	r3, [r7, #12]
 80093ac:	059b      	lsls	r3, r3, #22
 80093ae:	d4f8      	bmi.n	80093a2 <_vfiprintf_r+0x4a>
 80093b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80093b2:	f7fe faf5 	bl	80079a0 <__retarget_lock_release_recursive>
 80093b6:	e7f4      	b.n	80093a2 <_vfiprintf_r+0x4a>
 80093b8:	2300      	movs	r3, #0
 80093ba:	ac08      	add	r4, sp, #32
 80093bc:	6163      	str	r3, [r4, #20]
 80093be:	3320      	adds	r3, #32
 80093c0:	7663      	strb	r3, [r4, #25]
 80093c2:	3310      	adds	r3, #16
 80093c4:	76a3      	strb	r3, [r4, #26]
 80093c6:	9607      	str	r6, [sp, #28]
 80093c8:	002e      	movs	r6, r5
 80093ca:	7833      	ldrb	r3, [r6, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <_vfiprintf_r+0x7c>
 80093d0:	2b25      	cmp	r3, #37	@ 0x25
 80093d2:	d148      	bne.n	8009466 <_vfiprintf_r+0x10e>
 80093d4:	1b73      	subs	r3, r6, r5
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	42ae      	cmp	r6, r5
 80093da:	d00b      	beq.n	80093f4 <_vfiprintf_r+0x9c>
 80093dc:	002a      	movs	r2, r5
 80093de:	0039      	movs	r1, r7
 80093e0:	9803      	ldr	r0, [sp, #12]
 80093e2:	f7ff ffa6 	bl	8009332 <__sfputs_r>
 80093e6:	3001      	adds	r0, #1
 80093e8:	d100      	bne.n	80093ec <_vfiprintf_r+0x94>
 80093ea:	e0ae      	b.n	800954a <_vfiprintf_r+0x1f2>
 80093ec:	6963      	ldr	r3, [r4, #20]
 80093ee:	9a05      	ldr	r2, [sp, #20]
 80093f0:	189b      	adds	r3, r3, r2
 80093f2:	6163      	str	r3, [r4, #20]
 80093f4:	7833      	ldrb	r3, [r6, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d100      	bne.n	80093fc <_vfiprintf_r+0xa4>
 80093fa:	e0a6      	b.n	800954a <_vfiprintf_r+0x1f2>
 80093fc:	2201      	movs	r2, #1
 80093fe:	2300      	movs	r3, #0
 8009400:	4252      	negs	r2, r2
 8009402:	6062      	str	r2, [r4, #4]
 8009404:	a904      	add	r1, sp, #16
 8009406:	3254      	adds	r2, #84	@ 0x54
 8009408:	1852      	adds	r2, r2, r1
 800940a:	1c75      	adds	r5, r6, #1
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	60e3      	str	r3, [r4, #12]
 8009410:	60a3      	str	r3, [r4, #8]
 8009412:	7013      	strb	r3, [r2, #0]
 8009414:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009416:	4b59      	ldr	r3, [pc, #356]	@ (800957c <_vfiprintf_r+0x224>)
 8009418:	2205      	movs	r2, #5
 800941a:	0018      	movs	r0, r3
 800941c:	7829      	ldrb	r1, [r5, #0]
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	f7fe fabf 	bl	80079a2 <memchr>
 8009424:	1c6e      	adds	r6, r5, #1
 8009426:	2800      	cmp	r0, #0
 8009428:	d11f      	bne.n	800946a <_vfiprintf_r+0x112>
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	06d3      	lsls	r3, r2, #27
 800942e:	d504      	bpl.n	800943a <_vfiprintf_r+0xe2>
 8009430:	2353      	movs	r3, #83	@ 0x53
 8009432:	a904      	add	r1, sp, #16
 8009434:	185b      	adds	r3, r3, r1
 8009436:	2120      	movs	r1, #32
 8009438:	7019      	strb	r1, [r3, #0]
 800943a:	0713      	lsls	r3, r2, #28
 800943c:	d504      	bpl.n	8009448 <_vfiprintf_r+0xf0>
 800943e:	2353      	movs	r3, #83	@ 0x53
 8009440:	a904      	add	r1, sp, #16
 8009442:	185b      	adds	r3, r3, r1
 8009444:	212b      	movs	r1, #43	@ 0x2b
 8009446:	7019      	strb	r1, [r3, #0]
 8009448:	782b      	ldrb	r3, [r5, #0]
 800944a:	2b2a      	cmp	r3, #42	@ 0x2a
 800944c:	d016      	beq.n	800947c <_vfiprintf_r+0x124>
 800944e:	002e      	movs	r6, r5
 8009450:	2100      	movs	r1, #0
 8009452:	200a      	movs	r0, #10
 8009454:	68e3      	ldr	r3, [r4, #12]
 8009456:	7832      	ldrb	r2, [r6, #0]
 8009458:	1c75      	adds	r5, r6, #1
 800945a:	3a30      	subs	r2, #48	@ 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d950      	bls.n	8009502 <_vfiprintf_r+0x1aa>
 8009460:	2900      	cmp	r1, #0
 8009462:	d111      	bne.n	8009488 <_vfiprintf_r+0x130>
 8009464:	e017      	b.n	8009496 <_vfiprintf_r+0x13e>
 8009466:	3601      	adds	r6, #1
 8009468:	e7af      	b.n	80093ca <_vfiprintf_r+0x72>
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	1ac0      	subs	r0, r0, r3
 8009470:	2301      	movs	r3, #1
 8009472:	4083      	lsls	r3, r0
 8009474:	4313      	orrs	r3, r2
 8009476:	0035      	movs	r5, r6
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	e7cc      	b.n	8009416 <_vfiprintf_r+0xbe>
 800947c:	9b07      	ldr	r3, [sp, #28]
 800947e:	1d19      	adds	r1, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	9107      	str	r1, [sp, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	db01      	blt.n	800948c <_vfiprintf_r+0x134>
 8009488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800948a:	e004      	b.n	8009496 <_vfiprintf_r+0x13e>
 800948c:	425b      	negs	r3, r3
 800948e:	60e3      	str	r3, [r4, #12]
 8009490:	2302      	movs	r3, #2
 8009492:	4313      	orrs	r3, r2
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	7833      	ldrb	r3, [r6, #0]
 8009498:	2b2e      	cmp	r3, #46	@ 0x2e
 800949a:	d10c      	bne.n	80094b6 <_vfiprintf_r+0x15e>
 800949c:	7873      	ldrb	r3, [r6, #1]
 800949e:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a0:	d134      	bne.n	800950c <_vfiprintf_r+0x1b4>
 80094a2:	9b07      	ldr	r3, [sp, #28]
 80094a4:	3602      	adds	r6, #2
 80094a6:	1d1a      	adds	r2, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9207      	str	r2, [sp, #28]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da01      	bge.n	80094b4 <_vfiprintf_r+0x15c>
 80094b0:	2301      	movs	r3, #1
 80094b2:	425b      	negs	r3, r3
 80094b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b6:	4d32      	ldr	r5, [pc, #200]	@ (8009580 <_vfiprintf_r+0x228>)
 80094b8:	2203      	movs	r2, #3
 80094ba:	0028      	movs	r0, r5
 80094bc:	7831      	ldrb	r1, [r6, #0]
 80094be:	f7fe fa70 	bl	80079a2 <memchr>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d006      	beq.n	80094d4 <_vfiprintf_r+0x17c>
 80094c6:	2340      	movs	r3, #64	@ 0x40
 80094c8:	1b40      	subs	r0, r0, r5
 80094ca:	4083      	lsls	r3, r0
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	3601      	adds	r6, #1
 80094d0:	4313      	orrs	r3, r2
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	7831      	ldrb	r1, [r6, #0]
 80094d6:	2206      	movs	r2, #6
 80094d8:	482a      	ldr	r0, [pc, #168]	@ (8009584 <_vfiprintf_r+0x22c>)
 80094da:	1c75      	adds	r5, r6, #1
 80094dc:	7621      	strb	r1, [r4, #24]
 80094de:	f7fe fa60 	bl	80079a2 <memchr>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d040      	beq.n	8009568 <_vfiprintf_r+0x210>
 80094e6:	4b28      	ldr	r3, [pc, #160]	@ (8009588 <_vfiprintf_r+0x230>)
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d122      	bne.n	8009532 <_vfiprintf_r+0x1da>
 80094ec:	2207      	movs	r2, #7
 80094ee:	9b07      	ldr	r3, [sp, #28]
 80094f0:	3307      	adds	r3, #7
 80094f2:	4393      	bics	r3, r2
 80094f4:	3308      	adds	r3, #8
 80094f6:	9307      	str	r3, [sp, #28]
 80094f8:	6963      	ldr	r3, [r4, #20]
 80094fa:	9a04      	ldr	r2, [sp, #16]
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	e762      	b.n	80093c8 <_vfiprintf_r+0x70>
 8009502:	4343      	muls	r3, r0
 8009504:	002e      	movs	r6, r5
 8009506:	2101      	movs	r1, #1
 8009508:	189b      	adds	r3, r3, r2
 800950a:	e7a4      	b.n	8009456 <_vfiprintf_r+0xfe>
 800950c:	2300      	movs	r3, #0
 800950e:	200a      	movs	r0, #10
 8009510:	0019      	movs	r1, r3
 8009512:	3601      	adds	r6, #1
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	7832      	ldrb	r2, [r6, #0]
 8009518:	1c75      	adds	r5, r6, #1
 800951a:	3a30      	subs	r2, #48	@ 0x30
 800951c:	2a09      	cmp	r2, #9
 800951e:	d903      	bls.n	8009528 <_vfiprintf_r+0x1d0>
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0c8      	beq.n	80094b6 <_vfiprintf_r+0x15e>
 8009524:	9109      	str	r1, [sp, #36]	@ 0x24
 8009526:	e7c6      	b.n	80094b6 <_vfiprintf_r+0x15e>
 8009528:	4341      	muls	r1, r0
 800952a:	002e      	movs	r6, r5
 800952c:	2301      	movs	r3, #1
 800952e:	1889      	adds	r1, r1, r2
 8009530:	e7f1      	b.n	8009516 <_vfiprintf_r+0x1be>
 8009532:	aa07      	add	r2, sp, #28
 8009534:	9200      	str	r2, [sp, #0]
 8009536:	0021      	movs	r1, r4
 8009538:	003a      	movs	r2, r7
 800953a:	4b14      	ldr	r3, [pc, #80]	@ (800958c <_vfiprintf_r+0x234>)
 800953c:	9803      	ldr	r0, [sp, #12]
 800953e:	f7fd fc0d 	bl	8006d5c <_printf_float>
 8009542:	9004      	str	r0, [sp, #16]
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	3301      	adds	r3, #1
 8009548:	d1d6      	bne.n	80094f8 <_vfiprintf_r+0x1a0>
 800954a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800954c:	07db      	lsls	r3, r3, #31
 800954e:	d405      	bmi.n	800955c <_vfiprintf_r+0x204>
 8009550:	89bb      	ldrh	r3, [r7, #12]
 8009552:	059b      	lsls	r3, r3, #22
 8009554:	d402      	bmi.n	800955c <_vfiprintf_r+0x204>
 8009556:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009558:	f7fe fa22 	bl	80079a0 <__retarget_lock_release_recursive>
 800955c:	89bb      	ldrh	r3, [r7, #12]
 800955e:	065b      	lsls	r3, r3, #25
 8009560:	d500      	bpl.n	8009564 <_vfiprintf_r+0x20c>
 8009562:	e71e      	b.n	80093a2 <_vfiprintf_r+0x4a>
 8009564:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009566:	e71e      	b.n	80093a6 <_vfiprintf_r+0x4e>
 8009568:	aa07      	add	r2, sp, #28
 800956a:	9200      	str	r2, [sp, #0]
 800956c:	0021      	movs	r1, r4
 800956e:	003a      	movs	r2, r7
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <_vfiprintf_r+0x234>)
 8009572:	9803      	ldr	r0, [sp, #12]
 8009574:	f7fd fea0 	bl	80072b8 <_printf_i>
 8009578:	e7e3      	b.n	8009542 <_vfiprintf_r+0x1ea>
 800957a:	46c0      	nop			@ (mov r8, r8)
 800957c:	08009e80 	.word	0x08009e80
 8009580:	08009e86 	.word	0x08009e86
 8009584:	08009e8a 	.word	0x08009e8a
 8009588:	08006d5d 	.word	0x08006d5d
 800958c:	08009333 	.word	0x08009333

08009590 <__sflush_r>:
 8009590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009592:	220c      	movs	r2, #12
 8009594:	5e8b      	ldrsh	r3, [r1, r2]
 8009596:	0005      	movs	r5, r0
 8009598:	000c      	movs	r4, r1
 800959a:	071a      	lsls	r2, r3, #28
 800959c:	d456      	bmi.n	800964c <__sflush_r+0xbc>
 800959e:	684a      	ldr	r2, [r1, #4]
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	dc02      	bgt.n	80095aa <__sflush_r+0x1a>
 80095a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	dd4e      	ble.n	8009648 <__sflush_r+0xb8>
 80095aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	d04b      	beq.n	8009648 <__sflush_r+0xb8>
 80095b0:	2200      	movs	r2, #0
 80095b2:	2080      	movs	r0, #128	@ 0x80
 80095b4:	682e      	ldr	r6, [r5, #0]
 80095b6:	602a      	str	r2, [r5, #0]
 80095b8:	001a      	movs	r2, r3
 80095ba:	0140      	lsls	r0, r0, #5
 80095bc:	6a21      	ldr	r1, [r4, #32]
 80095be:	4002      	ands	r2, r0
 80095c0:	4203      	tst	r3, r0
 80095c2:	d033      	beq.n	800962c <__sflush_r+0x9c>
 80095c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	075b      	lsls	r3, r3, #29
 80095ca:	d506      	bpl.n	80095da <__sflush_r+0x4a>
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <__sflush_r+0x4a>
 80095d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095d8:	1ad2      	subs	r2, r2, r3
 80095da:	2300      	movs	r3, #0
 80095dc:	0028      	movs	r0, r5
 80095de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80095e0:	6a21      	ldr	r1, [r4, #32]
 80095e2:	47b8      	blx	r7
 80095e4:	89a2      	ldrh	r2, [r4, #12]
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d106      	bne.n	80095f8 <__sflush_r+0x68>
 80095ea:	6829      	ldr	r1, [r5, #0]
 80095ec:	291d      	cmp	r1, #29
 80095ee:	d846      	bhi.n	800967e <__sflush_r+0xee>
 80095f0:	4b29      	ldr	r3, [pc, #164]	@ (8009698 <__sflush_r+0x108>)
 80095f2:	410b      	asrs	r3, r1
 80095f4:	07db      	lsls	r3, r3, #31
 80095f6:	d442      	bmi.n	800967e <__sflush_r+0xee>
 80095f8:	2300      	movs	r3, #0
 80095fa:	6063      	str	r3, [r4, #4]
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	04d2      	lsls	r2, r2, #19
 8009602:	d505      	bpl.n	8009610 <__sflush_r+0x80>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <__sflush_r+0x7e>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d100      	bne.n	8009610 <__sflush_r+0x80>
 800960e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009612:	602e      	str	r6, [r5, #0]
 8009614:	2900      	cmp	r1, #0
 8009616:	d017      	beq.n	8009648 <__sflush_r+0xb8>
 8009618:	0023      	movs	r3, r4
 800961a:	3344      	adds	r3, #68	@ 0x44
 800961c:	4299      	cmp	r1, r3
 800961e:	d002      	beq.n	8009626 <__sflush_r+0x96>
 8009620:	0028      	movs	r0, r5
 8009622:	f7ff f869 	bl	80086f8 <_free_r>
 8009626:	2300      	movs	r3, #0
 8009628:	6363      	str	r3, [r4, #52]	@ 0x34
 800962a:	e00d      	b.n	8009648 <__sflush_r+0xb8>
 800962c:	2301      	movs	r3, #1
 800962e:	0028      	movs	r0, r5
 8009630:	47b8      	blx	r7
 8009632:	0002      	movs	r2, r0
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d1c6      	bne.n	80095c6 <__sflush_r+0x36>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0c3      	beq.n	80095c6 <__sflush_r+0x36>
 800963e:	2b1d      	cmp	r3, #29
 8009640:	d001      	beq.n	8009646 <__sflush_r+0xb6>
 8009642:	2b16      	cmp	r3, #22
 8009644:	d11a      	bne.n	800967c <__sflush_r+0xec>
 8009646:	602e      	str	r6, [r5, #0]
 8009648:	2000      	movs	r0, #0
 800964a:	e01e      	b.n	800968a <__sflush_r+0xfa>
 800964c:	690e      	ldr	r6, [r1, #16]
 800964e:	2e00      	cmp	r6, #0
 8009650:	d0fa      	beq.n	8009648 <__sflush_r+0xb8>
 8009652:	680f      	ldr	r7, [r1, #0]
 8009654:	600e      	str	r6, [r1, #0]
 8009656:	1bba      	subs	r2, r7, r6
 8009658:	9201      	str	r2, [sp, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	079b      	lsls	r3, r3, #30
 800965e:	d100      	bne.n	8009662 <__sflush_r+0xd2>
 8009660:	694a      	ldr	r2, [r1, #20]
 8009662:	60a2      	str	r2, [r4, #8]
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	ddee      	ble.n	8009648 <__sflush_r+0xb8>
 800966a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800966c:	0032      	movs	r2, r6
 800966e:	001f      	movs	r7, r3
 8009670:	0028      	movs	r0, r5
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	6a21      	ldr	r1, [r4, #32]
 8009676:	47b8      	blx	r7
 8009678:	2800      	cmp	r0, #0
 800967a:	dc07      	bgt.n	800968c <__sflush_r+0xfc>
 800967c:	89a2      	ldrh	r2, [r4, #12]
 800967e:	2340      	movs	r3, #64	@ 0x40
 8009680:	2001      	movs	r0, #1
 8009682:	4313      	orrs	r3, r2
 8009684:	b21b      	sxth	r3, r3
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	4240      	negs	r0, r0
 800968a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	1836      	adds	r6, r6, r0
 8009690:	1a1b      	subs	r3, r3, r0
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	e7e6      	b.n	8009664 <__sflush_r+0xd4>
 8009696:	46c0      	nop			@ (mov r8, r8)
 8009698:	dfbffffe 	.word	0xdfbffffe

0800969c <_fflush_r>:
 800969c:	690b      	ldr	r3, [r1, #16]
 800969e:	b570      	push	{r4, r5, r6, lr}
 80096a0:	0005      	movs	r5, r0
 80096a2:	000c      	movs	r4, r1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <_fflush_r+0x12>
 80096a8:	2500      	movs	r5, #0
 80096aa:	0028      	movs	r0, r5
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d004      	beq.n	80096bc <_fflush_r+0x20>
 80096b2:	6a03      	ldr	r3, [r0, #32]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <_fflush_r+0x20>
 80096b8:	f7fd ff9c 	bl	80075f4 <__sinit>
 80096bc:	220c      	movs	r2, #12
 80096be:	5ea3      	ldrsh	r3, [r4, r2]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f1      	beq.n	80096a8 <_fflush_r+0xc>
 80096c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096c6:	07d2      	lsls	r2, r2, #31
 80096c8:	d404      	bmi.n	80096d4 <_fflush_r+0x38>
 80096ca:	059b      	lsls	r3, r3, #22
 80096cc:	d402      	bmi.n	80096d4 <_fflush_r+0x38>
 80096ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d0:	f7fe f965 	bl	800799e <__retarget_lock_acquire_recursive>
 80096d4:	0028      	movs	r0, r5
 80096d6:	0021      	movs	r1, r4
 80096d8:	f7ff ff5a 	bl	8009590 <__sflush_r>
 80096dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096de:	0005      	movs	r5, r0
 80096e0:	07db      	lsls	r3, r3, #31
 80096e2:	d4e2      	bmi.n	80096aa <_fflush_r+0xe>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	059b      	lsls	r3, r3, #22
 80096e8:	d4df      	bmi.n	80096aa <_fflush_r+0xe>
 80096ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ec:	f7fe f958 	bl	80079a0 <__retarget_lock_release_recursive>
 80096f0:	e7db      	b.n	80096aa <_fflush_r+0xe>
	...

080096f4 <fiprintf>:
 80096f4:	b40e      	push	{r1, r2, r3}
 80096f6:	b517      	push	{r0, r1, r2, r4, lr}
 80096f8:	4c05      	ldr	r4, [pc, #20]	@ (8009710 <fiprintf+0x1c>)
 80096fa:	ab05      	add	r3, sp, #20
 80096fc:	cb04      	ldmia	r3!, {r2}
 80096fe:	0001      	movs	r1, r0
 8009700:	6820      	ldr	r0, [r4, #0]
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	f7ff fe28 	bl	8009358 <_vfiprintf_r>
 8009708:	bc1e      	pop	{r1, r2, r3, r4}
 800970a:	bc08      	pop	{r3}
 800970c:	b003      	add	sp, #12
 800970e:	4718      	bx	r3
 8009710:	20000020 	.word	0x20000020

08009714 <__swhatbuf_r>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	000e      	movs	r6, r1
 8009718:	001d      	movs	r5, r3
 800971a:	230e      	movs	r3, #14
 800971c:	5ec9      	ldrsh	r1, [r1, r3]
 800971e:	0014      	movs	r4, r2
 8009720:	b096      	sub	sp, #88	@ 0x58
 8009722:	2900      	cmp	r1, #0
 8009724:	da0c      	bge.n	8009740 <__swhatbuf_r+0x2c>
 8009726:	89b2      	ldrh	r2, [r6, #12]
 8009728:	2380      	movs	r3, #128	@ 0x80
 800972a:	0011      	movs	r1, r2
 800972c:	4019      	ands	r1, r3
 800972e:	421a      	tst	r2, r3
 8009730:	d114      	bne.n	800975c <__swhatbuf_r+0x48>
 8009732:	2380      	movs	r3, #128	@ 0x80
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	2000      	movs	r0, #0
 8009738:	6029      	str	r1, [r5, #0]
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	b016      	add	sp, #88	@ 0x58
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	466a      	mov	r2, sp
 8009742:	f000 f865 	bl	8009810 <_fstat_r>
 8009746:	2800      	cmp	r0, #0
 8009748:	dbed      	blt.n	8009726 <__swhatbuf_r+0x12>
 800974a:	23f0      	movs	r3, #240	@ 0xf0
 800974c:	9901      	ldr	r1, [sp, #4]
 800974e:	021b      	lsls	r3, r3, #8
 8009750:	4019      	ands	r1, r3
 8009752:	4b04      	ldr	r3, [pc, #16]	@ (8009764 <__swhatbuf_r+0x50>)
 8009754:	18c9      	adds	r1, r1, r3
 8009756:	424b      	negs	r3, r1
 8009758:	4159      	adcs	r1, r3
 800975a:	e7ea      	b.n	8009732 <__swhatbuf_r+0x1e>
 800975c:	2100      	movs	r1, #0
 800975e:	2340      	movs	r3, #64	@ 0x40
 8009760:	e7e9      	b.n	8009736 <__swhatbuf_r+0x22>
 8009762:	46c0      	nop			@ (mov r8, r8)
 8009764:	ffffe000 	.word	0xffffe000

08009768 <__smakebuf_r>:
 8009768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976a:	2602      	movs	r6, #2
 800976c:	898b      	ldrh	r3, [r1, #12]
 800976e:	0005      	movs	r5, r0
 8009770:	000c      	movs	r4, r1
 8009772:	b085      	sub	sp, #20
 8009774:	4233      	tst	r3, r6
 8009776:	d007      	beq.n	8009788 <__smakebuf_r+0x20>
 8009778:	0023      	movs	r3, r4
 800977a:	3347      	adds	r3, #71	@ 0x47
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	6123      	str	r3, [r4, #16]
 8009780:	2301      	movs	r3, #1
 8009782:	6163      	str	r3, [r4, #20]
 8009784:	b005      	add	sp, #20
 8009786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009788:	ab03      	add	r3, sp, #12
 800978a:	aa02      	add	r2, sp, #8
 800978c:	f7ff ffc2 	bl	8009714 <__swhatbuf_r>
 8009790:	9f02      	ldr	r7, [sp, #8]
 8009792:	9001      	str	r0, [sp, #4]
 8009794:	0039      	movs	r1, r7
 8009796:	0028      	movs	r0, r5
 8009798:	f7ff f824 	bl	80087e4 <_malloc_r>
 800979c:	2800      	cmp	r0, #0
 800979e:	d108      	bne.n	80097b2 <__smakebuf_r+0x4a>
 80097a0:	220c      	movs	r2, #12
 80097a2:	5ea3      	ldrsh	r3, [r4, r2]
 80097a4:	059a      	lsls	r2, r3, #22
 80097a6:	d4ed      	bmi.n	8009784 <__smakebuf_r+0x1c>
 80097a8:	2203      	movs	r2, #3
 80097aa:	4393      	bics	r3, r2
 80097ac:	431e      	orrs	r6, r3
 80097ae:	81a6      	strh	r6, [r4, #12]
 80097b0:	e7e2      	b.n	8009778 <__smakebuf_r+0x10>
 80097b2:	2380      	movs	r3, #128	@ 0x80
 80097b4:	89a2      	ldrh	r2, [r4, #12]
 80097b6:	6020      	str	r0, [r4, #0]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	6120      	str	r0, [r4, #16]
 80097c0:	6167      	str	r7, [r4, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <__smakebuf_r+0x78>
 80097c6:	0028      	movs	r0, r5
 80097c8:	230e      	movs	r3, #14
 80097ca:	5ee1      	ldrsh	r1, [r4, r3]
 80097cc:	f000 f832 	bl	8009834 <_isatty_r>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d005      	beq.n	80097e0 <__smakebuf_r+0x78>
 80097d4:	2303      	movs	r3, #3
 80097d6:	89a2      	ldrh	r2, [r4, #12]
 80097d8:	439a      	bics	r2, r3
 80097da:	3b02      	subs	r3, #2
 80097dc:	4313      	orrs	r3, r2
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	9a01      	ldr	r2, [sp, #4]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	e7cc      	b.n	8009784 <__smakebuf_r+0x1c>

080097ea <memmove>:
 80097ea:	b510      	push	{r4, lr}
 80097ec:	4288      	cmp	r0, r1
 80097ee:	d806      	bhi.n	80097fe <memmove+0x14>
 80097f0:	2300      	movs	r3, #0
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d008      	beq.n	8009808 <memmove+0x1e>
 80097f6:	5ccc      	ldrb	r4, [r1, r3]
 80097f8:	54c4      	strb	r4, [r0, r3]
 80097fa:	3301      	adds	r3, #1
 80097fc:	e7f9      	b.n	80097f2 <memmove+0x8>
 80097fe:	188b      	adds	r3, r1, r2
 8009800:	4298      	cmp	r0, r3
 8009802:	d2f5      	bcs.n	80097f0 <memmove+0x6>
 8009804:	3a01      	subs	r2, #1
 8009806:	d200      	bcs.n	800980a <memmove+0x20>
 8009808:	bd10      	pop	{r4, pc}
 800980a:	5c8b      	ldrb	r3, [r1, r2]
 800980c:	5483      	strb	r3, [r0, r2]
 800980e:	e7f9      	b.n	8009804 <memmove+0x1a>

08009810 <_fstat_r>:
 8009810:	2300      	movs	r3, #0
 8009812:	b570      	push	{r4, r5, r6, lr}
 8009814:	4d06      	ldr	r5, [pc, #24]	@ (8009830 <_fstat_r+0x20>)
 8009816:	0004      	movs	r4, r0
 8009818:	0008      	movs	r0, r1
 800981a:	0011      	movs	r1, r2
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	f7f9 ff2b 	bl	8003678 <_fstat>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	d103      	bne.n	800982e <_fstat_r+0x1e>
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d000      	beq.n	800982e <_fstat_r+0x1e>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	200005b0 	.word	0x200005b0

08009834 <_isatty_r>:
 8009834:	2300      	movs	r3, #0
 8009836:	b570      	push	{r4, r5, r6, lr}
 8009838:	4d06      	ldr	r5, [pc, #24]	@ (8009854 <_isatty_r+0x20>)
 800983a:	0004      	movs	r4, r0
 800983c:	0008      	movs	r0, r1
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	f7f9 ff28 	bl	8003694 <_isatty>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d103      	bne.n	8009850 <_isatty_r+0x1c>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d000      	beq.n	8009850 <_isatty_r+0x1c>
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	bd70      	pop	{r4, r5, r6, pc}
 8009852:	46c0      	nop			@ (mov r8, r8)
 8009854:	200005b0 	.word	0x200005b0

08009858 <_sbrk_r>:
 8009858:	2300      	movs	r3, #0
 800985a:	b570      	push	{r4, r5, r6, lr}
 800985c:	4d06      	ldr	r5, [pc, #24]	@ (8009878 <_sbrk_r+0x20>)
 800985e:	0004      	movs	r4, r0
 8009860:	0008      	movs	r0, r1
 8009862:	602b      	str	r3, [r5, #0]
 8009864:	f7f9 ff2a 	bl	80036bc <_sbrk>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d103      	bne.n	8009874 <_sbrk_r+0x1c>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d000      	beq.n	8009874 <_sbrk_r+0x1c>
 8009872:	6023      	str	r3, [r4, #0]
 8009874:	bd70      	pop	{r4, r5, r6, pc}
 8009876:	46c0      	nop			@ (mov r8, r8)
 8009878:	200005b0 	.word	0x200005b0

0800987c <memcpy>:
 800987c:	2300      	movs	r3, #0
 800987e:	b510      	push	{r4, lr}
 8009880:	429a      	cmp	r2, r3
 8009882:	d100      	bne.n	8009886 <memcpy+0xa>
 8009884:	bd10      	pop	{r4, pc}
 8009886:	5ccc      	ldrb	r4, [r1, r3]
 8009888:	54c4      	strb	r4, [r0, r3]
 800988a:	3301      	adds	r3, #1
 800988c:	e7f8      	b.n	8009880 <memcpy+0x4>

0800988e <abort>:
 800988e:	2006      	movs	r0, #6
 8009890:	b510      	push	{r4, lr}
 8009892:	f000 f8a7 	bl	80099e4 <raise>
 8009896:	2001      	movs	r0, #1
 8009898:	f7f9 fe9e 	bl	80035d8 <_exit>

0800989c <_calloc_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	0c0b      	lsrs	r3, r1, #16
 80098a0:	0c15      	lsrs	r5, r2, #16
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d11e      	bne.n	80098e4 <_calloc_r+0x48>
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	d10c      	bne.n	80098c4 <_calloc_r+0x28>
 80098aa:	b289      	uxth	r1, r1
 80098ac:	b294      	uxth	r4, r2
 80098ae:	434c      	muls	r4, r1
 80098b0:	0021      	movs	r1, r4
 80098b2:	f7fe ff97 	bl	80087e4 <_malloc_r>
 80098b6:	1e05      	subs	r5, r0, #0
 80098b8:	d01a      	beq.n	80098f0 <_calloc_r+0x54>
 80098ba:	0022      	movs	r2, r4
 80098bc:	2100      	movs	r1, #0
 80098be:	f7fd ffe9 	bl	8007894 <memset>
 80098c2:	e016      	b.n	80098f2 <_calloc_r+0x56>
 80098c4:	1c2b      	adds	r3, r5, #0
 80098c6:	1c0c      	adds	r4, r1, #0
 80098c8:	b289      	uxth	r1, r1
 80098ca:	b292      	uxth	r2, r2
 80098cc:	434a      	muls	r2, r1
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	b2a1      	uxth	r1, r4
 80098d2:	4359      	muls	r1, r3
 80098d4:	0c14      	lsrs	r4, r2, #16
 80098d6:	190c      	adds	r4, r1, r4
 80098d8:	0c23      	lsrs	r3, r4, #16
 80098da:	d107      	bne.n	80098ec <_calloc_r+0x50>
 80098dc:	0424      	lsls	r4, r4, #16
 80098de:	b292      	uxth	r2, r2
 80098e0:	4314      	orrs	r4, r2
 80098e2:	e7e5      	b.n	80098b0 <_calloc_r+0x14>
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	d101      	bne.n	80098ec <_calloc_r+0x50>
 80098e8:	1c14      	adds	r4, r2, #0
 80098ea:	e7ed      	b.n	80098c8 <_calloc_r+0x2c>
 80098ec:	230c      	movs	r3, #12
 80098ee:	6003      	str	r3, [r0, #0]
 80098f0:	2500      	movs	r5, #0
 80098f2:	0028      	movs	r0, r5
 80098f4:	bd70      	pop	{r4, r5, r6, pc}

080098f6 <__ascii_mbtowc>:
 80098f6:	b082      	sub	sp, #8
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d100      	bne.n	80098fe <__ascii_mbtowc+0x8>
 80098fc:	a901      	add	r1, sp, #4
 80098fe:	1e10      	subs	r0, r2, #0
 8009900:	d006      	beq.n	8009910 <__ascii_mbtowc+0x1a>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d006      	beq.n	8009914 <__ascii_mbtowc+0x1e>
 8009906:	7813      	ldrb	r3, [r2, #0]
 8009908:	600b      	str	r3, [r1, #0]
 800990a:	7810      	ldrb	r0, [r2, #0]
 800990c:	1e43      	subs	r3, r0, #1
 800990e:	4198      	sbcs	r0, r3
 8009910:	b002      	add	sp, #8
 8009912:	4770      	bx	lr
 8009914:	2002      	movs	r0, #2
 8009916:	4240      	negs	r0, r0
 8009918:	e7fa      	b.n	8009910 <__ascii_mbtowc+0x1a>

0800991a <_realloc_r>:
 800991a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991c:	0006      	movs	r6, r0
 800991e:	000c      	movs	r4, r1
 8009920:	0015      	movs	r5, r2
 8009922:	2900      	cmp	r1, #0
 8009924:	d105      	bne.n	8009932 <_realloc_r+0x18>
 8009926:	0011      	movs	r1, r2
 8009928:	f7fe ff5c 	bl	80087e4 <_malloc_r>
 800992c:	0004      	movs	r4, r0
 800992e:	0020      	movs	r0, r4
 8009930:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009932:	2a00      	cmp	r2, #0
 8009934:	d103      	bne.n	800993e <_realloc_r+0x24>
 8009936:	f7fe fedf 	bl	80086f8 <_free_r>
 800993a:	2400      	movs	r4, #0
 800993c:	e7f7      	b.n	800992e <_realloc_r+0x14>
 800993e:	f000 f871 	bl	8009a24 <_malloc_usable_size_r>
 8009942:	0007      	movs	r7, r0
 8009944:	4285      	cmp	r5, r0
 8009946:	d802      	bhi.n	800994e <_realloc_r+0x34>
 8009948:	0843      	lsrs	r3, r0, #1
 800994a:	42ab      	cmp	r3, r5
 800994c:	d3ef      	bcc.n	800992e <_realloc_r+0x14>
 800994e:	0029      	movs	r1, r5
 8009950:	0030      	movs	r0, r6
 8009952:	f7fe ff47 	bl	80087e4 <_malloc_r>
 8009956:	9001      	str	r0, [sp, #4]
 8009958:	2800      	cmp	r0, #0
 800995a:	d0ee      	beq.n	800993a <_realloc_r+0x20>
 800995c:	002a      	movs	r2, r5
 800995e:	42bd      	cmp	r5, r7
 8009960:	d900      	bls.n	8009964 <_realloc_r+0x4a>
 8009962:	003a      	movs	r2, r7
 8009964:	0021      	movs	r1, r4
 8009966:	9801      	ldr	r0, [sp, #4]
 8009968:	f7ff ff88 	bl	800987c <memcpy>
 800996c:	0021      	movs	r1, r4
 800996e:	0030      	movs	r0, r6
 8009970:	f7fe fec2 	bl	80086f8 <_free_r>
 8009974:	9c01      	ldr	r4, [sp, #4]
 8009976:	e7da      	b.n	800992e <_realloc_r+0x14>

08009978 <__ascii_wctomb>:
 8009978:	0003      	movs	r3, r0
 800997a:	1e08      	subs	r0, r1, #0
 800997c:	d005      	beq.n	800998a <__ascii_wctomb+0x12>
 800997e:	2aff      	cmp	r2, #255	@ 0xff
 8009980:	d904      	bls.n	800998c <__ascii_wctomb+0x14>
 8009982:	228a      	movs	r2, #138	@ 0x8a
 8009984:	2001      	movs	r0, #1
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	4240      	negs	r0, r0
 800998a:	4770      	bx	lr
 800998c:	2001      	movs	r0, #1
 800998e:	700a      	strb	r2, [r1, #0]
 8009990:	e7fb      	b.n	800998a <__ascii_wctomb+0x12>

08009992 <_raise_r>:
 8009992:	b570      	push	{r4, r5, r6, lr}
 8009994:	0004      	movs	r4, r0
 8009996:	000d      	movs	r5, r1
 8009998:	291f      	cmp	r1, #31
 800999a:	d904      	bls.n	80099a6 <_raise_r+0x14>
 800999c:	2316      	movs	r3, #22
 800999e:	6003      	str	r3, [r0, #0]
 80099a0:	2001      	movs	r0, #1
 80099a2:	4240      	negs	r0, r0
 80099a4:	bd70      	pop	{r4, r5, r6, pc}
 80099a6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <_raise_r+0x24>
 80099ac:	008a      	lsls	r2, r1, #2
 80099ae:	189b      	adds	r3, r3, r2
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d108      	bne.n	80099c8 <_raise_r+0x36>
 80099b6:	0020      	movs	r0, r4
 80099b8:	f000 f830 	bl	8009a1c <_getpid_r>
 80099bc:	002a      	movs	r2, r5
 80099be:	0001      	movs	r1, r0
 80099c0:	0020      	movs	r0, r4
 80099c2:	f000 f819 	bl	80099f8 <_kill_r>
 80099c6:	e7ed      	b.n	80099a4 <_raise_r+0x12>
 80099c8:	2a01      	cmp	r2, #1
 80099ca:	d009      	beq.n	80099e0 <_raise_r+0x4e>
 80099cc:	1c51      	adds	r1, r2, #1
 80099ce:	d103      	bne.n	80099d8 <_raise_r+0x46>
 80099d0:	2316      	movs	r3, #22
 80099d2:	6003      	str	r3, [r0, #0]
 80099d4:	2001      	movs	r0, #1
 80099d6:	e7e5      	b.n	80099a4 <_raise_r+0x12>
 80099d8:	2100      	movs	r1, #0
 80099da:	0028      	movs	r0, r5
 80099dc:	6019      	str	r1, [r3, #0]
 80099de:	4790      	blx	r2
 80099e0:	2000      	movs	r0, #0
 80099e2:	e7df      	b.n	80099a4 <_raise_r+0x12>

080099e4 <raise>:
 80099e4:	b510      	push	{r4, lr}
 80099e6:	4b03      	ldr	r3, [pc, #12]	@ (80099f4 <raise+0x10>)
 80099e8:	0001      	movs	r1, r0
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	f7ff ffd1 	bl	8009992 <_raise_r>
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	46c0      	nop			@ (mov r8, r8)
 80099f4:	20000020 	.word	0x20000020

080099f8 <_kill_r>:
 80099f8:	2300      	movs	r3, #0
 80099fa:	b570      	push	{r4, r5, r6, lr}
 80099fc:	4d06      	ldr	r5, [pc, #24]	@ (8009a18 <_kill_r+0x20>)
 80099fe:	0004      	movs	r4, r0
 8009a00:	0008      	movs	r0, r1
 8009a02:	0011      	movs	r1, r2
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	f7f9 fdd7 	bl	80035b8 <_kill>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d103      	bne.n	8009a16 <_kill_r+0x1e>
 8009a0e:	682b      	ldr	r3, [r5, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d000      	beq.n	8009a16 <_kill_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	200005b0 	.word	0x200005b0

08009a1c <_getpid_r>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	f7f9 fdc5 	bl	80035ac <_getpid>
 8009a22:	bd10      	pop	{r4, pc}

08009a24 <_malloc_usable_size_r>:
 8009a24:	1f0b      	subs	r3, r1, #4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	1f18      	subs	r0, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	da01      	bge.n	8009a32 <_malloc_usable_size_r+0xe>
 8009a2e:	580b      	ldr	r3, [r1, r0]
 8009a30:	18c0      	adds	r0, r0, r3
 8009a32:	4770      	bx	lr

08009a34 <_init>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	46c0      	nop			@ (mov r8, r8)
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr

08009a40 <_fini>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	46c0      	nop			@ (mov r8, r8)
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr
