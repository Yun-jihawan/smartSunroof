
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006e38  08006e38  00007e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f54  08006f54  00007f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f5c  08006f5c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f5c  08006f5c  00007f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f60  08006f60  00007f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006f64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000006c  08006fd0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08006fd0  00008504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119bd  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b4  00000000  00000000  00019a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba4  00000000  00000000  0001da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e1d  00000000  00000000  0001e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c90  00000000  00000000  00036401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c36c  00000000  00000000  0004b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d73fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  000d7440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000db020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e20 	.word	0x08006e20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08006e20 	.word	0x08006e20

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	d434      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002aa:	469b      	mov	fp, r3
 80002ac:	4653      	mov	r3, sl
 80002ae:	465a      	mov	r2, fp
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83b      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e079      	b.n	80003ba <__udivmoddi4+0x146>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e076      	b.n	80003c0 <__udivmoddi4+0x14c>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e029      	b.n	8000340 <__udivmoddi4+0xcc>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	469b      	mov	fp, r3
 8000318:	2320      	movs	r3, #32
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	4652      	mov	r2, sl
 800031e:	40da      	lsrs	r2, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0013      	movs	r3, r2
 8000324:	464a      	mov	r2, r9
 8000326:	408a      	lsls	r2, r1
 8000328:	0017      	movs	r7, r2
 800032a:	4642      	mov	r2, r8
 800032c:	431f      	orrs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d9c3      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	4643      	mov	r3, r8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0d8      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000346:	07fb      	lsls	r3, r7, #31
 8000348:	0872      	lsrs	r2, r6, #1
 800034a:	431a      	orrs	r2, r3
 800034c:	4646      	mov	r6, r8
 800034e:	087b      	lsrs	r3, r7, #1
 8000350:	e00e      	b.n	8000370 <__udivmoddi4+0xfc>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d101      	bne.n	800035a <__udivmoddi4+0xe6>
 8000356:	42a2      	cmp	r2, r4
 8000358:	d80c      	bhi.n	8000374 <__udivmoddi4+0x100>
 800035a:	1aa4      	subs	r4, r4, r2
 800035c:	419d      	sbcs	r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	1924      	adds	r4, r4, r4
 8000362:	416d      	adcs	r5, r5
 8000364:	2100      	movs	r1, #0
 8000366:	3e01      	subs	r6, #1
 8000368:	1824      	adds	r4, r4, r0
 800036a:	414d      	adcs	r5, r1
 800036c:	2e00      	cmp	r6, #0
 800036e:	d006      	beq.n	800037e <__udivmoddi4+0x10a>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d9ee      	bls.n	8000352 <__udivmoddi4+0xde>
 8000374:	3e01      	subs	r6, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2e00      	cmp	r6, #0
 800037c:	d1f8      	bne.n	8000370 <__udivmoddi4+0xfc>
 800037e:	9800      	ldr	r0, [sp, #0]
 8000380:	9901      	ldr	r1, [sp, #4]
 8000382:	465b      	mov	r3, fp
 8000384:	1900      	adds	r0, r0, r4
 8000386:	4169      	adcs	r1, r5
 8000388:	2b00      	cmp	r3, #0
 800038a:	db24      	blt.n	80003d6 <__udivmoddi4+0x162>
 800038c:	002b      	movs	r3, r5
 800038e:	465a      	mov	r2, fp
 8000390:	4644      	mov	r4, r8
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	40e2      	lsrs	r2, r4
 8000398:	001c      	movs	r4, r3
 800039a:	465b      	mov	r3, fp
 800039c:	0015      	movs	r5, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db2a      	blt.n	80003f8 <__udivmoddi4+0x184>
 80003a2:	0026      	movs	r6, r4
 80003a4:	409e      	lsls	r6, r3
 80003a6:	0033      	movs	r3, r6
 80003a8:	0026      	movs	r6, r4
 80003aa:	4647      	mov	r7, r8
 80003ac:	40be      	lsls	r6, r7
 80003ae:	0032      	movs	r2, r6
 80003b0:	1a80      	subs	r0, r0, r2
 80003b2:	4199      	sbcs	r1, r3
 80003b4:	9000      	str	r0, [sp, #0]
 80003b6:	9101      	str	r1, [sp, #4]
 80003b8:	e79e      	b.n	80002f8 <__udivmoddi4+0x84>
 80003ba:	42a3      	cmp	r3, r4
 80003bc:	d8bc      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80003be:	e782      	b.n	80002c6 <__udivmoddi4+0x52>
 80003c0:	4642      	mov	r2, r8
 80003c2:	2320      	movs	r3, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	2200      	movs	r2, #0
 80003ca:	9100      	str	r1, [sp, #0]
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	2201      	movs	r2, #1
 80003d0:	40da      	lsrs	r2, r3
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	e785      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d6:	4642      	mov	r2, r8
 80003d8:	2320      	movs	r3, #32
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	4646      	mov	r6, r8
 80003e0:	409a      	lsls	r2, r3
 80003e2:	0023      	movs	r3, r4
 80003e4:	40f3      	lsrs	r3, r6
 80003e6:	4644      	mov	r4, r8
 80003e8:	4313      	orrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dad4      	bge.n	80003a2 <__udivmoddi4+0x12e>
 80003f8:	4642      	mov	r2, r8
 80003fa:	002f      	movs	r7, r5
 80003fc:	2320      	movs	r3, #32
 80003fe:	0026      	movs	r6, r4
 8000400:	4097      	lsls	r7, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	40de      	lsrs	r6, r3
 8000406:	003b      	movs	r3, r7
 8000408:	4333      	orrs	r3, r6
 800040a:	e7cd      	b.n	80003a8 <__udivmoddi4+0x134>

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	@ (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000466:	003b      	movs	r3, r7
 8000468:	0018      	movs	r0, r3
 800046a:	2308      	movs	r3, #8
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f005 ff34 	bl	80062dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000474:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000476:	4a38      	ldr	r2, [pc, #224]	@ (8000558 <MX_ADC_Init+0xf8>)
 8000478:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800047a:	4b36      	ldr	r3, [pc, #216]	@ (8000554 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000480:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000482:	22c0      	movs	r2, #192	@ 0xc0
 8000484:	0612      	lsls	r2, r2, #24
 8000486:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000488:	4b32      	ldr	r3, [pc, #200]	@ (8000554 <MX_ADC_Init+0xf4>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800048e:	4b31      	ldr	r3, [pc, #196]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000490:	2200      	movs	r2, #0
 8000492:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000494:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <MX_ADC_Init+0xf4>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004aa:	2221      	movs	r2, #33	@ 0x21
 80004ac:	2100      	movs	r1, #0
 80004ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b0:	4b28      	ldr	r3, [pc, #160]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b6:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004b8:	22c2      	movs	r2, #194	@ 0xc2
 80004ba:	32ff      	adds	r2, #255	@ 0xff
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004be:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004c0:	222c      	movs	r2, #44	@ 0x2c
 80004c2:	2100      	movs	r1, #0
 80004c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c6:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004cc:	4b21      	ldr	r3, [pc, #132]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004d2:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fb7c 	bl	8001be4 <HAL_ADC_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004f0:	f000 fb8a 	bl	8000c08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2201      	movs	r2, #1
 80004f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2280      	movs	r2, #128	@ 0x80
 80004fe:	0152      	lsls	r2, r2, #5
 8000500:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000502:	003a      	movs	r2, r7
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fddb 	bl	80020c4 <HAL_ADC_ConfigChannel>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000512:	f000 fb79 	bl	8000c08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000516:	003b      	movs	r3, r7
 8000518:	4a10      	ldr	r2, [pc, #64]	@ (800055c <MX_ADC_Init+0xfc>)
 800051a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800051c:	003a      	movs	r2, r7
 800051e:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f001 fdce 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800052c:	f000 fb6c 	bl	8000c08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000530:	003b      	movs	r3, r7
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <MX_ADC_Init+0x100>)
 8000534:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000536:	003a      	movs	r2, r7
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_ADC_Init+0xf4>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fdc1 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000546:	f000 fb5f 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	20000088 	.word	0x20000088
 8000558:	40012400 	.word	0x40012400
 800055c:	04000002 	.word	0x04000002
 8000560:	3c008000 	.word	0x3c008000

08000564 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	@ 0x2c
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2414      	movs	r4, #20
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	2314      	movs	r3, #20
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f005 feb0 	bl	80062dc <memset>
  if(adcHandle->Instance==ADC1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a22      	ldr	r2, [pc, #136]	@ (800060c <HAL_ADC_MspInit+0xa8>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d13d      	bne.n	8000602 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058a:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0089      	lsls	r1, r1, #2
 8000590:	430a      	orrs	r2, r1
 8000592:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 8000596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 800059a:	2101      	movs	r1, #1
 800059c:	430a      	orrs	r2, r1
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a4:	2201      	movs	r2, #1
 80005a6:	4013      	ands	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005b2:	2104      	movs	r1, #4
 80005b4:	430a      	orrs	r2, r1
 80005b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005bc:	2204      	movs	r2, #4
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2203      	movs	r2, #3
 80005c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2203      	movs	r2, #3
 80005ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	23a0      	movs	r3, #160	@ 0xa0
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fa56 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2220      	movs	r2, #32
 80005e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2203      	movs	r2, #3
 80005ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <HAL_ADC_MspInit+0xb0>)
 80005fa:	0019      	movs	r1, r3
 80005fc:	0010      	movs	r0, r2
 80005fe:	f002 fa47 	bl	8002a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b00b      	add	sp, #44	@ 0x2c
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	40012400 	.word	0x40012400
 8000610:	40021000 	.word	0x40021000
 8000614:	50000800 	.word	0x50000800

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_DMA_Init+0x48>)
 8000620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_DMA_Init+0x48>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
 800062a:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_DMA_Init+0x48>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200a      	movs	r0, #10
 800063c:	f001 ffb4 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000640:	200a      	movs	r0, #10
 8000642:	f001 ffc6 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	200b      	movs	r0, #11
 800064c:	f001 ffac 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000650:	200b      	movs	r0, #11
 8000652:	f001 ffbe 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b08b      	sub	sp, #44	@ 0x2c
 8000668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	2414      	movs	r4, #20
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f005 fe31 	bl	80062dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b5a      	ldr	r3, [pc, #360]	@ (80007e4 <MX_GPIO_Init+0x180>)
 800067c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800067e:	4b59      	ldr	r3, [pc, #356]	@ (80007e4 <MX_GPIO_Init+0x180>)
 8000680:	2104      	movs	r1, #4
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000686:	4b57      	ldr	r3, [pc, #348]	@ (80007e4 <MX_GPIO_Init+0x180>)
 8000688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068a:	2204      	movs	r2, #4
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	4b54      	ldr	r3, [pc, #336]	@ (80007e4 <MX_GPIO_Init+0x180>)
 8000694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000696:	4b53      	ldr	r3, [pc, #332]	@ (80007e4 <MX_GPIO_Init+0x180>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	430a      	orrs	r2, r1
 800069c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800069e:	4b51      	ldr	r3, [pc, #324]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b4e      	ldr	r3, [pc, #312]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ae:	4b4d      	ldr	r3, [pc, #308]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006b6:	4b4b      	ldr	r3, [pc, #300]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b48      	ldr	r3, [pc, #288]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c6:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006c8:	2102      	movs	r1, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ce:	4b45      	ldr	r3, [pc, #276]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d2:	2202      	movs	r2, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	4b42      	ldr	r3, [pc, #264]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006de:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006e0:	2108      	movs	r1, #8
 80006e2:	430a      	orrs	r2, r1
 80006e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e6:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <MX_GPIO_Init+0x180>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ea:	2208      	movs	r2, #8
 80006ec:	4013      	ands	r3, r2
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin, GPIO_PIN_RESET);
 80006f2:	2398      	movs	r3, #152	@ 0x98
 80006f4:	0099      	lsls	r1, r3, #2
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 fb62 	bl	8002dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, GPIO_PIN_RESET);
 8000702:	4b39      	ldr	r3, [pc, #228]	@ (80007e8 <MX_GPIO_Init+0x184>)
 8000704:	2200      	movs	r2, #0
 8000706:	2180      	movs	r1, #128	@ 0x80
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fb5c 	bl	8002dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	0192      	lsls	r2, r2, #6
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2284      	movs	r2, #132	@ 0x84
 800071a:	0392      	lsls	r2, r2, #14
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	193b      	adds	r3, r7, r4
 8000726:	4a30      	ldr	r2, [pc, #192]	@ (80007e8 <MX_GPIO_Init+0x184>)
 8000728:	0019      	movs	r1, r3
 800072a:	0010      	movs	r0, r2
 800072c:	f002 f9b0 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_ENC_A_Pin ROOF_ENC_B_Pin */
  GPIO_InitStruct.Pin = ROOF_ENC_A_Pin|ROOF_ENC_B_Pin;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2203      	movs	r2, #3
 8000736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c4      	movs	r2, #196	@ 0xc4
 800073c:	0392      	lsls	r2, r2, #14
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000746:	000c      	movs	r4, r1
 8000748:	187b      	adds	r3, r7, r1
 800074a:	4a27      	ldr	r2, [pc, #156]	@ (80007e8 <MX_GPIO_Init+0x184>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f002 f99e 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_DIR_Pin ROOF_DIR_Pin TILTING_BRAKE_Pin */
  GPIO_InitStruct.Pin = TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin;
 8000754:	0021      	movs	r1, r4
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2298      	movs	r2, #152	@ 0x98
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	000c      	movs	r4, r1
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2201      	movs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	193a      	adds	r2, r7, r4
 8000774:	23a0      	movs	r3, #160	@ 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f988 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_ENC_A_Pin TILTING_ENC_B_Pin */
  GPIO_InitStruct.Pin = TILTING_ENC_A_Pin|TILTING_ENC_B_Pin;
 8000780:	0021      	movs	r1, r4
 8000782:	187b      	adds	r3, r7, r1
 8000784:	22c0      	movs	r2, #192	@ 0xc0
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2288      	movs	r2, #136	@ 0x88
 800078e:	0352      	lsls	r2, r2, #13
 8000790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	000c      	movs	r4, r1
 800079a:	187b      	adds	r3, r7, r1
 800079c:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_GPIO_Init+0x188>)
 800079e:	0019      	movs	r1, r3
 80007a0:	0010      	movs	r0, r2
 80007a2:	f002 f975 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROOF_BRAKE_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ROOF_BRAKE_GPIO_Port, &GPIO_InitStruct);
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <MX_GPIO_Init+0x184>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	0010      	movs	r0, r2
 80007c8:	f002 f962 	bl	8002a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2007      	movs	r0, #7
 80007d2:	f001 fee9 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007d6:	2007      	movs	r0, #7
 80007d8:	f001 fefb 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b00b      	add	sp, #44	@ 0x2c
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	50000800 	.word	0x50000800
 80007ec:	50000400 	.word	0x50000400

080007f0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007f8:	2301      	movs	r3, #1
 80007fa:	425b      	negs	r3, r3
 80007fc:	1d39      	adds	r1, r7, #4
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <__io_putchar+0x20>)
 8000800:	2201      	movs	r2, #1
 8000802:	f004 f81b 	bl	800483c <HAL_UART_Transmit>
    return ch;
 8000806:	687b      	ldr	r3, [r7, #4]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000214 	.word	0x20000214

08000814 <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_UART_RxCpltCallback+0x2c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d108      	bne.n	8000838 <HAL_UART_RxCpltCallback+0x24>
    	CGW_rx_ready = 1;
 8000826:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <HAL_UART_RxCpltCallback+0x30>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Receive_DMA(&huart1, CGW_rx_buf, sizeof(CGW_rx_buf));
 800082c:	4906      	ldr	r1, [pc, #24]	@ (8000848 <HAL_UART_RxCpltCallback+0x34>)
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <HAL_UART_RxCpltCallback+0x38>)
 8000830:	2202      	movs	r2, #2
 8000832:	0018      	movs	r0, r3
 8000834:	f004 f8a2 	bl	800497c <HAL_UART_Receive_DMA>
    }
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013800 	.word	0x40013800
 8000844:	20000104 	.word	0x20000104
 8000848:	20000100 	.word	0x20000100
 800084c:	2000018c 	.word	0x2000018c

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f001 f955 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f8d9 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff ff01 	bl	8000664 <MX_GPIO_Init>
  MX_DMA_Init();
 8000862:	f7ff fed9 	bl	8000618 <MX_DMA_Init>
  MX_ADC_Init();
 8000866:	f7ff fdfb 	bl	8000460 <MX_ADC_Init>
  MX_TIM2_Init();
 800086a:	f000 fdab 	bl	80013c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800086e:	f000 ff61 	bl	8001734 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000872:	f000 fe25 	bl	80014c0 <MX_TIM3_Init>
  MX_USART5_UART_Init();
 8000876:	f000 ff8d 	bl	8001794 <MX_USART5_UART_Init>
  MX_USART1_UART_Init();
 800087a:	f000 ff2b 	bl	80016d4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800087e:	f000 f92f 	bl	8000ae0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000882:	4b50      	ldr	r3, [pc, #320]	@ (80009c4 <main+0x174>)
 8000884:	2104      	movs	r1, #4
 8000886:	0018      	movs	r0, r3
 8000888:	f003 fad4 	bl	8003e34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800088c:	4b4e      	ldr	r3, [pc, #312]	@ (80009c8 <main+0x178>)
 800088e:	2104      	movs	r1, #4
 8000890:	0018      	movs	r0, r3
 8000892:	f003 facf 	bl	8003e34 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, CGW_rx_buf, sizeof(CGW_rx_buf));
 8000896:	494d      	ldr	r1, [pc, #308]	@ (80009cc <main+0x17c>)
 8000898:	4b4d      	ldr	r3, [pc, #308]	@ (80009d0 <main+0x180>)
 800089a:	2202      	movs	r2, #2
 800089c:	0018      	movs	r0, r3
 800089e:	f004 f86d 	bl	800497c <HAL_UART_Receive_DMA>

  // Initialize
  roof_encoder = 0;
 80008a2:	4b4c      	ldr	r3, [pc, #304]	@ (80009d4 <main+0x184>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
  tilting_encoder = 0;
 80008a8:	4b4b      	ldr	r3, [pc, #300]	@ (80009d8 <main+0x188>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
  roof_state = STOP;
 80008ae:	4b4b      	ldr	r3, [pc, #300]	@ (80009dc <main+0x18c>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	701a      	strb	r2, [r3, #0]
  film_opacity = 0;
 80008b4:	4b4a      	ldr	r3, [pc, #296]	@ (80009e0 <main+0x190>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
  CGW_rx_ready = 0;
 80008ba:	4b4a      	ldr	r3, [pc, #296]	@ (80009e4 <main+0x194>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  sensor_read = 0;
 80008c0:	4b49      	ldr	r3, [pc, #292]	@ (80009e8 <main+0x198>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]

  printf("#BOOT\r\n");
 80008c6:	4b49      	ldr	r3, [pc, #292]	@ (80009ec <main+0x19c>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f005 fc11 	bl	80060f0 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 센서 값 수신 및 UART 송신
	  if(sensor_read)
 80008ce:	4b46      	ldr	r3, [pc, #280]	@ (80009e8 <main+0x198>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d022      	beq.n	800091c <main+0xcc>
	  {
		  sensor_read = 0;
 80008d6:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <main+0x198>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]

		  read_illum();
 80008dc:	f000 fc1a 	bl	8001114 <read_illum>
		  read_rain();
 80008e0:	f000 fc32 	bl	8001148 <read_rain>
		  Send_Data_CGW();
 80008e4:	f000 f90a 	bl	8000afc <Send_Data_CGW>

		  printf("#SEND\r\n in : %d, out : %d, rain : %d, roof : %d, opacity : %d\r\n", \
 80008e8:	4b41      	ldr	r3, [pc, #260]	@ (80009f0 <main+0x1a0>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	0019      	movs	r1, r3
 80008f0:	4b40      	ldr	r3, [pc, #256]	@ (80009f4 <main+0x1a4>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	001c      	movs	r4, r3
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <main+0x1a8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	001d      	movs	r5, r3
 8000900:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <main+0x18c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	001a      	movs	r2, r3
 8000908:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <main+0x190>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	483b      	ldr	r0, [pc, #236]	@ (80009fc <main+0x1ac>)
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	9200      	str	r2, [sp, #0]
 8000914:	002b      	movs	r3, r5
 8000916:	0022      	movs	r2, r4
 8000918:	f005 fb84 	bl	8006024 <iprintf>
				  (int)in_illum, (int)out_illum, (int)rain_state, (int)roof_state, (int)film_opacity);
	  }

	  if(CGW_rx_ready)
 800091c:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <main+0x194>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d047      	beq.n	80009b4 <main+0x164>
	  {
		  CGW_rx_ready = 0;
 8000924:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <main+0x194>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

		  CGW_rx_payload = 0;
 800092a:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <main+0x1b0>)
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
		  CGW_rx_payload |= ((uint16_t)CGW_rx_buf[0] << 8);
 8000930:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <main+0x17c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <main+0x1b0>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b21b      	sxth	r3, r3
 8000942:	b29a      	uxth	r2, r3
 8000944:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <main+0x1b0>)
 8000946:	801a      	strh	r2, [r3, #0]
		  CGW_rx_payload |= ((uint16_t)CGW_rx_buf[1]);
 8000948:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <main+0x17c>)
 800094a:	785b      	ldrb	r3, [r3, #1]
 800094c:	001a      	movs	r2, r3
 800094e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <main+0x1b0>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	4313      	orrs	r3, r2
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <main+0x1b0>)
 8000958:	801a      	strh	r2, [r3, #0]

		  if(CGW_rx_payload == 0xFFFF) {
 800095a:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <main+0x1b0>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <main+0x1b4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d107      	bne.n	8000974 <main+0x124>
			  sensor_read = 1;
 8000964:	4b20      	ldr	r3, [pc, #128]	@ (80009e8 <main+0x198>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]

			  printf("#REQUEST\r\n");
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <main+0x1b8>)
 800096c:	0018      	movs	r0, r3
 800096e:	f005 fbbf 	bl	80060f0 <puts>
 8000972:	e01f      	b.n	80009b4 <main+0x164>
		  }
		  else {
			  roof_state = ((CGW_rx_payload >> 8) & 0x03);
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <main+0x1b0>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2203      	movs	r2, #3
 8000980:	4013      	ands	r3, r2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <main+0x18c>)
 8000986:	701a      	strb	r2, [r3, #0]
			  film_opacity = ((CGW_rx_payload) & 0x1F);
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <main+0x1b0>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	221f      	movs	r2, #31
 8000990:	4013      	ands	r3, r2
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <main+0x190>)
 8000996:	701a      	strb	r2, [r3, #0]
			  Send_Data_SPD();
 8000998:	f000 f91c 	bl	8000bd4 <Send_Data_SPD>

			  printf("#RECEIVE\r\n roof : %d, opacity : %d\r\n", (int)roof_state, (int)film_opacity);
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <main+0x18c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	0019      	movs	r1, r3
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <main+0x190>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	001a      	movs	r2, r3
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <main+0x1bc>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f005 fb38 	bl	8006024 <iprintf>
		  }
	  }

	  Sunroof_Set(roof_state);
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <main+0x18c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f9ee 	bl	8000d9c <Sunroof_Set>
	  if(sensor_read)
 80009c0:	e785      	b.n	80008ce <main+0x7e>
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	2000010c 	.word	0x2000010c
 80009c8:	2000014c 	.word	0x2000014c
 80009cc:	20000100 	.word	0x20000100
 80009d0:	2000018c 	.word	0x2000018c
 80009d4:	200000e4 	.word	0x200000e4
 80009d8:	200000e8 	.word	0x200000e8
 80009dc:	20000000 	.word	0x20000000
 80009e0:	200000f3 	.word	0x200000f3
 80009e4:	20000104 	.word	0x20000104
 80009e8:	20000105 	.word	0x20000105
 80009ec:	08006e38 	.word	0x08006e38
 80009f0:	200000ec 	.word	0x200000ec
 80009f4:	200000ee 	.word	0x200000ee
 80009f8:	200000f2 	.word	0x200000f2
 80009fc:	08006e40 	.word	0x08006e40
 8000a00:	20000102 	.word	0x20000102
 8000a04:	0000ffff 	.word	0x0000ffff
 8000a08:	08006e80 	.word	0x08006e80
 8000a0c:	08006e8c 	.word	0x08006e8c

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b09f      	sub	sp, #124	@ 0x7c
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	2440      	movs	r4, #64	@ 0x40
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2338      	movs	r3, #56	@ 0x38
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f005 fc5b 	bl	80062dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a26:	232c      	movs	r3, #44	@ 0x2c
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f005 fc53 	bl	80062dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2328      	movs	r3, #40	@ 0x28
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f005 fc4c 	bl	80062dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <SystemClock_Config+0xc8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a24      	ldr	r2, [pc, #144]	@ (8000adc <SystemClock_Config+0xcc>)
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <SystemClock_Config+0xc8>)
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	0109      	lsls	r1, r1, #4
 8000a52:	430a      	orrs	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	22a0      	movs	r2, #160	@ 0xa0
 8000a60:	02d2      	lsls	r2, r2, #11
 8000a62:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 f9e3 	bl	8002e38 <HAL_RCC_OscConfig>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f8c7 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	212c      	movs	r1, #44	@ 0x2c
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	220f      	movs	r2, #15
 8000a80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f002 fd9e 	bl	80035e0 <HAL_RCC_ClockConfig>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa8:	f000 f8ae 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2203      	movs	r2, #3
 8000ab0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f002 ff91 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000aca:	f000 f89d 	bl	8000c08 <Error_Handler>
  }
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b01f      	add	sp, #124	@ 0x7c
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	40007000 	.word	0x40007000
 8000adc:	ffffe7ff 	.word	0xffffe7ff

08000ae0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2005      	movs	r0, #5
 8000aea:	f001 fd5d 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000aee:	2005      	movs	r0, #5
 8000af0:	f001 fd6f 	bl	80025d2 <HAL_NVIC_EnableIRQ>
}
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <Send_Data_CGW>:

/* USER CODE BEGIN 4 */
void Send_Data_CGW(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	//UART Send
	CGW_tx_payload = 0;
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(in_illum & IN_ILLUM_MASK)) << IN_ILLUM_SHIFT;
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <Send_Data_CGW+0xb8>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	051a      	lsls	r2, r3, #20
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	431a      	orrs	r2, r3
 8000b14:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b16:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(out_illum & OUT_ILLUM_MASK)) << OUT_ILLUM_SHIFT;
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <Send_Data_CGW+0xbc>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	4a26      	ldr	r2, [pc, #152]	@ (8000bbc <Send_Data_CGW+0xc0>)
 8000b22:	401a      	ands	r2, r3
 8000b24:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b2c:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(rain_state & RAIN_STATE_MASK)) << RAIN_STATE_SHIFT;
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <Send_Data_CGW+0xc4>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	401a      	ands	r2, r3
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b42:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(roof_state & ROOF_STATE_MASK)) << ROOF_STATE_SHIFT;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <Send_Data_CGW+0xc8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	015b      	lsls	r3, r3, #5
 8000b4c:	2260      	movs	r2, #96	@ 0x60
 8000b4e:	401a      	ands	r2, r3
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b58:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(film_opacity & FILM_OPACITY_MASK)) << FILM_OPACITY_SHIFT;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <Send_Data_CGW+0xcc>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	001a      	movs	r2, r3
 8000b62:	231f      	movs	r3, #31
 8000b64:	401a      	ands	r2, r3
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b6e:	601a      	str	r2, [r3, #0]

	CGW_tx_buf[0] = (CGW_tx_payload >> 24) & 0xFF;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	0e1b      	lsrs	r3, r3, #24
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <Send_Data_CGW+0xd0>)
 8000b7a:	701a      	strb	r2, [r3, #0]
	CGW_tx_buf[1] = (CGW_tx_payload >> 16) & 0xFF;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	0c1b      	lsrs	r3, r3, #16
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <Send_Data_CGW+0xd0>)
 8000b86:	705a      	strb	r2, [r3, #1]
	CGW_tx_buf[2] = (CGW_tx_payload >> 8) & 0xFF;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <Send_Data_CGW+0xd0>)
 8000b92:	709a      	strb	r2, [r3, #2]
	CGW_tx_buf[3] = CGW_tx_payload & 0xFF;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <Send_Data_CGW+0xb4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <Send_Data_CGW+0xd0>)
 8000b9c:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit(&huart1, CGW_tx_buf, sizeof(CGW_tx_buf), 100);
 8000b9e:	490b      	ldr	r1, [pc, #44]	@ (8000bcc <Send_Data_CGW+0xd0>)
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <Send_Data_CGW+0xd4>)
 8000ba2:	2364      	movs	r3, #100	@ 0x64
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	f003 fe49 	bl	800483c <HAL_UART_Transmit>
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	200000ee 	.word	0x200000ee
 8000bbc:	000fff00 	.word	0x000fff00
 8000bc0:	200000f2 	.word	0x200000f2
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	200000f3 	.word	0x200000f3
 8000bcc:	200000f8 	.word	0x200000f8
 8000bd0:	2000018c 	.word	0x2000018c

08000bd4 <Send_Data_SPD>:

void Send_Data_SPD(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	SPD_tx_payload = (uint8_t)(film_opacity * 5);
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <Send_Data_SPD+0x28>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	1c1a      	adds	r2, r3, #0
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	18d3      	adds	r3, r2, r3
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <Send_Data_SPD+0x2c>)
 8000be8:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart5, &SPD_tx_payload, 1, 100);
 8000bea:	4905      	ldr	r1, [pc, #20]	@ (8000c00 <Send_Data_SPD+0x2c>)
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <Send_Data_SPD+0x30>)
 8000bee:	2364      	movs	r3, #100	@ 0x64
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f003 fe23 	bl	800483c <HAL_UART_Transmit>
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000f3 	.word	0x200000f3
 8000c00:	200000f4 	.word	0x200000f4
 8000c04:	2000029c 	.word	0x2000029c

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	e7fd      	b.n	8000c10 <Error_Handler+0x8>

08000c14 <HAL_GPIO_EXTI_Callback>:
#include "roof.h"

#define TWO_MOTOR 1
#define ONE_MOTOR 0

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	801a      	strh	r2, [r3, #0]
	uint8_t ROOF_A_state = 0;
 8000c20:	210f      	movs	r1, #15
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
	uint8_t ROOF_B_state = 0;
 8000c28:	260e      	movs	r6, #14
 8000c2a:	19bb      	adds	r3, r7, r6
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_A_state = 0;
 8000c30:	230d      	movs	r3, #13
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_B_state = 0;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

	//Roof Motor
	if(GPIO_Pin == ROOF_ENC_A_Pin) {
 8000c40:	1dbb      	adds	r3, r7, #6
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d120      	bne.n	8000c8a <HAL_GPIO_EXTI_Callback+0x76>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000c48:	000d      	movs	r5, r1
 8000c4a:	187c      	adds	r4, r7, r1
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x178>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 f89b 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000c56:	0003      	movs	r3, r0
 8000c58:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000c5a:	19bc      	adds	r4, r7, r6
 8000c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x178>)
 8000c5e:	2102      	movs	r1, #2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f002 f893 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000c66:	0003      	movs	r3, r0
 8000c68:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? 1 : -1);
 8000c6a:	197a      	adds	r2, r7, r5
 8000c6c:	19bb      	adds	r3, r7, r6
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_EXTI_Callback+0x66>
 8000c76:	2201      	movs	r2, #1
 8000c78:	e001      	b.n	8000c7e <HAL_GPIO_EXTI_Callback+0x6a>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	425a      	negs	r2, r3
 8000c7e:	4b44      	ldr	r3, [pc, #272]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	18d2      	adds	r2, r2, r3
 8000c84:	4b42      	ldr	r3, [pc, #264]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000c86:	601a      	str	r2, [r3, #0]
	else if(GPIO_Pin == TILTING_ENC_B_Pin) {
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
	}
}
 8000c88:	e07c      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == ROOF_ENC_B_Pin) {
 8000c8a:	1dbb      	adds	r3, r7, #6
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d121      	bne.n	8000cd6 <HAL_GPIO_EXTI_Callback+0xc2>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000c92:	250f      	movs	r5, #15
 8000c94:	197c      	adds	r4, r7, r5
 8000c96:	4b3d      	ldr	r3, [pc, #244]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x178>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 f876 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000ca4:	260e      	movs	r6, #14
 8000ca6:	19bc      	adds	r4, r7, r6
 8000ca8:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x178>)
 8000caa:	2102      	movs	r1, #2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f002 f86d 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? -1 : 1);
 8000cb6:	197a      	adds	r2, r7, r5
 8000cb8:	19bb      	adds	r3, r7, r6
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d102      	bne.n	8000cc8 <HAL_GPIO_EXTI_Callback+0xb4>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	425a      	negs	r2, r3
 8000cc6:	e000      	b.n	8000cca <HAL_GPIO_EXTI_Callback+0xb6>
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4b31      	ldr	r3, [pc, #196]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	18d2      	adds	r2, r2, r3
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	e056      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == TILTING_ENC_A_Pin) {
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	2380      	movs	r3, #128	@ 0x80
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d125      	bne.n	8000d2e <HAL_GPIO_EXTI_Callback+0x11a>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000ce2:	250d      	movs	r5, #13
 8000ce4:	197c      	adds	r4, r7, r5
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4a2a      	ldr	r2, [pc, #168]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x180>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f002 f84c 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000cf8:	260c      	movs	r6, #12
 8000cfa:	19bc      	adds	r4, r7, r6
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	4a24      	ldr	r2, [pc, #144]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d02:	0019      	movs	r1, r3
 8000d04:	0010      	movs	r0, r2
 8000d06:	f002 f841 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? 1 : -1);
 8000d0e:	197a      	adds	r2, r7, r5
 8000d10:	19bb      	adds	r3, r7, r6
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d101      	bne.n	8000d1e <HAL_GPIO_EXTI_Callback+0x10a>
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	e001      	b.n	8000d22 <HAL_GPIO_EXTI_Callback+0x10e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425a      	negs	r2, r3
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	18d2      	adds	r2, r2, r3
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	e02a      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == TILTING_ENC_B_Pin) {
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	2380      	movs	r3, #128	@ 0x80
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d124      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x170>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000d3a:	250d      	movs	r5, #13
 8000d3c:	197c      	adds	r4, r7, r5
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d44:	0019      	movs	r1, r3
 8000d46:	0010      	movs	r0, r2
 8000d48:	f002 f820 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000d50:	260c      	movs	r6, #12
 8000d52:	19bc      	adds	r4, r7, r6
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	f002 f815 	bl	8002d8c <HAL_GPIO_ReadPin>
 8000d62:	0003      	movs	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
 8000d66:	197a      	adds	r2, r7, r5
 8000d68:	19bb      	adds	r3, r7, r6
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_EXTI_Callback+0x164>
 8000d72:	2301      	movs	r3, #1
 8000d74:	425a      	negs	r2, r3
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_EXTI_Callback+0x166>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b005      	add	sp, #20
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8c:	50000800 	.word	0x50000800
 8000d90:	200000e4 	.word	0x200000e4
 8000d94:	50000400 	.word	0x50000400
 8000d98:	200000e8 	.word	0x200000e8

08000d9c <Sunroof_Set>:

#if TWO_MOTOR
void Sunroof_Set(uint8_t mode) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d007      	beq.n	8000dc0 <Sunroof_Set+0x24>
 8000db0:	dd00      	ble.n	8000db4 <Sunroof_Set+0x18>
 8000db2:	e118      	b.n	8000fe6 <Sunroof_Set+0x24a>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d100      	bne.n	8000dba <Sunroof_Set+0x1e>
 8000db8:	e0ba      	b.n	8000f30 <Sunroof_Set+0x194>
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d05c      	beq.n	8000e78 <Sunroof_Set+0xdc>
 8000dbe:	e112      	b.n	8000fe6 <Sunroof_Set+0x24a>
	case OPEN:
		if(tilting_encoder >= 0){
 8000dc0:	4b96      	ldr	r3, [pc, #600]	@ (800101c <Sunroof_Set+0x280>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db1d      	blt.n	8000e04 <Sunroof_Set+0x68>
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000dc8:	4b95      	ldr	r3, [pc, #596]	@ (8001020 <Sunroof_Set+0x284>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000dd0:	4b94      	ldr	r3, [pc, #592]	@ (8001024 <Sunroof_Set+0x288>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2180      	movs	r1, #128	@ 0x80
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 fff5 	bl	8002dc6 <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000ddc:	4b92      	ldr	r3, [pc, #584]	@ (8001028 <Sunroof_Set+0x28c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2246      	movs	r2, #70	@ 0x46
 8000de2:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	0099      	lsls	r1, r3, #2
 8000de8:	23a0      	movs	r3, #160	@ 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	2200      	movs	r2, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 ffe9 	bl	8002dc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 8000df4:	23a0      	movs	r3, #160	@ 0xa0
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f001 ffe2 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000e02:	e107      	b.n	8001014 <Sunroof_Set+0x278>
		else if(roof_encoder <= ROOF_OPEN_MAX) {
 8000e04:	4b89      	ldr	r3, [pc, #548]	@ (800102c <Sunroof_Set+0x290>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a89      	ldr	r2, [pc, #548]	@ (8001030 <Sunroof_Set+0x294>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	dc1d      	bgt.n	8000e4a <Sunroof_Set+0xae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000e0e:	4b86      	ldr	r3, [pc, #536]	@ (8001028 <Sunroof_Set+0x28c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	0099      	lsls	r1, r3, #2
 8000e1a:	23a0      	movs	r3, #160	@ 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	2201      	movs	r2, #1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 ffd0 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000e26:	4b7e      	ldr	r3, [pc, #504]	@ (8001020 <Sunroof_Set+0x284>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2246      	movs	r2, #70	@ 0x46
 8000e2c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000e2e:	4b7d      	ldr	r3, [pc, #500]	@ (8001024 <Sunroof_Set+0x288>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	2180      	movs	r1, #128	@ 0x80
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 ffc6 	bl	8002dc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000e3a:	23a0      	movs	r3, #160	@ 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2140      	movs	r1, #64	@ 0x40
 8000e42:	0018      	movs	r0, r3
 8000e44:	f001 ffbf 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8000e48:	e0e4      	b.n	8001014 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000e4a:	4b77      	ldr	r3, [pc, #476]	@ (8001028 <Sunroof_Set+0x28c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	0099      	lsls	r1, r3, #2
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 ffb2 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000e62:	4b6f      	ldr	r3, [pc, #444]	@ (8001020 <Sunroof_Set+0x284>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001024 <Sunroof_Set+0x288>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 ffa8 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8000e76:	e0cd      	b.n	8001014 <Sunroof_Set+0x278>
	case TILTING:
		if(roof_encoder >= 0) {
 8000e78:	4b6c      	ldr	r3, [pc, #432]	@ (800102c <Sunroof_Set+0x290>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db1d      	blt.n	8000ebc <Sunroof_Set+0x120>
			// STOP Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000e80:	4b69      	ldr	r3, [pc, #420]	@ (8001028 <Sunroof_Set+0x28c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000e88:	2380      	movs	r3, #128	@ 0x80
 8000e8a:	0099      	lsls	r1, r3, #2
 8000e8c:	23a0      	movs	r3, #160	@ 0xa0
 8000e8e:	05db      	lsls	r3, r3, #23
 8000e90:	2201      	movs	r2, #1
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 ff97 	bl	8002dc6 <HAL_GPIO_WritePin>
			// ACW Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000e98:	4b61      	ldr	r3, [pc, #388]	@ (8001020 <Sunroof_Set+0x284>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2246      	movs	r2, #70	@ 0x46
 8000e9e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000ea0:	4b60      	ldr	r3, [pc, #384]	@ (8001024 <Sunroof_Set+0x288>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 ff8d 	bl	8002dc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000eac:	23a0      	movs	r3, #160	@ 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2140      	movs	r1, #64	@ 0x40
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 ff86 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000eba:	e0ab      	b.n	8001014 <Sunroof_Set+0x278>
		else if(tilting_encoder <= ROOF_TILTING_MAX) {
 8000ebc:	4b57      	ldr	r3, [pc, #348]	@ (800101c <Sunroof_Set+0x280>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8001034 <Sunroof_Set+0x298>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	dc1d      	bgt.n	8000f02 <Sunroof_Set+0x166>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ec6:	4b56      	ldr	r3, [pc, #344]	@ (8001020 <Sunroof_Set+0x284>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000ece:	4b55      	ldr	r3, [pc, #340]	@ (8001024 <Sunroof_Set+0x288>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2180      	movs	r1, #128	@ 0x80
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 ff76 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <Sunroof_Set+0x28c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2246      	movs	r2, #70	@ 0x46
 8000ee0:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000ee2:	2380      	movs	r3, #128	@ 0x80
 8000ee4:	0099      	lsls	r1, r3, #2
 8000ee6:	23a0      	movs	r3, #160	@ 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	2200      	movs	r2, #0
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 ff6a 	bl	8002dc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, CW);
 8000ef2:	23a0      	movs	r3, #160	@ 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2120      	movs	r1, #32
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 ff63 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8000f00:	e088      	b.n	8001014 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <Sunroof_Set+0x28c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	0099      	lsls	r1, r3, #2
 8000f0e:	23a0      	movs	r3, #160	@ 0xa0
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	2201      	movs	r2, #1
 8000f14:	0018      	movs	r0, r3
 8000f16:	f001 ff56 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f1a:	4b41      	ldr	r3, [pc, #260]	@ (8001020 <Sunroof_Set+0x284>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000f22:	4b40      	ldr	r3, [pc, #256]	@ (8001024 <Sunroof_Set+0x288>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f001 ff4c 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8000f2e:	e071      	b.n	8001014 <Sunroof_Set+0x278>
	case CLOSE:
		if(tilting_encoder >= 0)
 8000f30:	4b3a      	ldr	r3, [pc, #232]	@ (800101c <Sunroof_Set+0x280>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db1d      	blt.n	8000f74 <Sunroof_Set+0x1d8>
		{
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f38:	4b39      	ldr	r3, [pc, #228]	@ (8001020 <Sunroof_Set+0x284>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000f40:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <Sunroof_Set+0x288>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 ff3d 	bl	8002dc6 <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000f4c:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <Sunroof_Set+0x28c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2246      	movs	r2, #70	@ 0x46
 8000f52:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	0099      	lsls	r1, r3, #2
 8000f58:	23a0      	movs	r3, #160	@ 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 ff31 	bl	8002dc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 8000f64:	23a0      	movs	r3, #160	@ 0xa0
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 ff2a 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000f72:	e04f      	b.n	8001014 <Sunroof_Set+0x278>
		else if(roof_encoder >= 0) {
 8000f74:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <Sunroof_Set+0x290>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db1d      	blt.n	8000fb8 <Sunroof_Set+0x21c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <Sunroof_Set+0x28c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	0099      	lsls	r1, r3, #2
 8000f88:	23a0      	movs	r3, #160	@ 0xa0
 8000f8a:	05db      	lsls	r3, r3, #23
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 ff19 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <Sunroof_Set+0x284>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2246      	movs	r2, #70	@ 0x46
 8000f9a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000f9c:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <Sunroof_Set+0x288>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2180      	movs	r1, #128	@ 0x80
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f001 ff0f 	bl	8002dc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000fa8:	23a0      	movs	r3, #160	@ 0xa0
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	2200      	movs	r2, #0
 8000fae:	2140      	movs	r1, #64	@ 0x40
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f001 ff08 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8000fb6:	e02d      	b.n	8001014 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <Sunroof_Set+0x28c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	0099      	lsls	r1, r3, #2
 8000fc4:	23a0      	movs	r3, #160	@ 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	2201      	movs	r2, #1
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f001 fefb 	bl	8002dc6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <Sunroof_Set+0x284>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <Sunroof_Set+0x288>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 fef1 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8000fe4:	e016      	b.n	8001014 <Sunroof_Set+0x278>
	case STOP:
	default:
		// STOP Both Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <Sunroof_Set+0x28c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	0099      	lsls	r1, r3, #2
 8000ff2:	23a0      	movs	r3, #160	@ 0xa0
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fee4 	bl	8002dc6 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <Sunroof_Set+0x284>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <Sunroof_Set+0x288>)
 8001008:	2201      	movs	r2, #1
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	0018      	movs	r0, r3
 800100e:	f001 feda 	bl	8002dc6 <HAL_GPIO_WritePin>
		break;
 8001012:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000e8 	.word	0x200000e8
 8001020:	2000010c 	.word	0x2000010c
 8001024:	50000800 	.word	0x50000800
 8001028:	2000014c 	.word	0x2000014c
 800102c:	200000e4 	.word	0x200000e4
 8001030:	00001770 	.word	0x00001770
 8001034:	00000bb8 	.word	0x00000bb8

08001038 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8001040:	2316      	movs	r3, #22
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2200      	movs	r2, #0
 8001046:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <HW_AdcReadChannel+0xc4>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2208      	movs	r2, #8
 8001050:	4013      	ands	r3, r2
 8001052:	2b08      	cmp	r3, #8
 8001054:	d1f9      	bne.n	800104a <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <HW_AdcReadChannel+0xc8>)
 8001058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <HW_AdcReadChannel+0xc8>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	0089      	lsls	r1, r1, #2
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 8001066:	2100      	movs	r1, #0
 8001068:	0018      	movs	r0, r3
 800106a:	f001 f953 	bl	8002314 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 800106e:	240c      	movs	r4, #12
 8001070:	193b      	adds	r3, r7, r4
 8001072:	4a25      	ldr	r2, [pc, #148]	@ (8001108 <HW_AdcReadChannel+0xd0>)
 8001074:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8001076:	193b      	adds	r3, r7, r4
 8001078:	4a24      	ldr	r2, [pc, #144]	@ (800110c <HW_AdcReadChannel+0xd4>)
 800107a:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800107c:	193a      	adds	r2, r7, r4
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f001 f81e 	bl	80020c4 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8001088:	0021      	movs	r1, r4
 800108a:	187b      	adds	r3, r7, r1
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	0152      	lsls	r2, r2, #5
 8001096:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8001098:	187a      	adds	r2, r7, r1
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 f810 	bl	80020c4 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 ff10 	bl	8001ecc <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 80010ac:	2301      	movs	r3, #1
 80010ae:	425a      	negs	r2, r3
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 ff5d 	bl	8001f74 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 fff5 	bl	80020ac <HAL_ADC_GetValue>
 80010c2:	0002      	movs	r2, r0
 80010c4:	2016      	movs	r0, #22
 80010c6:	183b      	adds	r3, r7, r0
 80010c8:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2102      	movs	r1, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HW_AdcReadChannel+0xcc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2203      	movs	r2, #3
 80010e0:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HW_AdcReadChannel+0xc8>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HW_AdcReadChannel+0xc8>)
 80010e8:	4909      	ldr	r1, [pc, #36]	@ (8001110 <HW_AdcReadChannel+0xd8>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	881b      	ldrh	r3, [r3, #0]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b007      	add	sp, #28
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	40007000 	.word	0x40007000
 8001100:	40021000 	.word	0x40021000
 8001104:	20000088 	.word	0x20000088
 8001108:	0007ffff 	.word	0x0007ffff
 800110c:	00001001 	.word	0x00001001
 8001110:	fffffdff 	.word	0xfffffdff

08001114 <read_illum>:

void read_illum(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <read_illum+0x28>)
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff ff8c 	bl	8001038 <HW_AdcReadChannel>
 8001120:	0003      	movs	r3, r0
 8001122:	001a      	movs	r2, r3
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <read_illum+0x2c>)
 8001126:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ff85 	bl	8001038 <HW_AdcReadChannel>
 800112e:	0003      	movs	r3, r0
 8001130:	001a      	movs	r2, r3
 8001132:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <read_illum+0x30>)
 8001134:	801a      	strh	r2, [r3, #0]
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	04000002 	.word	0x04000002
 8001140:	200000ec 	.word	0x200000ec
 8001144:	200000ee 	.word	0x200000ee

08001148 <read_rain>:

void read_rain(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <read_rain+0x34>)
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff ff72 	bl	8001038 <HW_AdcReadChannel>
 8001154:	0003      	movs	r3, r0
 8001156:	001a      	movs	r2, r3
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <read_rain+0x38>)
 800115a:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <read_rain+0x38>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	22c8      	movs	r2, #200	@ 0xc8
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	429a      	cmp	r2, r3
 8001168:	419b      	sbcs	r3, r3
 800116a:	425b      	negs	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	001a      	movs	r2, r3
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <read_rain+0x3c>)
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	3c008000 	.word	0x3c008000
 8001180:	200000f0 	.word	0x200000f0
 8001184:	200000f2 	.word	0x200000f2

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <HAL_MspInit+0x24>)
 800118e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_MspInit+0x24>)
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <HAL_MspInit+0x24>)
 800119a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_MspInit+0x24>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	0549      	lsls	r1, r1, #21
 80011a2:	430a      	orrs	r2, r1
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	e7fd      	b.n	80011b4 <NMI_Handler+0x4>

080011b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	e7fd      	b.n	80011bc <HardFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 fce8 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_A_Pin);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f001 fe0a 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_B_Pin);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f001 fe07 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TILTING_ENC_A_Pin);
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fdfd 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TILTING_ENC_B_Pin);
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	0018      	movs	r0, r3
 800120c:	f001 fdf8 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	019b      	lsls	r3, r3, #6
 8001214:	0018      	movs	r0, r3
 8001216:	f001 fdf3 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001226:	0018      	movs	r0, r3
 8001228:	f001 fb55 	bl	80028d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	20000324 	.word	0x20000324

08001238 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800123e:	0018      	movs	r0, r3
 8001240:	f001 fb49 	bl	80028d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	2000036c 	.word	0x2000036c

08001250 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <USART4_5_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f003 fbee 	bl	8004a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	2000029c 	.word	0x2000029c

08001268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <USART1_IRQHandler+0x14>)
 800126e:	0018      	movs	r0, r3
 8001270:	f003 fbe2 	bl	8004a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	2000018c 	.word	0x2000018c

08001280 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001292:	e000      	b.n	8001296 <_read+0x16>
 8001294:	bf00      	nop
 8001296:	0001      	movs	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
  }

  return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b006      	add	sp, #24
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e009      	b.n	80012e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fa8b 	bl	80007f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf1      	blt.n	80012cc <_write+0x12>
  }
  return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b006      	add	sp, #24
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:

int _close(int file)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	425b      	negs	r3, r3
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2280      	movs	r2, #128	@ 0x80
 8001314:	0192      	lsls	r2, r2, #6
 8001316:	605a      	str	r2, [r3, #4]
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}

08001322 <_isatty>:

int _isatty(int file)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}

08001334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	18d3      	adds	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f005 f804 	bl	8006388 <__errno>
 8001380:	0003      	movs	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	2301      	movs	r3, #1
 8001388:	425b      	negs	r3, r3
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	18d2      	adds	r2, r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <_sbrk+0x64>)
 800139c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b006      	add	sp, #24
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20005000 	.word	0x20005000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	20000108 	.word	0x20000108
 80013b4:	20000508 	.word	0x20000508

080013b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	2318      	movs	r3, #24
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	0018      	movs	r0, r3
 80013d0:	2310      	movs	r3, #16
 80013d2:	001a      	movs	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	f004 ff81 	bl	80062dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	2310      	movs	r3, #16
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	0018      	movs	r0, r3
 80013e0:	2308      	movs	r3, #8
 80013e2:	001a      	movs	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	f004 ff79 	bl	80062dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	003b      	movs	r3, r7
 80013ec:	0018      	movs	r0, r3
 80013ee:	2310      	movs	r3, #16
 80013f0:	001a      	movs	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	f004 ff72 	bl	80062dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_TIM2_Init+0xf8>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	05d2      	lsls	r2, r2, #23
 80013fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001400:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MX_TIM2_Init+0xf8>)
 8001402:	224f      	movs	r2, #79	@ 0x4f
 8001404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <MX_TIM2_Init+0xf8>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <MX_TIM2_Init+0xf8>)
 800140e:	2263      	movs	r2, #99	@ 0x63
 8001410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <MX_TIM2_Init+0xf8>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <MX_TIM2_Init+0xf8>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <MX_TIM2_Init+0xf8>)
 8001420:	0018      	movs	r0, r3
 8001422:	f002 fc7f 	bl	8003d24 <HAL_TIM_Base_Init>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800142a:	f7ff fbed 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	2118      	movs	r1, #24
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	0152      	lsls	r2, r2, #5
 8001436:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001438:	187a      	adds	r2, r7, r1
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_TIM2_Init+0xf8>)
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f002 fe50 	bl	80040e4 <HAL_TIM_ConfigClockSource>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001448:	f7ff fbde 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_TIM2_Init+0xf8>)
 800144e:	0018      	movs	r0, r3
 8001450:	f002 fca8 	bl	8003da4 <HAL_TIM_PWM_Init>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001458:	f7ff fbd6 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2110      	movs	r1, #16
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146a:	187a      	adds	r2, r7, r1
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_TIM2_Init+0xf8>)
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f003 f931 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800147a:	f7ff fbc5 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	003b      	movs	r3, r7
 8001480:	2260      	movs	r2, #96	@ 0x60
 8001482:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001484:	003b      	movs	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148a:	003b      	movs	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	003b      	movs	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001496:	0039      	movs	r1, r7
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_TIM2_Init+0xf8>)
 800149a:	2204      	movs	r2, #4
 800149c:	0018      	movs	r0, r3
 800149e:	f002 fd5b 	bl	8003f58 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80014a6:	f7ff fbaf 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <MX_TIM2_Init+0xf8>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 f8a9 	bl	8001604 <HAL_TIM_MspPostInit>

}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b00a      	add	sp, #40	@ 0x28
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	2000010c 	.word	0x2000010c

080014c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	2318      	movs	r3, #24
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	0018      	movs	r0, r3
 80014cc:	2310      	movs	r3, #16
 80014ce:	001a      	movs	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	f004 ff03 	bl	80062dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	2310      	movs	r3, #16
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	0018      	movs	r0, r3
 80014dc:	2308      	movs	r3, #8
 80014de:	001a      	movs	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	f004 fefb 	bl	80062dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	003b      	movs	r3, r7
 80014e8:	0018      	movs	r0, r3
 80014ea:	2310      	movs	r3, #16
 80014ec:	001a      	movs	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	f004 fef4 	bl	80062dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 80014f6:	4a30      	ldr	r2, [pc, #192]	@ (80015b8 <MX_TIM3_Init+0xf8>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 80014fc:	224f      	movs	r2, #79	@ 0x4f
 80014fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001506:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001508:	2263      	movs	r2, #99	@ 0x63
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001518:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 800151a:	0018      	movs	r0, r3
 800151c:	f002 fc02 	bl	8003d24 <HAL_TIM_Base_Init>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001524:	f7ff fb70 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	2118      	movs	r1, #24
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	0152      	lsls	r2, r2, #5
 8001530:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001532:	187a      	adds	r2, r7, r1
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f002 fdd3 	bl	80040e4 <HAL_TIM_ConfigClockSource>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001542:	f7ff fb61 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001548:	0018      	movs	r0, r3
 800154a:	f002 fc2b 	bl	8003da4 <HAL_TIM_PWM_Init>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001552:	f7ff fb59 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2110      	movs	r1, #16
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001564:	187a      	adds	r2, r7, r1
 8001566:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f003 f8b4 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001574:	f7ff fb48 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	003b      	movs	r3, r7
 800157a:	2260      	movs	r2, #96	@ 0x60
 800157c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800157e:	003b      	movs	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	003b      	movs	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	003b      	movs	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001590:	0039      	movs	r1, r7
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 8001594:	2204      	movs	r2, #4
 8001596:	0018      	movs	r0, r3
 8001598:	f002 fcde 	bl	8003f58 <HAL_TIM_PWM_ConfigChannel>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80015a0:	f7ff fb32 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <MX_TIM3_Init+0xf4>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f82c 	bl	8001604 <HAL_TIM_MspPostInit>

}
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b00a      	add	sp, #40	@ 0x28
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000014c 	.word	0x2000014c
 80015b8:	40000400 	.word	0x40000400

080015bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d106      	bne.n	80015de <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015dc:	e00a      	b.n	80015f4 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM3)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <HAL_TIM_Base_MspInit+0x44>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d105      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015ee:	2102      	movs	r1, #2
 80015f0:	430a      	orrs	r2, r1
 80015f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	40000400 	.word	0x40000400

08001604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b08b      	sub	sp, #44	@ 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	2414      	movs	r4, #20
 800160e:	193b      	adds	r3, r7, r4
 8001610:	0018      	movs	r0, r3
 8001612:	2314      	movs	r3, #20
 8001614:	001a      	movs	r2, r3
 8001616:	2100      	movs	r1, #0
 8001618:	f004 fe60 	bl	80062dc <memset>
  if(timHandle->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	05db      	lsls	r3, r3, #23
 8001624:	429a      	cmp	r2, r3
 8001626:	d122      	bne.n	800166e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <HAL_TIM_MspPostInit+0xc4>)
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <HAL_TIM_MspPostInit+0xc4>)
 800162e:	2102      	movs	r1, #2
 8001630:	430a      	orrs	r2, r1
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_TIM_MspPostInit+0xc4>)
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001640:	0021      	movs	r1, r4
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2208      	movs	r2, #8
 8001646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2202      	movs	r2, #2
 800164c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2202      	movs	r2, #2
 800165e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	187b      	adds	r3, r7, r1
 8001662:	4a1a      	ldr	r2, [pc, #104]	@ (80016cc <HAL_TIM_MspPostInit+0xc8>)
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f001 fa12 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800166c:	e027      	b.n	80016be <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM3)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <HAL_TIM_MspPostInit+0xcc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d122      	bne.n	80016be <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_TIM_MspPostInit+0xc4>)
 800167a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_TIM_MspPostInit+0xc4>)
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_TIM_MspPostInit+0xc4>)
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001690:	2114      	movs	r1, #20
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2280      	movs	r2, #128	@ 0x80
 8001696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2202      	movs	r2, #2
 800169c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2202      	movs	r2, #2
 80016ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	187a      	adds	r2, r7, r1
 80016b2:	23a0      	movs	r3, #160	@ 0xa0
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f001 f9e9 	bl	8002a90 <HAL_GPIO_Init>
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b00b      	add	sp, #44	@ 0x2c
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	50000400 	.word	0x50000400
 80016d0:	40000400 	.word	0x40000400

080016d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart5_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_USART1_UART_Init+0x58>)
 80016da:	4a15      	ldr	r2, [pc, #84]	@ (8001730 <MX_USART1_UART_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016de:	4b13      	ldr	r3, [pc, #76]	@ (800172c <MX_USART1_UART_Init+0x58>)
 80016e0:	2296      	movs	r2, #150	@ 0x96
 80016e2:	0192      	lsls	r2, r2, #6
 80016e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_USART1_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <MX_USART1_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_USART1_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART1_UART_Init+0x58>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_USART1_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART1_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <MX_USART1_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_USART1_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <MX_USART1_UART_Init+0x58>)
 8001718:	0018      	movs	r0, r3
 800171a:	f003 f83b 	bl	8004794 <HAL_UART_Init>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001722:	f7ff fa71 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000018c 	.word	0x2000018c
 8001730:	40013800 	.word	0x40013800

08001734 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_USART2_UART_Init+0x58>)
 800173a:	4a15      	ldr	r2, [pc, #84]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001740:	2296      	movs	r2, #150	@ 0x96
 8001742:	0192      	lsls	r2, r2, #6
 8001744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_USART2_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_USART2_UART_Init+0x58>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <MX_USART2_UART_Init+0x58>)
 8001778:	0018      	movs	r0, r3
 800177a:	f003 f80b 	bl	8004794 <HAL_UART_Init>
 800177e:	1e03      	subs	r3, r0, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001782:	f7ff fa41 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000214 	.word	0x20000214
 8001790:	40004400 	.word	0x40004400

08001794 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <MX_USART5_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017a0:	2296      	movs	r2, #150	@ 0x96
 80017a2:	0192      	lsls	r2, r2, #6
 80017a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <MX_USART5_UART_Init+0x58>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f002 ffdb 	bl	8004794 <HAL_UART_Init>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f7ff fa11 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000029c 	.word	0x2000029c
 80017f0:	40005000 	.word	0x40005000

080017f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b08d      	sub	sp, #52	@ 0x34
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	241c      	movs	r4, #28
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	0018      	movs	r0, r3
 8001802:	2314      	movs	r3, #20
 8001804:	001a      	movs	r2, r3
 8001806:	2100      	movs	r1, #0
 8001808:	f004 fd68 	bl	80062dc <memset>
  if(uartHandle->Instance==USART1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a9c      	ldr	r2, [pc, #624]	@ (8001a84 <HAL_UART_MspInit+0x290>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d000      	beq.n	8001818 <HAL_UART_MspInit+0x24>
 8001816:	e07d      	b.n	8001914 <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001818:	4b9b      	ldr	r3, [pc, #620]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800181a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800181c:	4b9a      	ldr	r3, [pc, #616]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800181e:	2180      	movs	r1, #128	@ 0x80
 8001820:	01c9      	lsls	r1, r1, #7
 8001822:	430a      	orrs	r2, r1
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b98      	ldr	r3, [pc, #608]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182a:	4b97      	ldr	r3, [pc, #604]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001832:	4b95      	ldr	r3, [pc, #596]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	2201      	movs	r2, #1
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001842:	4b91      	ldr	r3, [pc, #580]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001844:	2102      	movs	r1, #2
 8001846:	430a      	orrs	r2, r1
 8001848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800184a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	00d2      	lsls	r2, r2, #3
 800185c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	193b      	adds	r3, r7, r4
 8001860:	2202      	movs	r2, #2
 8001862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	2201      	movs	r2, #1
 8001868:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	2203      	movs	r2, #3
 800186e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001870:	193b      	adds	r3, r7, r4
 8001872:	2204      	movs	r2, #4
 8001874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	193a      	adds	r2, r7, r4
 8001878:	23a0      	movs	r3, #160	@ 0xa0
 800187a:	05db      	lsls	r3, r3, #23
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f001 f906 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001884:	0021      	movs	r1, r4
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2240      	movs	r2, #64	@ 0x40
 800188a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2202      	movs	r2, #2
 8001890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2201      	movs	r2, #1
 8001896:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2203      	movs	r2, #3
 800189c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	4a79      	ldr	r2, [pc, #484]	@ (8001a8c <HAL_UART_MspInit+0x298>)
 80018a8:	0019      	movs	r1, r3
 80018aa:	0010      	movs	r0, r2
 80018ac:	f001 f8f0 	bl	8002a90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80018b0:	4b77      	ldr	r3, [pc, #476]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018b2:	4a78      	ldr	r2, [pc, #480]	@ (8001a94 <HAL_UART_MspInit+0x2a0>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80018b6:	4b76      	ldr	r3, [pc, #472]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018b8:	2203      	movs	r2, #3
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018bc:	4b74      	ldr	r3, [pc, #464]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b71      	ldr	r3, [pc, #452]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ce:	4b70      	ldr	r3, [pc, #448]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018da:	4b6d      	ldr	r3, [pc, #436]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 fe8f 	bl	800260c <HAL_DMA_Init>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80018f2:	f7ff f989 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a65      	ldr	r2, [pc, #404]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80018fc:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <HAL_UART_MspInit+0x29c>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201b      	movs	r0, #27
 8001908:	f000 fe4e 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800190c:	201b      	movs	r0, #27
 800190e:	f000 fe60 	bl	80025d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8001912:	e0b3      	b.n	8001a7c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5f      	ldr	r2, [pc, #380]	@ (8001a98 <HAL_UART_MspInit+0x2a4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12a      	bne.n	8001974 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART2_CLK_ENABLE();
 800191e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001922:	4b59      	ldr	r3, [pc, #356]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	0289      	lsls	r1, r1, #10
 8001928:	430a      	orrs	r2, r1
 800192a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b56      	ldr	r3, [pc, #344]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800192e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001930:	4b55      	ldr	r3, [pc, #340]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001944:	211c      	movs	r1, #28
 8001946:	187b      	adds	r3, r7, r1
 8001948:	220c      	movs	r2, #12
 800194a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2202      	movs	r2, #2
 8001950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2201      	movs	r2, #1
 8001956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2203      	movs	r2, #3
 800195c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2204      	movs	r2, #4
 8001962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	187a      	adds	r2, r7, r1
 8001966:	23a0      	movs	r3, #160	@ 0xa0
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 f88f 	bl	8002a90 <HAL_GPIO_Init>
}
 8001972:	e083      	b.n	8001a7c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART5)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <HAL_UART_MspInit+0x2a8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d000      	beq.n	8001980 <HAL_UART_MspInit+0x18c>
 800197e:	e07d      	b.n	8001a7c <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001980:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001984:	4b40      	ldr	r3, [pc, #256]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	0349      	lsls	r1, r1, #13
 800198a:	430a      	orrs	r2, r1
 800198c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001992:	4b3d      	ldr	r3, [pc, #244]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 8001994:	2104      	movs	r1, #4
 8001996:	430a      	orrs	r2, r1
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c
 800199a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 80019a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019aa:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 80019ac:	2108      	movs	r1, #8
 80019ae:	430a      	orrs	r2, r1
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019b2:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <HAL_UART_MspInit+0x294>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	2208      	movs	r2, #8
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019be:	211c      	movs	r1, #28
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	0152      	lsls	r2, r2, #5
 80019c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	000c      	movs	r4, r1
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	2202      	movs	r2, #2
 80019ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	2201      	movs	r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	2203      	movs	r2, #3
 80019da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	2202      	movs	r2, #2
 80019e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa0 <HAL_UART_MspInit+0x2ac>)
 80019e6:	0019      	movs	r1, r3
 80019e8:	0010      	movs	r0, r2
 80019ea:	f001 f851 	bl	8002a90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ee:	0021      	movs	r1, r4
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2204      	movs	r2, #4
 80019f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2202      	movs	r2, #2
 80019fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2201      	movs	r2, #1
 8001a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2203      	movs	r2, #3
 8001a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_UART_MspInit+0x2b0>)
 8001a12:	0019      	movs	r1, r3
 8001a14:	0010      	movs	r0, r2
 8001a16:	f001 f83b 	bl	8002a90 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel6;
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a1c:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <HAL_UART_MspInit+0x2b8>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a22:	220d      	movs	r2, #13
 8001a24:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8001a50:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fdda 	bl	800260c <HAL_DMA_Init>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8001a5c:	f7ff f8d4 	bl	8000c08 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a64:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_UART_MspInit+0x2b4>)
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	200e      	movs	r0, #14
 8001a72:	f000 fd99 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001a76:	200e      	movs	r0, #14
 8001a78:	f000 fdab 	bl	80025d2 <HAL_NVIC_EnableIRQ>
}
 8001a7c:	46c0      	nop			@ (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b00d      	add	sp, #52	@ 0x34
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	50000400 	.word	0x50000400
 8001a90:	20000324 	.word	0x20000324
 8001a94:	40020030 	.word	0x40020030
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40005000 	.word	0x40005000
 8001aa0:	50000800 	.word	0x50000800
 8001aa4:	50000c00 	.word	0x50000c00
 8001aa8:	2000036c 	.word	0x2000036c
 8001aac:	4002006c 	.word	0x4002006c

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab4:	f7ff fc80 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 fc59 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7fe feb5 	bl	8000850 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
   ldr   r0, =_estack
 8001ae8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001af4:	08006f64 	.word	0x08006f64
  ldr r2, =_sbss
 8001af8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001afc:	20000504 	.word	0x20000504

08001b00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_COMP_IRQHandler>
	...

08001b04 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_Init+0x3c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_Init+0x3c>)
 8001b16:	2140      	movs	r1, #64	@ 0x40
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f000 f811 	bl	8001b44 <HAL_InitTick>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e001      	b.n	8001b32 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2e:	f7ff fb2b 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	40022000 	.word	0x40022000

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_InitTick+0x5c>)
 8001b4e:	681c      	ldr	r4, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_InitTick+0x60>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	0019      	movs	r1, r3
 8001b56:	23fa      	movs	r3, #250	@ 0xfa
 8001b58:	0098      	lsls	r0, r3, #2
 8001b5a:	f7fe fadf 	bl	800011c <__udivsi3>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	0019      	movs	r1, r3
 8001b62:	0020      	movs	r0, r4
 8001b64:	f7fe fada 	bl	800011c <__udivsi3>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fd41 	bl	80025f2 <HAL_SYSTICK_Config>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e00f      	b.n	8001b98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d80b      	bhi.n	8001b96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	2301      	movs	r3, #1
 8001b82:	425b      	negs	r3, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 fd0e 	bl	80025a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_InitTick+0x64>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x1c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_IncTick+0x20>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	18d2      	adds	r2, r2, r3
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_IncTick+0x20>)
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	200003b4 	.word	0x200003b4

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <HAL_GetTick+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	200003b4 	.word	0x200003b4

08001be4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e159      	b.n	8001eaa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2250      	movs	r2, #80	@ 0x50
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7fe fca8 	bl	8000564 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c18:	2210      	movs	r2, #16
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d005      	beq.n	8001c2c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2204      	movs	r2, #4
 8001c28:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001c2a:	d00b      	beq.n	8001c44 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	2210      	movs	r2, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2250      	movs	r2, #80	@ 0x50
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e132      	b.n	8001eaa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	4a9a      	ldr	r2, [pc, #616]	@ (8001eb4 <HAL_ADC_Init+0x2d0>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_ADC_Init+0x90>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_Init+0x90>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_Init+0x92>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d149      	bne.n	8001d0e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	23c0      	movs	r3, #192	@ 0xc0
 8001c80:	061b      	lsls	r3, r3, #24
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d00b      	beq.n	8001c9e <HAL_ADC_Init+0xba>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d005      	beq.n	8001c9e <HAL_ADC_Init+0xba>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d111      	bne.n	8001cc2 <HAL_ADC_Init+0xde>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	0892      	lsrs	r2, r2, #2
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6919      	ldr	r1, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	e014      	b.n	8001cec <HAL_ADC_Init+0x108>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	0892      	lsrs	r2, r2, #2
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	4b79      	ldr	r3, [pc, #484]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b78      	ldr	r3, [pc, #480]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001cd8:	4978      	ldr	r1, [pc, #480]	@ (8001ebc <HAL_ADC_Init+0x2d8>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	4b76      	ldr	r3, [pc, #472]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001ce0:	6819      	ldr	r1, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4b74      	ldr	r3, [pc, #464]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2118      	movs	r1, #24
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68d9      	ldr	r1, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b69      	ldr	r3, [pc, #420]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001d14:	496a      	ldr	r1, [pc, #424]	@ (8001ec0 <HAL_ADC_Init+0x2dc>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d22:	065a      	lsls	r2, r3, #25
 8001d24:	4b64      	ldr	r3, [pc, #400]	@ (8001eb8 <HAL_ADC_Init+0x2d4>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	055b      	lsls	r3, r3, #21
 8001d34:	4013      	ands	r3, r2
 8001d36:	d108      	bne.n	8001d4a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2180      	movs	r1, #128	@ 0x80
 8001d44:	0549      	lsls	r1, r1, #21
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	495b      	ldr	r1, [pc, #364]	@ (8001ec4 <HAL_ADC_Init+0x2e0>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68d9      	ldr	r1, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_Init+0x18c>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_Init+0x18e>
 8001d70:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d72:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2020      	movs	r0, #32
 8001d78:	5c1b      	ldrb	r3, [r3, r0]
 8001d7a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001d7c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	202c      	movs	r0, #44	@ 0x2c
 8001d82:	5c1b      	ldrb	r3, [r3, r0]
 8001d84:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d86:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d8c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001d94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001d9c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001daa:	23c2      	movs	r3, #194	@ 0xc2
 8001dac:	33ff      	adds	r3, #255	@ 0xff
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d00b      	beq.n	8001dca <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68d9      	ldr	r1, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2221      	movs	r2, #33	@ 0x21
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d11a      	bne.n	8001e0a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	0249      	lsls	r1, r1, #9
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	e00b      	b.n	8001e0a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df6:	2220      	movs	r2, #32
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	2201      	movs	r2, #1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d11f      	bne.n	8001e52 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	492a      	ldr	r1, [pc, #168]	@ (8001ec8 <HAL_ADC_Init+0x2e4>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6919      	ldr	r1, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e30:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001e36:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	611a      	str	r2, [r3, #16]
 8001e50:	e00e      	b.n	8001e70 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2107      	movs	r1, #7
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6959      	ldr	r1, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	fffffefd 	.word	0xfffffefd
 8001eb8:	40012708 	.word	0x40012708
 8001ebc:	ffc3ffff 	.word	0xffc3ffff
 8001ec0:	fdffffff 	.word	0xfdffffff
 8001ec4:	fffe0219 	.word	0xfffe0219
 8001ec8:	fffffc03 	.word	0xfffffc03

08001ecc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d138      	bne.n	8001f5a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2250      	movs	r2, #80	@ 0x50
 8001eec:	5c9b      	ldrb	r3, [r3, r2]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Start+0x2a>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e038      	b.n	8001f68 <HAL_ADC_Start+0x9c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2250      	movs	r2, #80	@ 0x50
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f06:	230f      	movs	r3, #15
 8001f08:	18fc      	adds	r4, r7, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 f979 	bl	8002204 <ADC_Enable>
 8001f12:	0003      	movs	r3, r0
 8001f14:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f16:	230f      	movs	r3, #15
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d120      	bne.n	8001f62 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <HAL_ADC_Start+0xa4>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	0052      	lsls	r2, r2, #1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2250      	movs	r2, #80	@ 0x50
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	221c      	movs	r2, #28
 8001f46:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2104      	movs	r1, #4
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2202      	movs	r2, #2
 8001f60:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f62:	230f      	movs	r3, #15
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	781b      	ldrb	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b005      	add	sp, #20
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	fffff0fe 	.word	0xfffff0fe

08001f74 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d102      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f8e:	2308      	movs	r3, #8
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e014      	b.n	8001fbe <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10b      	bne.n	8001fba <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2250      	movs	r2, #80	@ 0x50
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e072      	b.n	80020a0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001fba:	230c      	movs	r3, #12
 8001fbc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fbe:	f7ff fe07 	bl	8001bd0 <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fc6:	e01f      	b.n	8002008 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	d01c      	beq.n	8002008 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_ADC_PollForConversion+0x70>
 8001fd4:	f7ff fdfc 	bl	8001bd0 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d211      	bcs.n	8002008 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2250      	movs	r2, #80	@ 0x50
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e04b      	b.n	80020a0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	d0d9      	beq.n	8001fc8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	23c0      	movs	r3, #192	@ 0xc0
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4013      	ands	r3, r2
 800202e:	d12e      	bne.n	800208e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d129      	bne.n	800208e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2208      	movs	r2, #8
 8002042:	4013      	ands	r3, r2
 8002044:	2b08      	cmp	r3, #8
 8002046:	d122      	bne.n	800208e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	d110      	bne.n	8002076 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	210c      	movs	r1, #12
 8002060:	438a      	bics	r2, r1
 8002062:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	4a0f      	ldr	r2, [pc, #60]	@ (80020a8 <HAL_ADC_PollForConversion+0x134>)
 800206a:	4013      	ands	r3, r2
 800206c:	2201      	movs	r2, #1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
 8002074:	e00b      	b.n	800208e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207a:	2220      	movs	r2, #32
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	2201      	movs	r2, #1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	fffffefe 	.word	0xfffffefe

080020ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2250      	movs	r2, #80	@ 0x50
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x18>
 80020d8:	2302      	movs	r3, #2
 80020da:	e085      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x124>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2250      	movs	r2, #80	@ 0x50
 80020e0:	2101      	movs	r1, #1
 80020e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d00b      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f4:	2220      	movs	r2, #32
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2250      	movs	r2, #80	@ 0x50
 8002100:	2100      	movs	r1, #0
 8002102:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e06f      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a38      	ldr	r2, [pc, #224]	@ (80021f0 <HAL_ADC_ConfigChannel+0x12c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d035      	beq.n	800217e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	035b      	lsls	r3, r3, #13
 800211e:	0b5a      	lsrs	r2, r3, #13
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	02db      	lsls	r3, r3, #11
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002134:	4b2f      	ldr	r3, [pc, #188]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 800213a:	2180      	movs	r1, #128	@ 0x80
 800213c:	0409      	lsls	r1, r1, #16
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002142:	200a      	movs	r0, #10
 8002144:	f000 f8c6 	bl	80022d4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	4013      	ands	r3, r2
 8002152:	d006      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002154:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 800215a:	2180      	movs	r1, #128	@ 0x80
 800215c:	03c9      	lsls	r1, r1, #15
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	4013      	ands	r3, r2
 800216c:	d037      	beq.n	80021de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	0449      	lsls	r1, r1, #17
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e02f      	b.n	80021de <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	035b      	lsls	r3, r3, #13
 800218a:	0b5b      	lsrs	r3, r3, #13
 800218c:	43d9      	mvns	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	02db      	lsls	r3, r3, #11
 800219e:	4013      	ands	r3, r2
 80021a0:	d005      	beq.n	80021ae <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 80021a8:	4913      	ldr	r1, [pc, #76]	@ (80021f8 <HAL_ADC_ConfigChannel+0x134>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	029b      	lsls	r3, r3, #10
 80021b6:	4013      	ands	r3, r2
 80021b8:	d005      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 80021c0:	490e      	ldr	r1, [pc, #56]	@ (80021fc <HAL_ADC_ConfigChannel+0x138>)
 80021c2:	400a      	ands	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	4013      	ands	r3, r2
 80021d0:	d005      	beq.n	80021de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_ADC_ConfigChannel+0x130>)
 80021d8:	4909      	ldr	r1, [pc, #36]	@ (8002200 <HAL_ADC_ConfigChannel+0x13c>)
 80021da:	400a      	ands	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2250      	movs	r2, #80	@ 0x50
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	00001001 	.word	0x00001001
 80021f4:	40012708 	.word	0x40012708
 80021f8:	ff7fffff 	.word	0xff7fffff
 80021fc:	ffbfffff 	.word	0xffbfffff
 8002200:	feffffff 	.word	0xfeffffff

08002204 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2203      	movs	r2, #3
 8002218:	4013      	ands	r3, r2
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <ADC_Enable+0x2c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <ADC_Enable+0x2c>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <ADC_Enable+0x2e>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d146      	bne.n	80022c4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a24      	ldr	r2, [pc, #144]	@ (80022d0 <ADC_Enable+0xcc>)
 800223e:	4013      	ands	r3, r2
 8002240:	d00d      	beq.n	800225e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	2210      	movs	r2, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	2201      	movs	r2, #1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 f830 	bl	80022d4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002274:	f7ff fcac 	bl	8001bd0 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800227c:	e01b      	b.n	80022b6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227e:	f7ff fca7 	bl	8001bd0 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b0a      	cmp	r3, #10
 800228a:	d914      	bls.n	80022b6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00d      	beq.n	80022b6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	2210      	movs	r2, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	2201      	movs	r2, #1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e007      	b.n	80022c6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d1dc      	bne.n	800227e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	80000017 	.word	0x80000017

080022d4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <ADC_DelayMicroSecond+0x38>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	490b      	ldr	r1, [pc, #44]	@ (8002310 <ADC_DelayMicroSecond+0x3c>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7fd ff1a 	bl	800011c <__udivsi3>
 80022e8:	0003      	movs	r3, r0
 80022ea:	001a      	movs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4353      	muls	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80022f2:	e002      	b.n	80022fa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f9      	bne.n	80022f4 <ADC_DelayMicroSecond+0x20>
  }
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	20000004 	.word	0x20000004
 8002310:	000f4240 	.word	0x000f4240

08002314 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231e:	2317      	movs	r3, #23
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2250      	movs	r2, #80	@ 0x50
 8002332:	5c9b      	ldrb	r3, [r3, r2]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_ADCEx_Calibration_Start+0x28>
 8002338:	2302      	movs	r3, #2
 800233a:	e083      	b.n	8002444 <HAL_ADCEx_Calibration_Start+0x130>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2250      	movs	r2, #80	@ 0x50
 8002340:	2101      	movs	r1, #1
 8002342:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2203      	movs	r2, #3
 800234c:	4013      	ands	r3, r2
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <HAL_ADCEx_Calibration_Start+0x50>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_ADCEx_Calibration_Start+0x50>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_ADCEx_Calibration_Start+0x52>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d15b      	bne.n	8002422 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	4a37      	ldr	r2, [pc, #220]	@ (800244c <HAL_ADCEx_Calibration_Start+0x138>)
 8002370:	4013      	ands	r3, r2
 8002372:	2202      	movs	r2, #2
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2203      	movs	r2, #3
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2103      	movs	r1, #3
 8002392:	438a      	bics	r2, r1
 8002394:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2180      	movs	r1, #128	@ 0x80
 80023a2:	0609      	lsls	r1, r1, #24
 80023a4:	430a      	orrs	r2, r1
 80023a6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80023a8:	f7ff fc12 	bl	8001bd0 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023b0:	e01d      	b.n	80023ee <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023b2:	f7ff fc0d 	bl	8001bd0 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b0a      	cmp	r3, #10
 80023be:	d916      	bls.n	80023ee <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0fdb      	lsrs	r3, r3, #31
 80023c8:	07da      	lsls	r2, r3, #31
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d10d      	bne.n	80023ee <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	2212      	movs	r2, #18
 80023d8:	4393      	bics	r3, r2
 80023da:	2210      	movs	r2, #16
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2250      	movs	r2, #80	@ 0x50
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e02a      	b.n	8002444 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	0fdb      	lsrs	r3, r3, #31
 80023f6:	07da      	lsls	r2, r3, #31
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d0d8      	beq.n	80023b2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002414:	2203      	movs	r2, #3
 8002416:	4393      	bics	r3, r2
 8002418:	2201      	movs	r2, #1
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002420:	e009      	b.n	8002436 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	2220      	movs	r2, #32
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800242e:	2317      	movs	r3, #23
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2250      	movs	r2, #80	@ 0x50
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800243e:	2317      	movs	r3, #23
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffffefd 	.word	0xfffffefd

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	0002      	movs	r2, r0
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b7f      	cmp	r3, #127	@ 0x7f
 8002462:	d809      	bhi.n	8002478 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	001a      	movs	r2, r3
 800246a:	231f      	movs	r3, #31
 800246c:	401a      	ands	r2, r3
 800246e:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_EnableIRQ+0x30>)
 8002470:	2101      	movs	r1, #1
 8002472:	4091      	lsls	r1, r2
 8002474:	000a      	movs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
  }
}
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	0002      	movs	r2, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b7f      	cmp	r3, #127	@ 0x7f
 8002498:	d828      	bhi.n	80024ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249a:	4a2f      	ldr	r2, [pc, #188]	@ (8002558 <__NVIC_SetPriority+0xd4>)
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	33c0      	adds	r3, #192	@ 0xc0
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	589b      	ldr	r3, [r3, r2]
 80024aa:	1dfa      	adds	r2, r7, #7
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	0011      	movs	r1, r2
 80024b0:	2203      	movs	r2, #3
 80024b2:	400a      	ands	r2, r1
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	21ff      	movs	r1, #255	@ 0xff
 80024b8:	4091      	lsls	r1, r2
 80024ba:	000a      	movs	r2, r1
 80024bc:	43d2      	mvns	r2, r2
 80024be:	401a      	ands	r2, r3
 80024c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	019b      	lsls	r3, r3, #6
 80024c6:	22ff      	movs	r2, #255	@ 0xff
 80024c8:	401a      	ands	r2, r3
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	0018      	movs	r0, r3
 80024d0:	2303      	movs	r3, #3
 80024d2:	4003      	ands	r3, r0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d8:	481f      	ldr	r0, [pc, #124]	@ (8002558 <__NVIC_SetPriority+0xd4>)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	430a      	orrs	r2, r1
 80024e4:	33c0      	adds	r3, #192	@ 0xc0
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ea:	e031      	b.n	8002550 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <__NVIC_SetPriority+0xd8>)
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	0019      	movs	r1, r3
 80024f4:	230f      	movs	r3, #15
 80024f6:	400b      	ands	r3, r1
 80024f8:	3b08      	subs	r3, #8
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3306      	adds	r3, #6
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	3304      	adds	r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1dfa      	adds	r2, r7, #7
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	0011      	movs	r1, r2
 800250c:	2203      	movs	r2, #3
 800250e:	400a      	ands	r2, r1
 8002510:	00d2      	lsls	r2, r2, #3
 8002512:	21ff      	movs	r1, #255	@ 0xff
 8002514:	4091      	lsls	r1, r2
 8002516:	000a      	movs	r2, r1
 8002518:	43d2      	mvns	r2, r2
 800251a:	401a      	ands	r2, r3
 800251c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	22ff      	movs	r2, #255	@ 0xff
 8002524:	401a      	ands	r2, r3
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	0018      	movs	r0, r3
 800252c:	2303      	movs	r3, #3
 800252e:	4003      	ands	r3, r0
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002534:	4809      	ldr	r0, [pc, #36]	@ (800255c <__NVIC_SetPriority+0xd8>)
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	001c      	movs	r4, r3
 800253c:	230f      	movs	r3, #15
 800253e:	4023      	ands	r3, r4
 8002540:	3b08      	subs	r3, #8
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	430a      	orrs	r2, r1
 8002546:	3306      	adds	r3, #6
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	18c3      	adds	r3, r0, r3
 800254c:	3304      	adds	r3, #4
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	46c0      	nop			@ (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b003      	add	sp, #12
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	045b      	lsls	r3, r3, #17
 8002570:	429a      	cmp	r2, r3
 8002572:	d301      	bcc.n	8002578 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002574:	2301      	movs	r3, #1
 8002576:	e010      	b.n	800259a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <SysTick_Config+0x44>)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	3a01      	subs	r2, #1
 800257e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002580:	2301      	movs	r3, #1
 8002582:	425b      	negs	r3, r3
 8002584:	2103      	movs	r1, #3
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff ff7c 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <SysTick_Config+0x44>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <SysTick_Config+0x44>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	210f      	movs	r1, #15
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	1c02      	adds	r2, r0, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff ff5d 	bl	8002484 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	0002      	movs	r2, r0
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025de:	1dfb      	adds	r3, r7, #7
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff33 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff ffaf 	bl	8002560 <SysTick_Config>
 8002602:	0003      	movs	r3, r0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e061      	b.n	80026e2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a32      	ldr	r2, [pc, #200]	@ (80026ec <HAL_DMA_Init+0xe0>)
 8002624:	4694      	mov	ip, r2
 8002626:	4463      	add	r3, ip
 8002628:	2114      	movs	r1, #20
 800262a:	0018      	movs	r0, r3
 800262c:	f7fd fd76 	bl	800011c <__udivsi3>
 8002630:	0003      	movs	r3, r0
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a2d      	ldr	r2, [pc, #180]	@ (80026f0 <HAL_DMA_Init+0xe4>)
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2225      	movs	r2, #37	@ 0x25
 8002642:	2102      	movs	r1, #2
 8002644:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_DMA_Init+0xe8>)
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	01db      	lsls	r3, r3, #7
 8002694:	429a      	cmp	r2, r3
 8002696:	d018      	beq.n	80026ca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002698:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_DMA_Init+0xec>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a0:	211c      	movs	r1, #28
 80026a2:	400b      	ands	r3, r1
 80026a4:	210f      	movs	r1, #15
 80026a6:	4099      	lsls	r1, r3
 80026a8:	000b      	movs	r3, r1
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_DMA_Init+0xec>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026b2:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <HAL_DMA_Init+0xec>)
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	201c      	movs	r0, #28
 80026c0:	4003      	ands	r3, r0
 80026c2:	409a      	lsls	r2, r3
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_DMA_Init+0xec>)
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2225      	movs	r2, #37	@ 0x25
 80026d4:	2101      	movs	r1, #1
 80026d6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b004      	add	sp, #16
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	bffdfff8 	.word	0xbffdfff8
 80026f0:	40020000 	.word	0x40020000
 80026f4:	ffff800f 	.word	0xffff800f
 80026f8:	400200a8 	.word	0x400200a8

080026fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2317      	movs	r3, #23
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2224      	movs	r2, #36	@ 0x24
 8002716:	5c9b      	ldrb	r3, [r3, r2]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Start_IT+0x24>
 800271c:	2302      	movs	r3, #2
 800271e:	e04f      	b.n	80027c0 <HAL_DMA_Start_IT+0xc4>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2224      	movs	r2, #36	@ 0x24
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2225      	movs	r2, #37	@ 0x25
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d13a      	bne.n	80027aa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2225      	movs	r2, #37	@ 0x25
 8002738:	2102      	movs	r1, #2
 800273a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f96a 	bl	8002a32 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	210e      	movs	r1, #14
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e00f      	b.n	8002798 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2104      	movs	r1, #4
 8002784:	438a      	bics	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	210a      	movs	r1, #10
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e007      	b.n	80027ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2224      	movs	r2, #36	@ 0x24
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027b2:	2317      	movs	r3, #23
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2202      	movs	r2, #2
 80027b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80027ba:	2317      	movs	r3, #23
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b006      	add	sp, #24
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	230f      	movs	r3, #15
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2225      	movs	r2, #37	@ 0x25
 80027dc:	5c9b      	ldrb	r3, [r3, r2]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2204      	movs	r2, #4
 80027e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e024      	b.n	8002840 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	210e      	movs	r1, #14
 8002802:	438a      	bics	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	221c      	movs	r2, #28
 800281c:	401a      	ands	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2101      	movs	r1, #1
 8002824:	4091      	lsls	r1, r2
 8002826:	000a      	movs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2225      	movs	r2, #37	@ 0x25
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2224      	movs	r2, #36	@ 0x24
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

    return status;
 800283a:	230f      	movs	r3, #15
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	210f      	movs	r1, #15
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2225      	movs	r2, #37	@ 0x25
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d006      	beq.n	8002872 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2204      	movs	r2, #4
 8002868:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e02a      	b.n	80028c8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	210e      	movs	r1, #14
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	221c      	movs	r2, #28
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2101      	movs	r1, #1
 80028a0:	4091      	lsls	r1, r2
 80028a2:	000a      	movs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2225      	movs	r2, #37	@ 0x25
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2224      	movs	r2, #36	@ 0x24
 80028b2:	2100      	movs	r1, #0
 80028b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	0010      	movs	r0, r2
 80028c6:	4798      	blx	r3
    }
  }
  return status;
 80028c8:	230f      	movs	r3, #15
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	781b      	ldrb	r3, [r3, #0]
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	221c      	movs	r2, #28
 80028f4:	4013      	ands	r3, r2
 80028f6:	2204      	movs	r2, #4
 80028f8:	409a      	lsls	r2, r3
 80028fa:	0013      	movs	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	d026      	beq.n	8002950 <HAL_DMA_IRQHandler+0x7a>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2204      	movs	r2, #4
 8002906:	4013      	ands	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2220      	movs	r2, #32
 8002912:	4013      	ands	r3, r2
 8002914:	d107      	bne.n	8002926 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2104      	movs	r1, #4
 8002922:	438a      	bics	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	221c      	movs	r2, #28
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2104      	movs	r1, #4
 8002934:	4091      	lsls	r1, r2
 8002936:	000a      	movs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	2b00      	cmp	r3, #0
 8002940:	d100      	bne.n	8002944 <HAL_DMA_IRQHandler+0x6e>
 8002942:	e071      	b.n	8002a28 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	0010      	movs	r0, r2
 800294c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800294e:	e06b      	b.n	8002a28 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	221c      	movs	r2, #28
 8002956:	4013      	ands	r3, r2
 8002958:	2202      	movs	r2, #2
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	d02d      	beq.n	80029c0 <HAL_DMA_IRQHandler+0xea>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d029      	beq.n	80029c0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2220      	movs	r2, #32
 8002974:	4013      	ands	r3, r2
 8002976:	d10b      	bne.n	8002990 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	210a      	movs	r1, #10
 8002984:	438a      	bics	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2225      	movs	r2, #37	@ 0x25
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	221c      	movs	r2, #28
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2102      	movs	r1, #2
 800299e:	4091      	lsls	r1, r2
 80029a0:	000a      	movs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	@ 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d039      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	0010      	movs	r0, r2
 80029bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029be:	e033      	b.n	8002a28 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	221c      	movs	r2, #28
 80029c6:	4013      	ands	r3, r2
 80029c8:	2208      	movs	r2, #8
 80029ca:	409a      	lsls	r2, r3
 80029cc:	0013      	movs	r3, r2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	d02a      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x154>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2208      	movs	r2, #8
 80029d8:	4013      	ands	r3, r2
 80029da:	d026      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	210e      	movs	r1, #14
 80029e8:	438a      	bics	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	221c      	movs	r2, #28
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	2101      	movs	r1, #1
 80029fa:	4091      	lsls	r1, r2
 80029fc:	000a      	movs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2225      	movs	r2, #37	@ 0x25
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2224      	movs	r2, #36	@ 0x24
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	0010      	movs	r0, r2
 8002a26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46c0      	nop			@ (mov r8, r8)
}
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	221c      	movs	r2, #28
 8002a46:	401a      	ands	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4091      	lsls	r1, r2
 8002a50:	000a      	movs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d108      	bne.n	8002a76 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a74:	e007      	b.n	8002a86 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	60da      	str	r2, [r3, #12]
}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002aa6:	e155      	b.n	8002d54 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4091      	lsls	r1, r2
 8002ab2:	000a      	movs	r2, r1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <HAL_GPIO_Init+0x30>
 8002abe:	e146      	b.n	8002d4e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d005      	beq.n	8002ad8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d130      	bne.n	8002b3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	43da      	mvns	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	2201      	movs	r2, #1
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d017      	beq.n	8002b76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	43da      	mvns	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d123      	bne.n	8002bca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	58d3      	ldr	r3, [r2, r3]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2107      	movs	r1, #7
 8002bae:	400b      	ands	r3, r1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	6939      	ldr	r1, [r7, #16]
 8002bc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2203      	movs	r2, #3
 8002be8:	401a      	ands	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	23c0      	movs	r3, #192	@ 0xc0
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	4013      	ands	r3, r2
 8002c08:	d100      	bne.n	8002c0c <HAL_GPIO_Init+0x17c>
 8002c0a:	e0a0      	b.n	8002d4e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0c:	4b57      	ldr	r3, [pc, #348]	@ (8002d6c <HAL_GPIO_Init+0x2dc>)
 8002c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c10:	4b56      	ldr	r3, [pc, #344]	@ (8002d6c <HAL_GPIO_Init+0x2dc>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	430a      	orrs	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c18:	4a55      	ldr	r2, [pc, #340]	@ (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	589b      	ldr	r3, [r3, r2]
 8002c24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	409a      	lsls	r2, r3
 8002c32:	0013      	movs	r3, r2
 8002c34:	43da      	mvns	r2, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	23a0      	movs	r3, #160	@ 0xa0
 8002c40:	05db      	lsls	r3, r3, #23
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d01f      	beq.n	8002c86 <HAL_GPIO_Init+0x1f6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_GPIO_Init+0x1f2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	@ (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_GPIO_Init+0x1ee>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a48      	ldr	r2, [pc, #288]	@ (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_GPIO_Init+0x1ea>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a47      	ldr	r2, [pc, #284]	@ (8002d80 <HAL_GPIO_Init+0x2f0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x1e6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a46      	ldr	r2, [pc, #280]	@ (8002d84 <HAL_GPIO_Init+0x2f4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_GPIO_Init+0x1e2>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e00a      	b.n	8002c88 <HAL_GPIO_Init+0x1f8>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x1f8>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x1f8>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x1f8>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x1f8>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x1f8>
 8002c86:	2300      	movs	r3, #0
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	@ (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca6:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	035b      	lsls	r3, r3, #13
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cca:	4b2f      	ldr	r3, [pc, #188]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	039b      	lsls	r3, r3, #14
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002cfa:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	4013      	ands	r3, r2
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d24:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	40da      	lsrs	r2, r3
 8002d5c:	1e13      	subs	r3, r2, #0
 8002d5e:	d000      	beq.n	8002d62 <HAL_GPIO_Init+0x2d2>
 8002d60:	e6a2      	b.n	8002aa8 <HAL_GPIO_Init+0x18>
  }
}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b006      	add	sp, #24
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010000 	.word	0x40010000
 8002d74:	50000400 	.word	0x50000400
 8002d78:	50000800 	.word	0x50000800
 8002d7c:	50000c00 	.word	0x50000c00
 8002d80:	50001000 	.word	0x50001000
 8002d84:	50001c00 	.word	0x50001c00
 8002d88:	40010400 	.word	0x40010400

08002d8c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	000a      	movs	r2, r1
 8002d96:	1cbb      	adds	r3, r7, #2
 8002d98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	1cba      	adds	r2, r7, #2
 8002da0:	8812      	ldrh	r2, [r2, #0]
 8002da2:	4013      	ands	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e003      	b.n	8002db8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002db0:	230f      	movs	r3, #15
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002db8:	230f      	movs	r3, #15
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	0008      	movs	r0, r1
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	1cbb      	adds	r3, r7, #2
 8002dd4:	1c02      	adds	r2, r0, #0
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	1c7b      	adds	r3, r7, #1
 8002dda:	1c0a      	adds	r2, r1, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dde:	1c7b      	adds	r3, r7, #1
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	1cbb      	adds	r3, r7, #2
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002dee:	e003      	b.n	8002df8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002df0:	1cbb      	adds	r3, r7, #2
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	0002      	movs	r2, r0
 8002e08:	1dbb      	adds	r3, r7, #6
 8002e0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	1dba      	adds	r2, r7, #6
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	4013      	ands	r3, r2
 8002e16:	d008      	beq.n	8002e2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e1a:	1dba      	adds	r2, r7, #6
 8002e1c:	8812      	ldrh	r2, [r2, #0]
 8002e1e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e20:	1dbb      	adds	r3, r7, #6
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fd fef5 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b5b0      	push	{r4, r5, r7, lr}
 8002e3a:	b08a      	sub	sp, #40	@ 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f000 fbbf 	bl	80035ca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4c:	4bc9      	ldr	r3, [pc, #804]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	220c      	movs	r2, #12
 8002e52:	4013      	ands	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e56:	4bc7      	ldr	r3, [pc, #796]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x36>
 8002e6c:	e07e      	b.n	8002f6c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d007      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d112      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x68>
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d10d      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	4bbb      	ldr	r3, [pc, #748]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	029b      	lsls	r3, r3, #10
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5a>
 8002e90:	e06b      	b.n	8002f6a <HAL_RCC_OscConfig+0x132>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d167      	bne.n	8002f6a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f000 fb95 	bl	80035ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	025b      	lsls	r3, r3, #9
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x84>
 8002eac:	4bb1      	ldr	r3, [pc, #708]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002eb2:	2180      	movs	r1, #128	@ 0x80
 8002eb4:	0249      	lsls	r1, r1, #9
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e027      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	23a0      	movs	r3, #160	@ 0xa0
 8002ec2:	02db      	lsls	r3, r3, #11
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_RCC_OscConfig+0xae>
 8002ec8:	4baa      	ldr	r3, [pc, #680]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4ba9      	ldr	r3, [pc, #676]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	02c9      	lsls	r1, r1, #11
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	4ba7      	ldr	r3, [pc, #668]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4ba6      	ldr	r3, [pc, #664]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002edc:	2180      	movs	r1, #128	@ 0x80
 8002ede:	0249      	lsls	r1, r1, #9
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e012      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002ee6:	4ba3      	ldr	r3, [pc, #652]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4ba2      	ldr	r3, [pc, #648]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002eec:	49a2      	ldr	r1, [pc, #648]	@ (8003178 <HAL_RCC_OscConfig+0x340>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	4ba0      	ldr	r3, [pc, #640]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	025b      	lsls	r3, r3, #9
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4b9c      	ldr	r3, [pc, #624]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b9b      	ldr	r3, [pc, #620]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002f06:	499d      	ldr	r1, [pc, #628]	@ (800317c <HAL_RCC_OscConfig+0x344>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe5c 	bl	8001bd0 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f1c:	e009      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fe57 	bl	8001bd0 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b64      	cmp	r3, #100	@ 0x64
 8002f2a:	d902      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	f000 fb4c 	bl	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f32:	4b90      	ldr	r3, [pc, #576]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	@ 0x80
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d0ef      	beq.n	8002f1e <HAL_RCC_OscConfig+0xe6>
 8002f3e:	e015      	b.n	8002f6c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fe46 	bl	8001bd0 <HAL_GetTick>
 8002f44:	0003      	movs	r3, r0
 8002f46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fe41 	bl	8001bd0 <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b64      	cmp	r3, #100	@ 0x64
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e336      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f5c:	4b85      	ldr	r3, [pc, #532]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	@ 0x80
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	4013      	ands	r3, r2
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x112>
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2202      	movs	r2, #2
 8002f72:	4013      	ands	r3, r2
 8002f74:	d100      	bne.n	8002f78 <HAL_RCC_OscConfig+0x140>
 8002f76:	e099      	b.n	80030ac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	2220      	movs	r2, #32
 8002f82:	4013      	ands	r3, r2
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002f86:	4b7b      	ldr	r3, [pc, #492]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	2220      	movs	r2, #32
 8002f96:	4393      	bics	r3, r2
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d13e      	bne.n	8003024 <HAL_RCC_OscConfig+0x1ec>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13b      	bne.n	8003024 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002fac:	4b71      	ldr	r3, [pc, #452]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x188>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e304      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8003180 <HAL_RCC_OscConfig+0x348>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	4b68      	ldr	r3, [pc, #416]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2209      	movs	r2, #9
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe8:	f000 fc42 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8002fec:	0001      	movs	r1, r0
 8002fee:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	4a62      	ldr	r2, [pc, #392]	@ (8003184 <HAL_RCC_OscConfig+0x34c>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	000a      	movs	r2, r1
 8002ffe:	40da      	lsrs	r2, r3
 8003000:	4b61      	ldr	r3, [pc, #388]	@ (8003188 <HAL_RCC_OscConfig+0x350>)
 8003002:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003004:	4b61      	ldr	r3, [pc, #388]	@ (800318c <HAL_RCC_OscConfig+0x354>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2513      	movs	r5, #19
 800300a:	197c      	adds	r4, r7, r5
 800300c:	0018      	movs	r0, r3
 800300e:	f7fe fd99 	bl	8001b44 <HAL_InitTick>
 8003012:	0003      	movs	r3, r0
 8003014:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003016:	197b      	adds	r3, r7, r5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d046      	beq.n	80030ac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800301e:	197b      	adds	r3, r7, r5
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	e2d2      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d027      	beq.n	800307a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800302a:	4b52      	ldr	r3, [pc, #328]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2209      	movs	r2, #9
 8003030:	4393      	bics	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	4b4f      	ldr	r3, [pc, #316]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8003036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fdc8 	bl	8001bd0 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fdc3 	bl	8001bd0 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e2b8      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003058:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2204      	movs	r2, #4
 800305e:	4013      	ands	r3, r2
 8003060:	d0f1      	beq.n	8003046 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b44      	ldr	r3, [pc, #272]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a46      	ldr	r2, [pc, #280]	@ (8003180 <HAL_RCC_OscConfig+0x348>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	021a      	lsls	r2, r3, #8
 8003072:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	e018      	b.n	80030ac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b3d      	ldr	r3, [pc, #244]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 8003080:	2101      	movs	r1, #1
 8003082:	438a      	bics	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fda3 	bl	8001bd0 <HAL_GetTick>
 800308a:	0003      	movs	r3, r0
 800308c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fd9e 	bl	8001bd0 <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e293      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a2:	4b34      	ldr	r3, [pc, #208]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2204      	movs	r2, #4
 80030a8:	4013      	ands	r3, r2
 80030aa:	d1f1      	bne.n	8003090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2210      	movs	r2, #16
 80030b2:	4013      	ands	r3, r2
 80030b4:	d100      	bne.n	80030b8 <HAL_RCC_OscConfig+0x280>
 80030b6:	e0a2      	b.n	80031fe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d140      	bne.n	8003140 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030be:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x29e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e279      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d6:	4b27      	ldr	r3, [pc, #156]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a2d      	ldr	r2, [pc, #180]	@ (8003190 <HAL_RCC_OscConfig+0x358>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e4:	4b23      	ldr	r3, [pc, #140]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ea:	4b22      	ldr	r3, [pc, #136]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	0a19      	lsrs	r1, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	061a      	lsls	r2, r3, #24
 80030f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	0b5b      	lsrs	r3, r3, #13
 8003104:	3301      	adds	r3, #1
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	0212      	lsls	r2, r2, #8
 800310a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	210f      	movs	r1, #15
 8003114:	400b      	ands	r3, r1
 8003116:	491b      	ldr	r1, [pc, #108]	@ (8003184 <HAL_RCC_OscConfig+0x34c>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800311c:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_OscConfig+0x350>)
 800311e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003120:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_RCC_OscConfig+0x354>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2513      	movs	r5, #19
 8003126:	197c      	adds	r4, r7, r5
 8003128:	0018      	movs	r0, r3
 800312a:	f7fe fd0b 	bl	8001b44 <HAL_InitTick>
 800312e:	0003      	movs	r3, r0
 8003130:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003132:	197b      	adds	r3, r7, r5
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d061      	beq.n	80031fe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800313a:	197b      	adds	r3, r7, r5
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	e244      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d040      	beq.n	80031ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_RCC_OscConfig+0x33c>)
 800314e:	2180      	movs	r1, #128	@ 0x80
 8003150:	0049      	lsls	r1, r1, #1
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fe fd3b 	bl	8001bd0 <HAL_GetTick>
 800315a:	0003      	movs	r3, r0
 800315c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800315e:	e019      	b.n	8003194 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003160:	f7fe fd36 	bl	8001bd0 <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d912      	bls.n	8003194 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e22b      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	40021000 	.word	0x40021000
 8003178:	fffeffff 	.word	0xfffeffff
 800317c:	fffbffff 	.word	0xfffbffff
 8003180:	ffffe0ff 	.word	0xffffe0ff
 8003184:	08006eb4 	.word	0x08006eb4
 8003188:	20000004 	.word	0x20000004
 800318c:	20000008 	.word	0x20000008
 8003190:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003194:	4bca      	ldr	r3, [pc, #808]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4013      	ands	r3, r2
 800319e:	d0df      	beq.n	8003160 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a0:	4bc7      	ldr	r3, [pc, #796]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4ac7      	ldr	r2, [pc, #796]	@ (80034c4 <HAL_RCC_OscConfig+0x68c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ae:	4bc4      	ldr	r3, [pc, #784]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b4:	4bc2      	ldr	r3, [pc, #776]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	0a19      	lsrs	r1, r3, #8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	061a      	lsls	r2, r3, #24
 80031c2:	4bbf      	ldr	r3, [pc, #764]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	e019      	b.n	80031fe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ca:	4bbd      	ldr	r3, [pc, #756]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4bbc      	ldr	r3, [pc, #752]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031d0:	49bd      	ldr	r1, [pc, #756]	@ (80034c8 <HAL_RCC_OscConfig+0x690>)
 80031d2:	400a      	ands	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fcfb 	bl	8001bd0 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e0:	f7fe fcf6 	bl	8001bd0 <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1eb      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031f2:	4bb3      	ldr	r3, [pc, #716]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2208      	movs	r2, #8
 8003204:	4013      	ands	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d019      	beq.n	8003244 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003210:	4bab      	ldr	r3, [pc, #684]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003212:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003214:	4baa      	ldr	r3, [pc, #680]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003216:	2101      	movs	r1, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fe fcd8 	bl	8001bd0 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fcd3 	bl	8001bd0 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1c8      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003238:	4ba1      	ldr	r3, [pc, #644]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800323a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323c:	2202      	movs	r2, #2
 800323e:	4013      	ands	r3, r2
 8003240:	d0f1      	beq.n	8003226 <HAL_RCC_OscConfig+0x3ee>
 8003242:	e018      	b.n	8003276 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4b9e      	ldr	r3, [pc, #632]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003248:	4b9d      	ldr	r3, [pc, #628]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800324a:	2101      	movs	r1, #1
 800324c:	438a      	bics	r2, r1
 800324e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fe fcbe 	bl	8001bd0 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325a:	f7fe fcb9 	bl	8001bd0 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1ae      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800326c:	4b94      	ldr	r3, [pc, #592]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800326e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003270:	2202      	movs	r2, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d1f1      	bne.n	800325a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2204      	movs	r2, #4
 800327c:	4013      	ands	r3, r2
 800327e:	d100      	bne.n	8003282 <HAL_RCC_OscConfig+0x44a>
 8003280:	e0ae      	b.n	80033e0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2023      	movs	r0, #35	@ 0x23
 8003284:	183b      	adds	r3, r7, r0
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b8d      	ldr	r3, [pc, #564]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800328c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	055b      	lsls	r3, r3, #21
 8003292:	4013      	ands	r3, r2
 8003294:	d109      	bne.n	80032aa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b8a      	ldr	r3, [pc, #552]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800329a:	4b89      	ldr	r3, [pc, #548]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800329c:	2180      	movs	r1, #128	@ 0x80
 800329e:	0549      	lsls	r1, r1, #21
 80032a0:	430a      	orrs	r2, r1
 80032a2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80032a4:	183b      	adds	r3, r7, r0
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x694>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	d11a      	bne.n	80032ec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b6:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_OscConfig+0x694>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b84      	ldr	r3, [pc, #528]	@ (80034cc <HAL_RCC_OscConfig+0x694>)
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	0049      	lsls	r1, r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c4:	f7fe fc84 	bl	8001bd0 <HAL_GetTick>
 80032c8:	0003      	movs	r3, r0
 80032ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fc7f 	bl	8001bd0 <HAL_GetTick>
 80032d2:	0002      	movs	r2, r0
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b64      	cmp	r3, #100	@ 0x64
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e174      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b7a      	ldr	r3, [pc, #488]	@ (80034cc <HAL_RCC_OscConfig+0x694>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	2380      	movs	r3, #128	@ 0x80
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x4d0>
 80032f8:	4b71      	ldr	r3, [pc, #452]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80032fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032fc:	4b70      	ldr	r3, [pc, #448]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80032fe:	2180      	movs	r1, #128	@ 0x80
 8003300:	0049      	lsls	r1, r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	651a      	str	r2, [r3, #80]	@ 0x50
 8003306:	e031      	b.n	800336c <HAL_RCC_OscConfig+0x534>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x4f2>
 8003310:	4b6b      	ldr	r3, [pc, #428]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003314:	4b6a      	ldr	r3, [pc, #424]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003316:	496c      	ldr	r1, [pc, #432]	@ (80034c8 <HAL_RCC_OscConfig+0x690>)
 8003318:	400a      	ands	r2, r1
 800331a:	651a      	str	r2, [r3, #80]	@ 0x50
 800331c:	4b68      	ldr	r3, [pc, #416]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800331e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003320:	4b67      	ldr	r3, [pc, #412]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003322:	496b      	ldr	r1, [pc, #428]	@ (80034d0 <HAL_RCC_OscConfig+0x698>)
 8003324:	400a      	ands	r2, r1
 8003326:	651a      	str	r2, [r3, #80]	@ 0x50
 8003328:	e020      	b.n	800336c <HAL_RCC_OscConfig+0x534>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	23a0      	movs	r3, #160	@ 0xa0
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	429a      	cmp	r2, r3
 8003334:	d10e      	bne.n	8003354 <HAL_RCC_OscConfig+0x51c>
 8003336:	4b62      	ldr	r3, [pc, #392]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800333a:	4b61      	ldr	r3, [pc, #388]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800333c:	2180      	movs	r1, #128	@ 0x80
 800333e:	00c9      	lsls	r1, r1, #3
 8003340:	430a      	orrs	r2, r1
 8003342:	651a      	str	r2, [r3, #80]	@ 0x50
 8003344:	4b5e      	ldr	r3, [pc, #376]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003346:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003348:	4b5d      	ldr	r3, [pc, #372]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	0049      	lsls	r1, r1, #1
 800334e:	430a      	orrs	r2, r1
 8003350:	651a      	str	r2, [r3, #80]	@ 0x50
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0x534>
 8003354:	4b5a      	ldr	r3, [pc, #360]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003356:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003358:	4b59      	ldr	r3, [pc, #356]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800335a:	495b      	ldr	r1, [pc, #364]	@ (80034c8 <HAL_RCC_OscConfig+0x690>)
 800335c:	400a      	ands	r2, r1
 800335e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003360:	4b57      	ldr	r3, [pc, #348]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003364:	4b56      	ldr	r3, [pc, #344]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003366:	495a      	ldr	r1, [pc, #360]	@ (80034d0 <HAL_RCC_OscConfig+0x698>)
 8003368:	400a      	ands	r2, r1
 800336a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003374:	f7fe fc2c 	bl	8001bd0 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800337c:	e009      	b.n	8003392 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe fc27 	bl	8001bd0 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	4a52      	ldr	r2, [pc, #328]	@ (80034d4 <HAL_RCC_OscConfig+0x69c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e11b      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003392:	4b4b      	ldr	r3, [pc, #300]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4013      	ands	r3, r2
 800339c:	d0ef      	beq.n	800337e <HAL_RCC_OscConfig+0x546>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fe fc16 	bl	8001bd0 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033a8:	e009      	b.n	80033be <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fe fc11 	bl	8001bd0 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <HAL_RCC_OscConfig+0x69c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e105      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033be:	4b40      	ldr	r3, [pc, #256]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80033c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d1ef      	bne.n	80033aa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ca:	2323      	movs	r3, #35	@ 0x23
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d4:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80033d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80033da:	493f      	ldr	r1, [pc, #252]	@ (80034d8 <HAL_RCC_OscConfig+0x6a0>)
 80033dc:	400a      	ands	r2, r1
 80033de:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2220      	movs	r2, #32
 80033e6:	4013      	ands	r3, r2
 80033e8:	d049      	beq.n	800347e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d026      	beq.n	8003440 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	4b30      	ldr	r3, [pc, #192]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003402:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003404:	2101      	movs	r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34
 800340a:	4b34      	ldr	r3, [pc, #208]	@ (80034dc <HAL_RCC_OscConfig+0x6a4>)
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	4b33      	ldr	r3, [pc, #204]	@ (80034dc <HAL_RCC_OscConfig+0x6a4>)
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	0189      	lsls	r1, r1, #6
 8003414:	430a      	orrs	r2, r1
 8003416:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe fbda 	bl	8001bd0 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003422:	f7fe fbd5 	bl	8001bd0 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0ca      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003434:	4b22      	ldr	r3, [pc, #136]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d0f1      	beq.n	8003422 <HAL_RCC_OscConfig+0x5ea>
 800343e:	e01e      	b.n	800347e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003440:	4b1f      	ldr	r3, [pc, #124]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <HAL_RCC_OscConfig+0x6a4>)
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_RCC_OscConfig+0x6a4>)
 8003452:	4923      	ldr	r1, [pc, #140]	@ (80034e0 <HAL_RCC_OscConfig+0x6a8>)
 8003454:	400a      	ands	r2, r1
 8003456:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fbba 	bl	8001bd0 <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003462:	f7fe fbb5 	bl	8001bd0 <HAL_GetTick>
 8003466:	0002      	movs	r2, r0
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0aa      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003474:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d1f1      	bne.n	8003462 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d100      	bne.n	8003488 <HAL_RCC_OscConfig+0x650>
 8003486:	e09f      	b.n	80035c8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d100      	bne.n	8003490 <HAL_RCC_OscConfig+0x658>
 800348e:	e078      	b.n	8003582 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	2b02      	cmp	r3, #2
 8003496:	d159      	bne.n	800354c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b08      	ldr	r3, [pc, #32]	@ (80034c0 <HAL_RCC_OscConfig+0x688>)
 800349e:	4911      	ldr	r1, [pc, #68]	@ (80034e4 <HAL_RCC_OscConfig+0x6ac>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fb94 	bl	8001bd0 <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fb8f 	bl	8001bd0 <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d915      	bls.n	80034e8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e084      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	ffff1fff 	.word	0xffff1fff
 80034c8:	fffffeff 	.word	0xfffffeff
 80034cc:	40007000 	.word	0x40007000
 80034d0:	fffffbff 	.word	0xfffffbff
 80034d4:	00001388 	.word	0x00001388
 80034d8:	efffffff 	.word	0xefffffff
 80034dc:	40010000 	.word	0x40010000
 80034e0:	ffffdfff 	.word	0xffffdfff
 80034e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034e8:	4b3a      	ldr	r3, [pc, #232]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	049b      	lsls	r3, r3, #18
 80034f0:	4013      	ands	r3, r2
 80034f2:	d1dc      	bne.n	80034ae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f4:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a37      	ldr	r2, [pc, #220]	@ (80035d8 <HAL_RCC_OscConfig+0x7a0>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	431a      	orrs	r2, r3
 800350e:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003514:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b2e      	ldr	r3, [pc, #184]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 800351a:	2180      	movs	r1, #128	@ 0x80
 800351c:	0449      	lsls	r1, r1, #17
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fb55 	bl	8001bd0 <HAL_GetTick>
 8003526:	0003      	movs	r3, r0
 8003528:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7fe fb50 	bl	8001bd0 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e045      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	049b      	lsls	r3, r3, #18
 8003546:	4013      	ands	r3, r2
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x6f4>
 800354a:	e03d      	b.n	80035c8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354c:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 8003552:	4922      	ldr	r1, [pc, #136]	@ (80035dc <HAL_RCC_OscConfig+0x7a4>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fb3a 	bl	8001bd0 <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe fb35 	bl	8001bd0 <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e02a      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003574:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	049b      	lsls	r3, r3, #18
 800357c:	4013      	ands	r3, r2
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x72a>
 8003580:	e022      	b.n	80035c8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e01d      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800358e:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <HAL_RCC_OscConfig+0x79c>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	025b      	lsls	r3, r3, #9
 800359a:	401a      	ands	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10f      	bne.n	80035c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	23f0      	movs	r3, #240	@ 0xf0
 80035a8:	039b      	lsls	r3, r3, #14
 80035aa:	401a      	ands	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	23c0      	movs	r3, #192	@ 0xc0
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	401a      	ands	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b00a      	add	sp, #40	@ 0x28
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	40021000 	.word	0x40021000
 80035d8:	ff02ffff 	.word	0xff02ffff
 80035dc:	feffffff 	.word	0xfeffffff

080035e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e128      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b96      	ldr	r3, [pc, #600]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d91e      	bls.n	8003640 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b93      	ldr	r3, [pc, #588]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	4393      	bics	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	4b90      	ldr	r3, [pc, #576]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003614:	f7fe fadc 	bl	8001bd0 <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361c:	e009      	b.n	8003632 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361e:	f7fe fad7 	bl	8001bd0 <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	4a8a      	ldr	r2, [pc, #552]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e109      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b87      	ldr	r3, [pc, #540]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2201      	movs	r2, #1
 8003638:	4013      	ands	r3, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d1ee      	bne.n	800361e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364a:	4b83      	ldr	r3, [pc, #524]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	22f0      	movs	r2, #240	@ 0xf0
 8003650:	4393      	bics	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4b7f      	ldr	r3, [pc, #508]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 800365a:	430a      	orrs	r2, r1
 800365c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	4013      	ands	r3, r2
 8003666:	d100      	bne.n	800366a <HAL_RCC_ClockConfig+0x8a>
 8003668:	e089      	b.n	800377e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003672:	4b79      	ldr	r3, [pc, #484]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	2380      	movs	r3, #128	@ 0x80
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	4013      	ands	r3, r2
 800367c:	d120      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0e1      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800368a:	4b73      	ldr	r3, [pc, #460]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	2380      	movs	r3, #128	@ 0x80
 8003690:	049b      	lsls	r3, r3, #18
 8003692:	4013      	ands	r3, r2
 8003694:	d114      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0d5      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d106      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2204      	movs	r2, #4
 80036a8:	4013      	ands	r3, r2
 80036aa:	d109      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0ca      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036b0:	4b69      	ldr	r3, [pc, #420]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4013      	ands	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0c2      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c0:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2203      	movs	r2, #3
 80036c6:	4393      	bics	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4b62      	ldr	r3, [pc, #392]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d4:	f7fe fa7c 	bl	8001bd0 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d111      	bne.n	8003708 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e4:	e009      	b.n	80036fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e6:	f7fe fa73 	bl	8001bd0 <HAL_GetTick>
 80036ea:	0002      	movs	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	4a58      	ldr	r2, [pc, #352]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0a5      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036fa:	4b57      	ldr	r3, [pc, #348]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	220c      	movs	r2, #12
 8003700:	4013      	ands	r3, r2
 8003702:	2b08      	cmp	r3, #8
 8003704:	d1ef      	bne.n	80036e6 <HAL_RCC_ClockConfig+0x106>
 8003706:	e03a      	b.n	800377e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d111      	bne.n	8003734 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003710:	e009      	b.n	8003726 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003712:	f7fe fa5d 	bl	8001bd0 <HAL_GetTick>
 8003716:	0002      	movs	r2, r0
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	4a4d      	ldr	r2, [pc, #308]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e08f      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003726:	4b4c      	ldr	r3, [pc, #304]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	220c      	movs	r2, #12
 800372c:	4013      	ands	r3, r2
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d1ef      	bne.n	8003712 <HAL_RCC_ClockConfig+0x132>
 8003732:	e024      	b.n	800377e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d11b      	bne.n	8003774 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800373c:	e009      	b.n	8003752 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373e:	f7fe fa47 	bl	8001bd0 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	4a42      	ldr	r2, [pc, #264]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e079      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003752:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	220c      	movs	r2, #12
 8003758:	4013      	ands	r3, r2
 800375a:	2b04      	cmp	r3, #4
 800375c:	d1ef      	bne.n	800373e <HAL_RCC_ClockConfig+0x15e>
 800375e:	e00e      	b.n	800377e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fe fa36 	bl	8001bd0 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	4a3a      	ldr	r2, [pc, #232]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e068      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003774:	4b38      	ldr	r3, [pc, #224]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	220c      	movs	r2, #12
 800377a:	4013      	ands	r3, r2
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2201      	movs	r2, #1
 8003784:	4013      	ands	r3, r2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d21e      	bcs.n	80037ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378c:	4b30      	ldr	r3, [pc, #192]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2201      	movs	r2, #1
 8003792:	4393      	bics	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	4b2e      	ldr	r3, [pc, #184]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800379e:	f7fe fa17 	bl	8001bd0 <HAL_GetTick>
 80037a2:	0003      	movs	r3, r0
 80037a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	e009      	b.n	80037bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fe fa12 	bl	8001bd0 <HAL_GetTick>
 80037ac:	0002      	movs	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	4a28      	ldr	r2, [pc, #160]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e044      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037bc:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d1ee      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2204      	movs	r2, #4
 80037d0:	4013      	ands	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a20      	ldr	r2, [pc, #128]	@ (800385c <HAL_RCC_ClockConfig+0x27c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80037e4:	430a      	orrs	r2, r1
 80037e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2208      	movs	r2, #8
 80037ee:	4013      	ands	r3, r2
 80037f0:	d00a      	beq.n	8003808 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f2:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <HAL_RCC_ClockConfig+0x280>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	00da      	lsls	r2, r3, #3
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003808:	f000 f832 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800380c:	0001      	movs	r1, r0
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <HAL_RCC_ClockConfig+0x278>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	220f      	movs	r2, #15
 8003816:	4013      	ands	r3, r2
 8003818:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <HAL_RCC_ClockConfig+0x284>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	000a      	movs	r2, r1
 800381e:	40da      	lsrs	r2, r3
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_ClockConfig+0x288>)
 8003822:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003824:	4b11      	ldr	r3, [pc, #68]	@ (800386c <HAL_RCC_ClockConfig+0x28c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	250b      	movs	r5, #11
 800382a:	197c      	adds	r4, r7, r5
 800382c:	0018      	movs	r0, r3
 800382e:	f7fe f989 	bl	8001b44 <HAL_InitTick>
 8003832:	0003      	movs	r3, r0
 8003834:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003836:	197b      	adds	r3, r7, r5
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800383e:	197b      	adds	r3, r7, r5
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	e000      	b.n	8003846 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	40022000 	.word	0x40022000
 8003854:	00001388 	.word	0x00001388
 8003858:	40021000 	.word	0x40021000
 800385c:	fffff8ff 	.word	0xfffff8ff
 8003860:	ffffc7ff 	.word	0xffffc7ff
 8003864:	08006eb4 	.word	0x08006eb4
 8003868:	20000004 	.word	0x20000004
 800386c:	20000008 	.word	0x20000008

08003870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	220c      	movs	r2, #12
 8003880:	4013      	ands	r3, r2
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d013      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x3e>
 8003886:	d85c      	bhi.n	8003942 <HAL_RCC_GetSysClockFreq+0xd2>
 8003888:	2b04      	cmp	r3, #4
 800388a:	d002      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x22>
 800388c:	2b08      	cmp	r3, #8
 800388e:	d00b      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x38>
 8003890:	e057      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003892:	4b35      	ldr	r3, [pc, #212]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2210      	movs	r2, #16
 8003898:	4013      	ands	r3, r2
 800389a:	d002      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800389c:	4b33      	ldr	r3, [pc, #204]	@ (800396c <HAL_RCC_GetSysClockFreq+0xfc>)
 800389e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80038a0:	e05d      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80038a2:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x100>)
 80038a4:	613b      	str	r3, [r7, #16]
      break;
 80038a6:	e05a      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x104>)
 80038aa:	613b      	str	r3, [r7, #16]
      break;
 80038ac:	e057      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	220f      	movs	r2, #15
 80038b4:	4013      	ands	r3, r2
 80038b6:	4a30      	ldr	r2, [pc, #192]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	0d9b      	lsrs	r3, r3, #22
 80038c0:	2203      	movs	r2, #3
 80038c2:	4013      	ands	r3, r2
 80038c4:	3301      	adds	r3, #1
 80038c6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c8:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	025b      	lsls	r3, r3, #9
 80038d0:	4013      	ands	r3, r2
 80038d2:	d00f      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	000a      	movs	r2, r1
 80038d8:	0152      	lsls	r2, r2, #5
 80038da:	1a52      	subs	r2, r2, r1
 80038dc:	0193      	lsls	r3, r2, #6
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	185b      	adds	r3, r3, r1
 80038e4:	025b      	lsls	r3, r3, #9
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7fc fc17 	bl	800011c <__udivsi3>
 80038ee:	0003      	movs	r3, r0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e023      	b.n	800393c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80038f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2210      	movs	r2, #16
 80038fa:	4013      	ands	r3, r2
 80038fc:	d00f      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	000a      	movs	r2, r1
 8003902:	0152      	lsls	r2, r2, #5
 8003904:	1a52      	subs	r2, r2, r1
 8003906:	0193      	lsls	r3, r2, #6
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	185b      	adds	r3, r3, r1
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	0018      	movs	r0, r3
 8003914:	f7fc fc02 	bl	800011c <__udivsi3>
 8003918:	0003      	movs	r3, r0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e00e      	b.n	800393c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	000a      	movs	r2, r1
 8003922:	0152      	lsls	r2, r2, #5
 8003924:	1a52      	subs	r2, r2, r1
 8003926:	0193      	lsls	r3, r2, #6
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	185b      	adds	r3, r3, r1
 800392e:	029b      	lsls	r3, r3, #10
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f7fc fbf2 	bl	800011c <__udivsi3>
 8003938:	0003      	movs	r3, r0
 800393a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
      break;
 8003940:	e00d      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	2207      	movs	r2, #7
 800394a:	4013      	ands	r3, r2
 800394c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	2280      	movs	r2, #128	@ 0x80
 8003954:	0212      	lsls	r2, r2, #8
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
      break;
 800395c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800395e:	693b      	ldr	r3, [r7, #16]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b006      	add	sp, #24
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	003d0900 	.word	0x003d0900
 8003970:	00f42400 	.word	0x00f42400
 8003974:	007a1200 	.word	0x007a1200
 8003978:	08006ecc 	.word	0x08006ecc

0800397c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b02      	ldr	r3, [pc, #8]	@ (800398c <HAL_RCC_GetHCLKFreq+0x10>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff2 	bl	800397c <HAL_RCC_GetHCLKFreq>
 8003998:	0001      	movs	r1, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	2207      	movs	r2, #7
 80039a2:	4013      	ands	r3, r2
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	40d9      	lsrs	r1, r3
 80039aa:	000b      	movs	r3, r1
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08006ec4 	.word	0x08006ec4

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c0:	f7ff ffdc 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c4:	0001      	movs	r1, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	0adb      	lsrs	r3, r3, #11
 80039cc:	2207      	movs	r2, #7
 80039ce:	4013      	ands	r3, r2
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	40d9      	lsrs	r1, r3
 80039d6:	000b      	movs	r3, r1
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08006ec4 	.word	0x08006ec4

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80039f0:	2317      	movs	r3, #23
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2220      	movs	r2, #32
 80039fe:	4013      	ands	r3, r2
 8003a00:	d106      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d100      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003a0e:	e104      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a10:	4bb9      	ldr	r3, [pc, #740]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	055b      	lsls	r3, r3, #21
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1c:	4bb6      	ldr	r3, [pc, #728]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a20:	4bb5      	ldr	r3, [pc, #724]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a22:	2180      	movs	r1, #128	@ 0x80
 8003a24:	0549      	lsls	r1, r1, #21
 8003a26:	430a      	orrs	r2, r1
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003a2a:	2317      	movs	r3, #23
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4bb2      	ldr	r3, [pc, #712]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d11a      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4baf      	ldr	r3, [pc, #700]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4bae      	ldr	r3, [pc, #696]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	0049      	lsls	r1, r1, #1
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe f8c0 	bl	8001bd0 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a56:	f7fe f8bb 	bl	8001bd0 <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	@ 0x64
 8003a62:	d901      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e143      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4ba4      	ldr	r3, [pc, #656]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a74:	4ba0      	ldr	r3, [pc, #640]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	23c0      	movs	r3, #192	@ 0xc0
 8003a7a:	039b      	lsls	r3, r3, #14
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	23c0      	movs	r3, #192	@ 0xc0
 8003a86:	039b      	lsls	r3, r3, #14
 8003a88:	4013      	ands	r3, r2
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	23c0      	movs	r3, #192	@ 0xc0
 8003a96:	039b      	lsls	r3, r3, #14
 8003a98:	4013      	ands	r3, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	23c0      	movs	r3, #192	@ 0xc0
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	23c0      	movs	r3, #192	@ 0xc0
 8003aac:	029b      	lsls	r3, r3, #10
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ab2:	4b91      	ldr	r3, [pc, #580]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	401a      	ands	r2, r3
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	029b      	lsls	r3, r3, #10
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e113      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003ac8:	4b8b      	ldr	r3, [pc, #556]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003acc:	23c0      	movs	r3, #192	@ 0xc0
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d049      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	23c0      	movs	r3, #192	@ 0xc0
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2220      	movs	r2, #32
 8003af0:	4013      	ands	r3, r2
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	23c0      	movs	r3, #192	@ 0xc0
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	4013      	ands	r3, r2
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d034      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d02e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003b10:	4b79      	ldr	r3, [pc, #484]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	4a7a      	ldr	r2, [pc, #488]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b1a:	4b77      	ldr	r3, [pc, #476]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b1e:	4b76      	ldr	r3, [pc, #472]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	0309      	lsls	r1, r1, #12
 8003b24:	430a      	orrs	r2, r1
 8003b26:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	4b73      	ldr	r3, [pc, #460]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b2c:	4b72      	ldr	r3, [pc, #456]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b2e:	4975      	ldr	r1, [pc, #468]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003b34:	4b70      	ldr	r3, [pc, #448]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	2380      	movs	r3, #128	@ 0x80
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	d014      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe f844 	bl	8001bd0 <HAL_GetTick>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f83f 	bl	8001bd0 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	4a6b      	ldr	r2, [pc, #428]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0c6      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b62:	4b65      	ldr	r3, [pc, #404]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d0ef      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2380      	movs	r3, #128	@ 0x80
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4013      	ands	r3, r2
 8003b78:	d01f      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	23c0      	movs	r3, #192	@ 0xc0
 8003b80:	029b      	lsls	r3, r3, #10
 8003b82:	401a      	ands	r2, r3
 8003b84:	23c0      	movs	r3, #192	@ 0xc0
 8003b86:	029b      	lsls	r3, r3, #10
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5e      	ldr	r2, [pc, #376]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	23c0      	movs	r3, #192	@ 0xc0
 8003b9c:	039b      	lsls	r3, r3, #14
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	4b55      	ldr	r3, [pc, #340]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	4b54      	ldr	r3, [pc, #336]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	23c0      	movs	r3, #192	@ 0xc0
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	4b50      	ldr	r3, [pc, #320]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d01f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	23c0      	movs	r3, #192	@ 0xc0
 8003bca:	029b      	lsls	r3, r3, #10
 8003bcc:	401a      	ands	r2, r3
 8003bce:	23c0      	movs	r3, #192	@ 0xc0
 8003bd0:	029b      	lsls	r3, r3, #10
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003bd6:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4c      	ldr	r2, [pc, #304]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	0019      	movs	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	23c0      	movs	r3, #192	@ 0xc0
 8003be6:	039b      	lsls	r3, r3, #14
 8003be8:	401a      	ands	r2, r3
 8003bea:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	4b41      	ldr	r3, [pc, #260]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bf2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	23c0      	movs	r3, #192	@ 0xc0
 8003bfa:	029b      	lsls	r3, r3, #10
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c00:	430a      	orrs	r2, r1
 8003c02:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c04:	2317      	movs	r3, #23
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c14:	493e      	ldr	r1, [pc, #248]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4013      	ands	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c28:	2203      	movs	r2, #3
 8003c2a:	4393      	bics	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c34:	430a      	orrs	r2, r1
 8003c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c42:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	220c      	movs	r2, #12
 8003c48:	4393      	bics	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c52:	430a      	orrs	r2, r1
 8003c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c60:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	4a2b      	ldr	r2, [pc, #172]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c70:	430a      	orrs	r2, r1
 8003c72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c9e:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	4a16      	ldr	r2, [pc, #88]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cca:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2280      	movs	r2, #128	@ 0x80
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cde:	4a10      	ldr	r2, [pc, #64]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cea:	430a      	orrs	r2, r1
 8003cec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b006      	add	sp, #24
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	fffcffff 	.word	0xfffcffff
 8003d04:	fff7ffff 	.word	0xfff7ffff
 8003d08:	00001388 	.word	0x00001388
 8003d0c:	ffcfffff 	.word	0xffcfffff
 8003d10:	efffffff 	.word	0xefffffff
 8003d14:	fffff3ff 	.word	0xfffff3ff
 8003d18:	ffffcfff 	.word	0xffffcfff
 8003d1c:	fbffffff 	.word	0xfbffffff
 8003d20:	fff3ffff 	.word	0xfff3ffff

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e032      	b.n	8003d9c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2239      	movs	r2, #57	@ 0x39
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2238      	movs	r2, #56	@ 0x38
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7fd fc35 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2239      	movs	r2, #57	@ 0x39
 8003d56:	2102      	movs	r1, #2
 8003d58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	0019      	movs	r1, r3
 8003d64:	0010      	movs	r0, r2
 8003d66:	f000 fa91 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223e      	movs	r2, #62	@ 0x3e
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	223a      	movs	r2, #58	@ 0x3a
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	223b      	movs	r2, #59	@ 0x3b
 8003d7e:	2101      	movs	r1, #1
 8003d80:	5499      	strb	r1, [r3, r2]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	223c      	movs	r2, #60	@ 0x3c
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	223d      	movs	r2, #61	@ 0x3d
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2239      	movs	r2, #57	@ 0x39
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e032      	b.n	8003e1c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2239      	movs	r2, #57	@ 0x39
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2238      	movs	r2, #56	@ 0x38
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f829 	bl	8003e24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2239      	movs	r2, #57	@ 0x39
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	0019      	movs	r1, r3
 8003de4:	0010      	movs	r0, r2
 8003de6:	f000 fa51 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223e      	movs	r2, #62	@ 0x3e
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	223a      	movs	r2, #58	@ 0x3a
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223b      	movs	r2, #59	@ 0x3b
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223c      	movs	r2, #60	@ 0x3c
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	223d      	movs	r2, #61	@ 0x3d
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2239      	movs	r2, #57	@ 0x39
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b002      	add	sp, #8
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d108      	bne.n	8003e56 <HAL_TIM_PWM_Start+0x22>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	223a      	movs	r2, #58	@ 0x3a
 8003e48:	5c9b      	ldrb	r3, [r3, r2]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	4193      	sbcs	r3, r2
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e01f      	b.n	8003e96 <HAL_TIM_PWM_Start+0x62>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d108      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x3a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	223b      	movs	r2, #59	@ 0x3b
 8003e60:	5c9b      	ldrb	r3, [r3, r2]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	4193      	sbcs	r3, r2
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e013      	b.n	8003e96 <HAL_TIM_PWM_Start+0x62>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d108      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x52>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	223c      	movs	r2, #60	@ 0x3c
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	1e5a      	subs	r2, r3, #1
 8003e80:	4193      	sbcs	r3, r2
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e007      	b.n	8003e96 <HAL_TIM_PWM_Start+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	223d      	movs	r2, #61	@ 0x3d
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	4193      	sbcs	r3, r2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e052      	b.n	8003f44 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223a      	movs	r2, #58	@ 0x3a
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	e013      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xa2>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x8a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	223b      	movs	r2, #59	@ 0x3b
 8003eb8:	2102      	movs	r1, #2
 8003eba:	5499      	strb	r1, [r3, r2]
 8003ebc:	e00b      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xa2>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start+0x9a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	223c      	movs	r2, #60	@ 0x3c
 8003ec8:	2102      	movs	r1, #2
 8003eca:	5499      	strb	r1, [r3, r2]
 8003ecc:	e003      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xa2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223d      	movs	r2, #61	@ 0x3d
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 fbd6 	bl	8004690 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	05db      	lsls	r3, r3, #23
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d00e      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xda>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <HAL_TIM_PWM_Start+0x118>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xda>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <HAL_TIM_PWM_Start+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xda>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a12      	ldr	r2, [pc, #72]	@ (8003f54 <HAL_TIM_PWM_Start+0x120>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2207      	movs	r2, #7
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d010      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	e007      	b.n	8003f42 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b004      	add	sp, #16
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40010800 	.word	0x40010800
 8003f54:	40011400 	.word	0x40011400

08003f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2317      	movs	r3, #23
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2238      	movs	r2, #56	@ 0x38
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0ad      	b.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2238      	movs	r2, #56	@ 0x38
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d100      	bne.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f88:	e076      	b.n	8004078 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d900      	bls.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003f90:	e095      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x166>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d04e      	beq.n	8004036 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d900      	bls.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003f9e:	e08e      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x166>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x56>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d021      	beq.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003fac:	e087      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 f9cc 	bl	8004354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2108      	movs	r1, #8
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	438a      	bics	r2, r1
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
      break;
 8003fee:	e06b      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 f9e7 	bl	80043cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2180      	movs	r1, #128	@ 0x80
 800400a:	0109      	lsls	r1, r1, #4
 800400c:	430a      	orrs	r2, r1
 800400e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4931      	ldr	r1, [pc, #196]	@ (80040e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800401c:	400a      	ands	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6999      	ldr	r1, [r3, #24]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]
      break;
 8004034:	e048      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f000 fa06 	bl	8004450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2108      	movs	r1, #8
 8004050:	430a      	orrs	r2, r1
 8004052:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2104      	movs	r1, #4
 8004060:	438a      	bics	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69d9      	ldr	r1, [r3, #28]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
      break;
 8004076:	e027      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f000 fa25 	bl	80044d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2180      	movs	r1, #128	@ 0x80
 8004092:	0109      	lsls	r1, r1, #4
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	490f      	ldr	r1, [pc, #60]	@ (80040e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69d9      	ldr	r1, [r3, #28]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	021a      	lsls	r2, r3, #8
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
      break;
 80040bc:	e004      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80040be:	2317      	movs	r3, #23
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
      break;
 80040c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2238      	movs	r2, #56	@ 0x38
 80040cc:	2100      	movs	r1, #0
 80040ce:	5499      	strb	r1, [r3, r2]

  return status;
 80040d0:	2317      	movs	r3, #23
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	781b      	ldrb	r3, [r3, #0]
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b006      	add	sp, #24
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	fffffbff 	.word	0xfffffbff

080040e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	230f      	movs	r3, #15
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2238      	movs	r2, #56	@ 0x38
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_ConfigClockSource+0x20>
 8004100:	2302      	movs	r3, #2
 8004102:	e0bc      	b.n	800427e <HAL_TIM_ConfigClockSource+0x19a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2238      	movs	r2, #56	@ 0x38
 8004108:	2101      	movs	r1, #1
 800410a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2239      	movs	r2, #57	@ 0x39
 8004110:	2102      	movs	r1, #2
 8004112:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2277      	movs	r2, #119	@ 0x77
 8004120:	4393      	bics	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a58      	ldr	r2, [pc, #352]	@ (8004288 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004128:	4013      	ands	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2280      	movs	r2, #128	@ 0x80
 800413a:	0192      	lsls	r2, r2, #6
 800413c:	4293      	cmp	r3, r2
 800413e:	d040      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0xde>
 8004140:	2280      	movs	r2, #128	@ 0x80
 8004142:	0192      	lsls	r2, r2, #6
 8004144:	4293      	cmp	r3, r2
 8004146:	d900      	bls.n	800414a <HAL_TIM_ConfigClockSource+0x66>
 8004148:	e088      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 800414a:	2280      	movs	r2, #128	@ 0x80
 800414c:	0152      	lsls	r2, r2, #5
 800414e:	4293      	cmp	r3, r2
 8004150:	d100      	bne.n	8004154 <HAL_TIM_ConfigClockSource+0x70>
 8004152:	e088      	b.n	8004266 <HAL_TIM_ConfigClockSource+0x182>
 8004154:	2280      	movs	r2, #128	@ 0x80
 8004156:	0152      	lsls	r2, r2, #5
 8004158:	4293      	cmp	r3, r2
 800415a:	d900      	bls.n	800415e <HAL_TIM_ConfigClockSource+0x7a>
 800415c:	e07e      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 800415e:	2b70      	cmp	r3, #112	@ 0x70
 8004160:	d018      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0xb0>
 8004162:	d900      	bls.n	8004166 <HAL_TIM_ConfigClockSource+0x82>
 8004164:	e07a      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 8004166:	2b60      	cmp	r3, #96	@ 0x60
 8004168:	d04f      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x126>
 800416a:	d900      	bls.n	800416e <HAL_TIM_ConfigClockSource+0x8a>
 800416c:	e076      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 800416e:	2b50      	cmp	r3, #80	@ 0x50
 8004170:	d03b      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x106>
 8004172:	d900      	bls.n	8004176 <HAL_TIM_ConfigClockSource+0x92>
 8004174:	e072      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d057      	beq.n	800422a <HAL_TIM_ConfigClockSource+0x146>
 800417a:	d900      	bls.n	800417e <HAL_TIM_ConfigClockSource+0x9a>
 800417c:	e06e      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 800417e:	2b30      	cmp	r3, #48	@ 0x30
 8004180:	d063      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x166>
 8004182:	d86b      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 8004184:	2b20      	cmp	r3, #32
 8004186:	d060      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x166>
 8004188:	d868      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x178>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d05d      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x166>
 800418e:	2b10      	cmp	r3, #16
 8004190:	d05b      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x166>
 8004192:	e063      	b.n	800425c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a4:	f000 fa54 	bl	8004650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2277      	movs	r2, #119	@ 0x77
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]
      break;
 80041c0:	e052      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d2:	f000 fa3d 	bl	8004650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2180      	movs	r1, #128	@ 0x80
 80041e2:	01c9      	lsls	r1, r1, #7
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
      break;
 80041e8:	e03e      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	001a      	movs	r2, r3
 80041f8:	f000 f9b0 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2150      	movs	r1, #80	@ 0x50
 8004202:	0018      	movs	r0, r3
 8004204:	f000 fa0a 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8004208:	e02e      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004216:	001a      	movs	r2, r3
 8004218:	f000 f9ce 	bl	80045b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2160      	movs	r1, #96	@ 0x60
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f9fa 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8004228:	e01e      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	001a      	movs	r2, r3
 8004238:	f000 f990 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2140      	movs	r1, #64	@ 0x40
 8004242:	0018      	movs	r0, r3
 8004244:	f000 f9ea 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8004248:	e00e      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	0019      	movs	r1, r3
 8004254:	0010      	movs	r0, r2
 8004256:	f000 f9e1 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 800425a:	e005      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800425c:	230f      	movs	r3, #15
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
      break;
 8004264:	e000      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004266:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2239      	movs	r2, #57	@ 0x39
 800426c:	2101      	movs	r1, #1
 800426e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2238      	movs	r2, #56	@ 0x38
 8004274:	2100      	movs	r1, #0
 8004276:	5499      	strb	r1, [r3, r2]

  return status;
 8004278:	230f      	movs	r3, #15
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	781b      	ldrb	r3, [r3, #0]
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	ffff00ff 	.word	0xffff00ff

0800428c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	05db      	lsls	r3, r3, #23
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0x32>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <TIM_Base_SetConfig+0xb8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0x32>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a25      	ldr	r2, [pc, #148]	@ (8004348 <TIM_Base_SetConfig+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0x32>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a24      	ldr	r2, [pc, #144]	@ (800434c <TIM_Base_SetConfig+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2270      	movs	r2, #112	@ 0x70
 80042c2:	4393      	bics	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	05db      	lsls	r3, r3, #23
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d00b      	beq.n	80042f2 <TIM_Base_SetConfig+0x66>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <TIM_Base_SetConfig+0xb8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <TIM_Base_SetConfig+0x66>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <TIM_Base_SetConfig+0xbc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_Base_SetConfig+0x66>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a17      	ldr	r2, [pc, #92]	@ (800434c <TIM_Base_SetConfig+0xc0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <TIM_Base_SetConfig+0xc4>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	4393      	bics	r3, r2
 800430a:	001a      	movs	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2204      	movs	r2, #4
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	46c0      	nop			@ (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b004      	add	sp, #16
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40000400 	.word	0x40000400
 8004348:	40010800 	.word	0x40010800
 800434c:	40011400 	.word	0x40011400
 8004350:	fffffcff 	.word	0xfffffcff

08004354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	2201      	movs	r2, #1
 800436a:	4393      	bics	r3, r2
 800436c:	001a      	movs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2270      	movs	r2, #112	@ 0x70
 8004382:	4393      	bics	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2203      	movs	r2, #3
 800438a:	4393      	bics	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2202      	movs	r2, #2
 800439c:	4393      	bics	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b006      	add	sp, #24
 80043ca:	bd80      	pop	{r7, pc}

080043cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	2210      	movs	r2, #16
 80043e2:	4393      	bics	r3, r2
 80043e4:	001a      	movs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a13      	ldr	r2, [pc, #76]	@ (8004448 <TIM_OC2_SetConfig+0x7c>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a12      	ldr	r2, [pc, #72]	@ (800444c <TIM_OC2_SetConfig+0x80>)
 8004402:	4013      	ands	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2220      	movs	r2, #32
 8004416:	4393      	bics	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b006      	add	sp, #24
 8004446:	bd80      	pop	{r7, pc}
 8004448:	ffff8fff 	.word	0xffff8fff
 800444c:	fffffcff 	.word	0xfffffcff

08004450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <TIM_OC3_SetConfig+0x78>)
 8004466:	401a      	ands	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2270      	movs	r2, #112	@ 0x70
 800447c:	4393      	bics	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2203      	movs	r2, #3
 8004484:	4393      	bics	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4a0d      	ldr	r2, [pc, #52]	@ (80044cc <TIM_OC3_SetConfig+0x7c>)
 8004496:	4013      	ands	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b006      	add	sp, #24
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fffffeff 	.word	0xfffffeff
 80044cc:	fffffdff 	.word	0xfffffdff

080044d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a19      	ldr	r2, [pc, #100]	@ (800454c <TIM_OC4_SetConfig+0x7c>)
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a15      	ldr	r2, [pc, #84]	@ (8004550 <TIM_OC4_SetConfig+0x80>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a14      	ldr	r2, [pc, #80]	@ (8004554 <TIM_OC4_SetConfig+0x84>)
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4a10      	ldr	r2, [pc, #64]	@ (8004558 <TIM_OC4_SetConfig+0x88>)
 8004518:	4013      	ands	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b006      	add	sp, #24
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	ffffefff 	.word	0xffffefff
 8004550:	ffff8fff 	.word	0xffff8fff
 8004554:	fffffcff 	.word	0xfffffcff
 8004558:	ffffdfff 	.word	0xffffdfff

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2201      	movs	r2, #1
 8004574:	4393      	bics	r3, r2
 8004576:	001a      	movs	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	22f0      	movs	r2, #240	@ 0xf0
 8004586:	4393      	bics	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	220a      	movs	r2, #10
 8004598:	4393      	bics	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b006      	add	sp, #24
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	2210      	movs	r2, #16
 80045d0:	4393      	bics	r3, r2
 80045d2:	001a      	movs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004618 <TIM_TI2_ConfigInputStage+0x60>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	22a0      	movs	r2, #160	@ 0xa0
 80045f4:	4393      	bics	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b006      	add	sp, #24
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	ffff0fff 	.word	0xffff0fff

0800461c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2270      	movs	r2, #112	@ 0x70
 8004630:	4393      	bics	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	2207      	movs	r2, #7
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	609a      	str	r2, [r3, #8]
}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4a09      	ldr	r2, [pc, #36]	@ (800468c <TIM_ETR_SetConfig+0x3c>)
 8004668:	4013      	ands	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	46c0      	nop			@ (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b006      	add	sp, #24
 800468a:	bd80      	pop	{r7, pc}
 800468c:	ffff00ff 	.word	0xffff00ff

08004690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	221f      	movs	r2, #31
 80046a0:	4013      	ands	r3, r2
 80046a2:	2201      	movs	r2, #1
 80046a4:	409a      	lsls	r2, r3
 80046a6:	0013      	movs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	43d2      	mvns	r2, r2
 80046b2:	401a      	ands	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	211f      	movs	r1, #31
 80046c0:	400b      	ands	r3, r1
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4099      	lsls	r1, r3
 80046c6:	000b      	movs	r3, r1
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b006      	add	sp, #24
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2238      	movs	r2, #56	@ 0x38
 80046e6:	5c9b      	ldrb	r3, [r3, r2]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e047      	b.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2238      	movs	r2, #56	@ 0x38
 80046f4:	2101      	movs	r1, #1
 80046f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2239      	movs	r2, #57	@ 0x39
 80046fc:	2102      	movs	r1, #2
 80046fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2270      	movs	r2, #112	@ 0x70
 8004714:	4393      	bics	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	05db      	lsls	r3, r3, #23
 8004732:	429a      	cmp	r2, r3
 8004734:	d00e      	beq.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a13      	ldr	r2, [pc, #76]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a11      	ldr	r2, [pc, #68]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d10c      	bne.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2280      	movs	r2, #128	@ 0x80
 8004758:	4393      	bics	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	4313      	orrs	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2239      	movs	r2, #57	@ 0x39
 8004772:	2101      	movs	r1, #1
 8004774:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2238      	movs	r2, #56	@ 0x38
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40000400 	.word	0x40000400
 800478c:	40010800 	.word	0x40010800
 8004790:	40011400 	.word	0x40011400

08004794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e044      	b.n	8004830 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2278      	movs	r2, #120	@ 0x78
 80047b2:	2100      	movs	r1, #0
 80047b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fd f81b 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2224      	movs	r2, #36	@ 0x24
 80047c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2101      	movs	r1, #1
 80047d0:	438a      	bics	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 feec 	bl	80055bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 fc4a 	bl	8005080 <UART_SetConfig>
 80047ec:	0003      	movs	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01c      	b.n	8004830 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	490d      	ldr	r1, [pc, #52]	@ (8004838 <HAL_UART_Init+0xa4>)
 8004802:	400a      	ands	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	212a      	movs	r1, #42	@ 0x2a
 8004812:	438a      	bics	r2, r1
 8004814:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2101      	movs	r1, #1
 8004822:	430a      	orrs	r2, r1
 8004824:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 ff7b 	bl	8005724 <UART_CheckIdleState>
 800482e:	0003      	movs	r3, r0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b002      	add	sp, #8
 8004836:	bd80      	pop	{r7, pc}
 8004838:	ffffb7ff 	.word	0xffffb7ff

0800483c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	1dbb      	adds	r3, r7, #6
 800484a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004850:	2b20      	cmp	r3, #32
 8004852:	d000      	beq.n	8004856 <HAL_UART_Transmit+0x1a>
 8004854:	e08c      	b.n	8004970 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_UART_Transmit+0x28>
 800485c:	1dbb      	adds	r3, r7, #6
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e084      	b.n	8004972 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	429a      	cmp	r2, r3
 8004872:	d109      	bne.n	8004888 <HAL_UART_Transmit+0x4c>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2201      	movs	r2, #1
 8004880:	4013      	ands	r3, r2
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e074      	b.n	8004972 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2284      	movs	r2, #132	@ 0x84
 800488c:	2100      	movs	r1, #0
 800488e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2221      	movs	r2, #33	@ 0x21
 8004894:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004896:	f7fd f99b 	bl	8001bd0 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1dba      	adds	r2, r7, #6
 80048a2:	2150      	movs	r1, #80	@ 0x50
 80048a4:	8812      	ldrh	r2, [r2, #0]
 80048a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1dba      	adds	r2, r7, #6
 80048ac:	2152      	movs	r1, #82	@ 0x52
 80048ae:	8812      	ldrh	r2, [r2, #0]
 80048b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	015b      	lsls	r3, r3, #5
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x94>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d8:	e02f      	b.n	800493a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	0013      	movs	r3, r2
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	@ 0x80
 80048e8:	f000 ffc4 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d004      	beq.n	80048fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e03b      	b.n	8004972 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	001a      	movs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	05d2      	lsls	r2, r2, #23
 800490c:	0dd2      	lsrs	r2, r2, #23
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	3302      	adds	r3, #2
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e007      	b.n	8004928 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2252      	movs	r2, #82	@ 0x52
 800492c:	5a9b      	ldrh	r3, [r3, r2]
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b299      	uxth	r1, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2252      	movs	r2, #82	@ 0x52
 8004938:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2252      	movs	r2, #82	@ 0x52
 800493e:	5a9b      	ldrh	r3, [r3, r2]
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1c9      	bne.n	80048da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	0013      	movs	r3, r2
 8004950:	2200      	movs	r2, #0
 8004952:	2140      	movs	r1, #64	@ 0x40
 8004954:	f000 ff8e 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 8004958:	1e03      	subs	r3, r0, #0
 800495a:	d004      	beq.n	8004966 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e005      	b.n	8004972 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b008      	add	sp, #32
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	1dbb      	adds	r3, r7, #6
 8004988:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2280      	movs	r2, #128	@ 0x80
 800498e:	589b      	ldr	r3, [r3, r2]
 8004990:	2b20      	cmp	r3, #32
 8004992:	d14a      	bne.n	8004a2a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_Receive_DMA+0x26>
 800499a:	1dbb      	adds	r3, r7, #6
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e042      	b.n	8004a2c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	015b      	lsls	r3, r3, #5
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d109      	bne.n	80049c6 <HAL_UART_Receive_DMA+0x4a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d105      	bne.n	80049c6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2201      	movs	r2, #1
 80049be:	4013      	ands	r3, r2
 80049c0:	d001      	beq.n	80049c6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e032      	b.n	8004a2c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <HAL_UART_Receive_DMA+0xb8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d020      	beq.n	8004a18 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	4013      	ands	r3, r2
 80049e2:	d019      	beq.n	8004a18 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	613b      	str	r3, [r7, #16]
  return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	2301      	movs	r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2180      	movs	r1, #128	@ 0x80
 8004a06:	04c9      	lsls	r1, r1, #19
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a18:	1dbb      	adds	r3, r7, #6
 8004a1a:	881a      	ldrh	r2, [r3, #0]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 ff97 	bl	8005954 <UART_Start_Receive_DMA>
 8004a26:	0003      	movs	r3, r0
 8004a28:	e000      	b.n	8004a2c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b008      	add	sp, #32
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40004800 	.word	0x40004800

08004a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b0ab      	sub	sp, #172	@ 0xac
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	22a4      	movs	r2, #164	@ 0xa4
 8004a48:	18b9      	adds	r1, r7, r2
 8004a4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	20a0      	movs	r0, #160	@ 0xa0
 8004a54:	1839      	adds	r1, r7, r0
 8004a56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	219c      	movs	r1, #156	@ 0x9c
 8004a60:	1879      	adds	r1, r7, r1
 8004a62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a64:	0011      	movs	r1, r2
 8004a66:	18bb      	adds	r3, r7, r2
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a99      	ldr	r2, [pc, #612]	@ (8004cd0 <HAL_UART_IRQHandler+0x298>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2298      	movs	r2, #152	@ 0x98
 8004a70:	18bc      	adds	r4, r7, r2
 8004a72:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a74:	18bb      	adds	r3, r7, r2
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d114      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2220      	movs	r2, #32
 8004a82:	4013      	ands	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a86:	183b      	adds	r3, r7, r0
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d100      	bne.n	8004a9a <HAL_UART_IRQHandler+0x62>
 8004a98:	e2be      	b.n	8005018 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	0010      	movs	r0, r2
 8004aa2:	4798      	blx	r3
      }
      return;
 8004aa4:	e2b8      	b.n	8005018 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004aa6:	2398      	movs	r3, #152	@ 0x98
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d100      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x7a>
 8004ab0:	e114      	b.n	8004cdc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ab2:	239c      	movs	r3, #156	@ 0x9c
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	4013      	ands	r3, r2
 8004abc:	d106      	bne.n	8004acc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004abe:	23a0      	movs	r3, #160	@ 0xa0
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a83      	ldr	r2, [pc, #524]	@ (8004cd4 <HAL_UART_IRQHandler+0x29c>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d100      	bne.n	8004acc <HAL_UART_IRQHandler+0x94>
 8004aca:	e107      	b.n	8004cdc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004acc:	23a4      	movs	r3, #164	@ 0xa4
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d012      	beq.n	8004afe <HAL_UART_IRQHandler+0xc6>
 8004ad8:	23a0      	movs	r3, #160	@ 0xa0
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2284      	movs	r2, #132	@ 0x84
 8004af2:	589b      	ldr	r3, [r3, r2]
 8004af4:	2201      	movs	r2, #1
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2184      	movs	r1, #132	@ 0x84
 8004afc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004afe:	23a4      	movs	r3, #164	@ 0xa4
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2202      	movs	r2, #2
 8004b06:	4013      	ands	r3, r2
 8004b08:	d011      	beq.n	8004b2e <HAL_UART_IRQHandler+0xf6>
 8004b0a:	239c      	movs	r3, #156	@ 0x9c
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2284      	movs	r2, #132	@ 0x84
 8004b22:	589b      	ldr	r3, [r3, r2]
 8004b24:	2204      	movs	r2, #4
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2184      	movs	r1, #132	@ 0x84
 8004b2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b2e:	23a4      	movs	r3, #164	@ 0xa4
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2204      	movs	r2, #4
 8004b36:	4013      	ands	r3, r2
 8004b38:	d011      	beq.n	8004b5e <HAL_UART_IRQHandler+0x126>
 8004b3a:	239c      	movs	r3, #156	@ 0x9c
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2201      	movs	r2, #1
 8004b42:	4013      	ands	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2284      	movs	r2, #132	@ 0x84
 8004b52:	589b      	ldr	r3, [r3, r2]
 8004b54:	2202      	movs	r2, #2
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2184      	movs	r1, #132	@ 0x84
 8004b5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b5e:	23a4      	movs	r3, #164	@ 0xa4
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2208      	movs	r2, #8
 8004b66:	4013      	ands	r3, r2
 8004b68:	d017      	beq.n	8004b9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b6a:	23a0      	movs	r3, #160	@ 0xa0
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2220      	movs	r2, #32
 8004b72:	4013      	ands	r3, r2
 8004b74:	d105      	bne.n	8004b82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b76:	239c      	movs	r3, #156	@ 0x9c
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b80:	d00b      	beq.n	8004b9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2208      	movs	r2, #8
 8004b88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2284      	movs	r2, #132	@ 0x84
 8004b8e:	589b      	ldr	r3, [r3, r2]
 8004b90:	2208      	movs	r2, #8
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2184      	movs	r1, #132	@ 0x84
 8004b98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b9a:	23a4      	movs	r3, #164	@ 0xa4
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	2380      	movs	r3, #128	@ 0x80
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x198>
 8004ba8:	23a0      	movs	r3, #160	@ 0xa0
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	04db      	lsls	r3, r3, #19
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2280      	movs	r2, #128	@ 0x80
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2284      	movs	r2, #132	@ 0x84
 8004bc4:	589b      	ldr	r3, [r3, r2]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2184      	movs	r1, #132	@ 0x84
 8004bce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2284      	movs	r2, #132	@ 0x84
 8004bd4:	589b      	ldr	r3, [r3, r2]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d100      	bne.n	8004bdc <HAL_UART_IRQHandler+0x1a4>
 8004bda:	e21f      	b.n	800501c <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bdc:	23a4      	movs	r3, #164	@ 0xa4
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2220      	movs	r2, #32
 8004be4:	4013      	ands	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004be8:	23a0      	movs	r3, #160	@ 0xa0
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d008      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	0010      	movs	r0, r2
 8004c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2284      	movs	r2, #132	@ 0x84
 8004c0a:	589b      	ldr	r3, [r3, r2]
 8004c0c:	2194      	movs	r1, #148	@ 0x94
 8004c0e:	187a      	adds	r2, r7, r1
 8004c10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2240      	movs	r2, #64	@ 0x40
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d004      	beq.n	8004c2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2228      	movs	r2, #40	@ 0x28
 8004c26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c28:	d047      	beq.n	8004cba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 ff55 	bl	8005adc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2240      	movs	r2, #64	@ 0x40
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d137      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c40:	f3ef 8310 	mrs	r3, PRIMASK
 8004c44:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004c46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c48:	2090      	movs	r0, #144	@ 0x90
 8004c4a:	183a      	adds	r2, r7, r0
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			@ (mov r8, r8)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2140      	movs	r1, #64	@ 0x40
 8004c66:	438a      	bics	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	183b      	adds	r3, r7, r0
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c72:	f383 8810 	msr	PRIMASK, r3
}
 8004c76:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c84:	4a14      	ldr	r2, [pc, #80]	@ (8004cd8 <HAL_UART_IRQHandler+0x2a0>)
 8004c86:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fd fddb 	bl	8002848 <HAL_DMA_Abort_IT>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d01a      	beq.n	8004ccc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	e012      	b.n	8004ccc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 f9d5 	bl	8005058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cae:	e00d      	b.n	8004ccc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f9d0 	bl	8005058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e008      	b.n	8004ccc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 f9cb 	bl	8005058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2284      	movs	r2, #132	@ 0x84
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004cca:	e1a7      	b.n	800501c <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	46c0      	nop			@ (mov r8, r8)
    return;
 8004cce:	e1a5      	b.n	800501c <HAL_UART_IRQHandler+0x5e4>
 8004cd0:	0000080f 	.word	0x0000080f
 8004cd4:	04000120 	.word	0x04000120
 8004cd8:	08005e0f 	.word	0x08005e0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d000      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x2ae>
 8004ce4:	e159      	b.n	8004f9a <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ce6:	23a4      	movs	r3, #164	@ 0xa4
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2210      	movs	r2, #16
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d100      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x2bc>
 8004cf2:	e152      	b.n	8004f9a <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cf4:	23a0      	movs	r3, #160	@ 0xa0
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d100      	bne.n	8004d02 <HAL_UART_IRQHandler+0x2ca>
 8004d00:	e14b      	b.n	8004f9a <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2210      	movs	r2, #16
 8004d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2240      	movs	r2, #64	@ 0x40
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d000      	beq.n	8004d1a <HAL_UART_IRQHandler+0x2e2>
 8004d18:	e0bf      	b.n	8004e9a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	217e      	movs	r1, #126	@ 0x7e
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d100      	bne.n	8004d32 <HAL_UART_IRQHandler+0x2fa>
 8004d30:	e095      	b.n	8004e5e <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2258      	movs	r2, #88	@ 0x58
 8004d36:	5a9b      	ldrh	r3, [r3, r2]
 8004d38:	187a      	adds	r2, r7, r1
 8004d3a:	8812      	ldrh	r2, [r2, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d300      	bcc.n	8004d42 <HAL_UART_IRQHandler+0x30a>
 8004d40:	e08d      	b.n	8004e5e <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	187a      	adds	r2, r7, r1
 8004d46:	215a      	movs	r1, #90	@ 0x5a
 8004d48:	8812      	ldrh	r2, [r2, #0]
 8004d4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2220      	movs	r2, #32
 8004d56:	4013      	ands	r3, r2
 8004d58:	d16f      	bne.n	8004e3a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d64:	2301      	movs	r3, #1
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	49ad      	ldr	r1, [pc, #692]	@ (8005030 <HAL_UART_IRQHandler+0x5f8>)
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d94:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d96:	2301      	movs	r3, #1
 8004d98:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9c:	f383 8810 	msr	PRIMASK, r3
}
 8004da0:	46c0      	nop			@ (mov r8, r8)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2101      	movs	r1, #1
 8004dae:	438a      	bics	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]
 8004db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dc8:	2301      	movs	r3, #1
 8004dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dce:	f383 8810 	msr	PRIMASK, r3
}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2140      	movs	r1, #64	@ 0x40
 8004de0:	438a      	bics	r2, r1
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004de6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dea:	f383 8810 	msr	PRIMASK, r3
}
 8004dee:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2280      	movs	r2, #128	@ 0x80
 8004df4:	2120      	movs	r1, #32
 8004df6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004e02:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e08:	2301      	movs	r3, #1
 8004e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e0e:	f383 8810 	msr	PRIMASK, r3
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2110      	movs	r1, #16
 8004e20:	438a      	bics	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e2a:	f383 8810 	msr	PRIMASK, r3
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7fd fcc7 	bl	80027c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2258      	movs	r2, #88	@ 0x58
 8004e44:	5a9a      	ldrh	r2, [r3, r2]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	215a      	movs	r1, #90	@ 0x5a
 8004e4a:	5a5b      	ldrh	r3, [r3, r1]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 f906 	bl	8005068 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004e5c:	e0e0      	b.n	8005020 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2258      	movs	r2, #88	@ 0x58
 8004e62:	5a9b      	ldrh	r3, [r3, r2]
 8004e64:	227e      	movs	r2, #126	@ 0x7e
 8004e66:	18ba      	adds	r2, r7, r2
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d000      	beq.n	8004e70 <HAL_UART_IRQHandler+0x438>
 8004e6e:	e0d7      	b.n	8005020 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d000      	beq.n	8004e82 <HAL_UART_IRQHandler+0x44a>
 8004e80:	e0ce      	b.n	8005020 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2258      	movs	r2, #88	@ 0x58
 8004e8c:	5a9a      	ldrh	r2, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0011      	movs	r1, r2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 f8e8 	bl	8005068 <HAL_UARTEx_RxEventCallback>
      return;
 8004e98:	e0c2      	b.n	8005020 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2258      	movs	r2, #88	@ 0x58
 8004e9e:	5a99      	ldrh	r1, [r3, r2]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	225a      	movs	r2, #90	@ 0x5a
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	208e      	movs	r0, #142	@ 0x8e
 8004eaa:	183b      	adds	r3, r7, r0
 8004eac:	1a8a      	subs	r2, r1, r2
 8004eae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	225a      	movs	r2, #90	@ 0x5a
 8004eb4:	5a9b      	ldrh	r3, [r3, r2]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d100      	bne.n	8004ebe <HAL_UART_IRQHandler+0x486>
 8004ebc:	e0b2      	b.n	8005024 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d100      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x490>
 8004ec6:	e0ad      	b.n	8005024 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ece:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	2488      	movs	r4, #136	@ 0x88
 8004ed2:	193a      	adds	r2, r7, r4
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4951      	ldr	r1, [pc, #324]	@ (8005034 <HAL_UART_IRQHandler+0x5fc>)
 8004eee:	400a      	ands	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f00:	f3ef 8310 	mrs	r3, PRIMASK
 8004f04:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f06:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	2484      	movs	r4, #132	@ 0x84
 8004f0a:	193a      	adds	r2, r7, r4
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2101      	movs	r1, #1
 8004f26:	438a      	bics	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	193b      	adds	r3, r7, r4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2280      	movs	r2, #128	@ 0x80
 8004f3c:	2120      	movs	r1, #32
 8004f3e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f54:	2480      	movs	r4, #128	@ 0x80
 8004f56:	193a      	adds	r2, r7, r4
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			@ (mov r8, r8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2110      	movs	r1, #16
 8004f72:	438a      	bics	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	193b      	adds	r3, r7, r4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f8a:	183b      	adds	r3, r7, r0
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0011      	movs	r1, r2
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f868 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f98:	e044      	b.n	8005024 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f9a:	23a4      	movs	r3, #164	@ 0xa4
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	035b      	lsls	r3, r3, #13
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d010      	beq.n	8004fca <HAL_UART_IRQHandler+0x592>
 8004fa8:	239c      	movs	r3, #156	@ 0x9c
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	03db      	lsls	r3, r3, #15
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2280      	movs	r2, #128	@ 0x80
 8004fbc:	0352      	lsls	r2, r2, #13
 8004fbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 ff61 	bl	8005e8a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fc8:	e02f      	b.n	800502a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fca:	23a4      	movs	r3, #164	@ 0xa4
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fd6:	23a0      	movs	r3, #160	@ 0xa0
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2280      	movs	r2, #128	@ 0x80
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01e      	beq.n	8005028 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	0010      	movs	r0, r2
 8004ff2:	4798      	blx	r3
    }
    return;
 8004ff4:	e018      	b.n	8005028 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ff6:	23a4      	movs	r3, #164	@ 0xa4
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2240      	movs	r2, #64	@ 0x40
 8004ffe:	4013      	ands	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_UART_IRQHandler+0x5f2>
 8005002:	23a0      	movs	r3, #160	@ 0xa0
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2240      	movs	r2, #64	@ 0x40
 800500a:	4013      	ands	r3, r2
 800500c:	d00d      	beq.n	800502a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0018      	movs	r0, r3
 8005012:	f000 ff0f 	bl	8005e34 <UART_EndTransmit_IT>
    return;
 8005016:	e008      	b.n	800502a <HAL_UART_IRQHandler+0x5f2>
      return;
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	e006      	b.n	800502a <HAL_UART_IRQHandler+0x5f2>
    return;
 800501c:	46c0      	nop			@ (mov r8, r8)
 800501e:	e004      	b.n	800502a <HAL_UART_IRQHandler+0x5f2>
      return;
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	e002      	b.n	800502a <HAL_UART_IRQHandler+0x5f2>
      return;
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	e000      	b.n	800502a <HAL_UART_IRQHandler+0x5f2>
    return;
 8005028:	46c0      	nop			@ (mov r8, r8)
  }

}
 800502a:	46bd      	mov	sp, r7
 800502c:	b02b      	add	sp, #172	@ 0xac
 800502e:	bd90      	pop	{r4, r7, pc}
 8005030:	fffffeff 	.word	0xfffffeff
 8005034:	fffffedf 	.word	0xfffffedf

08005038 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005040:	46c0      	nop			@ (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b002      	add	sp, #8
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005060:	46c0      	nop			@ (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b002      	add	sp, #8
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	000a      	movs	r2, r1
 8005072:	1cbb      	adds	r3, r7, #2
 8005074:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b002      	add	sp, #8
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	b5b0      	push	{r4, r5, r7, lr}
 8005082:	b08e      	sub	sp, #56	@ 0x38
 8005084:	af00      	add	r7, sp, #0
 8005086:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005088:	231a      	movs	r3, #26
 800508a:	2218      	movs	r2, #24
 800508c:	189b      	adds	r3, r3, r2
 800508e:	19db      	adds	r3, r3, r7
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	431a      	orrs	r2, r3
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4ac3      	ldr	r2, [pc, #780]	@ (80053c0 <UART_SetConfig+0x340>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	0019      	movs	r1, r3
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4abe      	ldr	r2, [pc, #760]	@ (80053c4 <UART_SetConfig+0x344>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4ab8      	ldr	r2, [pc, #736]	@ (80053c8 <UART_SetConfig+0x348>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050f0:	4313      	orrs	r3, r2
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4ab4      	ldr	r2, [pc, #720]	@ (80053cc <UART_SetConfig+0x34c>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4ab0      	ldr	r2, [pc, #704]	@ (80053d0 <UART_SetConfig+0x350>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d131      	bne.n	8005178 <UART_SetConfig+0xf8>
 8005114:	4baf      	ldr	r3, [pc, #700]	@ (80053d4 <UART_SetConfig+0x354>)
 8005116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005118:	2203      	movs	r2, #3
 800511a:	4013      	ands	r3, r2
 800511c:	2b03      	cmp	r3, #3
 800511e:	d01d      	beq.n	800515c <UART_SetConfig+0xdc>
 8005120:	d823      	bhi.n	800516a <UART_SetConfig+0xea>
 8005122:	2b02      	cmp	r3, #2
 8005124:	d00c      	beq.n	8005140 <UART_SetConfig+0xc0>
 8005126:	d820      	bhi.n	800516a <UART_SetConfig+0xea>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <UART_SetConfig+0xb2>
 800512c:	2b01      	cmp	r3, #1
 800512e:	d00e      	beq.n	800514e <UART_SetConfig+0xce>
 8005130:	e01b      	b.n	800516a <UART_SetConfig+0xea>
 8005132:	231b      	movs	r3, #27
 8005134:	2218      	movs	r2, #24
 8005136:	189b      	adds	r3, r3, r2
 8005138:	19db      	adds	r3, r3, r7
 800513a:	2201      	movs	r2, #1
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e0b4      	b.n	80052aa <UART_SetConfig+0x22a>
 8005140:	231b      	movs	r3, #27
 8005142:	2218      	movs	r2, #24
 8005144:	189b      	adds	r3, r3, r2
 8005146:	19db      	adds	r3, r3, r7
 8005148:	2202      	movs	r2, #2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	e0ad      	b.n	80052aa <UART_SetConfig+0x22a>
 800514e:	231b      	movs	r3, #27
 8005150:	2218      	movs	r2, #24
 8005152:	189b      	adds	r3, r3, r2
 8005154:	19db      	adds	r3, r3, r7
 8005156:	2204      	movs	r2, #4
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e0a6      	b.n	80052aa <UART_SetConfig+0x22a>
 800515c:	231b      	movs	r3, #27
 800515e:	2218      	movs	r2, #24
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2208      	movs	r2, #8
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e09f      	b.n	80052aa <UART_SetConfig+0x22a>
 800516a:	231b      	movs	r3, #27
 800516c:	2218      	movs	r2, #24
 800516e:	189b      	adds	r3, r3, r2
 8005170:	19db      	adds	r3, r3, r7
 8005172:	2210      	movs	r2, #16
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e098      	b.n	80052aa <UART_SetConfig+0x22a>
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a96      	ldr	r2, [pc, #600]	@ (80053d8 <UART_SetConfig+0x358>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d131      	bne.n	80051e6 <UART_SetConfig+0x166>
 8005182:	4b94      	ldr	r3, [pc, #592]	@ (80053d4 <UART_SetConfig+0x354>)
 8005184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005186:	220c      	movs	r2, #12
 8005188:	4013      	ands	r3, r2
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d01d      	beq.n	80051ca <UART_SetConfig+0x14a>
 800518e:	d823      	bhi.n	80051d8 <UART_SetConfig+0x158>
 8005190:	2b08      	cmp	r3, #8
 8005192:	d00c      	beq.n	80051ae <UART_SetConfig+0x12e>
 8005194:	d820      	bhi.n	80051d8 <UART_SetConfig+0x158>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <UART_SetConfig+0x120>
 800519a:	2b04      	cmp	r3, #4
 800519c:	d00e      	beq.n	80051bc <UART_SetConfig+0x13c>
 800519e:	e01b      	b.n	80051d8 <UART_SetConfig+0x158>
 80051a0:	231b      	movs	r3, #27
 80051a2:	2218      	movs	r2, #24
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	19db      	adds	r3, r3, r7
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e07d      	b.n	80052aa <UART_SetConfig+0x22a>
 80051ae:	231b      	movs	r3, #27
 80051b0:	2218      	movs	r2, #24
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	19db      	adds	r3, r3, r7
 80051b6:	2202      	movs	r2, #2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e076      	b.n	80052aa <UART_SetConfig+0x22a>
 80051bc:	231b      	movs	r3, #27
 80051be:	2218      	movs	r2, #24
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	19db      	adds	r3, r3, r7
 80051c4:	2204      	movs	r2, #4
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e06f      	b.n	80052aa <UART_SetConfig+0x22a>
 80051ca:	231b      	movs	r3, #27
 80051cc:	2218      	movs	r2, #24
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	19db      	adds	r3, r3, r7
 80051d2:	2208      	movs	r2, #8
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e068      	b.n	80052aa <UART_SetConfig+0x22a>
 80051d8:	231b      	movs	r3, #27
 80051da:	2218      	movs	r2, #24
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	2210      	movs	r2, #16
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e061      	b.n	80052aa <UART_SetConfig+0x22a>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a7c      	ldr	r2, [pc, #496]	@ (80053dc <UART_SetConfig+0x35c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d106      	bne.n	80051fe <UART_SetConfig+0x17e>
 80051f0:	231b      	movs	r3, #27
 80051f2:	2218      	movs	r2, #24
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	19db      	adds	r3, r3, r7
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e055      	b.n	80052aa <UART_SetConfig+0x22a>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a77      	ldr	r2, [pc, #476]	@ (80053e0 <UART_SetConfig+0x360>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d106      	bne.n	8005216 <UART_SetConfig+0x196>
 8005208:	231b      	movs	r3, #27
 800520a:	2218      	movs	r2, #24
 800520c:	189b      	adds	r3, r3, r2
 800520e:	19db      	adds	r3, r3, r7
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	e049      	b.n	80052aa <UART_SetConfig+0x22a>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a6b      	ldr	r2, [pc, #428]	@ (80053c8 <UART_SetConfig+0x348>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d13e      	bne.n	800529e <UART_SetConfig+0x21e>
 8005220:	4b6c      	ldr	r3, [pc, #432]	@ (80053d4 <UART_SetConfig+0x354>)
 8005222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005224:	23c0      	movs	r3, #192	@ 0xc0
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4013      	ands	r3, r2
 800522a:	22c0      	movs	r2, #192	@ 0xc0
 800522c:	0112      	lsls	r2, r2, #4
 800522e:	4293      	cmp	r3, r2
 8005230:	d027      	beq.n	8005282 <UART_SetConfig+0x202>
 8005232:	22c0      	movs	r2, #192	@ 0xc0
 8005234:	0112      	lsls	r2, r2, #4
 8005236:	4293      	cmp	r3, r2
 8005238:	d82a      	bhi.n	8005290 <UART_SetConfig+0x210>
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	0112      	lsls	r2, r2, #4
 800523e:	4293      	cmp	r3, r2
 8005240:	d011      	beq.n	8005266 <UART_SetConfig+0x1e6>
 8005242:	2280      	movs	r2, #128	@ 0x80
 8005244:	0112      	lsls	r2, r2, #4
 8005246:	4293      	cmp	r3, r2
 8005248:	d822      	bhi.n	8005290 <UART_SetConfig+0x210>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <UART_SetConfig+0x1d8>
 800524e:	2280      	movs	r2, #128	@ 0x80
 8005250:	00d2      	lsls	r2, r2, #3
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <UART_SetConfig+0x1f4>
 8005256:	e01b      	b.n	8005290 <UART_SetConfig+0x210>
 8005258:	231b      	movs	r3, #27
 800525a:	2218      	movs	r2, #24
 800525c:	189b      	adds	r3, r3, r2
 800525e:	19db      	adds	r3, r3, r7
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e021      	b.n	80052aa <UART_SetConfig+0x22a>
 8005266:	231b      	movs	r3, #27
 8005268:	2218      	movs	r2, #24
 800526a:	189b      	adds	r3, r3, r2
 800526c:	19db      	adds	r3, r3, r7
 800526e:	2202      	movs	r2, #2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e01a      	b.n	80052aa <UART_SetConfig+0x22a>
 8005274:	231b      	movs	r3, #27
 8005276:	2218      	movs	r2, #24
 8005278:	189b      	adds	r3, r3, r2
 800527a:	19db      	adds	r3, r3, r7
 800527c:	2204      	movs	r2, #4
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e013      	b.n	80052aa <UART_SetConfig+0x22a>
 8005282:	231b      	movs	r3, #27
 8005284:	2218      	movs	r2, #24
 8005286:	189b      	adds	r3, r3, r2
 8005288:	19db      	adds	r3, r3, r7
 800528a:	2208      	movs	r2, #8
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e00c      	b.n	80052aa <UART_SetConfig+0x22a>
 8005290:	231b      	movs	r3, #27
 8005292:	2218      	movs	r2, #24
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	2210      	movs	r2, #16
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e005      	b.n	80052aa <UART_SetConfig+0x22a>
 800529e:	231b      	movs	r3, #27
 80052a0:	2218      	movs	r2, #24
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	2210      	movs	r2, #16
 80052a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a46      	ldr	r2, [pc, #280]	@ (80053c8 <UART_SetConfig+0x348>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d000      	beq.n	80052b6 <UART_SetConfig+0x236>
 80052b4:	e09a      	b.n	80053ec <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052b6:	231b      	movs	r3, #27
 80052b8:	2218      	movs	r2, #24
 80052ba:	189b      	adds	r3, r3, r2
 80052bc:	19db      	adds	r3, r3, r7
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d01d      	beq.n	8005300 <UART_SetConfig+0x280>
 80052c4:	dc20      	bgt.n	8005308 <UART_SetConfig+0x288>
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d015      	beq.n	80052f6 <UART_SetConfig+0x276>
 80052ca:	dc1d      	bgt.n	8005308 <UART_SetConfig+0x288>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <UART_SetConfig+0x256>
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d005      	beq.n	80052e0 <UART_SetConfig+0x260>
 80052d4:	e018      	b.n	8005308 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d6:	f7fe fb5b 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80052da:	0003      	movs	r3, r0
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052de:	e01c      	b.n	800531a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052e0:	4b3c      	ldr	r3, [pc, #240]	@ (80053d4 <UART_SetConfig+0x354>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2210      	movs	r2, #16
 80052e6:	4013      	ands	r3, r2
 80052e8:	d002      	beq.n	80052f0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052ea:	4b3e      	ldr	r3, [pc, #248]	@ (80053e4 <UART_SetConfig+0x364>)
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052ee:	e014      	b.n	800531a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80052f0:	4b3d      	ldr	r3, [pc, #244]	@ (80053e8 <UART_SetConfig+0x368>)
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052f4:	e011      	b.n	800531a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fe fabb 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80052fa:	0003      	movs	r3, r0
 80052fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052fe:	e00c      	b.n	800531a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005306:	e008      	b.n	800531a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800530c:	231a      	movs	r3, #26
 800530e:	2218      	movs	r2, #24
 8005310:	189b      	adds	r3, r3, r2
 8005312:	19db      	adds	r3, r3, r7
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
        break;
 8005318:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d100      	bne.n	8005322 <UART_SetConfig+0x2a2>
 8005320:	e133      	b.n	800558a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	0013      	movs	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	189b      	adds	r3, r3, r2
 800532c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532e:	429a      	cmp	r2, r3
 8005330:	d305      	bcc.n	800533e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800533a:	429a      	cmp	r2, r3
 800533c:	d906      	bls.n	800534c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800533e:	231a      	movs	r3, #26
 8005340:	2218      	movs	r2, #24
 8005342:	189b      	adds	r3, r3, r2
 8005344:	19db      	adds	r3, r3, r7
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e11e      	b.n	800558a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	6939      	ldr	r1, [r7, #16]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	000b      	movs	r3, r1
 800535a:	0e1b      	lsrs	r3, r3, #24
 800535c:	0010      	movs	r0, r2
 800535e:	0205      	lsls	r5, r0, #8
 8005360:	431d      	orrs	r5, r3
 8005362:	000b      	movs	r3, r1
 8005364:	021c      	lsls	r4, r3, #8
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	68b8      	ldr	r0, [r7, #8]
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	1900      	adds	r0, r0, r4
 8005378:	4169      	adcs	r1, r5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	2300      	movs	r3, #0
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f7fa ff54 	bl	8000234 <__aeabi_uldivmod>
 800538c:	0002      	movs	r2, r0
 800538e:	000b      	movs	r3, r1
 8005390:	0013      	movs	r3, r2
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005396:	23c0      	movs	r3, #192	@ 0xc0
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	429a      	cmp	r2, r3
 800539c:	d309      	bcc.n	80053b2 <UART_SetConfig+0x332>
 800539e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	035b      	lsls	r3, r3, #13
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d204      	bcs.n	80053b2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	e0eb      	b.n	800558a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80053b2:	231a      	movs	r3, #26
 80053b4:	2218      	movs	r2, #24
 80053b6:	189b      	adds	r3, r3, r2
 80053b8:	19db      	adds	r3, r3, r7
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e0e4      	b.n	800558a <UART_SetConfig+0x50a>
 80053c0:	efff69f3 	.word	0xefff69f3
 80053c4:	ffffcfff 	.word	0xffffcfff
 80053c8:	40004800 	.word	0x40004800
 80053cc:	fffff4ff 	.word	0xfffff4ff
 80053d0:	40013800 	.word	0x40013800
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40004400 	.word	0x40004400
 80053dc:	40004c00 	.word	0x40004c00
 80053e0:	40005000 	.word	0x40005000
 80053e4:	003d0900 	.word	0x003d0900
 80053e8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d000      	beq.n	80053fa <UART_SetConfig+0x37a>
 80053f8:	e070      	b.n	80054dc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80053fa:	231b      	movs	r3, #27
 80053fc:	2218      	movs	r2, #24
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	19db      	adds	r3, r3, r7
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d822      	bhi.n	800544e <UART_SetConfig+0x3ce>
 8005408:	009a      	lsls	r2, r3, #2
 800540a:	4b67      	ldr	r3, [pc, #412]	@ (80055a8 <UART_SetConfig+0x528>)
 800540c:	18d3      	adds	r3, r2, r3
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005412:	f7fe fabd 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8005416:	0003      	movs	r3, r0
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800541a:	e021      	b.n	8005460 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe face 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8005420:	0003      	movs	r3, r0
 8005422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005424:	e01c      	b.n	8005460 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	4b61      	ldr	r3, [pc, #388]	@ (80055ac <UART_SetConfig+0x52c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2210      	movs	r2, #16
 800542c:	4013      	ands	r3, r2
 800542e:	d002      	beq.n	8005436 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005430:	4b5f      	ldr	r3, [pc, #380]	@ (80055b0 <UART_SetConfig+0x530>)
 8005432:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005434:	e014      	b.n	8005460 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005436:	4b5f      	ldr	r3, [pc, #380]	@ (80055b4 <UART_SetConfig+0x534>)
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800543a:	e011      	b.n	8005460 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800543c:	f7fe fa18 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005440:	0003      	movs	r3, r0
 8005442:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005444:	e00c      	b.n	8005460 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800544c:	e008      	b.n	8005460 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005452:	231a      	movs	r3, #26
 8005454:	2218      	movs	r2, #24
 8005456:	189b      	adds	r3, r3, r2
 8005458:	19db      	adds	r3, r3, r7
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
        break;
 800545e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d100      	bne.n	8005468 <UART_SetConfig+0x3e8>
 8005466:	e090      	b.n	800558a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	005a      	lsls	r2, r3, #1
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	18d2      	adds	r2, r2, r3
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	0019      	movs	r1, r3
 800547a:	0010      	movs	r0, r2
 800547c:	f7fa fe4e 	bl	800011c <__udivsi3>
 8005480:	0003      	movs	r3, r0
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	2b0f      	cmp	r3, #15
 8005488:	d921      	bls.n	80054ce <UART_SetConfig+0x44e>
 800548a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	025b      	lsls	r3, r3, #9
 8005490:	429a      	cmp	r2, r3
 8005492:	d21c      	bcs.n	80054ce <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	b29a      	uxth	r2, r3
 8005498:	200e      	movs	r0, #14
 800549a:	2418      	movs	r4, #24
 800549c:	1903      	adds	r3, r0, r4
 800549e:	19db      	adds	r3, r3, r7
 80054a0:	210f      	movs	r1, #15
 80054a2:	438a      	bics	r2, r1
 80054a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2207      	movs	r2, #7
 80054ae:	4013      	ands	r3, r2
 80054b0:	b299      	uxth	r1, r3
 80054b2:	1903      	adds	r3, r0, r4
 80054b4:	19db      	adds	r3, r3, r7
 80054b6:	1902      	adds	r2, r0, r4
 80054b8:	19d2      	adds	r2, r2, r7
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	1902      	adds	r2, r0, r4
 80054c6:	19d2      	adds	r2, r2, r7
 80054c8:	8812      	ldrh	r2, [r2, #0]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e05d      	b.n	800558a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80054ce:	231a      	movs	r3, #26
 80054d0:	2218      	movs	r2, #24
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	19db      	adds	r3, r3, r7
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e056      	b.n	800558a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054dc:	231b      	movs	r3, #27
 80054de:	2218      	movs	r2, #24
 80054e0:	189b      	adds	r3, r3, r2
 80054e2:	19db      	adds	r3, r3, r7
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d822      	bhi.n	8005530 <UART_SetConfig+0x4b0>
 80054ea:	009a      	lsls	r2, r3, #2
 80054ec:	4b32      	ldr	r3, [pc, #200]	@ (80055b8 <UART_SetConfig+0x538>)
 80054ee:	18d3      	adds	r3, r2, r3
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f4:	f7fe fa4c 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80054f8:	0003      	movs	r3, r0
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054fc:	e021      	b.n	8005542 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054fe:	f7fe fa5d 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8005502:	0003      	movs	r3, r0
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005506:	e01c      	b.n	8005542 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005508:	4b28      	ldr	r3, [pc, #160]	@ (80055ac <UART_SetConfig+0x52c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2210      	movs	r2, #16
 800550e:	4013      	ands	r3, r2
 8005510:	d002      	beq.n	8005518 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005512:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <UART_SetConfig+0x530>)
 8005514:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005516:	e014      	b.n	8005542 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005518:	4b26      	ldr	r3, [pc, #152]	@ (80055b4 <UART_SetConfig+0x534>)
 800551a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800551c:	e011      	b.n	8005542 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7fe f9a7 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005522:	0003      	movs	r3, r0
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005526:	e00c      	b.n	8005542 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800552e:	e008      	b.n	8005542 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005534:	231a      	movs	r3, #26
 8005536:	2218      	movs	r2, #24
 8005538:	189b      	adds	r3, r3, r2
 800553a:	19db      	adds	r3, r3, r7
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
        break;
 8005540:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	085a      	lsrs	r2, r3, #1
 800554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005550:	18d2      	adds	r2, r2, r3
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	0019      	movs	r1, r3
 8005558:	0010      	movs	r0, r2
 800555a:	f7fa fddf 	bl	800011c <__udivsi3>
 800555e:	0003      	movs	r3, r0
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2b0f      	cmp	r3, #15
 8005566:	d90a      	bls.n	800557e <UART_SetConfig+0x4fe>
 8005568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	025b      	lsls	r3, r3, #9
 800556e:	429a      	cmp	r2, r3
 8005570:	d205      	bcs.n	800557e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	b29a      	uxth	r2, r3
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	e005      	b.n	800558a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800557e:	231a      	movs	r3, #26
 8005580:	2218      	movs	r2, #24
 8005582:	189b      	adds	r3, r3, r2
 8005584:	19db      	adds	r3, r3, r7
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2200      	movs	r2, #0
 800558e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2200      	movs	r2, #0
 8005594:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005596:	231a      	movs	r3, #26
 8005598:	2218      	movs	r2, #24
 800559a:	189b      	adds	r3, r3, r2
 800559c:	19db      	adds	r3, r3, r7
 800559e:	781b      	ldrb	r3, [r3, #0]
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b00e      	add	sp, #56	@ 0x38
 80055a6:	bdb0      	pop	{r4, r5, r7, pc}
 80055a8:	08006ed8 	.word	0x08006ed8
 80055ac:	40021000 	.word	0x40021000
 80055b0:	003d0900 	.word	0x003d0900
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	08006efc 	.word	0x08006efc

080055bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	2208      	movs	r2, #8
 80055ca:	4013      	ands	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005700 <UART_AdvFeatureConfig+0x144>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	0019      	movs	r1, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	2201      	movs	r2, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d00b      	beq.n	8005608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4a43      	ldr	r2, [pc, #268]	@ (8005704 <UART_AdvFeatureConfig+0x148>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	0019      	movs	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	2202      	movs	r2, #2
 800560e:	4013      	ands	r3, r2
 8005610:	d00b      	beq.n	800562a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a3b      	ldr	r2, [pc, #236]	@ (8005708 <UART_AdvFeatureConfig+0x14c>)
 800561a:	4013      	ands	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	2204      	movs	r2, #4
 8005630:	4013      	ands	r3, r2
 8005632:	d00b      	beq.n	800564c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a34      	ldr	r2, [pc, #208]	@ (800570c <UART_AdvFeatureConfig+0x150>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	2210      	movs	r2, #16
 8005652:	4013      	ands	r3, r2
 8005654:	d00b      	beq.n	800566e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a2c      	ldr	r2, [pc, #176]	@ (8005710 <UART_AdvFeatureConfig+0x154>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	2220      	movs	r2, #32
 8005674:	4013      	ands	r3, r2
 8005676:	d00b      	beq.n	8005690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a25      	ldr	r2, [pc, #148]	@ (8005714 <UART_AdvFeatureConfig+0x158>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	4013      	ands	r3, r2
 8005698:	d01d      	beq.n	80056d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <UART_AdvFeatureConfig+0x15c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	035b      	lsls	r3, r3, #13
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10b      	bne.n	80056d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a15      	ldr	r2, [pc, #84]	@ (800571c <UART_AdvFeatureConfig+0x160>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	2280      	movs	r2, #128	@ 0x80
 80056dc:	4013      	ands	r3, r2
 80056de:	d00b      	beq.n	80056f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005720 <UART_AdvFeatureConfig+0x164>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	0019      	movs	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }
}
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b002      	add	sp, #8
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	ffff7fff 	.word	0xffff7fff
 8005704:	fffdffff 	.word	0xfffdffff
 8005708:	fffeffff 	.word	0xfffeffff
 800570c:	fffbffff 	.word	0xfffbffff
 8005710:	ffffefff 	.word	0xffffefff
 8005714:	ffffdfff 	.word	0xffffdfff
 8005718:	ffefffff 	.word	0xffefffff
 800571c:	ff9fffff 	.word	0xff9fffff
 8005720:	fff7ffff 	.word	0xfff7ffff

08005724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b092      	sub	sp, #72	@ 0x48
 8005728:	af02      	add	r7, sp, #8
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2284      	movs	r2, #132	@ 0x84
 8005730:	2100      	movs	r1, #0
 8005732:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005734:	f7fc fa4c 	bl	8001bd0 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2208      	movs	r2, #8
 8005744:	4013      	ands	r3, r2
 8005746:	2b08      	cmp	r3, #8
 8005748:	d12c      	bne.n	80057a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	2280      	movs	r2, #128	@ 0x80
 800574e:	0391      	lsls	r1, r2, #14
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4a46      	ldr	r2, [pc, #280]	@ (800586c <UART_CheckIdleState+0x148>)
 8005754:	9200      	str	r2, [sp, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	f000 f88c 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 800575c:	1e03      	subs	r3, r0, #0
 800575e:	d021      	beq.n	80057a4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005760:	f3ef 8310 	mrs	r3, PRIMASK
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800576a:	2301      	movs	r3, #1
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	f383 8810 	msr	PRIMASK, r3
}
 8005774:	46c0      	nop			@ (mov r8, r8)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2180      	movs	r1, #128	@ 0x80
 8005782:	438a      	bics	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	f383 8810 	msr	PRIMASK, r3
}
 8005790:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2278      	movs	r2, #120	@ 0x78
 800579c:	2100      	movs	r1, #0
 800579e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e05f      	b.n	8005864 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2204      	movs	r2, #4
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d146      	bne.n	8005840 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	2280      	movs	r2, #128	@ 0x80
 80057b6:	03d1      	lsls	r1, r2, #15
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <UART_CheckIdleState+0x148>)
 80057bc:	9200      	str	r2, [sp, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	f000 f858 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d03b      	beq.n	8005840 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c8:	f3ef 8310 	mrs	r3, PRIMASK
 80057cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d2:	2301      	movs	r3, #1
 80057d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f383 8810 	msr	PRIMASK, r3
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4921      	ldr	r1, [pc, #132]	@ (8005870 <UART_CheckIdleState+0x14c>)
 80057ea:	400a      	ands	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f383 8810 	msr	PRIMASK, r3
}
 80057f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fa:	f3ef 8310 	mrs	r3, PRIMASK
 80057fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005800:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	633b      	str	r3, [r7, #48]	@ 0x30
 8005804:	2301      	movs	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2101      	movs	r1, #1
 800581c:	438a      	bics	r2, r1
 800581e:	609a      	str	r2, [r3, #8]
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	f383 8810 	msr	PRIMASK, r3
}
 800582a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2280      	movs	r2, #128	@ 0x80
 8005830:	2120      	movs	r1, #32
 8005832:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2278      	movs	r2, #120	@ 0x78
 8005838:	2100      	movs	r1, #0
 800583a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e011      	b.n	8005864 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2280      	movs	r2, #128	@ 0x80
 800584a:	2120      	movs	r1, #32
 800584c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2278      	movs	r2, #120	@ 0x78
 800585e:	2100      	movs	r1, #0
 8005860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	b010      	add	sp, #64	@ 0x40
 800586a:	bd80      	pop	{r7, pc}
 800586c:	01ffffff 	.word	0x01ffffff
 8005870:	fffffedf 	.word	0xfffffedf

08005874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	1dfb      	adds	r3, r7, #7
 8005882:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005884:	e051      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	3301      	adds	r3, #1
 800588a:	d04e      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588c:	f7fc f9a0 	bl	8001bd0 <HAL_GetTick>
 8005890:	0002      	movs	r2, r0
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	429a      	cmp	r2, r3
 800589a:	d302      	bcc.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e051      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2204      	movs	r2, #4
 80058ae:	4013      	ands	r3, r2
 80058b0:	d03b      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0xb6>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b80      	cmp	r3, #128	@ 0x80
 80058b6:	d038      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0xb6>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b40      	cmp	r3, #64	@ 0x40
 80058bc:	d035      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	2208      	movs	r2, #8
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d111      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2208      	movs	r2, #8
 80058d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 f900 	bl	8005adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2284      	movs	r2, #132	@ 0x84
 80058e0:	2108      	movs	r1, #8
 80058e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2278      	movs	r2, #120	@ 0x78
 80058e8:	2100      	movs	r1, #0
 80058ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e02c      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	2380      	movs	r3, #128	@ 0x80
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	401a      	ands	r2, r3
 80058fc:	2380      	movs	r3, #128	@ 0x80
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	429a      	cmp	r2, r3
 8005902:	d112      	bne.n	800592a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2280      	movs	r2, #128	@ 0x80
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f8e3 	bl	8005adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2284      	movs	r2, #132	@ 0x84
 800591a:	2120      	movs	r1, #32
 800591c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2278      	movs	r2, #120	@ 0x78
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e00f      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	425a      	negs	r2, r3
 800593a:	4153      	adcs	r3, r2
 800593c:	b2db      	uxtb	r3, r3
 800593e:	001a      	movs	r2, r3
 8005940:	1dfb      	adds	r3, r7, #7
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d09e      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	b004      	add	sp, #16
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b090      	sub	sp, #64	@ 0x40
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	1dbb      	adds	r3, r7, #6
 8005960:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1dba      	adds	r2, r7, #6
 800596c:	2158      	movs	r1, #88	@ 0x58
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2284      	movs	r2, #132	@ 0x84
 8005976:	2100      	movs	r1, #0
 8005978:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2280      	movs	r2, #128	@ 0x80
 800597e:	2122      	movs	r1, #34	@ 0x22
 8005980:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005986:	2b00      	cmp	r3, #0
 8005988:	d028      	beq.n	80059dc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a88 <UART_Start_Receive_DMA+0x134>)
 8005990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005996:	4a3d      	ldr	r2, [pc, #244]	@ (8005a8c <UART_Start_Receive_DMA+0x138>)
 8005998:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599e:	4a3c      	ldr	r2, [pc, #240]	@ (8005a90 <UART_Start_Receive_DMA+0x13c>)
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a6:	2200      	movs	r2, #0
 80059a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3324      	adds	r3, #36	@ 0x24
 80059b4:	0019      	movs	r1, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ba:	001a      	movs	r2, r3
 80059bc:	1dbb      	adds	r3, r7, #6
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f7fc fe9c 	bl	80026fc <HAL_DMA_Start_IT>
 80059c4:	1e03      	subs	r3, r0, #0
 80059c6:	d009      	beq.n	80059dc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2284      	movs	r2, #132	@ 0x84
 80059cc:	2110      	movs	r1, #16
 80059ce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	2120      	movs	r1, #32
 80059d6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e050      	b.n	8005a7e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d019      	beq.n	8005a18 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ee:	2301      	movs	r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			@ (mov r8, r8)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2180      	movs	r1, #128	@ 0x80
 8005a06:	0049      	lsls	r1, r1, #1
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	f383 8810 	msr	PRIMASK, r3
}
 8005a16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a18:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a1e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a22:	2301      	movs	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f383 8810 	msr	PRIMASK, r3
}
 8005a2c:	46c0      	nop			@ (mov r8, r8)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2101      	movs	r1, #1
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f383 8810 	msr	PRIMASK, r3
}
 8005a48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a50:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a54:	2301      	movs	r3, #1
 8005a56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2140      	movs	r1, #64	@ 0x40
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b010      	add	sp, #64	@ 0x40
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	08005ba5 	.word	0x08005ba5
 8005a8c:	08005d0d 	.word	0x08005d0d
 8005a90:	08005d8b 	.word	0x08005d8b

08005a94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f383 8810 	msr	PRIMASK, r3
}
 8005ab0:	46c0      	nop			@ (mov r8, r8)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	21c0      	movs	r1, #192	@ 0xc0
 8005abe:	438a      	bics	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f383 8810 	msr	PRIMASK, r3
}
 8005acc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b006      	add	sp, #24
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	@ 0x38
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aee:	2301      	movs	r3, #1
 8005af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f383 8810 	msr	PRIMASK, r3
}
 8005af8:	46c0      	nop			@ (mov r8, r8)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4926      	ldr	r1, [pc, #152]	@ (8005ba0 <UART_EndRxTransfer+0xc4>)
 8005b06:	400a      	ands	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f383 8810 	msr	PRIMASK, r3
}
 8005b14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b16:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b20:	2301      	movs	r3, #1
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	f383 8810 	msr	PRIMASK, r3
}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2101      	movs	r1, #1
 8005b38:	438a      	bics	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	f383 8810 	msr	PRIMASK, r3
}
 8005b46:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d118      	bne.n	8005b82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f383 8810 	msr	PRIMASK, r3
}
 8005b64:	46c0      	nop			@ (mov r8, r8)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2110      	movs	r1, #16
 8005b72:	438a      	bics	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f383 8810 	msr	PRIMASK, r3
}
 8005b80:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2280      	movs	r2, #128	@ 0x80
 8005b86:	2120      	movs	r1, #32
 8005b88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b00e      	add	sp, #56	@ 0x38
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	fffffedf 	.word	0xfffffedf

08005ba4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b094      	sub	sp, #80	@ 0x50
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d16f      	bne.n	8005c9e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc0:	225a      	movs	r2, #90	@ 0x5a
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bca:	617b      	str	r3, [r7, #20]
  return(result);
 8005bcc:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f383 8810 	msr	PRIMASK, r3
}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4948      	ldr	r1, [pc, #288]	@ (8005d08 <UART_DMAReceiveCplt+0x164>)
 8005be8:	400a      	ands	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f383 8810 	msr	PRIMASK, r3
}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfc:	623b      	str	r3, [r7, #32]
  return(result);
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c02:	2301      	movs	r3, #1
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	46c0      	nop			@ (mov r8, r8)
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2101      	movs	r1, #1
 8005c1a:	438a      	bics	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c24:	f383 8810 	msr	PRIMASK, r3
}
 8005c28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c34:	2301      	movs	r3, #1
 8005c36:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2140      	movs	r1, #64	@ 0x40
 8005c4c:	438a      	bics	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c56:	f383 8810 	msr	PRIMASK, r3
}
 8005c5a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	2120      	movs	r1, #32
 8005c62:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d118      	bne.n	8005c9e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c72:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c76:	2301      	movs	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f383 8810 	msr	PRIMASK, r3
}
 8005c80:	46c0      	nop			@ (mov r8, r8)
 8005c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2110      	movs	r1, #16
 8005c8e:	438a      	bics	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f383 8810 	msr	PRIMASK, r3
}
 8005c9c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d124      	bne.n	8005cf6 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cae:	225a      	movs	r2, #90	@ 0x5a
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	213a      	movs	r1, #58	@ 0x3a
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	2258      	movs	r2, #88	@ 0x58
 8005cc4:	5a9b      	ldrh	r3, [r3, r2]
 8005cc6:	187a      	adds	r2, r7, r1
 8005cc8:	8812      	ldrh	r2, [r2, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d204      	bcs.n	8005cd8 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	187a      	adds	r2, r7, r1
 8005cd2:	215a      	movs	r1, #90	@ 0x5a
 8005cd4:	8812      	ldrh	r2, [r2, #0]
 8005cd6:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cda:	2258      	movs	r2, #88	@ 0x58
 8005cdc:	5a9a      	ldrh	r2, [r3, r2]
 8005cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce0:	215a      	movs	r1, #90	@ 0x5a
 8005ce2:	5a5b      	ldrh	r3, [r3, r1]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7ff f9ba 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cf4:	e003      	b.n	8005cfe <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7fa fd8b 	bl	8000814 <HAL_UART_RxCpltCallback>
}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b014      	add	sp, #80	@ 0x50
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	fffffeff 	.word	0xfffffeff

08005d0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d128      	bne.n	8005d7a <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2258      	movs	r2, #88	@ 0x58
 8005d2c:	5a9b      	ldrh	r3, [r3, r2]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	b299      	uxth	r1, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	225a      	movs	r2, #90	@ 0x5a
 8005d36:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	210a      	movs	r1, #10
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2258      	movs	r2, #88	@ 0x58
 8005d48:	5a9b      	ldrh	r3, [r3, r2]
 8005d4a:	187a      	adds	r2, r7, r1
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d804      	bhi.n	8005d5c <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	215a      	movs	r1, #90	@ 0x5a
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2258      	movs	r2, #88	@ 0x58
 8005d60:	5a9a      	ldrh	r2, [r3, r2]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	215a      	movs	r1, #90	@ 0x5a
 8005d66:	5a5b      	ldrh	r3, [r3, r1]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0011      	movs	r1, r2
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7ff f978 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d78:	e003      	b.n	8005d82 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7ff f963 	bl	8005048 <HAL_UART_RxHalfCpltCallback>
}
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b004      	add	sp, #16
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b086      	sub	sp, #24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2280      	movs	r2, #128	@ 0x80
 8005da2:	589b      	ldr	r3, [r3, r2]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2280      	movs	r2, #128	@ 0x80
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b80      	cmp	r3, #128	@ 0x80
 8005db2:	d10a      	bne.n	8005dca <UART_DMAError+0x40>
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b21      	cmp	r3, #33	@ 0x21
 8005db8:	d107      	bne.n	8005dca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2252      	movs	r2, #82	@ 0x52
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7ff fe65 	bl	8005a94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2240      	movs	r2, #64	@ 0x40
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b40      	cmp	r3, #64	@ 0x40
 8005dd6:	d10a      	bne.n	8005dee <UART_DMAError+0x64>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b22      	cmp	r3, #34	@ 0x22
 8005ddc:	d107      	bne.n	8005dee <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	225a      	movs	r2, #90	@ 0x5a
 8005de2:	2100      	movs	r1, #0
 8005de4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7ff fe77 	bl	8005adc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2284      	movs	r2, #132	@ 0x84
 8005df2:	589b      	ldr	r3, [r3, r2]
 8005df4:	2210      	movs	r2, #16
 8005df6:	431a      	orrs	r2, r3
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2184      	movs	r1, #132	@ 0x84
 8005dfc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7ff f929 	bl	8005058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b006      	add	sp, #24
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	225a      	movs	r2, #90	@ 0x5a
 8005e20:	2100      	movs	r1, #0
 8005e22:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7ff f916 	bl	8005058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b004      	add	sp, #16
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e42:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	2301      	movs	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f383 8810 	msr	PRIMASK, r3
}
 8005e50:	46c0      	nop			@ (mov r8, r8)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2140      	movs	r1, #64	@ 0x40
 8005e5e:	438a      	bics	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f383 8810 	msr	PRIMASK, r3
}
 8005e6c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f7ff f8db 	bl	8005038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b006      	add	sp, #24
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e92:	46c0      	nop			@ (mov r8, r8)
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b002      	add	sp, #8
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <std>:
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	0004      	movs	r4, r0
 8005ea2:	6003      	str	r3, [r0, #0]
 8005ea4:	6043      	str	r3, [r0, #4]
 8005ea6:	6083      	str	r3, [r0, #8]
 8005ea8:	8181      	strh	r1, [r0, #12]
 8005eaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005eac:	81c2      	strh	r2, [r0, #14]
 8005eae:	6103      	str	r3, [r0, #16]
 8005eb0:	6143      	str	r3, [r0, #20]
 8005eb2:	6183      	str	r3, [r0, #24]
 8005eb4:	0019      	movs	r1, r3
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	305c      	adds	r0, #92	@ 0x5c
 8005eba:	f000 fa0f 	bl	80062dc <memset>
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <std+0x50>)
 8005ec0:	6224      	str	r4, [r4, #32]
 8005ec2:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef0 <std+0x54>)
 8005ec6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <std+0x58>)
 8005eca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <std+0x5c>)
 8005ece:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <std+0x60>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d005      	beq.n	8005ee2 <std+0x46>
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <std+0x64>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d002      	beq.n	8005ee2 <std+0x46>
 8005edc:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <std+0x68>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d103      	bne.n	8005eea <std+0x4e>
 8005ee2:	0020      	movs	r0, r4
 8005ee4:	3058      	adds	r0, #88	@ 0x58
 8005ee6:	f000 fa79 	bl	80063dc <__retarget_lock_init_recursive>
 8005eea:	bd10      	pop	{r4, pc}
 8005eec:	08006105 	.word	0x08006105
 8005ef0:	0800612d 	.word	0x0800612d
 8005ef4:	08006165 	.word	0x08006165
 8005ef8:	08006191 	.word	0x08006191
 8005efc:	200003b8 	.word	0x200003b8
 8005f00:	20000420 	.word	0x20000420
 8005f04:	20000488 	.word	0x20000488

08005f08 <stdio_exit_handler>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4a03      	ldr	r2, [pc, #12]	@ (8005f18 <stdio_exit_handler+0x10>)
 8005f0c:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <stdio_exit_handler+0x14>)
 8005f0e:	4804      	ldr	r0, [pc, #16]	@ (8005f20 <stdio_exit_handler+0x18>)
 8005f10:	f000 f86c 	bl	8005fec <_fwalk_sglue>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	20000010 	.word	0x20000010
 8005f1c:	08006c6d 	.word	0x08006c6d
 8005f20:	20000020 	.word	0x20000020

08005f24 <cleanup_stdio>:
 8005f24:	6841      	ldr	r1, [r0, #4]
 8005f26:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <cleanup_stdio+0x30>)
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	0004      	movs	r4, r0
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d001      	beq.n	8005f34 <cleanup_stdio+0x10>
 8005f30:	f000 fe9c 	bl	8006c6c <_fflush_r>
 8005f34:	68a1      	ldr	r1, [r4, #8]
 8005f36:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <cleanup_stdio+0x34>)
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <cleanup_stdio+0x1e>
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	f000 fe95 	bl	8006c6c <_fflush_r>
 8005f42:	68e1      	ldr	r1, [r4, #12]
 8005f44:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <cleanup_stdio+0x38>)
 8005f46:	4299      	cmp	r1, r3
 8005f48:	d002      	beq.n	8005f50 <cleanup_stdio+0x2c>
 8005f4a:	0020      	movs	r0, r4
 8005f4c:	f000 fe8e 	bl	8006c6c <_fflush_r>
 8005f50:	bd10      	pop	{r4, pc}
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	200003b8 	.word	0x200003b8
 8005f58:	20000420 	.word	0x20000420
 8005f5c:	20000488 	.word	0x20000488

08005f60 <global_stdio_init.part.0>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <global_stdio_init.part.0+0x28>)
 8005f64:	4a09      	ldr	r2, [pc, #36]	@ (8005f8c <global_stdio_init.part.0+0x2c>)
 8005f66:	2104      	movs	r1, #4
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	4809      	ldr	r0, [pc, #36]	@ (8005f90 <global_stdio_init.part.0+0x30>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f7ff ff95 	bl	8005e9c <std>
 8005f72:	2201      	movs	r2, #1
 8005f74:	2109      	movs	r1, #9
 8005f76:	4807      	ldr	r0, [pc, #28]	@ (8005f94 <global_stdio_init.part.0+0x34>)
 8005f78:	f7ff ff90 	bl	8005e9c <std>
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	2112      	movs	r1, #18
 8005f80:	4805      	ldr	r0, [pc, #20]	@ (8005f98 <global_stdio_init.part.0+0x38>)
 8005f82:	f7ff ff8b 	bl	8005e9c <std>
 8005f86:	bd10      	pop	{r4, pc}
 8005f88:	200004f0 	.word	0x200004f0
 8005f8c:	08005f09 	.word	0x08005f09
 8005f90:	200003b8 	.word	0x200003b8
 8005f94:	20000420 	.word	0x20000420
 8005f98:	20000488 	.word	0x20000488

08005f9c <__sfp_lock_acquire>:
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4802      	ldr	r0, [pc, #8]	@ (8005fa8 <__sfp_lock_acquire+0xc>)
 8005fa0:	f000 fa1d 	bl	80063de <__retarget_lock_acquire_recursive>
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	200004f9 	.word	0x200004f9

08005fac <__sfp_lock_release>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4802      	ldr	r0, [pc, #8]	@ (8005fb8 <__sfp_lock_release+0xc>)
 8005fb0:	f000 fa16 	bl	80063e0 <__retarget_lock_release_recursive>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	200004f9 	.word	0x200004f9

08005fbc <__sinit>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	0004      	movs	r4, r0
 8005fc0:	f7ff ffec 	bl	8005f9c <__sfp_lock_acquire>
 8005fc4:	6a23      	ldr	r3, [r4, #32]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <__sinit+0x14>
 8005fca:	f7ff ffef 	bl	8005fac <__sfp_lock_release>
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <__sinit+0x28>)
 8005fd2:	6223      	str	r3, [r4, #32]
 8005fd4:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <__sinit+0x2c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f6      	bne.n	8005fca <__sinit+0xe>
 8005fdc:	f7ff ffc0 	bl	8005f60 <global_stdio_init.part.0>
 8005fe0:	e7f3      	b.n	8005fca <__sinit+0xe>
 8005fe2:	46c0      	nop			@ (mov r8, r8)
 8005fe4:	08005f25 	.word	0x08005f25
 8005fe8:	200004f0 	.word	0x200004f0

08005fec <_fwalk_sglue>:
 8005fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fee:	0014      	movs	r4, r2
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	9000      	str	r0, [sp, #0]
 8005ff4:	9101      	str	r1, [sp, #4]
 8005ff6:	68a5      	ldr	r5, [r4, #8]
 8005ff8:	6867      	ldr	r7, [r4, #4]
 8005ffa:	3f01      	subs	r7, #1
 8005ffc:	d504      	bpl.n	8006008 <_fwalk_sglue+0x1c>
 8005ffe:	6824      	ldr	r4, [r4, #0]
 8006000:	2c00      	cmp	r4, #0
 8006002:	d1f8      	bne.n	8005ff6 <_fwalk_sglue+0xa>
 8006004:	0030      	movs	r0, r6
 8006006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006008:	89ab      	ldrh	r3, [r5, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d908      	bls.n	8006020 <_fwalk_sglue+0x34>
 800600e:	220e      	movs	r2, #14
 8006010:	5eab      	ldrsh	r3, [r5, r2]
 8006012:	3301      	adds	r3, #1
 8006014:	d004      	beq.n	8006020 <_fwalk_sglue+0x34>
 8006016:	0029      	movs	r1, r5
 8006018:	9800      	ldr	r0, [sp, #0]
 800601a:	9b01      	ldr	r3, [sp, #4]
 800601c:	4798      	blx	r3
 800601e:	4306      	orrs	r6, r0
 8006020:	3568      	adds	r5, #104	@ 0x68
 8006022:	e7ea      	b.n	8005ffa <_fwalk_sglue+0xe>

08006024 <iprintf>:
 8006024:	b40f      	push	{r0, r1, r2, r3}
 8006026:	b507      	push	{r0, r1, r2, lr}
 8006028:	4905      	ldr	r1, [pc, #20]	@ (8006040 <iprintf+0x1c>)
 800602a:	ab04      	add	r3, sp, #16
 800602c:	6808      	ldr	r0, [r1, #0]
 800602e:	cb04      	ldmia	r3!, {r2}
 8006030:	6881      	ldr	r1, [r0, #8]
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	f000 fafa 	bl	800662c <_vfiprintf_r>
 8006038:	b003      	add	sp, #12
 800603a:	bc08      	pop	{r3}
 800603c:	b004      	add	sp, #16
 800603e:	4718      	bx	r3
 8006040:	2000001c 	.word	0x2000001c

08006044 <_puts_r>:
 8006044:	6a03      	ldr	r3, [r0, #32]
 8006046:	b570      	push	{r4, r5, r6, lr}
 8006048:	0005      	movs	r5, r0
 800604a:	000e      	movs	r6, r1
 800604c:	6884      	ldr	r4, [r0, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <_puts_r+0x12>
 8006052:	f7ff ffb3 	bl	8005fbc <__sinit>
 8006056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006058:	07db      	lsls	r3, r3, #31
 800605a:	d405      	bmi.n	8006068 <_puts_r+0x24>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	059b      	lsls	r3, r3, #22
 8006060:	d402      	bmi.n	8006068 <_puts_r+0x24>
 8006062:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006064:	f000 f9bb 	bl	80063de <__retarget_lock_acquire_recursive>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	071b      	lsls	r3, r3, #28
 800606c:	d502      	bpl.n	8006074 <_puts_r+0x30>
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11f      	bne.n	80060b4 <_puts_r+0x70>
 8006074:	0021      	movs	r1, r4
 8006076:	0028      	movs	r0, r5
 8006078:	f000 f8d2 	bl	8006220 <__swsetup_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	d019      	beq.n	80060b4 <_puts_r+0x70>
 8006080:	2501      	movs	r5, #1
 8006082:	426d      	negs	r5, r5
 8006084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006086:	07db      	lsls	r3, r3, #31
 8006088:	d405      	bmi.n	8006096 <_puts_r+0x52>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	059b      	lsls	r3, r3, #22
 800608e:	d402      	bmi.n	8006096 <_puts_r+0x52>
 8006090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006092:	f000 f9a5 	bl	80063e0 <__retarget_lock_release_recursive>
 8006096:	0028      	movs	r0, r5
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	3601      	adds	r6, #1
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da04      	bge.n	80060ac <_puts_r+0x68>
 80060a2:	69a2      	ldr	r2, [r4, #24]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	dc16      	bgt.n	80060d6 <_puts_r+0x92>
 80060a8:	290a      	cmp	r1, #10
 80060aa:	d014      	beq.n	80060d6 <_puts_r+0x92>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	6022      	str	r2, [r4, #0]
 80060b2:	7019      	strb	r1, [r3, #0]
 80060b4:	68a3      	ldr	r3, [r4, #8]
 80060b6:	7831      	ldrb	r1, [r6, #0]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d1ed      	bne.n	800609a <_puts_r+0x56>
 80060be:	60a3      	str	r3, [r4, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da0f      	bge.n	80060e4 <_puts_r+0xa0>
 80060c4:	0022      	movs	r2, r4
 80060c6:	0028      	movs	r0, r5
 80060c8:	310a      	adds	r1, #10
 80060ca:	f000 f867 	bl	800619c <__swbuf_r>
 80060ce:	3001      	adds	r0, #1
 80060d0:	d0d6      	beq.n	8006080 <_puts_r+0x3c>
 80060d2:	250a      	movs	r5, #10
 80060d4:	e7d6      	b.n	8006084 <_puts_r+0x40>
 80060d6:	0022      	movs	r2, r4
 80060d8:	0028      	movs	r0, r5
 80060da:	f000 f85f 	bl	800619c <__swbuf_r>
 80060de:	3001      	adds	r0, #1
 80060e0:	d1e8      	bne.n	80060b4 <_puts_r+0x70>
 80060e2:	e7cd      	b.n	8006080 <_puts_r+0x3c>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	220a      	movs	r2, #10
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e7f0      	b.n	80060d2 <_puts_r+0x8e>

080060f0 <puts>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4b03      	ldr	r3, [pc, #12]	@ (8006100 <puts+0x10>)
 80060f4:	0001      	movs	r1, r0
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	f7ff ffa4 	bl	8006044 <_puts_r>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	2000001c 	.word	0x2000001c

08006104 <__sread>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	000c      	movs	r4, r1
 8006108:	250e      	movs	r5, #14
 800610a:	5f49      	ldrsh	r1, [r1, r5]
 800610c:	f000 f914 	bl	8006338 <_read_r>
 8006110:	2800      	cmp	r0, #0
 8006112:	db03      	blt.n	800611c <__sread+0x18>
 8006114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006116:	181b      	adds	r3, r3, r0
 8006118:	6563      	str	r3, [r4, #84]	@ 0x54
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	4a02      	ldr	r2, [pc, #8]	@ (8006128 <__sread+0x24>)
 8006120:	4013      	ands	r3, r2
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	e7f9      	b.n	800611a <__sread+0x16>
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	ffffefff 	.word	0xffffefff

0800612c <__swrite>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	001f      	movs	r7, r3
 8006130:	898b      	ldrh	r3, [r1, #12]
 8006132:	0005      	movs	r5, r0
 8006134:	000c      	movs	r4, r1
 8006136:	0016      	movs	r6, r2
 8006138:	05db      	lsls	r3, r3, #23
 800613a:	d505      	bpl.n	8006148 <__swrite+0x1c>
 800613c:	230e      	movs	r3, #14
 800613e:	5ec9      	ldrsh	r1, [r1, r3]
 8006140:	2200      	movs	r2, #0
 8006142:	2302      	movs	r3, #2
 8006144:	f000 f8e4 	bl	8006310 <_lseek_r>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	4a05      	ldr	r2, [pc, #20]	@ (8006160 <__swrite+0x34>)
 800614c:	0028      	movs	r0, r5
 800614e:	4013      	ands	r3, r2
 8006150:	81a3      	strh	r3, [r4, #12]
 8006152:	0032      	movs	r2, r6
 8006154:	230e      	movs	r3, #14
 8006156:	5ee1      	ldrsh	r1, [r4, r3]
 8006158:	003b      	movs	r3, r7
 800615a:	f000 f901 	bl	8006360 <_write_r>
 800615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006160:	ffffefff 	.word	0xffffefff

08006164 <__sseek>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	000c      	movs	r4, r1
 8006168:	250e      	movs	r5, #14
 800616a:	5f49      	ldrsh	r1, [r1, r5]
 800616c:	f000 f8d0 	bl	8006310 <_lseek_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	1c42      	adds	r2, r0, #1
 8006174:	d103      	bne.n	800617e <__sseek+0x1a>
 8006176:	4a05      	ldr	r2, [pc, #20]	@ (800618c <__sseek+0x28>)
 8006178:	4013      	ands	r3, r2
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	2280      	movs	r2, #128	@ 0x80
 8006180:	0152      	lsls	r2, r2, #5
 8006182:	4313      	orrs	r3, r2
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	6560      	str	r0, [r4, #84]	@ 0x54
 8006188:	e7f8      	b.n	800617c <__sseek+0x18>
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	ffffefff 	.word	0xffffefff

08006190 <__sclose>:
 8006190:	b510      	push	{r4, lr}
 8006192:	230e      	movs	r3, #14
 8006194:	5ec9      	ldrsh	r1, [r1, r3]
 8006196:	f000 f8a9 	bl	80062ec <_close_r>
 800619a:	bd10      	pop	{r4, pc}

0800619c <__swbuf_r>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	0006      	movs	r6, r0
 80061a0:	000d      	movs	r5, r1
 80061a2:	0014      	movs	r4, r2
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d004      	beq.n	80061b2 <__swbuf_r+0x16>
 80061a8:	6a03      	ldr	r3, [r0, #32]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <__swbuf_r+0x16>
 80061ae:	f7ff ff05 	bl	8005fbc <__sinit>
 80061b2:	69a3      	ldr	r3, [r4, #24]
 80061b4:	60a3      	str	r3, [r4, #8]
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	071b      	lsls	r3, r3, #28
 80061ba:	d502      	bpl.n	80061c2 <__swbuf_r+0x26>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <__swbuf_r+0x3a>
 80061c2:	0021      	movs	r1, r4
 80061c4:	0030      	movs	r0, r6
 80061c6:	f000 f82b 	bl	8006220 <__swsetup_r>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d003      	beq.n	80061d6 <__swbuf_r+0x3a>
 80061ce:	2501      	movs	r5, #1
 80061d0:	426d      	negs	r5, r5
 80061d2:	0028      	movs	r0, r5
 80061d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	b2ef      	uxtb	r7, r5
 80061dc:	1ac0      	subs	r0, r0, r3
 80061de:	6963      	ldr	r3, [r4, #20]
 80061e0:	b2ed      	uxtb	r5, r5
 80061e2:	4283      	cmp	r3, r0
 80061e4:	dc05      	bgt.n	80061f2 <__swbuf_r+0x56>
 80061e6:	0021      	movs	r1, r4
 80061e8:	0030      	movs	r0, r6
 80061ea:	f000 fd3f 	bl	8006c6c <_fflush_r>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d1ed      	bne.n	80061ce <__swbuf_r+0x32>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	3001      	adds	r0, #1
 80061f6:	3b01      	subs	r3, #1
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	6022      	str	r2, [r4, #0]
 8006200:	701f      	strb	r7, [r3, #0]
 8006202:	6963      	ldr	r3, [r4, #20]
 8006204:	4283      	cmp	r3, r0
 8006206:	d004      	beq.n	8006212 <__swbuf_r+0x76>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	07db      	lsls	r3, r3, #31
 800620c:	d5e1      	bpl.n	80061d2 <__swbuf_r+0x36>
 800620e:	2d0a      	cmp	r5, #10
 8006210:	d1df      	bne.n	80061d2 <__swbuf_r+0x36>
 8006212:	0021      	movs	r1, r4
 8006214:	0030      	movs	r0, r6
 8006216:	f000 fd29 	bl	8006c6c <_fflush_r>
 800621a:	2800      	cmp	r0, #0
 800621c:	d0d9      	beq.n	80061d2 <__swbuf_r+0x36>
 800621e:	e7d6      	b.n	80061ce <__swbuf_r+0x32>

08006220 <__swsetup_r>:
 8006220:	4b2d      	ldr	r3, [pc, #180]	@ (80062d8 <__swsetup_r+0xb8>)
 8006222:	b570      	push	{r4, r5, r6, lr}
 8006224:	0005      	movs	r5, r0
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	000c      	movs	r4, r1
 800622a:	2800      	cmp	r0, #0
 800622c:	d004      	beq.n	8006238 <__swsetup_r+0x18>
 800622e:	6a03      	ldr	r3, [r0, #32]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <__swsetup_r+0x18>
 8006234:	f7ff fec2 	bl	8005fbc <__sinit>
 8006238:	230c      	movs	r3, #12
 800623a:	5ee2      	ldrsh	r2, [r4, r3]
 800623c:	0713      	lsls	r3, r2, #28
 800623e:	d423      	bmi.n	8006288 <__swsetup_r+0x68>
 8006240:	06d3      	lsls	r3, r2, #27
 8006242:	d407      	bmi.n	8006254 <__swsetup_r+0x34>
 8006244:	2309      	movs	r3, #9
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	2340      	movs	r3, #64	@ 0x40
 800624a:	2001      	movs	r0, #1
 800624c:	4313      	orrs	r3, r2
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	4240      	negs	r0, r0
 8006252:	e03a      	b.n	80062ca <__swsetup_r+0xaa>
 8006254:	0752      	lsls	r2, r2, #29
 8006256:	d513      	bpl.n	8006280 <__swsetup_r+0x60>
 8006258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800625a:	2900      	cmp	r1, #0
 800625c:	d008      	beq.n	8006270 <__swsetup_r+0x50>
 800625e:	0023      	movs	r3, r4
 8006260:	3344      	adds	r3, #68	@ 0x44
 8006262:	4299      	cmp	r1, r3
 8006264:	d002      	beq.n	800626c <__swsetup_r+0x4c>
 8006266:	0028      	movs	r0, r5
 8006268:	f000 f8bc 	bl	80063e4 <_free_r>
 800626c:	2300      	movs	r3, #0
 800626e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006270:	2224      	movs	r2, #36	@ 0x24
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	4393      	bics	r3, r2
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	2300      	movs	r3, #0
 800627a:	6063      	str	r3, [r4, #4]
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	2308      	movs	r3, #8
 8006282:	89a2      	ldrh	r2, [r4, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <__swsetup_r+0x86>
 800628e:	21a0      	movs	r1, #160	@ 0xa0
 8006290:	2280      	movs	r2, #128	@ 0x80
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	0089      	lsls	r1, r1, #2
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	400b      	ands	r3, r1
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <__swsetup_r+0x86>
 800629e:	0021      	movs	r1, r4
 80062a0:	0028      	movs	r0, r5
 80062a2:	f000 fd39 	bl	8006d18 <__smakebuf_r>
 80062a6:	230c      	movs	r3, #12
 80062a8:	5ee2      	ldrsh	r2, [r4, r3]
 80062aa:	2101      	movs	r1, #1
 80062ac:	0013      	movs	r3, r2
 80062ae:	400b      	ands	r3, r1
 80062b0:	420a      	tst	r2, r1
 80062b2:	d00b      	beq.n	80062cc <__swsetup_r+0xac>
 80062b4:	2300      	movs	r3, #0
 80062b6:	60a3      	str	r3, [r4, #8]
 80062b8:	6963      	ldr	r3, [r4, #20]
 80062ba:	425b      	negs	r3, r3
 80062bc:	61a3      	str	r3, [r4, #24]
 80062be:	2000      	movs	r0, #0
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	4283      	cmp	r3, r0
 80062c4:	d101      	bne.n	80062ca <__swsetup_r+0xaa>
 80062c6:	0613      	lsls	r3, r2, #24
 80062c8:	d4be      	bmi.n	8006248 <__swsetup_r+0x28>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	0791      	lsls	r1, r2, #30
 80062ce:	d400      	bmi.n	80062d2 <__swsetup_r+0xb2>
 80062d0:	6963      	ldr	r3, [r4, #20]
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	e7f3      	b.n	80062be <__swsetup_r+0x9e>
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	2000001c 	.word	0x2000001c

080062dc <memset>:
 80062dc:	0003      	movs	r3, r0
 80062de:	1882      	adds	r2, r0, r2
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d100      	bne.n	80062e6 <memset+0xa>
 80062e4:	4770      	bx	lr
 80062e6:	7019      	strb	r1, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	e7f9      	b.n	80062e0 <memset+0x4>

080062ec <_close_r>:
 80062ec:	2300      	movs	r3, #0
 80062ee:	b570      	push	{r4, r5, r6, lr}
 80062f0:	4d06      	ldr	r5, [pc, #24]	@ (800630c <_close_r+0x20>)
 80062f2:	0004      	movs	r4, r0
 80062f4:	0008      	movs	r0, r1
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	f7fa fffb 	bl	80012f2 <_close>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d103      	bne.n	8006308 <_close_r+0x1c>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d000      	beq.n	8006308 <_close_r+0x1c>
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	200004f4 	.word	0x200004f4

08006310 <_lseek_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	0004      	movs	r4, r0
 8006314:	0008      	movs	r0, r1
 8006316:	0011      	movs	r1, r2
 8006318:	001a      	movs	r2, r3
 800631a:	2300      	movs	r3, #0
 800631c:	4d05      	ldr	r5, [pc, #20]	@ (8006334 <_lseek_r+0x24>)
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	f7fb f808 	bl	8001334 <_lseek>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d103      	bne.n	8006330 <_lseek_r+0x20>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d000      	beq.n	8006330 <_lseek_r+0x20>
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	200004f4 	.word	0x200004f4

08006338 <_read_r>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	0004      	movs	r4, r0
 800633c:	0008      	movs	r0, r1
 800633e:	0011      	movs	r1, r2
 8006340:	001a      	movs	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	4d05      	ldr	r5, [pc, #20]	@ (800635c <_read_r+0x24>)
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	f7fa ff9a 	bl	8001280 <_read>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d103      	bne.n	8006358 <_read_r+0x20>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d000      	beq.n	8006358 <_read_r+0x20>
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	46c0      	nop			@ (mov r8, r8)
 800635c:	200004f4 	.word	0x200004f4

08006360 <_write_r>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	0004      	movs	r4, r0
 8006364:	0008      	movs	r0, r1
 8006366:	0011      	movs	r1, r2
 8006368:	001a      	movs	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	4d05      	ldr	r5, [pc, #20]	@ (8006384 <_write_r+0x24>)
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fa ffa3 	bl	80012ba <_write>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d103      	bne.n	8006380 <_write_r+0x20>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d000      	beq.n	8006380 <_write_r+0x20>
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	46c0      	nop			@ (mov r8, r8)
 8006384:	200004f4 	.word	0x200004f4

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	@ (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	2000001c 	.word	0x2000001c

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	2600      	movs	r6, #0
 8006398:	4c0c      	ldr	r4, [pc, #48]	@ (80063cc <__libc_init_array+0x38>)
 800639a:	4d0d      	ldr	r5, [pc, #52]	@ (80063d0 <__libc_init_array+0x3c>)
 800639c:	1b64      	subs	r4, r4, r5
 800639e:	10a4      	asrs	r4, r4, #2
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	2600      	movs	r6, #0
 80063a6:	f000 fd3b 	bl	8006e20 <_init>
 80063aa:	4c0a      	ldr	r4, [pc, #40]	@ (80063d4 <__libc_init_array+0x40>)
 80063ac:	4d0a      	ldr	r5, [pc, #40]	@ (80063d8 <__libc_init_array+0x44>)
 80063ae:	1b64      	subs	r4, r4, r5
 80063b0:	10a4      	asrs	r4, r4, #2
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	00b3      	lsls	r3, r6, #2
 80063ba:	58eb      	ldr	r3, [r5, r3]
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	00b3      	lsls	r3, r6, #2
 80063c4:	58eb      	ldr	r3, [r5, r3]
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	08006f5c 	.word	0x08006f5c
 80063d0:	08006f5c 	.word	0x08006f5c
 80063d4:	08006f60 	.word	0x08006f60
 80063d8:	08006f5c 	.word	0x08006f5c

080063dc <__retarget_lock_init_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_acquire_recursive>:
 80063de:	4770      	bx	lr

080063e0 <__retarget_lock_release_recursive>:
 80063e0:	4770      	bx	lr
	...

080063e4 <_free_r>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	0005      	movs	r5, r0
 80063e8:	1e0c      	subs	r4, r1, #0
 80063ea:	d010      	beq.n	800640e <_free_r+0x2a>
 80063ec:	3c04      	subs	r4, #4
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da00      	bge.n	80063f6 <_free_r+0x12>
 80063f4:	18e4      	adds	r4, r4, r3
 80063f6:	0028      	movs	r0, r5
 80063f8:	f000 f8e0 	bl	80065bc <__malloc_lock>
 80063fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006474 <_free_r+0x90>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <_free_r+0x2c>
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	6014      	str	r4, [r2, #0]
 8006408:	0028      	movs	r0, r5
 800640a:	f000 f8df 	bl	80065cc <__malloc_unlock>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	42a3      	cmp	r3, r4
 8006412:	d908      	bls.n	8006426 <_free_r+0x42>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	1821      	adds	r1, r4, r0
 8006418:	428b      	cmp	r3, r1
 800641a:	d1f3      	bne.n	8006404 <_free_r+0x20>
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	1809      	adds	r1, r1, r0
 8006422:	6021      	str	r1, [r4, #0]
 8006424:	e7ee      	b.n	8006404 <_free_r+0x20>
 8006426:	001a      	movs	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <_free_r+0x4e>
 800642e:	42a3      	cmp	r3, r4
 8006430:	d9f9      	bls.n	8006426 <_free_r+0x42>
 8006432:	6811      	ldr	r1, [r2, #0]
 8006434:	1850      	adds	r0, r2, r1
 8006436:	42a0      	cmp	r0, r4
 8006438:	d10b      	bne.n	8006452 <_free_r+0x6e>
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	1809      	adds	r1, r1, r0
 800643e:	1850      	adds	r0, r2, r1
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	4283      	cmp	r3, r0
 8006444:	d1e0      	bne.n	8006408 <_free_r+0x24>
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	1841      	adds	r1, r0, r1
 800644c:	6011      	str	r1, [r2, #0]
 800644e:	6053      	str	r3, [r2, #4]
 8006450:	e7da      	b.n	8006408 <_free_r+0x24>
 8006452:	42a0      	cmp	r0, r4
 8006454:	d902      	bls.n	800645c <_free_r+0x78>
 8006456:	230c      	movs	r3, #12
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	e7d5      	b.n	8006408 <_free_r+0x24>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	d103      	bne.n	800646c <_free_r+0x88>
 8006464:	6819      	ldr	r1, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	1809      	adds	r1, r1, r0
 800646a:	6021      	str	r1, [r4, #0]
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	6054      	str	r4, [r2, #4]
 8006470:	e7ca      	b.n	8006408 <_free_r+0x24>
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	20000500 	.word	0x20000500

08006478 <sbrk_aligned>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4e0f      	ldr	r6, [pc, #60]	@ (80064b8 <sbrk_aligned+0x40>)
 800647c:	000d      	movs	r5, r1
 800647e:	6831      	ldr	r1, [r6, #0]
 8006480:	0004      	movs	r4, r0
 8006482:	2900      	cmp	r1, #0
 8006484:	d102      	bne.n	800648c <sbrk_aligned+0x14>
 8006486:	f000 fcad 	bl	8006de4 <_sbrk_r>
 800648a:	6030      	str	r0, [r6, #0]
 800648c:	0029      	movs	r1, r5
 800648e:	0020      	movs	r0, r4
 8006490:	f000 fca8 	bl	8006de4 <_sbrk_r>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d103      	bne.n	80064a0 <sbrk_aligned+0x28>
 8006498:	2501      	movs	r5, #1
 800649a:	426d      	negs	r5, r5
 800649c:	0028      	movs	r0, r5
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	2303      	movs	r3, #3
 80064a2:	1cc5      	adds	r5, r0, #3
 80064a4:	439d      	bics	r5, r3
 80064a6:	42a8      	cmp	r0, r5
 80064a8:	d0f8      	beq.n	800649c <sbrk_aligned+0x24>
 80064aa:	1a29      	subs	r1, r5, r0
 80064ac:	0020      	movs	r0, r4
 80064ae:	f000 fc99 	bl	8006de4 <_sbrk_r>
 80064b2:	3001      	adds	r0, #1
 80064b4:	d1f2      	bne.n	800649c <sbrk_aligned+0x24>
 80064b6:	e7ef      	b.n	8006498 <sbrk_aligned+0x20>
 80064b8:	200004fc 	.word	0x200004fc

080064bc <_malloc_r>:
 80064bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064be:	2203      	movs	r2, #3
 80064c0:	1ccb      	adds	r3, r1, #3
 80064c2:	4393      	bics	r3, r2
 80064c4:	3308      	adds	r3, #8
 80064c6:	0005      	movs	r5, r0
 80064c8:	001f      	movs	r7, r3
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d234      	bcs.n	8006538 <_malloc_r+0x7c>
 80064ce:	270c      	movs	r7, #12
 80064d0:	42b9      	cmp	r1, r7
 80064d2:	d833      	bhi.n	800653c <_malloc_r+0x80>
 80064d4:	0028      	movs	r0, r5
 80064d6:	f000 f871 	bl	80065bc <__malloc_lock>
 80064da:	4e37      	ldr	r6, [pc, #220]	@ (80065b8 <_malloc_r+0xfc>)
 80064dc:	6833      	ldr	r3, [r6, #0]
 80064de:	001c      	movs	r4, r3
 80064e0:	2c00      	cmp	r4, #0
 80064e2:	d12f      	bne.n	8006544 <_malloc_r+0x88>
 80064e4:	0039      	movs	r1, r7
 80064e6:	0028      	movs	r0, r5
 80064e8:	f7ff ffc6 	bl	8006478 <sbrk_aligned>
 80064ec:	0004      	movs	r4, r0
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	d15f      	bne.n	80065b2 <_malloc_r+0xf6>
 80064f2:	6834      	ldr	r4, [r6, #0]
 80064f4:	9400      	str	r4, [sp, #0]
 80064f6:	9b00      	ldr	r3, [sp, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d14a      	bne.n	8006592 <_malloc_r+0xd6>
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	d052      	beq.n	80065a6 <_malloc_r+0xea>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	0028      	movs	r0, r5
 8006504:	18e3      	adds	r3, r4, r3
 8006506:	9900      	ldr	r1, [sp, #0]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	f000 fc6b 	bl	8006de4 <_sbrk_r>
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	4283      	cmp	r3, r0
 8006512:	d148      	bne.n	80065a6 <_malloc_r+0xea>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	0028      	movs	r0, r5
 8006518:	1aff      	subs	r7, r7, r3
 800651a:	0039      	movs	r1, r7
 800651c:	f7ff ffac 	bl	8006478 <sbrk_aligned>
 8006520:	3001      	adds	r0, #1
 8006522:	d040      	beq.n	80065a6 <_malloc_r+0xea>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	19db      	adds	r3, r3, r7
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	6833      	ldr	r3, [r6, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	2a00      	cmp	r2, #0
 8006530:	d133      	bne.n	800659a <_malloc_r+0xde>
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	e019      	b.n	800656c <_malloc_r+0xb0>
 8006538:	2b00      	cmp	r3, #0
 800653a:	dac9      	bge.n	80064d0 <_malloc_r+0x14>
 800653c:	230c      	movs	r3, #12
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	2000      	movs	r0, #0
 8006542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006544:	6821      	ldr	r1, [r4, #0]
 8006546:	1bc9      	subs	r1, r1, r7
 8006548:	d420      	bmi.n	800658c <_malloc_r+0xd0>
 800654a:	290b      	cmp	r1, #11
 800654c:	d90a      	bls.n	8006564 <_malloc_r+0xa8>
 800654e:	19e2      	adds	r2, r4, r7
 8006550:	6027      	str	r7, [r4, #0]
 8006552:	42a3      	cmp	r3, r4
 8006554:	d104      	bne.n	8006560 <_malloc_r+0xa4>
 8006556:	6032      	str	r2, [r6, #0]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	6053      	str	r3, [r2, #4]
 800655e:	e005      	b.n	800656c <_malloc_r+0xb0>
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e7f9      	b.n	8006558 <_malloc_r+0x9c>
 8006564:	6862      	ldr	r2, [r4, #4]
 8006566:	42a3      	cmp	r3, r4
 8006568:	d10e      	bne.n	8006588 <_malloc_r+0xcc>
 800656a:	6032      	str	r2, [r6, #0]
 800656c:	0028      	movs	r0, r5
 800656e:	f000 f82d 	bl	80065cc <__malloc_unlock>
 8006572:	0020      	movs	r0, r4
 8006574:	2207      	movs	r2, #7
 8006576:	300b      	adds	r0, #11
 8006578:	1d23      	adds	r3, r4, #4
 800657a:	4390      	bics	r0, r2
 800657c:	1ac2      	subs	r2, r0, r3
 800657e:	4298      	cmp	r0, r3
 8006580:	d0df      	beq.n	8006542 <_malloc_r+0x86>
 8006582:	1a1b      	subs	r3, r3, r0
 8006584:	50a3      	str	r3, [r4, r2]
 8006586:	e7dc      	b.n	8006542 <_malloc_r+0x86>
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	e7ef      	b.n	800656c <_malloc_r+0xb0>
 800658c:	0023      	movs	r3, r4
 800658e:	6864      	ldr	r4, [r4, #4]
 8006590:	e7a6      	b.n	80064e0 <_malloc_r+0x24>
 8006592:	9c00      	ldr	r4, [sp, #0]
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	e7ad      	b.n	80064f6 <_malloc_r+0x3a>
 800659a:	001a      	movs	r2, r3
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	42a3      	cmp	r3, r4
 80065a0:	d1fb      	bne.n	800659a <_malloc_r+0xde>
 80065a2:	2300      	movs	r3, #0
 80065a4:	e7da      	b.n	800655c <_malloc_r+0xa0>
 80065a6:	230c      	movs	r3, #12
 80065a8:	0028      	movs	r0, r5
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f000 f80e 	bl	80065cc <__malloc_unlock>
 80065b0:	e7c6      	b.n	8006540 <_malloc_r+0x84>
 80065b2:	6007      	str	r7, [r0, #0]
 80065b4:	e7da      	b.n	800656c <_malloc_r+0xb0>
 80065b6:	46c0      	nop			@ (mov r8, r8)
 80065b8:	20000500 	.word	0x20000500

080065bc <__malloc_lock>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4802      	ldr	r0, [pc, #8]	@ (80065c8 <__malloc_lock+0xc>)
 80065c0:	f7ff ff0d 	bl	80063de <__retarget_lock_acquire_recursive>
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	46c0      	nop			@ (mov r8, r8)
 80065c8:	200004f8 	.word	0x200004f8

080065cc <__malloc_unlock>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4802      	ldr	r0, [pc, #8]	@ (80065d8 <__malloc_unlock+0xc>)
 80065d0:	f7ff ff06 	bl	80063e0 <__retarget_lock_release_recursive>
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	200004f8 	.word	0x200004f8

080065dc <__sfputc_r>:
 80065dc:	6893      	ldr	r3, [r2, #8]
 80065de:	b510      	push	{r4, lr}
 80065e0:	3b01      	subs	r3, #1
 80065e2:	6093      	str	r3, [r2, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da04      	bge.n	80065f2 <__sfputc_r+0x16>
 80065e8:	6994      	ldr	r4, [r2, #24]
 80065ea:	42a3      	cmp	r3, r4
 80065ec:	db07      	blt.n	80065fe <__sfputc_r+0x22>
 80065ee:	290a      	cmp	r1, #10
 80065f0:	d005      	beq.n	80065fe <__sfputc_r+0x22>
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	1c58      	adds	r0, r3, #1
 80065f6:	6010      	str	r0, [r2, #0]
 80065f8:	7019      	strb	r1, [r3, #0]
 80065fa:	0008      	movs	r0, r1
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	f7ff fdcd 	bl	800619c <__swbuf_r>
 8006602:	0001      	movs	r1, r0
 8006604:	e7f9      	b.n	80065fa <__sfputc_r+0x1e>

08006606 <__sfputs_r>:
 8006606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006608:	0006      	movs	r6, r0
 800660a:	000f      	movs	r7, r1
 800660c:	0014      	movs	r4, r2
 800660e:	18d5      	adds	r5, r2, r3
 8006610:	42ac      	cmp	r4, r5
 8006612:	d101      	bne.n	8006618 <__sfputs_r+0x12>
 8006614:	2000      	movs	r0, #0
 8006616:	e007      	b.n	8006628 <__sfputs_r+0x22>
 8006618:	7821      	ldrb	r1, [r4, #0]
 800661a:	003a      	movs	r2, r7
 800661c:	0030      	movs	r0, r6
 800661e:	f7ff ffdd 	bl	80065dc <__sfputc_r>
 8006622:	3401      	adds	r4, #1
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d1f3      	bne.n	8006610 <__sfputs_r+0xa>
 8006628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800662c <_vfiprintf_r>:
 800662c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662e:	b0a1      	sub	sp, #132	@ 0x84
 8006630:	000f      	movs	r7, r1
 8006632:	0015      	movs	r5, r2
 8006634:	001e      	movs	r6, r3
 8006636:	9003      	str	r0, [sp, #12]
 8006638:	2800      	cmp	r0, #0
 800663a:	d004      	beq.n	8006646 <_vfiprintf_r+0x1a>
 800663c:	6a03      	ldr	r3, [r0, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <_vfiprintf_r+0x1a>
 8006642:	f7ff fcbb 	bl	8005fbc <__sinit>
 8006646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006648:	07db      	lsls	r3, r3, #31
 800664a:	d405      	bmi.n	8006658 <_vfiprintf_r+0x2c>
 800664c:	89bb      	ldrh	r3, [r7, #12]
 800664e:	059b      	lsls	r3, r3, #22
 8006650:	d402      	bmi.n	8006658 <_vfiprintf_r+0x2c>
 8006652:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006654:	f7ff fec3 	bl	80063de <__retarget_lock_acquire_recursive>
 8006658:	89bb      	ldrh	r3, [r7, #12]
 800665a:	071b      	lsls	r3, r3, #28
 800665c:	d502      	bpl.n	8006664 <_vfiprintf_r+0x38>
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d113      	bne.n	800668c <_vfiprintf_r+0x60>
 8006664:	0039      	movs	r1, r7
 8006666:	9803      	ldr	r0, [sp, #12]
 8006668:	f7ff fdda 	bl	8006220 <__swsetup_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	d00d      	beq.n	800668c <_vfiprintf_r+0x60>
 8006670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006672:	07db      	lsls	r3, r3, #31
 8006674:	d503      	bpl.n	800667e <_vfiprintf_r+0x52>
 8006676:	2001      	movs	r0, #1
 8006678:	4240      	negs	r0, r0
 800667a:	b021      	add	sp, #132	@ 0x84
 800667c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667e:	89bb      	ldrh	r3, [r7, #12]
 8006680:	059b      	lsls	r3, r3, #22
 8006682:	d4f8      	bmi.n	8006676 <_vfiprintf_r+0x4a>
 8006684:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006686:	f7ff feab 	bl	80063e0 <__retarget_lock_release_recursive>
 800668a:	e7f4      	b.n	8006676 <_vfiprintf_r+0x4a>
 800668c:	2300      	movs	r3, #0
 800668e:	ac08      	add	r4, sp, #32
 8006690:	6163      	str	r3, [r4, #20]
 8006692:	3320      	adds	r3, #32
 8006694:	7663      	strb	r3, [r4, #25]
 8006696:	3310      	adds	r3, #16
 8006698:	76a3      	strb	r3, [r4, #26]
 800669a:	9607      	str	r6, [sp, #28]
 800669c:	002e      	movs	r6, r5
 800669e:	7833      	ldrb	r3, [r6, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <_vfiprintf_r+0x7c>
 80066a4:	2b25      	cmp	r3, #37	@ 0x25
 80066a6:	d148      	bne.n	800673a <_vfiprintf_r+0x10e>
 80066a8:	1b73      	subs	r3, r6, r5
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	42ae      	cmp	r6, r5
 80066ae:	d00b      	beq.n	80066c8 <_vfiprintf_r+0x9c>
 80066b0:	002a      	movs	r2, r5
 80066b2:	0039      	movs	r1, r7
 80066b4:	9803      	ldr	r0, [sp, #12]
 80066b6:	f7ff ffa6 	bl	8006606 <__sfputs_r>
 80066ba:	3001      	adds	r0, #1
 80066bc:	d100      	bne.n	80066c0 <_vfiprintf_r+0x94>
 80066be:	e0ae      	b.n	800681e <_vfiprintf_r+0x1f2>
 80066c0:	6963      	ldr	r3, [r4, #20]
 80066c2:	9a05      	ldr	r2, [sp, #20]
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	6163      	str	r3, [r4, #20]
 80066c8:	7833      	ldrb	r3, [r6, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d100      	bne.n	80066d0 <_vfiprintf_r+0xa4>
 80066ce:	e0a6      	b.n	800681e <_vfiprintf_r+0x1f2>
 80066d0:	2201      	movs	r2, #1
 80066d2:	2300      	movs	r3, #0
 80066d4:	4252      	negs	r2, r2
 80066d6:	6062      	str	r2, [r4, #4]
 80066d8:	a904      	add	r1, sp, #16
 80066da:	3254      	adds	r2, #84	@ 0x54
 80066dc:	1852      	adds	r2, r2, r1
 80066de:	1c75      	adds	r5, r6, #1
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	60e3      	str	r3, [r4, #12]
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	7013      	strb	r3, [r2, #0]
 80066e8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80066ea:	4b59      	ldr	r3, [pc, #356]	@ (8006850 <_vfiprintf_r+0x224>)
 80066ec:	2205      	movs	r2, #5
 80066ee:	0018      	movs	r0, r3
 80066f0:	7829      	ldrb	r1, [r5, #0]
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	f000 fb88 	bl	8006e08 <memchr>
 80066f8:	1c6e      	adds	r6, r5, #1
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d11f      	bne.n	800673e <_vfiprintf_r+0x112>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	06d3      	lsls	r3, r2, #27
 8006702:	d504      	bpl.n	800670e <_vfiprintf_r+0xe2>
 8006704:	2353      	movs	r3, #83	@ 0x53
 8006706:	a904      	add	r1, sp, #16
 8006708:	185b      	adds	r3, r3, r1
 800670a:	2120      	movs	r1, #32
 800670c:	7019      	strb	r1, [r3, #0]
 800670e:	0713      	lsls	r3, r2, #28
 8006710:	d504      	bpl.n	800671c <_vfiprintf_r+0xf0>
 8006712:	2353      	movs	r3, #83	@ 0x53
 8006714:	a904      	add	r1, sp, #16
 8006716:	185b      	adds	r3, r3, r1
 8006718:	212b      	movs	r1, #43	@ 0x2b
 800671a:	7019      	strb	r1, [r3, #0]
 800671c:	782b      	ldrb	r3, [r5, #0]
 800671e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006720:	d016      	beq.n	8006750 <_vfiprintf_r+0x124>
 8006722:	002e      	movs	r6, r5
 8006724:	2100      	movs	r1, #0
 8006726:	200a      	movs	r0, #10
 8006728:	68e3      	ldr	r3, [r4, #12]
 800672a:	7832      	ldrb	r2, [r6, #0]
 800672c:	1c75      	adds	r5, r6, #1
 800672e:	3a30      	subs	r2, #48	@ 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d950      	bls.n	80067d6 <_vfiprintf_r+0x1aa>
 8006734:	2900      	cmp	r1, #0
 8006736:	d111      	bne.n	800675c <_vfiprintf_r+0x130>
 8006738:	e017      	b.n	800676a <_vfiprintf_r+0x13e>
 800673a:	3601      	adds	r6, #1
 800673c:	e7af      	b.n	800669e <_vfiprintf_r+0x72>
 800673e:	9b05      	ldr	r3, [sp, #20]
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	1ac0      	subs	r0, r0, r3
 8006744:	2301      	movs	r3, #1
 8006746:	4083      	lsls	r3, r0
 8006748:	4313      	orrs	r3, r2
 800674a:	0035      	movs	r5, r6
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	e7cc      	b.n	80066ea <_vfiprintf_r+0xbe>
 8006750:	9b07      	ldr	r3, [sp, #28]
 8006752:	1d19      	adds	r1, r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	9107      	str	r1, [sp, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db01      	blt.n	8006760 <_vfiprintf_r+0x134>
 800675c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675e:	e004      	b.n	800676a <_vfiprintf_r+0x13e>
 8006760:	425b      	negs	r3, r3
 8006762:	60e3      	str	r3, [r4, #12]
 8006764:	2302      	movs	r3, #2
 8006766:	4313      	orrs	r3, r2
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	7833      	ldrb	r3, [r6, #0]
 800676c:	2b2e      	cmp	r3, #46	@ 0x2e
 800676e:	d10c      	bne.n	800678a <_vfiprintf_r+0x15e>
 8006770:	7873      	ldrb	r3, [r6, #1]
 8006772:	2b2a      	cmp	r3, #42	@ 0x2a
 8006774:	d134      	bne.n	80067e0 <_vfiprintf_r+0x1b4>
 8006776:	9b07      	ldr	r3, [sp, #28]
 8006778:	3602      	adds	r6, #2
 800677a:	1d1a      	adds	r2, r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	9207      	str	r2, [sp, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	da01      	bge.n	8006788 <_vfiprintf_r+0x15c>
 8006784:	2301      	movs	r3, #1
 8006786:	425b      	negs	r3, r3
 8006788:	9309      	str	r3, [sp, #36]	@ 0x24
 800678a:	4d32      	ldr	r5, [pc, #200]	@ (8006854 <_vfiprintf_r+0x228>)
 800678c:	2203      	movs	r2, #3
 800678e:	0028      	movs	r0, r5
 8006790:	7831      	ldrb	r1, [r6, #0]
 8006792:	f000 fb39 	bl	8006e08 <memchr>
 8006796:	2800      	cmp	r0, #0
 8006798:	d006      	beq.n	80067a8 <_vfiprintf_r+0x17c>
 800679a:	2340      	movs	r3, #64	@ 0x40
 800679c:	1b40      	subs	r0, r0, r5
 800679e:	4083      	lsls	r3, r0
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	3601      	adds	r6, #1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	7831      	ldrb	r1, [r6, #0]
 80067aa:	2206      	movs	r2, #6
 80067ac:	482a      	ldr	r0, [pc, #168]	@ (8006858 <_vfiprintf_r+0x22c>)
 80067ae:	1c75      	adds	r5, r6, #1
 80067b0:	7621      	strb	r1, [r4, #24]
 80067b2:	f000 fb29 	bl	8006e08 <memchr>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d040      	beq.n	800683c <_vfiprintf_r+0x210>
 80067ba:	4b28      	ldr	r3, [pc, #160]	@ (800685c <_vfiprintf_r+0x230>)
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d122      	bne.n	8006806 <_vfiprintf_r+0x1da>
 80067c0:	2207      	movs	r2, #7
 80067c2:	9b07      	ldr	r3, [sp, #28]
 80067c4:	3307      	adds	r3, #7
 80067c6:	4393      	bics	r3, r2
 80067c8:	3308      	adds	r3, #8
 80067ca:	9307      	str	r3, [sp, #28]
 80067cc:	6963      	ldr	r3, [r4, #20]
 80067ce:	9a04      	ldr	r2, [sp, #16]
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	6163      	str	r3, [r4, #20]
 80067d4:	e762      	b.n	800669c <_vfiprintf_r+0x70>
 80067d6:	4343      	muls	r3, r0
 80067d8:	002e      	movs	r6, r5
 80067da:	2101      	movs	r1, #1
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	e7a4      	b.n	800672a <_vfiprintf_r+0xfe>
 80067e0:	2300      	movs	r3, #0
 80067e2:	200a      	movs	r0, #10
 80067e4:	0019      	movs	r1, r3
 80067e6:	3601      	adds	r6, #1
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	7832      	ldrb	r2, [r6, #0]
 80067ec:	1c75      	adds	r5, r6, #1
 80067ee:	3a30      	subs	r2, #48	@ 0x30
 80067f0:	2a09      	cmp	r2, #9
 80067f2:	d903      	bls.n	80067fc <_vfiprintf_r+0x1d0>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0c8      	beq.n	800678a <_vfiprintf_r+0x15e>
 80067f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80067fa:	e7c6      	b.n	800678a <_vfiprintf_r+0x15e>
 80067fc:	4341      	muls	r1, r0
 80067fe:	002e      	movs	r6, r5
 8006800:	2301      	movs	r3, #1
 8006802:	1889      	adds	r1, r1, r2
 8006804:	e7f1      	b.n	80067ea <_vfiprintf_r+0x1be>
 8006806:	aa07      	add	r2, sp, #28
 8006808:	9200      	str	r2, [sp, #0]
 800680a:	0021      	movs	r1, r4
 800680c:	003a      	movs	r2, r7
 800680e:	4b14      	ldr	r3, [pc, #80]	@ (8006860 <_vfiprintf_r+0x234>)
 8006810:	9803      	ldr	r0, [sp, #12]
 8006812:	e000      	b.n	8006816 <_vfiprintf_r+0x1ea>
 8006814:	bf00      	nop
 8006816:	9004      	str	r0, [sp, #16]
 8006818:	9b04      	ldr	r3, [sp, #16]
 800681a:	3301      	adds	r3, #1
 800681c:	d1d6      	bne.n	80067cc <_vfiprintf_r+0x1a0>
 800681e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006820:	07db      	lsls	r3, r3, #31
 8006822:	d405      	bmi.n	8006830 <_vfiprintf_r+0x204>
 8006824:	89bb      	ldrh	r3, [r7, #12]
 8006826:	059b      	lsls	r3, r3, #22
 8006828:	d402      	bmi.n	8006830 <_vfiprintf_r+0x204>
 800682a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800682c:	f7ff fdd8 	bl	80063e0 <__retarget_lock_release_recursive>
 8006830:	89bb      	ldrh	r3, [r7, #12]
 8006832:	065b      	lsls	r3, r3, #25
 8006834:	d500      	bpl.n	8006838 <_vfiprintf_r+0x20c>
 8006836:	e71e      	b.n	8006676 <_vfiprintf_r+0x4a>
 8006838:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800683a:	e71e      	b.n	800667a <_vfiprintf_r+0x4e>
 800683c:	aa07      	add	r2, sp, #28
 800683e:	9200      	str	r2, [sp, #0]
 8006840:	0021      	movs	r1, r4
 8006842:	003a      	movs	r2, r7
 8006844:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <_vfiprintf_r+0x234>)
 8006846:	9803      	ldr	r0, [sp, #12]
 8006848:	f000 f87c 	bl	8006944 <_printf_i>
 800684c:	e7e3      	b.n	8006816 <_vfiprintf_r+0x1ea>
 800684e:	46c0      	nop			@ (mov r8, r8)
 8006850:	08006f20 	.word	0x08006f20
 8006854:	08006f26 	.word	0x08006f26
 8006858:	08006f2a 	.word	0x08006f2a
 800685c:	00000000 	.word	0x00000000
 8006860:	08006607 	.word	0x08006607

08006864 <_printf_common>:
 8006864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006866:	0016      	movs	r6, r2
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	688a      	ldr	r2, [r1, #8]
 800686c:	690b      	ldr	r3, [r1, #16]
 800686e:	000c      	movs	r4, r1
 8006870:	9000      	str	r0, [sp, #0]
 8006872:	4293      	cmp	r3, r2
 8006874:	da00      	bge.n	8006878 <_printf_common+0x14>
 8006876:	0013      	movs	r3, r2
 8006878:	0022      	movs	r2, r4
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	3243      	adds	r2, #67	@ 0x43
 800687e:	7812      	ldrb	r2, [r2, #0]
 8006880:	2a00      	cmp	r2, #0
 8006882:	d001      	beq.n	8006888 <_printf_common+0x24>
 8006884:	3301      	adds	r3, #1
 8006886:	6033      	str	r3, [r6, #0]
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	069b      	lsls	r3, r3, #26
 800688c:	d502      	bpl.n	8006894 <_printf_common+0x30>
 800688e:	6833      	ldr	r3, [r6, #0]
 8006890:	3302      	adds	r3, #2
 8006892:	6033      	str	r3, [r6, #0]
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	2306      	movs	r3, #6
 8006898:	0015      	movs	r5, r2
 800689a:	401d      	ands	r5, r3
 800689c:	421a      	tst	r2, r3
 800689e:	d027      	beq.n	80068f0 <_printf_common+0x8c>
 80068a0:	0023      	movs	r3, r4
 80068a2:	3343      	adds	r3, #67	@ 0x43
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	1e5a      	subs	r2, r3, #1
 80068a8:	4193      	sbcs	r3, r2
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	0692      	lsls	r2, r2, #26
 80068ae:	d430      	bmi.n	8006912 <_printf_common+0xae>
 80068b0:	0022      	movs	r2, r4
 80068b2:	9901      	ldr	r1, [sp, #4]
 80068b4:	9800      	ldr	r0, [sp, #0]
 80068b6:	9d08      	ldr	r5, [sp, #32]
 80068b8:	3243      	adds	r2, #67	@ 0x43
 80068ba:	47a8      	blx	r5
 80068bc:	3001      	adds	r0, #1
 80068be:	d025      	beq.n	800690c <_printf_common+0xa8>
 80068c0:	2206      	movs	r2, #6
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	2500      	movs	r5, #0
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d105      	bne.n	80068d8 <_printf_common+0x74>
 80068cc:	6833      	ldr	r3, [r6, #0]
 80068ce:	68e5      	ldr	r5, [r4, #12]
 80068d0:	1aed      	subs	r5, r5, r3
 80068d2:	43eb      	mvns	r3, r5
 80068d4:	17db      	asrs	r3, r3, #31
 80068d6:	401d      	ands	r5, r3
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	6922      	ldr	r2, [r4, #16]
 80068dc:	4293      	cmp	r3, r2
 80068de:	dd01      	ble.n	80068e4 <_printf_common+0x80>
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	18ed      	adds	r5, r5, r3
 80068e4:	2600      	movs	r6, #0
 80068e6:	42b5      	cmp	r5, r6
 80068e8:	d120      	bne.n	800692c <_printf_common+0xc8>
 80068ea:	2000      	movs	r0, #0
 80068ec:	e010      	b.n	8006910 <_printf_common+0xac>
 80068ee:	3501      	adds	r5, #1
 80068f0:	68e3      	ldr	r3, [r4, #12]
 80068f2:	6832      	ldr	r2, [r6, #0]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	42ab      	cmp	r3, r5
 80068f8:	ddd2      	ble.n	80068a0 <_printf_common+0x3c>
 80068fa:	0022      	movs	r2, r4
 80068fc:	2301      	movs	r3, #1
 80068fe:	9901      	ldr	r1, [sp, #4]
 8006900:	9800      	ldr	r0, [sp, #0]
 8006902:	9f08      	ldr	r7, [sp, #32]
 8006904:	3219      	adds	r2, #25
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	d1f0      	bne.n	80068ee <_printf_common+0x8a>
 800690c:	2001      	movs	r0, #1
 800690e:	4240      	negs	r0, r0
 8006910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006912:	2030      	movs	r0, #48	@ 0x30
 8006914:	18e1      	adds	r1, r4, r3
 8006916:	3143      	adds	r1, #67	@ 0x43
 8006918:	7008      	strb	r0, [r1, #0]
 800691a:	0021      	movs	r1, r4
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	3145      	adds	r1, #69	@ 0x45
 8006920:	7809      	ldrb	r1, [r1, #0]
 8006922:	18a2      	adds	r2, r4, r2
 8006924:	3243      	adds	r2, #67	@ 0x43
 8006926:	3302      	adds	r3, #2
 8006928:	7011      	strb	r1, [r2, #0]
 800692a:	e7c1      	b.n	80068b0 <_printf_common+0x4c>
 800692c:	0022      	movs	r2, r4
 800692e:	2301      	movs	r3, #1
 8006930:	9901      	ldr	r1, [sp, #4]
 8006932:	9800      	ldr	r0, [sp, #0]
 8006934:	9f08      	ldr	r7, [sp, #32]
 8006936:	321a      	adds	r2, #26
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	d0e6      	beq.n	800690c <_printf_common+0xa8>
 800693e:	3601      	adds	r6, #1
 8006940:	e7d1      	b.n	80068e6 <_printf_common+0x82>
	...

08006944 <_printf_i>:
 8006944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006946:	b08b      	sub	sp, #44	@ 0x2c
 8006948:	9206      	str	r2, [sp, #24]
 800694a:	000a      	movs	r2, r1
 800694c:	3243      	adds	r2, #67	@ 0x43
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	9005      	str	r0, [sp, #20]
 8006952:	9203      	str	r2, [sp, #12]
 8006954:	7e0a      	ldrb	r2, [r1, #24]
 8006956:	000c      	movs	r4, r1
 8006958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800695a:	2a78      	cmp	r2, #120	@ 0x78
 800695c:	d809      	bhi.n	8006972 <_printf_i+0x2e>
 800695e:	2a62      	cmp	r2, #98	@ 0x62
 8006960:	d80b      	bhi.n	800697a <_printf_i+0x36>
 8006962:	2a00      	cmp	r2, #0
 8006964:	d100      	bne.n	8006968 <_printf_i+0x24>
 8006966:	e0bc      	b.n	8006ae2 <_printf_i+0x19e>
 8006968:	497b      	ldr	r1, [pc, #492]	@ (8006b58 <_printf_i+0x214>)
 800696a:	9104      	str	r1, [sp, #16]
 800696c:	2a58      	cmp	r2, #88	@ 0x58
 800696e:	d100      	bne.n	8006972 <_printf_i+0x2e>
 8006970:	e090      	b.n	8006a94 <_printf_i+0x150>
 8006972:	0025      	movs	r5, r4
 8006974:	3542      	adds	r5, #66	@ 0x42
 8006976:	702a      	strb	r2, [r5, #0]
 8006978:	e022      	b.n	80069c0 <_printf_i+0x7c>
 800697a:	0010      	movs	r0, r2
 800697c:	3863      	subs	r0, #99	@ 0x63
 800697e:	2815      	cmp	r0, #21
 8006980:	d8f7      	bhi.n	8006972 <_printf_i+0x2e>
 8006982:	f7f9 fbc1 	bl	8000108 <__gnu_thumb1_case_shi>
 8006986:	0016      	.short	0x0016
 8006988:	fff6001f 	.word	0xfff6001f
 800698c:	fff6fff6 	.word	0xfff6fff6
 8006990:	001ffff6 	.word	0x001ffff6
 8006994:	fff6fff6 	.word	0xfff6fff6
 8006998:	fff6fff6 	.word	0xfff6fff6
 800699c:	003600a1 	.word	0x003600a1
 80069a0:	fff60080 	.word	0xfff60080
 80069a4:	00b2fff6 	.word	0x00b2fff6
 80069a8:	0036fff6 	.word	0x0036fff6
 80069ac:	fff6fff6 	.word	0xfff6fff6
 80069b0:	0084      	.short	0x0084
 80069b2:	0025      	movs	r5, r4
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	3542      	adds	r5, #66	@ 0x42
 80069b8:	1d11      	adds	r1, r2, #4
 80069ba:	6019      	str	r1, [r3, #0]
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	702b      	strb	r3, [r5, #0]
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0a0      	b.n	8006b06 <_printf_i+0x1c2>
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	6809      	ldr	r1, [r1, #0]
 80069c8:	1d02      	adds	r2, r0, #4
 80069ca:	060d      	lsls	r5, r1, #24
 80069cc:	d50b      	bpl.n	80069e6 <_printf_i+0xa2>
 80069ce:	6806      	ldr	r6, [r0, #0]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	da03      	bge.n	80069de <_printf_i+0x9a>
 80069d6:	232d      	movs	r3, #45	@ 0x2d
 80069d8:	9a03      	ldr	r2, [sp, #12]
 80069da:	4276      	negs	r6, r6
 80069dc:	7013      	strb	r3, [r2, #0]
 80069de:	4b5e      	ldr	r3, [pc, #376]	@ (8006b58 <_printf_i+0x214>)
 80069e0:	270a      	movs	r7, #10
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	e018      	b.n	8006a18 <_printf_i+0xd4>
 80069e6:	6806      	ldr	r6, [r0, #0]
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	0649      	lsls	r1, r1, #25
 80069ec:	d5f1      	bpl.n	80069d2 <_printf_i+0x8e>
 80069ee:	b236      	sxth	r6, r6
 80069f0:	e7ef      	b.n	80069d2 <_printf_i+0x8e>
 80069f2:	6808      	ldr	r0, [r1, #0]
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	c940      	ldmia	r1!, {r6}
 80069f8:	0605      	lsls	r5, r0, #24
 80069fa:	d402      	bmi.n	8006a02 <_printf_i+0xbe>
 80069fc:	0640      	lsls	r0, r0, #25
 80069fe:	d500      	bpl.n	8006a02 <_printf_i+0xbe>
 8006a00:	b2b6      	uxth	r6, r6
 8006a02:	6019      	str	r1, [r3, #0]
 8006a04:	4b54      	ldr	r3, [pc, #336]	@ (8006b58 <_printf_i+0x214>)
 8006a06:	270a      	movs	r7, #10
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	2a6f      	cmp	r2, #111	@ 0x6f
 8006a0c:	d100      	bne.n	8006a10 <_printf_i+0xcc>
 8006a0e:	3f02      	subs	r7, #2
 8006a10:	0023      	movs	r3, r4
 8006a12:	2200      	movs	r2, #0
 8006a14:	3343      	adds	r3, #67	@ 0x43
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	60a3      	str	r3, [r4, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	db03      	blt.n	8006a28 <_printf_i+0xe4>
 8006a20:	2104      	movs	r1, #4
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	438a      	bics	r2, r1
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	2e00      	cmp	r6, #0
 8006a2a:	d102      	bne.n	8006a32 <_printf_i+0xee>
 8006a2c:	9d03      	ldr	r5, [sp, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <_printf_i+0x108>
 8006a32:	9d03      	ldr	r5, [sp, #12]
 8006a34:	0030      	movs	r0, r6
 8006a36:	0039      	movs	r1, r7
 8006a38:	f7f9 fbf6 	bl	8000228 <__aeabi_uidivmod>
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	3d01      	subs	r5, #1
 8006a40:	5c5b      	ldrb	r3, [r3, r1]
 8006a42:	702b      	strb	r3, [r5, #0]
 8006a44:	0033      	movs	r3, r6
 8006a46:	0006      	movs	r6, r0
 8006a48:	429f      	cmp	r7, r3
 8006a4a:	d9f3      	bls.n	8006a34 <_printf_i+0xf0>
 8006a4c:	2f08      	cmp	r7, #8
 8006a4e:	d109      	bne.n	8006a64 <_printf_i+0x120>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	07db      	lsls	r3, r3, #31
 8006a54:	d506      	bpl.n	8006a64 <_printf_i+0x120>
 8006a56:	6862      	ldr	r2, [r4, #4]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	dc02      	bgt.n	8006a64 <_printf_i+0x120>
 8006a5e:	2330      	movs	r3, #48	@ 0x30
 8006a60:	3d01      	subs	r5, #1
 8006a62:	702b      	strb	r3, [r5, #0]
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	1b5b      	subs	r3, r3, r5
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	9b07      	ldr	r3, [sp, #28]
 8006a6c:	0021      	movs	r1, r4
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	9805      	ldr	r0, [sp, #20]
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	aa09      	add	r2, sp, #36	@ 0x24
 8006a76:	f7ff fef5 	bl	8006864 <_printf_common>
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d148      	bne.n	8006b10 <_printf_i+0x1cc>
 8006a7e:	2001      	movs	r0, #1
 8006a80:	4240      	negs	r0, r0
 8006a82:	b00b      	add	sp, #44	@ 0x2c
 8006a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a86:	2220      	movs	r2, #32
 8006a88:	6809      	ldr	r1, [r1, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	2278      	movs	r2, #120	@ 0x78
 8006a90:	4932      	ldr	r1, [pc, #200]	@ (8006b5c <_printf_i+0x218>)
 8006a92:	9104      	str	r1, [sp, #16]
 8006a94:	0021      	movs	r1, r4
 8006a96:	3145      	adds	r1, #69	@ 0x45
 8006a98:	700a      	strb	r2, [r1, #0]
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	c940      	ldmia	r1!, {r6}
 8006aa0:	0610      	lsls	r0, r2, #24
 8006aa2:	d402      	bmi.n	8006aaa <_printf_i+0x166>
 8006aa4:	0650      	lsls	r0, r2, #25
 8006aa6:	d500      	bpl.n	8006aaa <_printf_i+0x166>
 8006aa8:	b2b6      	uxth	r6, r6
 8006aaa:	6019      	str	r1, [r3, #0]
 8006aac:	07d3      	lsls	r3, r2, #31
 8006aae:	d502      	bpl.n	8006ab6 <_printf_i+0x172>
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d001      	beq.n	8006abe <_printf_i+0x17a>
 8006aba:	2710      	movs	r7, #16
 8006abc:	e7a8      	b.n	8006a10 <_printf_i+0xcc>
 8006abe:	2220      	movs	r2, #32
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	4393      	bics	r3, r2
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	e7f8      	b.n	8006aba <_printf_i+0x176>
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	680d      	ldr	r5, [r1, #0]
 8006acc:	1d10      	adds	r0, r2, #4
 8006ace:	6949      	ldr	r1, [r1, #20]
 8006ad0:	6018      	str	r0, [r3, #0]
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	062e      	lsls	r6, r5, #24
 8006ad6:	d501      	bpl.n	8006adc <_printf_i+0x198>
 8006ad8:	6019      	str	r1, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <_printf_i+0x19e>
 8006adc:	066d      	lsls	r5, r5, #25
 8006ade:	d5fb      	bpl.n	8006ad8 <_printf_i+0x194>
 8006ae0:	8019      	strh	r1, [r3, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9d03      	ldr	r5, [sp, #12]
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	e7bf      	b.n	8006a6a <_printf_i+0x126>
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	1d11      	adds	r1, r2, #4
 8006aee:	6019      	str	r1, [r3, #0]
 8006af0:	6815      	ldr	r5, [r2, #0]
 8006af2:	2100      	movs	r1, #0
 8006af4:	0028      	movs	r0, r5
 8006af6:	6862      	ldr	r2, [r4, #4]
 8006af8:	f000 f986 	bl	8006e08 <memchr>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d001      	beq.n	8006b04 <_printf_i+0x1c0>
 8006b00:	1b40      	subs	r0, r0, r5
 8006b02:	6060      	str	r0, [r4, #4]
 8006b04:	6863      	ldr	r3, [r4, #4]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9a03      	ldr	r2, [sp, #12]
 8006b0c:	7013      	strb	r3, [r2, #0]
 8006b0e:	e7ac      	b.n	8006a6a <_printf_i+0x126>
 8006b10:	002a      	movs	r2, r5
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	9906      	ldr	r1, [sp, #24]
 8006b16:	9805      	ldr	r0, [sp, #20]
 8006b18:	9d07      	ldr	r5, [sp, #28]
 8006b1a:	47a8      	blx	r5
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d0ae      	beq.n	8006a7e <_printf_i+0x13a>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	079b      	lsls	r3, r3, #30
 8006b24:	d415      	bmi.n	8006b52 <_printf_i+0x20e>
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	68e0      	ldr	r0, [r4, #12]
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	daa9      	bge.n	8006a82 <_printf_i+0x13e>
 8006b2e:	0018      	movs	r0, r3
 8006b30:	e7a7      	b.n	8006a82 <_printf_i+0x13e>
 8006b32:	0022      	movs	r2, r4
 8006b34:	2301      	movs	r3, #1
 8006b36:	9906      	ldr	r1, [sp, #24]
 8006b38:	9805      	ldr	r0, [sp, #20]
 8006b3a:	9e07      	ldr	r6, [sp, #28]
 8006b3c:	3219      	adds	r2, #25
 8006b3e:	47b0      	blx	r6
 8006b40:	3001      	adds	r0, #1
 8006b42:	d09c      	beq.n	8006a7e <_printf_i+0x13a>
 8006b44:	3501      	adds	r5, #1
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dcf0      	bgt.n	8006b32 <_printf_i+0x1ee>
 8006b50:	e7e9      	b.n	8006b26 <_printf_i+0x1e2>
 8006b52:	2500      	movs	r5, #0
 8006b54:	e7f7      	b.n	8006b46 <_printf_i+0x202>
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	08006f31 	.word	0x08006f31
 8006b5c:	08006f42 	.word	0x08006f42

08006b60 <__sflush_r>:
 8006b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b62:	220c      	movs	r2, #12
 8006b64:	5e8b      	ldrsh	r3, [r1, r2]
 8006b66:	0005      	movs	r5, r0
 8006b68:	000c      	movs	r4, r1
 8006b6a:	071a      	lsls	r2, r3, #28
 8006b6c:	d456      	bmi.n	8006c1c <__sflush_r+0xbc>
 8006b6e:	684a      	ldr	r2, [r1, #4]
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	dc02      	bgt.n	8006b7a <__sflush_r+0x1a>
 8006b74:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	dd4e      	ble.n	8006c18 <__sflush_r+0xb8>
 8006b7a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006b7c:	2f00      	cmp	r7, #0
 8006b7e:	d04b      	beq.n	8006c18 <__sflush_r+0xb8>
 8006b80:	2200      	movs	r2, #0
 8006b82:	2080      	movs	r0, #128	@ 0x80
 8006b84:	682e      	ldr	r6, [r5, #0]
 8006b86:	602a      	str	r2, [r5, #0]
 8006b88:	001a      	movs	r2, r3
 8006b8a:	0140      	lsls	r0, r0, #5
 8006b8c:	6a21      	ldr	r1, [r4, #32]
 8006b8e:	4002      	ands	r2, r0
 8006b90:	4203      	tst	r3, r0
 8006b92:	d033      	beq.n	8006bfc <__sflush_r+0x9c>
 8006b94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	075b      	lsls	r3, r3, #29
 8006b9a:	d506      	bpl.n	8006baa <__sflush_r+0x4a>
 8006b9c:	6863      	ldr	r3, [r4, #4]
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <__sflush_r+0x4a>
 8006ba6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ba8:	1ad2      	subs	r2, r2, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	0028      	movs	r0, r5
 8006bae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006bb0:	6a21      	ldr	r1, [r4, #32]
 8006bb2:	47b8      	blx	r7
 8006bb4:	89a2      	ldrh	r2, [r4, #12]
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	d106      	bne.n	8006bc8 <__sflush_r+0x68>
 8006bba:	6829      	ldr	r1, [r5, #0]
 8006bbc:	291d      	cmp	r1, #29
 8006bbe:	d846      	bhi.n	8006c4e <__sflush_r+0xee>
 8006bc0:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <__sflush_r+0x108>)
 8006bc2:	410b      	asrs	r3, r1
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d442      	bmi.n	8006c4e <__sflush_r+0xee>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	04d2      	lsls	r2, r2, #19
 8006bd2:	d505      	bpl.n	8006be0 <__sflush_r+0x80>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <__sflush_r+0x7e>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d100      	bne.n	8006be0 <__sflush_r+0x80>
 8006bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8006be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006be2:	602e      	str	r6, [r5, #0]
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d017      	beq.n	8006c18 <__sflush_r+0xb8>
 8006be8:	0023      	movs	r3, r4
 8006bea:	3344      	adds	r3, #68	@ 0x44
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d002      	beq.n	8006bf6 <__sflush_r+0x96>
 8006bf0:	0028      	movs	r0, r5
 8006bf2:	f7ff fbf7 	bl	80063e4 <_free_r>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bfa:	e00d      	b.n	8006c18 <__sflush_r+0xb8>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	0028      	movs	r0, r5
 8006c00:	47b8      	blx	r7
 8006c02:	0002      	movs	r2, r0
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d1c6      	bne.n	8006b96 <__sflush_r+0x36>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0c3      	beq.n	8006b96 <__sflush_r+0x36>
 8006c0e:	2b1d      	cmp	r3, #29
 8006c10:	d001      	beq.n	8006c16 <__sflush_r+0xb6>
 8006c12:	2b16      	cmp	r3, #22
 8006c14:	d11a      	bne.n	8006c4c <__sflush_r+0xec>
 8006c16:	602e      	str	r6, [r5, #0]
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e01e      	b.n	8006c5a <__sflush_r+0xfa>
 8006c1c:	690e      	ldr	r6, [r1, #16]
 8006c1e:	2e00      	cmp	r6, #0
 8006c20:	d0fa      	beq.n	8006c18 <__sflush_r+0xb8>
 8006c22:	680f      	ldr	r7, [r1, #0]
 8006c24:	600e      	str	r6, [r1, #0]
 8006c26:	1bba      	subs	r2, r7, r6
 8006c28:	9201      	str	r2, [sp, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	079b      	lsls	r3, r3, #30
 8006c2e:	d100      	bne.n	8006c32 <__sflush_r+0xd2>
 8006c30:	694a      	ldr	r2, [r1, #20]
 8006c32:	60a2      	str	r2, [r4, #8]
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	ddee      	ble.n	8006c18 <__sflush_r+0xb8>
 8006c3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c3c:	0032      	movs	r2, r6
 8006c3e:	001f      	movs	r7, r3
 8006c40:	0028      	movs	r0, r5
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	6a21      	ldr	r1, [r4, #32]
 8006c46:	47b8      	blx	r7
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	dc07      	bgt.n	8006c5c <__sflush_r+0xfc>
 8006c4c:	89a2      	ldrh	r2, [r4, #12]
 8006c4e:	2340      	movs	r3, #64	@ 0x40
 8006c50:	2001      	movs	r0, #1
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b21b      	sxth	r3, r3
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	4240      	negs	r0, r0
 8006c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	1836      	adds	r6, r6, r0
 8006c60:	1a1b      	subs	r3, r3, r0
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	e7e6      	b.n	8006c34 <__sflush_r+0xd4>
 8006c66:	46c0      	nop			@ (mov r8, r8)
 8006c68:	dfbffffe 	.word	0xdfbffffe

08006c6c <_fflush_r>:
 8006c6c:	690b      	ldr	r3, [r1, #16]
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	0005      	movs	r5, r0
 8006c72:	000c      	movs	r4, r1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <_fflush_r+0x12>
 8006c78:	2500      	movs	r5, #0
 8006c7a:	0028      	movs	r0, r5
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d004      	beq.n	8006c8c <_fflush_r+0x20>
 8006c82:	6a03      	ldr	r3, [r0, #32]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <_fflush_r+0x20>
 8006c88:	f7ff f998 	bl	8005fbc <__sinit>
 8006c8c:	220c      	movs	r2, #12
 8006c8e:	5ea3      	ldrsh	r3, [r4, r2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f1      	beq.n	8006c78 <_fflush_r+0xc>
 8006c94:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c96:	07d2      	lsls	r2, r2, #31
 8006c98:	d404      	bmi.n	8006ca4 <_fflush_r+0x38>
 8006c9a:	059b      	lsls	r3, r3, #22
 8006c9c:	d402      	bmi.n	8006ca4 <_fflush_r+0x38>
 8006c9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca0:	f7ff fb9d 	bl	80063de <__retarget_lock_acquire_recursive>
 8006ca4:	0028      	movs	r0, r5
 8006ca6:	0021      	movs	r1, r4
 8006ca8:	f7ff ff5a 	bl	8006b60 <__sflush_r>
 8006cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cae:	0005      	movs	r5, r0
 8006cb0:	07db      	lsls	r3, r3, #31
 8006cb2:	d4e2      	bmi.n	8006c7a <_fflush_r+0xe>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	059b      	lsls	r3, r3, #22
 8006cb8:	d4df      	bmi.n	8006c7a <_fflush_r+0xe>
 8006cba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cbc:	f7ff fb90 	bl	80063e0 <__retarget_lock_release_recursive>
 8006cc0:	e7db      	b.n	8006c7a <_fflush_r+0xe>
	...

08006cc4 <__swhatbuf_r>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	000e      	movs	r6, r1
 8006cc8:	001d      	movs	r5, r3
 8006cca:	230e      	movs	r3, #14
 8006ccc:	5ec9      	ldrsh	r1, [r1, r3]
 8006cce:	0014      	movs	r4, r2
 8006cd0:	b096      	sub	sp, #88	@ 0x58
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	da0c      	bge.n	8006cf0 <__swhatbuf_r+0x2c>
 8006cd6:	89b2      	ldrh	r2, [r6, #12]
 8006cd8:	2380      	movs	r3, #128	@ 0x80
 8006cda:	0011      	movs	r1, r2
 8006cdc:	4019      	ands	r1, r3
 8006cde:	421a      	tst	r2, r3
 8006ce0:	d114      	bne.n	8006d0c <__swhatbuf_r+0x48>
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	6029      	str	r1, [r5, #0]
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	b016      	add	sp, #88	@ 0x58
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	466a      	mov	r2, sp
 8006cf2:	f000 f853 	bl	8006d9c <_fstat_r>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dbed      	blt.n	8006cd6 <__swhatbuf_r+0x12>
 8006cfa:	23f0      	movs	r3, #240	@ 0xf0
 8006cfc:	9901      	ldr	r1, [sp, #4]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	4019      	ands	r1, r3
 8006d02:	4b04      	ldr	r3, [pc, #16]	@ (8006d14 <__swhatbuf_r+0x50>)
 8006d04:	18c9      	adds	r1, r1, r3
 8006d06:	424b      	negs	r3, r1
 8006d08:	4159      	adcs	r1, r3
 8006d0a:	e7ea      	b.n	8006ce2 <__swhatbuf_r+0x1e>
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	2340      	movs	r3, #64	@ 0x40
 8006d10:	e7e9      	b.n	8006ce6 <__swhatbuf_r+0x22>
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	ffffe000 	.word	0xffffe000

08006d18 <__smakebuf_r>:
 8006d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1a:	2602      	movs	r6, #2
 8006d1c:	898b      	ldrh	r3, [r1, #12]
 8006d1e:	0005      	movs	r5, r0
 8006d20:	000c      	movs	r4, r1
 8006d22:	b085      	sub	sp, #20
 8006d24:	4233      	tst	r3, r6
 8006d26:	d007      	beq.n	8006d38 <__smakebuf_r+0x20>
 8006d28:	0023      	movs	r3, r4
 8006d2a:	3347      	adds	r3, #71	@ 0x47
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	2301      	movs	r3, #1
 8006d32:	6163      	str	r3, [r4, #20]
 8006d34:	b005      	add	sp, #20
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d38:	ab03      	add	r3, sp, #12
 8006d3a:	aa02      	add	r2, sp, #8
 8006d3c:	f7ff ffc2 	bl	8006cc4 <__swhatbuf_r>
 8006d40:	9f02      	ldr	r7, [sp, #8]
 8006d42:	9001      	str	r0, [sp, #4]
 8006d44:	0039      	movs	r1, r7
 8006d46:	0028      	movs	r0, r5
 8006d48:	f7ff fbb8 	bl	80064bc <_malloc_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d108      	bne.n	8006d62 <__smakebuf_r+0x4a>
 8006d50:	220c      	movs	r2, #12
 8006d52:	5ea3      	ldrsh	r3, [r4, r2]
 8006d54:	059a      	lsls	r2, r3, #22
 8006d56:	d4ed      	bmi.n	8006d34 <__smakebuf_r+0x1c>
 8006d58:	2203      	movs	r2, #3
 8006d5a:	4393      	bics	r3, r2
 8006d5c:	431e      	orrs	r6, r3
 8006d5e:	81a6      	strh	r6, [r4, #12]
 8006d60:	e7e2      	b.n	8006d28 <__smakebuf_r+0x10>
 8006d62:	2380      	movs	r3, #128	@ 0x80
 8006d64:	89a2      	ldrh	r2, [r4, #12]
 8006d66:	6020      	str	r0, [r4, #0]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	6120      	str	r0, [r4, #16]
 8006d70:	6167      	str	r7, [r4, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <__smakebuf_r+0x78>
 8006d76:	0028      	movs	r0, r5
 8006d78:	230e      	movs	r3, #14
 8006d7a:	5ee1      	ldrsh	r1, [r4, r3]
 8006d7c:	f000 f820 	bl	8006dc0 <_isatty_r>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d005      	beq.n	8006d90 <__smakebuf_r+0x78>
 8006d84:	2303      	movs	r3, #3
 8006d86:	89a2      	ldrh	r2, [r4, #12]
 8006d88:	439a      	bics	r2, r3
 8006d8a:	3b02      	subs	r3, #2
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	9a01      	ldr	r2, [sp, #4]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	e7cc      	b.n	8006d34 <__smakebuf_r+0x1c>
	...

08006d9c <_fstat_r>:
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_fstat_r+0x20>)
 8006da2:	0004      	movs	r4, r0
 8006da4:	0008      	movs	r0, r1
 8006da6:	0011      	movs	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f7fa faac 	bl	8001306 <_fstat>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d103      	bne.n	8006dba <_fstat_r+0x1e>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d000      	beq.n	8006dba <_fstat_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	200004f4 	.word	0x200004f4

08006dc0 <_isatty_r>:
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	4d06      	ldr	r5, [pc, #24]	@ (8006de0 <_isatty_r+0x20>)
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	0008      	movs	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fa faa9 	bl	8001322 <_isatty>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_isatty_r+0x1c>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d000      	beq.n	8006ddc <_isatty_r+0x1c>
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	200004f4 	.word	0x200004f4

08006de4 <_sbrk_r>:
 8006de4:	2300      	movs	r3, #0
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	4d06      	ldr	r5, [pc, #24]	@ (8006e04 <_sbrk_r+0x20>)
 8006dea:	0004      	movs	r4, r0
 8006dec:	0008      	movs	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fa faac 	bl	800134c <_sbrk>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d103      	bne.n	8006e00 <_sbrk_r+0x1c>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d000      	beq.n	8006e00 <_sbrk_r+0x1c>
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	200004f4 	.word	0x200004f4

08006e08 <memchr>:
 8006e08:	b2c9      	uxtb	r1, r1
 8006e0a:	1882      	adds	r2, r0, r2
 8006e0c:	4290      	cmp	r0, r2
 8006e0e:	d101      	bne.n	8006e14 <memchr+0xc>
 8006e10:	2000      	movs	r0, #0
 8006e12:	4770      	bx	lr
 8006e14:	7803      	ldrb	r3, [r0, #0]
 8006e16:	428b      	cmp	r3, r1
 8006e18:	d0fb      	beq.n	8006e12 <memchr+0xa>
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	e7f6      	b.n	8006e0c <memchr+0x4>
	...

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
