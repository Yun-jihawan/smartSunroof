
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003260  08003260  00004260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032cc  080032cc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080032cc  080032cc  000042cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032d4  080032d4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032d8  080032d8  000042d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080032dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080032e8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080032e8  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1a6  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc6  00000000  00000000  0000f1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00010ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000663  00000000  00000000  00011700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e1d  00000000  00000000  00011d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1d0  00000000  00000000  00025b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e8c6  00000000  00000000  00031d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000b065c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000b2270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003248 	.word	0x08003248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003248 	.word	0x08003248

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f002 fec8 	bl	80031f0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000462:	4a38      	ldr	r2, [pc, #224]	@ (8000544 <MX_ADC_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b36      	ldr	r3, [pc, #216]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MX_ADC_Init+0xf4>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC_Init+0xf4>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fb6e 	bl	8000bb4 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 fa24 	bl	8000928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fdcd 	bl	8001094 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fa13 	bl	8000928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <MX_ADC_Init+0xfc>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_ADC_Init+0xf4>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fdc0 	bl	8001094 <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fa06 	bl	8000928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800051c:	003b      	movs	r3, r7
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_ADC_Init+0x100>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fdb3 	bl	8001094 <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 f9f9 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	20000028 	.word	0x20000028
 8000544:	40012400 	.word	0x40012400
 8000548:	04000002 	.word	0x04000002
 800054c:	3c008000 	.word	0x3c008000

08000550 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 fe44 	bl	80031f0 <memset>
  if(adcHandle->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <HAL_ADC_MspInit+0xa8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13d      	bne.n	80005ee <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 80005a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 ffdc 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0xb0>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f000 ffcd 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	@ 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40012400 	.word	0x40012400
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000800 	.word	0x50000800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b089      	sub	sp, #36	@ 0x24
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	240c      	movs	r4, #12
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f002 fdeb 	bl	80031f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 800061c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000620:	2104      	movs	r1, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062a:	2204      	movs	r2, #4
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 800064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_GPIO_Init+0xf4>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000662:	23a0      	movs	r3, #160	@ 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f90a 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, GPIO_PIN_RESET);
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4821      	ldr	r0, [pc, #132]	@ (80006fc <MX_GPIO_Init+0xf8>)
 8000676:	2200      	movs	r2, #0
 8000678:	0019      	movs	r1, r3
 800067a:	f001 f903 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	0192      	lsls	r2, r2, #6
 8000684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2284      	movs	r2, #132	@ 0x84
 800068a:	0392      	lsls	r2, r2, #14
 800068c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	193b      	adds	r3, r7, r4
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <MX_GPIO_Init+0xf8>)
 8000698:	0019      	movs	r1, r3
 800069a:	0010      	movs	r0, r2
 800069c:	f000 ff74 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2220      	movs	r2, #32
 80006a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2201      	movs	r2, #1
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b8:	193a      	adds	r2, r7, r4
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 ff61 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPACITY_Pin */
  GPIO_InitStruct.Pin = OPACITY_Pin;
 80006c6:	0021      	movs	r1, r4
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OPACITY_GPIO_Port, &GPIO_InitStruct);
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	4a05      	ldr	r2, [pc, #20]	@ (80006fc <MX_GPIO_Init+0xf8>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f000 ff4d 	bl	8001588 <HAL_GPIO_Init>

}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b009      	add	sp, #36	@ 0x24
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000
 80006fc:	50000800 	.word	0x50000800

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 f9e6 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f834 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f7ff ff7a 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f942 	bl	8000998 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000714:	f7ff fe9a 	bl	800044c <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  in_illum = HW_AdcReadChannel( ADC_CHANNEL_1 );
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <main+0x64>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f896 	bl	800084c <HW_AdcReadChannel>
 8000720:	0003      	movs	r3, r0
 8000722:	001a      	movs	r2, r3
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <main+0x68>)
 8000726:	801a      	strh	r2, [r3, #0]
	  out_illum = HW_AdcReadChannel( ADC_CHANNEL_0 );
 8000728:	2001      	movs	r0, #1
 800072a:	f000 f88f 	bl	800084c <HW_AdcReadChannel>
 800072e:	0003      	movs	r3, r0
 8000730:	001a      	movs	r2, r3
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <main+0x6c>)
 8000734:	801a      	strh	r2, [r3, #0]

	  // 내부 조도가 밖의 조도보다 낮으면 켜짐
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, (in_illum < (out_illum - 50)));
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <main+0x68>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b29b      	uxth	r3, r3
 800073c:	001a      	movs	r2, r3
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <main+0x6c>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	3b32      	subs	r3, #50	@ 0x32
 8000746:	2101      	movs	r1, #1
 8000748:	429a      	cmp	r2, r3
 800074a:	db01      	blt.n	8000750 <main+0x50>
 800074c:	2300      	movs	r3, #0
 800074e:	1c19      	adds	r1, r3, #0
 8000750:	b2cb      	uxtb	r3, r1
 8000752:	001a      	movs	r2, r3
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <main+0x70>)
 800075a:	0019      	movs	r1, r3
 800075c:	f001 f892 	bl	8001884 <HAL_GPIO_WritePin>
	  in_illum = HW_AdcReadChannel( ADC_CHANNEL_1 );
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	e7d9      	b.n	8000718 <main+0x18>
 8000764:	04000002 	.word	0x04000002
 8000768:	20000084 	.word	0x20000084
 800076c:	20000086 	.word	0x20000086
 8000770:	50000800 	.word	0x50000800

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b09f      	sub	sp, #124	@ 0x7c
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	2440      	movs	r4, #64	@ 0x40
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2338      	movs	r3, #56	@ 0x38
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f002 fd33 	bl	80031f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078a:	232c      	movs	r3, #44	@ 0x2c
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2314      	movs	r3, #20
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f002 fd2b 	bl	80031f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	2328      	movs	r3, #40	@ 0x28
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f002 fd24 	bl	80031f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a26      	ldr	r2, [pc, #152]	@ (8000848 <SystemClock_Config+0xd4>)
 80007ae:	401a      	ands	r2, r3
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <SystemClock_Config+0xd0>)
 80007b2:	2180      	movs	r1, #128	@ 0x80
 80007b4:	0109      	lsls	r1, r1, #4
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2210      	movs	r2, #16
 80007c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2201      	movs	r2, #1
 80007c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	22a0      	movs	r2, #160	@ 0xa0
 80007d2:	0212      	lsls	r2, r2, #8
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 f86e 	bl	80018c0 <HAL_RCC_OscConfig>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007e8:	f000 f89e 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	212c      	movs	r1, #44	@ 0x2c
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	220f      	movs	r2, #15
 80007f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2100      	movs	r1, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fc29 	bl	8002068 <HAL_RCC_ClockConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800081a:	f000 f885 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fe1f 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000836:	f000 f877 	bl	8000928 <Error_Handler>
  }
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b01f      	add	sp, #124	@ 0x7c
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40007000 	.word	0x40007000
 8000848:	ffffe7ff 	.word	0xffffe7ff

0800084c <HW_AdcReadChannel>:

/* USER CODE BEGIN 4 */
uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000854:	2316      	movs	r3, #22
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	2200      	movs	r2, #0
 800085a:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <HW_AdcReadChannel+0xc4>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2208      	movs	r2, #8
 8000864:	4013      	ands	r3, r2
 8000866:	2b08      	cmp	r3, #8
 8000868:	d1f9      	bne.n	800085e <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 800086a:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <HW_AdcReadChannel+0xc8>)
 800086c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <HW_AdcReadChannel+0xc8>)
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	0089      	lsls	r1, r1, #2
 8000874:	430a      	orrs	r2, r1
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000878:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fd31 	bl	80012e4 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000882:	240c      	movs	r4, #12
 8000884:	193b      	adds	r3, r7, r4
 8000886:	4a25      	ldr	r2, [pc, #148]	@ (800091c <HW_AdcReadChannel+0xd0>)
 8000888:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <HW_AdcReadChannel+0xd4>)
 800088e:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000890:	193a      	adds	r2, r7, r4
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fbfc 	bl	8001094 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	0152      	lsls	r2, r2, #5
 80008aa:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 80008ac:	187a      	adds	r2, r7, r1
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fbee 	bl	8001094 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 faee 	bl	8000e9c <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 80008c0:	2301      	movs	r3, #1
 80008c2:	425a      	negs	r2, r3
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fb3b 	bl	8000f44 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fbd3 	bl	800107c <HAL_ADC_GetValue>
 80008d6:	0002      	movs	r2, r0
 80008d8:	2016      	movs	r0, #22
 80008da:	183b      	adds	r3, r7, r0
 80008dc:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2102      	movs	r1, #2
 80008ea:	430a      	orrs	r2, r1
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HW_AdcReadChannel+0xcc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2203      	movs	r2, #3
 80008f4:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HW_AdcReadChannel+0xc8>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HW_AdcReadChannel+0xc8>)
 80008fc:	4909      	ldr	r1, [pc, #36]	@ (8000924 <HW_AdcReadChannel+0xd8>)
 80008fe:	400a      	ands	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8000902:	183b      	adds	r3, r7, r0
 8000904:	881b      	ldrh	r3, [r3, #0]
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b007      	add	sp, #28
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	40007000 	.word	0x40007000
 8000914:	40021000 	.word	0x40021000
 8000918:	20000028 	.word	0x20000028
 800091c:	0007ffff 	.word	0x0007ffff
 8000920:	00001001 	.word	0x00001001
 8000924:	fffffdff 	.word	0xfffffdff

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <HAL_MspInit+0x24>)
 800093a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x24>)
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <HAL_MspInit+0x24>)
 8000946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <HAL_MspInit+0x24>)
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	0549      	lsls	r1, r1, #21
 800094e:	430a      	orrs	r2, r1
 8000950:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f8fa 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	22e1      	movs	r2, #225	@ 0xe1
 80009a6:	0252      	lsls	r2, r2, #9
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 fee5 	bl	80027ac <HAL_UART_Init>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f7ff ff9f 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000088 	.word	0x20000088
 80009f4:	40004400 	.word	0x40004400

080009f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b089      	sub	sp, #36	@ 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	240c      	movs	r4, #12
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f002 fbf0 	bl	80031f0 <memset>
  if(uartHandle->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <HAL_UART_MspInit+0x80>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d129      	bne.n	8000a6e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <HAL_UART_MspInit+0x84>)
 8000a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_UART_MspInit+0x84>)
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	0289      	lsls	r1, r1, #10
 8000a24:	430a      	orrs	r2, r1
 8000a26:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0x84>)
 8000a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <HAL_UART_MspInit+0x84>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	430a      	orrs	r2, r1
 8000a32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_UART_MspInit+0x84>)
 8000a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a40:	0021      	movs	r1, r4
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	220c      	movs	r2, #12
 8000a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2203      	movs	r2, #3
 8000a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	187a      	adds	r2, r7, r1
 8000a62:	23a0      	movs	r3, #160	@ 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fd8d 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b009      	add	sp, #36	@ 0x24
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a84:	f7ff ff83 	bl	800098e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fba7 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fe25 	bl	8000700 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
   ldr   r0, =_estack
 8000ab8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080032dc 	.word	0x080032dc
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	20000114 	.word	0x20000114

08000ad0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_COMP_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_Init+0x3c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <HAL_Init+0x3c>)
 8000ae6:	2140      	movs	r1, #64	@ 0x40
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f811 	bl	8000b14 <HAL_InitTick>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d003      	beq.n	8000afe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e001      	b.n	8000b02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afe:	f7ff ff19 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
}
 8000b06:	0018      	movs	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_InitTick+0x5c>)
 8000b1e:	681c      	ldr	r4, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_InitTick+0x60>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	0019      	movs	r1, r3
 8000b26:	23fa      	movs	r3, #250	@ 0xfa
 8000b28:	0098      	lsls	r0, r3, #2
 8000b2a:	f7ff faed 	bl	8000108 <__udivsi3>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	0019      	movs	r1, r3
 8000b32:	0020      	movs	r0, r4
 8000b34:	f7ff fae8 	bl	8000108 <__udivsi3>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 fd17 	bl	800156e <HAL_SYSTICK_Config>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e00f      	b.n	8000b68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d80b      	bhi.n	8000b66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fcf4 	bl	8001544 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_InitTick+0x64>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	001a      	movs	r2, r3
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	18d2      	adds	r2, r2, r3
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000110 	.word	0x20000110

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	@ (8000bb0 <HAL_GetTick+0x10>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	20000110 	.word	0x20000110

08000bb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e159      	b.n	8000e7a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10a      	bne.n	8000be4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2250      	movs	r2, #80	@ 0x50
 8000bd8:	2100      	movs	r1, #0
 8000bda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fcb6 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000be8:	2210      	movs	r2, #16
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b10      	cmp	r3, #16
 8000bee:	d005      	beq.n	8000bfc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000bfa:	d00b      	beq.n	8000c14 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c00:	2210      	movs	r2, #16
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2250      	movs	r2, #80	@ 0x50
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e132      	b.n	8000e7a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c18:	4a9a      	ldr	r2, [pc, #616]	@ (8000e84 <HAL_ADC_Init+0x2d0>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d108      	bne.n	8000c44 <HAL_ADC_Init+0x90>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d101      	bne.n	8000c44 <HAL_ADC_Init+0x90>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <HAL_ADC_Init+0x92>
 8000c44:	2300      	movs	r3, #0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d149      	bne.n	8000cde <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	23c0      	movs	r3, #192	@ 0xc0
 8000c50:	061b      	lsls	r3, r3, #24
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d00b      	beq.n	8000c6e <HAL_ADC_Init+0xba>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d005      	beq.n	8000c6e <HAL_ADC_Init+0xba>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	2380      	movs	r3, #128	@ 0x80
 8000c68:	061b      	lsls	r3, r3, #24
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d111      	bne.n	8000c92 <HAL_ADC_Init+0xde>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	0892      	lsrs	r2, r2, #2
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6919      	ldr	r1, [r3, #16]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	e014      	b.n	8000cbc <HAL_ADC_Init+0x108>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	0892      	lsrs	r2, r2, #2
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	4b79      	ldr	r3, [pc, #484]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b78      	ldr	r3, [pc, #480]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000ca8:	4978      	ldr	r1, [pc, #480]	@ (8000e8c <HAL_ADC_Init+0x2d8>)
 8000caa:	400a      	ands	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	4b76      	ldr	r3, [pc, #472]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4b74      	ldr	r3, [pc, #464]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2118      	movs	r1, #24
 8000cc8:	438a      	bics	r2, r1
 8000cca:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68d9      	ldr	r1, [r3, #12]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000cde:	4b6a      	ldr	r3, [pc, #424]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b69      	ldr	r3, [pc, #420]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000ce4:	496a      	ldr	r1, [pc, #424]	@ (8000e90 <HAL_ADC_Init+0x2dc>)
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000cea:	4b67      	ldr	r3, [pc, #412]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf2:	065a      	lsls	r2, r3, #25
 8000cf4:	4b64      	ldr	r3, [pc, #400]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	055b      	lsls	r3, r3, #21
 8000d04:	4013      	ands	r3, r2
 8000d06:	d108      	bne.n	8000d1a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	0549      	lsls	r1, r1, #21
 8000d16:	430a      	orrs	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	495b      	ldr	r1, [pc, #364]	@ (8000e94 <HAL_ADC_Init+0x2e0>)
 8000d26:	400a      	ands	r2, r1
 8000d28:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68d9      	ldr	r1, [r3, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d101      	bne.n	8000d40 <HAL_ADC_Init+0x18c>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	e000      	b.n	8000d42 <HAL_ADC_Init+0x18e>
 8000d40:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d42:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2020      	movs	r0, #32
 8000d48:	5c1b      	ldrb	r3, [r3, r0]
 8000d4a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d4c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	202c      	movs	r0, #44	@ 0x2c
 8000d52:	5c1b      	ldrb	r3, [r3, r0]
 8000d54:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d56:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d5c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000d64:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d6c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d7a:	23c2      	movs	r3, #194	@ 0xc2
 8000d7c:	33ff      	adds	r3, #255	@ 0xff
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d00b      	beq.n	8000d9a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68d9      	ldr	r1, [r3, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2221      	movs	r2, #33	@ 0x21
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d11a      	bne.n	8000dda <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2220      	movs	r2, #32
 8000da8:	5c9b      	ldrb	r3, [r3, r2]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	0249      	lsls	r1, r1, #9
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	e00b      	b.n	8000dda <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d11f      	bne.n	8000e22 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	492a      	ldr	r1, [pc, #168]	@ (8000e98 <HAL_ADC_Init+0x2e4>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6919      	ldr	r1, [r3, #16]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e00:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000e06:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	e00e      	b.n	8000e40 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6959      	ldr	r1, [r3, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4393      	bics	r3, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	fffffefd 	.word	0xfffffefd
 8000e88:	40012708 	.word	0x40012708
 8000e8c:	ffc3ffff 	.word	0xffc3ffff
 8000e90:	fdffffff 	.word	0xfdffffff
 8000e94:	fffe0219 	.word	0xfffe0219
 8000e98:	fffffc03 	.word	0xfffffc03

08000e9c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d138      	bne.n	8000f2a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2250      	movs	r2, #80	@ 0x50
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Start+0x2a>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e038      	b.n	8000f38 <HAL_ADC_Start+0x9c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2250      	movs	r2, #80	@ 0x50
 8000eca:	2101      	movs	r1, #1
 8000ecc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d007      	beq.n	8000ee6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	18fc      	adds	r4, r7, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 f979 	bl	80011d4 <ADC_Enable>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d120      	bne.n	8000f32 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef4:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <HAL_ADC_Start+0xa4>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	0052      	lsls	r2, r2, #1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2250      	movs	r2, #80	@ 0x50
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	221c      	movs	r2, #28
 8000f16:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2104      	movs	r1, #4
 8000f24:	430a      	orrs	r2, r1
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	e003      	b.n	8000f32 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	781b      	ldrb	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b005      	add	sp, #20
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	fffff0fe 	.word	0xfffff0fe

08000f44 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d102      	bne.n	8000f64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e014      	b.n	8000f8e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10b      	bne.n	8000f8a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f76:	2220      	movs	r2, #32
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2250      	movs	r2, #80	@ 0x50
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e072      	b.n	8001070 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f8e:	f7ff fe07 	bl	8000ba0 <HAL_GetTick>
 8000f92:	0003      	movs	r3, r0
 8000f94:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f96:	e01f      	b.n	8000fd8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	d01c      	beq.n	8000fd8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <HAL_ADC_PollForConversion+0x70>
 8000fa4:	f7ff fdfc 	bl	8000ba0 <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d211      	bcs.n	8000fd8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2250      	movs	r2, #80	@ 0x50
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e04b      	b.n	8001070 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d0d9      	beq.n	8000f98 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	23c0      	movs	r3, #192	@ 0xc0
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d12e      	bne.n	800105e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2220      	movs	r2, #32
 8001004:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d129      	bne.n	800105e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2208      	movs	r2, #8
 8001012:	4013      	ands	r3, r2
 8001014:	2b08      	cmp	r3, #8
 8001016:	d122      	bne.n	800105e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2204      	movs	r2, #4
 8001020:	4013      	ands	r3, r2
 8001022:	d110      	bne.n	8001046 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	210c      	movs	r1, #12
 8001030:	438a      	bics	r2, r1
 8001032:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001038:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <HAL_ADC_PollForConversion+0x134>)
 800103a:	4013      	ands	r3, r2
 800103c:	2201      	movs	r2, #1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	655a      	str	r2, [r3, #84]	@ 0x54
 8001044:	e00b      	b.n	800105e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104a:	2220      	movs	r2, #32
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	2201      	movs	r2, #1
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b004      	add	sp, #16
 8001076:	bd80      	pop	{r7, pc}
 8001078:	fffffefe 	.word	0xfffffefe

0800107c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2250      	movs	r2, #80	@ 0x50
 80010a2:	5c9b      	ldrb	r3, [r3, r2]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x18>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e085      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x124>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2250      	movs	r2, #80	@ 0x50
 80010b0:	2101      	movs	r1, #1
 80010b2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2204      	movs	r2, #4
 80010bc:	4013      	ands	r3, r2
 80010be:	d00b      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c4:	2220      	movs	r2, #32
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2250      	movs	r2, #80	@ 0x50
 80010d0:	2100      	movs	r1, #0
 80010d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e06f      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a38      	ldr	r2, [pc, #224]	@ (80011c0 <HAL_ADC_ConfigChannel+0x12c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d035      	beq.n	800114e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	0b5a      	lsrs	r2, r3, #13
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	02db      	lsls	r3, r3, #11
 8001100:	4013      	ands	r3, r2
 8001102:	d009      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001104:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	0409      	lsls	r1, r1, #16
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001112:	200a      	movs	r0, #10
 8001114:	f000 f8c6 	bl	80012a4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	029b      	lsls	r3, r3, #10
 8001120:	4013      	ands	r3, r2
 8001122:	d006      	beq.n	8001132 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001124:	4b27      	ldr	r3, [pc, #156]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 800112a:	2180      	movs	r1, #128	@ 0x80
 800112c:	03c9      	lsls	r1, r1, #15
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	4013      	ands	r3, r2
 800113c:	d037      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	0449      	lsls	r1, r1, #17
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e02f      	b.n	80011ae <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	035b      	lsls	r3, r3, #13
 800115a:	0b5b      	lsrs	r3, r3, #13
 800115c:	43d9      	mvns	r1, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	400a      	ands	r2, r1
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	02db      	lsls	r3, r3, #11
 800116e:	4013      	ands	r3, r2
 8001170:	d005      	beq.n	800117e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001178:	4913      	ldr	r1, [pc, #76]	@ (80011c8 <HAL_ADC_ConfigChannel+0x134>)
 800117a:	400a      	ands	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	029b      	lsls	r3, r3, #10
 8001186:	4013      	ands	r3, r2
 8001188:	d005      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <HAL_ADC_ConfigChannel+0x138>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	025b      	lsls	r3, r3, #9
 800119e:	4013      	ands	r3, r2
 80011a0:	d005      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <HAL_ADC_ConfigChannel+0x130>)
 80011a8:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <HAL_ADC_ConfigChannel+0x13c>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2250      	movs	r2, #80	@ 0x50
 80011b2:	2100      	movs	r1, #0
 80011b4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	00001001 	.word	0x00001001
 80011c4:	40012708 	.word	0x40012708
 80011c8:	ff7fffff 	.word	0xff7fffff
 80011cc:	ffbfffff 	.word	0xffbfffff
 80011d0:	feffffff 	.word	0xfeffffff

080011d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2203      	movs	r2, #3
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <ADC_Enable+0x2c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <ADC_Enable+0x2c>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <ADC_Enable+0x2e>
 8001200:	2300      	movs	r3, #0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d146      	bne.n	8001294 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <ADC_Enable+0xcc>)
 800120e:	4013      	ands	r3, r2
 8001210:	d00d      	beq.n	800122e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001216:	2210      	movs	r2, #16
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	2201      	movs	r2, #1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e033      	b.n	8001296 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 f830 	bl	80012a4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001244:	f7ff fcac 	bl	8000ba0 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800124c:	e01b      	b.n	8001286 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800124e:	f7ff fca7 	bl	8000ba0 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b0a      	cmp	r3, #10
 800125a:	d914      	bls.n	8001286 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	4013      	ands	r3, r2
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00d      	beq.n	8001286 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126e:	2210      	movs	r2, #16
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e007      	b.n	8001296 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	2b01      	cmp	r3, #1
 8001292:	d1dc      	bne.n	800124e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	80000017 	.word	0x80000017

080012a4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <ADC_DelayMicroSecond+0x38>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	490b      	ldr	r1, [pc, #44]	@ (80012e0 <ADC_DelayMicroSecond+0x3c>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7fe ff28 	bl	8000108 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4353      	muls	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80012c2:	e002      	b.n	80012ca <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <ADC_DelayMicroSecond+0x20>
  }
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	20000000 	.word	0x20000000
 80012e0:	000f4240 	.word	0x000f4240

080012e4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ee:	2317      	movs	r3, #23
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2250      	movs	r2, #80	@ 0x50
 8001302:	5c9b      	ldrb	r3, [r3, r2]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_ADCEx_Calibration_Start+0x28>
 8001308:	2302      	movs	r3, #2
 800130a:	e083      	b.n	8001414 <HAL_ADCEx_Calibration_Start+0x130>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2250      	movs	r2, #80	@ 0x50
 8001310:	2101      	movs	r1, #1
 8001312:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2203      	movs	r2, #3
 800131c:	4013      	ands	r3, r2
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_ADCEx_Calibration_Start+0x50>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADCEx_Calibration_Start+0x50>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_ADCEx_Calibration_Start+0x52>
 8001334:	2300      	movs	r3, #0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d15b      	bne.n	80013f2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133e:	4a37      	ldr	r2, [pc, #220]	@ (800141c <HAL_ADCEx_Calibration_Start+0x138>)
 8001340:	4013      	ands	r3, r2
 8001342:	2202      	movs	r2, #2
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2203      	movs	r2, #3
 8001352:	4013      	ands	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2103      	movs	r1, #3
 8001362:	438a      	bics	r2, r1
 8001364:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2180      	movs	r1, #128	@ 0x80
 8001372:	0609      	lsls	r1, r1, #24
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8001378:	f7ff fc12 	bl	8000ba0 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001380:	e01d      	b.n	80013be <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001382:	f7ff fc0d 	bl	8000ba0 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b0a      	cmp	r3, #10
 800138e:	d916      	bls.n	80013be <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	0fdb      	lsrs	r3, r3, #31
 8001398:	07da      	lsls	r2, r3, #31
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	429a      	cmp	r2, r3
 80013a0:	d10d      	bne.n	80013be <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a6:	2212      	movs	r2, #18
 80013a8:	4393      	bics	r3, r2
 80013aa:	2210      	movs	r2, #16
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2250      	movs	r2, #80	@ 0x50
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e02a      	b.n	8001414 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	0fdb      	lsrs	r3, r3, #31
 80013c6:	07da      	lsls	r2, r3, #31
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d0d8      	beq.n	8001382 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	430a      	orrs	r2, r1
 80013de:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e4:	2203      	movs	r2, #3
 80013e6:	4393      	bics	r3, r2
 80013e8:	2201      	movs	r2, #1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80013f0:	e009      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f6:	2220      	movs	r2, #32
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80013fe:	2317      	movs	r3, #23
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2250      	movs	r2, #80	@ 0x50
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800140e:	2317      	movs	r3, #23
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b006      	add	sp, #24
 800141a:	bd80      	pop	{r7, pc}
 800141c:	fffffefd 	.word	0xfffffefd

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	0002      	movs	r2, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b7f      	cmp	r3, #127	@ 0x7f
 8001434:	d828      	bhi.n	8001488 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001436:	4a2f      	ldr	r2, [pc, #188]	@ (80014f4 <__NVIC_SetPriority+0xd4>)
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	33c0      	adds	r3, #192	@ 0xc0
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	589b      	ldr	r3, [r3, r2]
 8001446:	1dfa      	adds	r2, r7, #7
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	0011      	movs	r1, r2
 800144c:	2203      	movs	r2, #3
 800144e:	400a      	ands	r2, r1
 8001450:	00d2      	lsls	r2, r2, #3
 8001452:	21ff      	movs	r1, #255	@ 0xff
 8001454:	4091      	lsls	r1, r2
 8001456:	000a      	movs	r2, r1
 8001458:	43d2      	mvns	r2, r2
 800145a:	401a      	ands	r2, r3
 800145c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	401a      	ands	r2, r3
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	0018      	movs	r0, r3
 800146c:	2303      	movs	r3, #3
 800146e:	4003      	ands	r3, r0
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001474:	481f      	ldr	r0, [pc, #124]	@ (80014f4 <__NVIC_SetPriority+0xd4>)
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	430a      	orrs	r2, r1
 8001480:	33c0      	adds	r3, #192	@ 0xc0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001486:	e031      	b.n	80014ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	0019      	movs	r1, r3
 8001490:	230f      	movs	r3, #15
 8001492:	400b      	ands	r3, r1
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3306      	adds	r3, #6
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	3304      	adds	r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1dfa      	adds	r2, r7, #7
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	0011      	movs	r1, r2
 80014a8:	2203      	movs	r2, #3
 80014aa:	400a      	ands	r2, r1
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	21ff      	movs	r1, #255	@ 0xff
 80014b0:	4091      	lsls	r1, r2
 80014b2:	000a      	movs	r2, r1
 80014b4:	43d2      	mvns	r2, r2
 80014b6:	401a      	ands	r2, r3
 80014b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	22ff      	movs	r2, #255	@ 0xff
 80014c0:	401a      	ands	r2, r3
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	4003      	ands	r3, r0
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d0:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <__NVIC_SetPriority+0xd8>)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	001c      	movs	r4, r3
 80014d8:	230f      	movs	r3, #15
 80014da:	4023      	ands	r3, r4
 80014dc:	3b08      	subs	r3, #8
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	430a      	orrs	r2, r1
 80014e2:	3306      	adds	r3, #6
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	18c3      	adds	r3, r0, r3
 80014e8:	3304      	adds	r3, #4
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b003      	add	sp, #12
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	045b      	lsls	r3, r3, #17
 800150c:	429a      	cmp	r2, r3
 800150e:	d301      	bcc.n	8001514 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001510:	2301      	movs	r3, #1
 8001512:	e010      	b.n	8001536 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <SysTick_Config+0x44>)
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	3a01      	subs	r2, #1
 800151a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151c:	2301      	movs	r3, #1
 800151e:	425b      	negs	r3, r3
 8001520:	2103      	movs	r1, #3
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff ff7c 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <SysTick_Config+0x44>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <SysTick_Config+0x44>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	210f      	movs	r1, #15
 8001550:	187b      	adds	r3, r7, r1
 8001552:	1c02      	adds	r2, r0, #0
 8001554:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	187b      	adds	r3, r7, r1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffbf 	bl	80014fc <SysTick_Config>
 800157e:	0003      	movs	r3, r0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800159e:	e155      	b.n	800184c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4091      	lsls	r1, r2
 80015aa:	000a      	movs	r2, r1
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <HAL_GPIO_Init+0x30>
 80015b6:	e146      	b.n	8001846 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	4013      	ands	r3, r2
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	2201      	movs	r2, #1
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	4013      	ands	r3, r2
 800163a:	2b03      	cmp	r3, #3
 800163c:	d017      	beq.n	800166e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	4013      	ands	r3, r2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d123      	bne.n	80016c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	58d3      	ldr	r3, [r2, r3]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2207      	movs	r2, #7
 800168c:	4013      	ands	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2107      	movs	r1, #7
 80016a6:	400b      	ands	r3, r1
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	401a      	ands	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	23c0      	movs	r3, #192	@ 0xc0
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d100      	bne.n	8001704 <HAL_GPIO_Init+0x17c>
 8001702:	e0a0      	b.n	8001846 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	4b57      	ldr	r3, [pc, #348]	@ (8001864 <HAL_GPIO_Init+0x2dc>)
 8001706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001708:	4b56      	ldr	r3, [pc, #344]	@ (8001864 <HAL_GPIO_Init+0x2dc>)
 800170a:	2101      	movs	r1, #1
 800170c:	430a      	orrs	r2, r1
 800170e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001710:	4a55      	ldr	r2, [pc, #340]	@ (8001868 <HAL_GPIO_Init+0x2e0>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	589b      	ldr	r3, [r3, r2]
 800171c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	43da      	mvns	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	23a0      	movs	r3, #160	@ 0xa0
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	429a      	cmp	r2, r3
 800173c:	d01f      	beq.n	800177e <HAL_GPIO_Init+0x1f6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4a      	ldr	r2, [pc, #296]	@ (800186c <HAL_GPIO_Init+0x2e4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d019      	beq.n	800177a <HAL_GPIO_Init+0x1f2>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a49      	ldr	r2, [pc, #292]	@ (8001870 <HAL_GPIO_Init+0x2e8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0x1ee>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a48      	ldr	r2, [pc, #288]	@ (8001874 <HAL_GPIO_Init+0x2ec>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00d      	beq.n	8001772 <HAL_GPIO_Init+0x1ea>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a47      	ldr	r2, [pc, #284]	@ (8001878 <HAL_GPIO_Init+0x2f0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x1e6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a46      	ldr	r2, [pc, #280]	@ (800187c <HAL_GPIO_Init+0x2f4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_GPIO_Init+0x1e2>
 8001766:	2305      	movs	r3, #5
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x1f8>
 800176a:	2306      	movs	r3, #6
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x1f8>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x1f8>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x1f8>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x1f8>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x1f8>
 800177e:	2300      	movs	r3, #0
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	2103      	movs	r1, #3
 8001784:	400a      	ands	r2, r1
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	@ (8001868 <HAL_GPIO_Init+0x2e0>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b38      	ldr	r3, [pc, #224]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	035b      	lsls	r3, r3, #13
 80017b6:	4013      	ands	r3, r2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	039b      	lsls	r3, r3, #14
 80017e0:	4013      	ands	r3, r2
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ec:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017f2:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_GPIO_Init+0x2f8>)
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	40da      	lsrs	r2, r3
 8001854:	1e13      	subs	r3, r2, #0
 8001856:	d000      	beq.n	800185a <HAL_GPIO_Init+0x2d2>
 8001858:	e6a2      	b.n	80015a0 <HAL_GPIO_Init+0x18>
  }
}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b006      	add	sp, #24
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	50000400 	.word	0x50000400
 8001870:	50000800 	.word	0x50000800
 8001874:	50000c00 	.word	0x50000c00
 8001878:	50001000 	.word	0x50001000
 800187c:	50001c00 	.word	0x50001c00
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	0008      	movs	r0, r1
 800188e:	0011      	movs	r1, r2
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	1c7b      	adds	r3, r7, #1
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	1c7b      	adds	r3, r7, #1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a4:	1cbb      	adds	r3, r7, #2
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018ae:	1cbb      	adds	r3, r7, #2
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f000 fbbf 	bl	8002052 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d4:	4bc9      	ldr	r3, [pc, #804]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	220c      	movs	r2, #12
 80018da:	4013      	ands	r3, r2
 80018dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018de:	4bc7      	ldr	r3, [pc, #796]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4013      	ands	r3, r2
 80018f2:	d100      	bne.n	80018f6 <HAL_RCC_OscConfig+0x36>
 80018f4:	e07e      	b.n	80019f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d007      	beq.n	800190c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d112      	bne.n	8001928 <HAL_RCC_OscConfig+0x68>
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	025b      	lsls	r3, r3, #9
 8001908:	429a      	cmp	r2, r3
 800190a:	d10d      	bne.n	8001928 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4bbb      	ldr	r3, [pc, #748]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_OscConfig+0x5a>
 8001918:	e06b      	b.n	80019f2 <HAL_RCC_OscConfig+0x132>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d167      	bne.n	80019f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	f000 fb95 	bl	8002052 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	429a      	cmp	r2, r3
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x84>
 8001934:	4bb1      	ldr	r3, [pc, #708]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4bb0      	ldr	r3, [pc, #704]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	0249      	lsls	r1, r1, #9
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e027      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	23a0      	movs	r3, #160	@ 0xa0
 800194a:	02db      	lsls	r3, r3, #11
 800194c:	429a      	cmp	r2, r3
 800194e:	d10e      	bne.n	800196e <HAL_RCC_OscConfig+0xae>
 8001950:	4baa      	ldr	r3, [pc, #680]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4ba9      	ldr	r3, [pc, #676]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	02c9      	lsls	r1, r1, #11
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	4ba7      	ldr	r3, [pc, #668]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4ba6      	ldr	r3, [pc, #664]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001964:	2180      	movs	r1, #128	@ 0x80
 8001966:	0249      	lsls	r1, r1, #9
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e012      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 800196e:	4ba3      	ldr	r3, [pc, #652]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4ba2      	ldr	r3, [pc, #648]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001974:	49a2      	ldr	r1, [pc, #648]	@ (8001c00 <HAL_RCC_OscConfig+0x340>)
 8001976:	400a      	ands	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	4ba0      	ldr	r3, [pc, #640]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4b9c      	ldr	r3, [pc, #624]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b9b      	ldr	r3, [pc, #620]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 800198e:	499d      	ldr	r1, [pc, #628]	@ (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d015      	beq.n	80019c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f900 	bl	8000ba0 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a4:	e009      	b.n	80019ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a6:	f7ff f8fb 	bl	8000ba0 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	@ 0x64
 80019b2:	d902      	bls.n	80019ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	f000 fb4c 	bl	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ba:	4b90      	ldr	r3, [pc, #576]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0ef      	beq.n	80019a6 <HAL_RCC_OscConfig+0xe6>
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8ea 	bl	8000ba0 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff f8e5 	bl	8000ba0 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	@ 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e336      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e4:	4b85      	ldr	r3, [pc, #532]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x112>
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_RCC_OscConfig+0x140>
 80019fe:	e099      	b.n	8001b34 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b7a      	ldr	r3, [pc, #488]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a14:	2120      	movs	r1, #32
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	4393      	bics	r3, r2
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d13e      	bne.n	8001aac <HAL_RCC_OscConfig+0x1ec>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d13b      	bne.n	8001aac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a34:	4b71      	ldr	r3, [pc, #452]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_RCC_OscConfig+0x188>
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e304      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <HAL_RCC_OscConfig+0x348>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	021a      	lsls	r2, r3, #8
 8001a58:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a5e:	4b67      	ldr	r3, [pc, #412]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2209      	movs	r2, #9
 8001a64:	4393      	bics	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	4b64      	ldr	r3, [pc, #400]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a70:	f000 fc42 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8001a74:	0001      	movs	r1, r0
 8001a76:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	4013      	ands	r3, r2
 8001a80:	4a62      	ldr	r2, [pc, #392]	@ (8001c0c <HAL_RCC_OscConfig+0x34c>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	000a      	movs	r2, r1
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	4b61      	ldr	r3, [pc, #388]	@ (8001c10 <HAL_RCC_OscConfig+0x350>)
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a8c:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <HAL_RCC_OscConfig+0x354>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2513      	movs	r5, #19
 8001a92:	197c      	adds	r4, r7, r5
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff f83d 	bl	8000b14 <HAL_InitTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a9e:	197b      	adds	r3, r7, r5
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d046      	beq.n	8001b34 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001aa6:	197b      	adds	r3, r7, r5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	e2d2      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d027      	beq.n	8001b02 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ab2:	4b52      	ldr	r3, [pc, #328]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2209      	movs	r2, #9
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f86c 	bl	8000ba0 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff f867 	bl	8000ba0 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e2b8      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae0:	4b46      	ldr	r3, [pc, #280]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f1      	beq.n	8001ace <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b44      	ldr	r3, [pc, #272]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a46      	ldr	r2, [pc, #280]	@ (8001c08 <HAL_RCC_OscConfig+0x348>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	e018      	b.n	8001b34 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f847 	bl	8000ba0 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff f842 	bl	8000ba0 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e293      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f1      	bne.n	8001b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d100      	bne.n	8001b40 <HAL_RCC_OscConfig+0x280>
 8001b3e:	e0a2      	b.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d140      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x29e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e279      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5e:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a2d      	ldr	r2, [pc, #180]	@ (8001c18 <HAL_RCC_OscConfig+0x358>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b6c:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	0a19      	lsrs	r1, r3, #8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	061a      	lsls	r2, r3, #24
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	491b      	ldr	r1, [pc, #108]	@ (8001c0c <HAL_RCC_OscConfig+0x34c>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <HAL_RCC_OscConfig+0x350>)
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_RCC_OscConfig+0x354>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2513      	movs	r5, #19
 8001bae:	197c      	adds	r4, r7, r5
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7fe ffaf 	bl	8000b14 <HAL_InitTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bba:	197b      	adds	r3, r7, r5
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d061      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001bc2:	197b      	adds	r3, r7, r5
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	e244      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d040      	beq.n	8001c52 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	0049      	lsls	r1, r1, #1
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7fe ffdf 	bl	8000ba0 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001be6:	e019      	b.n	8001c1c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be8:	f7fe ffda 	bl	8000ba0 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d912      	bls.n	8001c1c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e22b      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	fffeffff 	.word	0xfffeffff
 8001c04:	fffbffff 	.word	0xfffbffff
 8001c08:	ffffe0ff 	.word	0xffffe0ff
 8001c0c:	08003260 	.word	0x08003260
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004
 8001c18:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c1c:	4bca      	ldr	r3, [pc, #808]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0df      	beq.n	8001be8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c28:	4bc7      	ldr	r3, [pc, #796]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4ac7      	ldr	r2, [pc, #796]	@ (8001f4c <HAL_RCC_OscConfig+0x68c>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c36:	4bc4      	ldr	r3, [pc, #784]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3c:	4bc2      	ldr	r3, [pc, #776]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	0a19      	lsrs	r1, r3, #8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	061a      	lsls	r2, r3, #24
 8001c4a:	4bbf      	ldr	r3, [pc, #764]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	e019      	b.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c52:	4bbd      	ldr	r3, [pc, #756]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4bbc      	ldr	r3, [pc, #752]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c58:	49bd      	ldr	r1, [pc, #756]	@ (8001f50 <HAL_RCC_OscConfig+0x690>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7fe ff9f 	bl	8000ba0 <HAL_GetTick>
 8001c62:	0003      	movs	r3, r0
 8001c64:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c68:	f7fe ff9a 	bl	8000ba0 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1eb      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c7a:	4bb3      	ldr	r3, [pc, #716]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d036      	beq.n	8001cfe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d019      	beq.n	8001ccc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c98:	4bab      	ldr	r3, [pc, #684]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c9c:	4baa      	ldr	r3, [pc, #680]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7fe ff7c 	bl	8000ba0 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7fe ff77 	bl	8000ba0 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e1c8      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cc0:	4ba1      	ldr	r3, [pc, #644]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0f1      	beq.n	8001cae <HAL_RCC_OscConfig+0x3ee>
 8001cca:	e018      	b.n	8001cfe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001cce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7fe ff62 	bl	8000ba0 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce2:	f7fe ff5d 	bl	8000ba0 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1ae      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cf4:	4b94      	ldr	r3, [pc, #592]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d1f1      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d100      	bne.n	8001d0a <HAL_RCC_OscConfig+0x44a>
 8001d08:	e0ae      	b.n	8001e68 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2023      	movs	r0, #35	@ 0x23
 8001d0c:	183b      	adds	r3, r7, r0
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b8d      	ldr	r3, [pc, #564]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	055b      	lsls	r3, r3, #21
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b8a      	ldr	r3, [pc, #552]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d22:	4b89      	ldr	r3, [pc, #548]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d24:	2180      	movs	r1, #128	@ 0x80
 8001d26:	0549      	lsls	r1, r1, #21
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001d2c:	183b      	adds	r3, r7, r0
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b88      	ldr	r3, [pc, #544]	@ (8001f54 <HAL_RCC_OscConfig+0x694>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d11a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b85      	ldr	r3, [pc, #532]	@ (8001f54 <HAL_RCC_OscConfig+0x694>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b84      	ldr	r3, [pc, #528]	@ (8001f54 <HAL_RCC_OscConfig+0x694>)
 8001d44:	2180      	movs	r1, #128	@ 0x80
 8001d46:	0049      	lsls	r1, r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ff28 	bl	8000ba0 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe ff23 	bl	8000ba0 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	@ 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e174      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b7a      	ldr	r3, [pc, #488]	@ (8001f54 <HAL_RCC_OscConfig+0x694>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4d0>
 8001d80:	4b71      	ldr	r3, [pc, #452]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d84:	4b70      	ldr	r3, [pc, #448]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	0049      	lsls	r1, r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d8e:	e031      	b.n	8001df4 <HAL_RCC_OscConfig+0x534>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4f2>
 8001d98:	4b6b      	ldr	r3, [pc, #428]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001d9e:	496c      	ldr	r1, [pc, #432]	@ (8001f50 <HAL_RCC_OscConfig+0x690>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001da6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001da8:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001daa:	496b      	ldr	r1, [pc, #428]	@ (8001f58 <HAL_RCC_OscConfig+0x698>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	651a      	str	r2, [r3, #80]	@ 0x50
 8001db0:	e020      	b.n	8001df4 <HAL_RCC_OscConfig+0x534>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	23a0      	movs	r3, #160	@ 0xa0
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10e      	bne.n	8001ddc <HAL_RCC_OscConfig+0x51c>
 8001dbe:	4b62      	ldr	r3, [pc, #392]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dc2:	4b61      	ldr	r3, [pc, #388]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	00c9      	lsls	r1, r1, #3
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	0049      	lsls	r1, r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x534>
 8001ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001de0:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001de2:	495b      	ldr	r1, [pc, #364]	@ (8001f50 <HAL_RCC_OscConfig+0x690>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001de8:	4b57      	ldr	r3, [pc, #348]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dec:	4b56      	ldr	r3, [pc, #344]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001dee:	495a      	ldr	r1, [pc, #360]	@ (8001f58 <HAL_RCC_OscConfig+0x698>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe fed0 	bl	8000ba0 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e04:	e009      	b.n	8001e1a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fecb 	bl	8000ba0 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_RCC_OscConfig+0x69c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e11b      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e1e:	2380      	movs	r3, #128	@ 0x80
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d0ef      	beq.n	8001e06 <HAL_RCC_OscConfig+0x546>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7fe feba 	bl	8000ba0 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe feb5 	bl	8000ba0 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a47      	ldr	r2, [pc, #284]	@ (8001f5c <HAL_RCC_OscConfig+0x69c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e105      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e46:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d1ef      	bne.n	8001e32 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e52:	2323      	movs	r3, #35	@ 0x23
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e60:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e62:	493f      	ldr	r1, [pc, #252]	@ (8001f60 <HAL_RCC_OscConfig+0x6a0>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d049      	beq.n	8001f06 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d026      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e7a:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	4b32      	ldr	r3, [pc, #200]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e92:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_RCC_OscConfig+0x6a4>)
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <HAL_RCC_OscConfig+0x6a4>)
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	0189      	lsls	r1, r1, #6
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fe7e 	bl	8000ba0 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eaa:	f7fe fe79 	bl	8000ba0 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0ca      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d0f1      	beq.n	8001eaa <HAL_RCC_OscConfig+0x5ea>
 8001ec6:	e01e      	b.n	8001f06 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <HAL_RCC_OscConfig+0x6a4>)
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_RCC_OscConfig+0x6a4>)
 8001eda:	4923      	ldr	r1, [pc, #140]	@ (8001f68 <HAL_RCC_OscConfig+0x6a8>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe5e 	bl	8000ba0 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eea:	f7fe fe59 	bl	8000ba0 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0aa      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d1f1      	bne.n	8001eea <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <HAL_RCC_OscConfig+0x650>
 8001f0e:	e09f      	b.n	8002050 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x658>
 8001f16:	e078      	b.n	800200a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d159      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001f26:	4911      	ldr	r1, [pc, #68]	@ (8001f6c <HAL_RCC_OscConfig+0x6ac>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fe38 	bl	8000ba0 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f34:	e01c      	b.n	8001f70 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe fe33 	bl	8000ba0 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d915      	bls.n	8001f70 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e084      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	ffff1fff 	.word	0xffff1fff
 8001f50:	fffffeff 	.word	0xfffffeff
 8001f54:	40007000 	.word	0x40007000
 8001f58:	fffffbff 	.word	0xfffffbff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	efffffff 	.word	0xefffffff
 8001f64:	40010000 	.word	0x40010000
 8001f68:	ffffdfff 	.word	0xffffdfff
 8001f6c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f70:	4b3a      	ldr	r3, [pc, #232]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d1dc      	bne.n	8001f36 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7c:	4b37      	ldr	r3, [pc, #220]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a37      	ldr	r2, [pc, #220]	@ (8002060 <HAL_RCC_OscConfig+0x7a0>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f94:	431a      	orrs	r2, r3
 8001f96:	4b31      	ldr	r3, [pc, #196]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	0449      	lsls	r1, r1, #17
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7fe fdf9 	bl	8000ba0 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe fdf4 	bl	8000ba0 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e045      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fc6:	4b25      	ldr	r3, [pc, #148]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	049b      	lsls	r3, r3, #18
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x6f4>
 8001fd2:	e03d      	b.n	8002050 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001fda:	4922      	ldr	r1, [pc, #136]	@ (8002064 <HAL_RCC_OscConfig+0x7a4>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fdde 	bl	8000ba0 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fdd9 	bl	8000ba0 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e02a      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ffc:	4b17      	ldr	r3, [pc, #92]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	049b      	lsls	r3, r3, #18
 8002004:	4013      	ands	r3, r2
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x72a>
 8002008:	e022      	b.n	8002050 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e01d      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_RCC_OscConfig+0x79c>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	429a      	cmp	r2, r3
 800202a:	d10f      	bne.n	800204c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	23f0      	movs	r3, #240	@ 0xf0
 8002030:	039b      	lsls	r3, r3, #14
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	23c0      	movs	r3, #192	@ 0xc0
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	401a      	ands	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b00a      	add	sp, #40	@ 0x28
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	ff02ffff 	.word	0xff02ffff
 8002064:	feffffff 	.word	0xfeffffff

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e128      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b96      	ldr	r3, [pc, #600]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d91e      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b93      	ldr	r3, [pc, #588]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b90      	ldr	r3, [pc, #576]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800209c:	f7fe fd80 	bl	8000ba0 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fd7b 	bl	8000ba0 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a8a      	ldr	r2, [pc, #552]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e109      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b87      	ldr	r3, [pc, #540]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d2:	4b83      	ldr	r3, [pc, #524]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	22f0      	movs	r2, #240	@ 0xf0
 80020d8:	4393      	bics	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b7f      	ldr	r3, [pc, #508]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x8a>
 80020f0:	e089      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fa:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	029b      	lsls	r3, r3, #10
 8002102:	4013      	ands	r3, r2
 8002104:	d120      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0e1      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002112:	4b73      	ldr	r3, [pc, #460]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	049b      	lsls	r3, r3, #18
 800211a:	4013      	ands	r3, r2
 800211c:	d114      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0d5      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d106      	bne.n	8002138 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800212a:	4b6d      	ldr	r3, [pc, #436]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d109      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ca      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002138:	4b69      	ldr	r3, [pc, #420]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0c2      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002148:	4b65      	ldr	r3, [pc, #404]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2203      	movs	r2, #3
 800214e:	4393      	bics	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4b62      	ldr	r3, [pc, #392]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7fe fd20 	bl	8000ba0 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d111      	bne.n	8002190 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	e009      	b.n	8002182 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7fe fd17 	bl	8000ba0 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a58      	ldr	r2, [pc, #352]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0a5      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002182:	4b57      	ldr	r3, [pc, #348]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	220c      	movs	r2, #12
 8002188:	4013      	ands	r3, r2
 800218a:	2b08      	cmp	r3, #8
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_ClockConfig+0x106>
 800218e:	e03a      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d111      	bne.n	80021bc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	e009      	b.n	80021ae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219a:	f7fe fd01 	bl	8000ba0 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	4a4d      	ldr	r2, [pc, #308]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e08f      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ae:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	220c      	movs	r2, #12
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d1ef      	bne.n	800219a <HAL_RCC_ClockConfig+0x132>
 80021ba:	e024      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d11b      	bne.n	80021fc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c4:	e009      	b.n	80021da <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c6:	f7fe fceb 	bl	8000ba0 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a42      	ldr	r2, [pc, #264]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e079      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b41      	ldr	r3, [pc, #260]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	220c      	movs	r2, #12
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d1ef      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x15e>
 80021e6:	e00e      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7fe fcda 	bl	8000ba0 <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a3a      	ldr	r2, [pc, #232]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e068      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fc:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	220c      	movs	r2, #12
 8002202:	4013      	ands	r3, r2
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002206:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4013      	ands	r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d21e      	bcs.n	8002252 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002214:	4b30      	ldr	r3, [pc, #192]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	4b2e      	ldr	r3, [pc, #184]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002226:	f7fe fcbb 	bl	8000ba0 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	e009      	b.n	8002244 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe fcb6 	bl	8000ba0 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	4a28      	ldr	r2, [pc, #160]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e044      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002244:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d1ee      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	4013      	ands	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <HAL_RCC_ClockConfig+0x27c>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	d00a      	beq.n	8002290 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a1a      	ldr	r2, [pc, #104]	@ (80022e8 <HAL_RCC_ClockConfig+0x280>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00da      	lsls	r2, r3, #3
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002290:	f000 f832 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8002294:	0001      	movs	r1, r0
 8002296:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	220f      	movs	r2, #15
 800229e:	4013      	ands	r3, r2
 80022a0:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <HAL_RCC_ClockConfig+0x284>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	000a      	movs	r2, r1
 80022a6:	40da      	lsrs	r2, r3
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_RCC_ClockConfig+0x288>)
 80022aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_RCC_ClockConfig+0x28c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	250b      	movs	r5, #11
 80022b2:	197c      	adds	r4, r7, r5
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fe fc2d 	bl	8000b14 <HAL_InitTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022be:	197b      	adds	r3, r7, r5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022c6:	197b      	adds	r3, r7, r5
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	e000      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bdb0      	pop	{r4, r5, r7, pc}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	40022000 	.word	0x40022000
 80022dc:	00001388 	.word	0x00001388
 80022e0:	40021000 	.word	0x40021000
 80022e4:	fffff8ff 	.word	0xfffff8ff
 80022e8:	ffffc7ff 	.word	0xffffc7ff
 80022ec:	08003260 	.word	0x08003260
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022fe:	4b3c      	ldr	r3, [pc, #240]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	220c      	movs	r2, #12
 8002308:	4013      	ands	r3, r2
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d013      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x3e>
 800230e:	d85c      	bhi.n	80023ca <HAL_RCC_GetSysClockFreq+0xd2>
 8002310:	2b04      	cmp	r3, #4
 8002312:	d002      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x22>
 8002314:	2b08      	cmp	r3, #8
 8002316:	d00b      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x38>
 8002318:	e057      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800231a:	4b35      	ldr	r3, [pc, #212]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2210      	movs	r2, #16
 8002320:	4013      	ands	r3, r2
 8002322:	d002      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002324:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002326:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002328:	e05d      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x100>)
 800232c:	613b      	str	r3, [r7, #16]
      break;
 800232e:	e05a      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002330:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x104>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	e057      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	220f      	movs	r2, #15
 800233c:	4013      	ands	r3, r2
 800233e:	4a30      	ldr	r2, [pc, #192]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	0d9b      	lsrs	r3, r3, #22
 8002348:	2203      	movs	r2, #3
 800234a:	4013      	ands	r3, r2
 800234c:	3301      	adds	r3, #1
 800234e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	4013      	ands	r3, r2
 800235a:	d00f      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	000a      	movs	r2, r1
 8002360:	0152      	lsls	r2, r2, #5
 8002362:	1a52      	subs	r2, r2, r1
 8002364:	0193      	lsls	r3, r2, #6
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	185b      	adds	r3, r3, r1
 800236c:	025b      	lsls	r3, r3, #9
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f7fd fec9 	bl	8000108 <__udivsi3>
 8002376:	0003      	movs	r3, r0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e023      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2210      	movs	r2, #16
 8002382:	4013      	ands	r3, r2
 8002384:	d00f      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	000a      	movs	r2, r1
 800238a:	0152      	lsls	r2, r2, #5
 800238c:	1a52      	subs	r2, r2, r1
 800238e:	0193      	lsls	r3, r2, #6
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	185b      	adds	r3, r3, r1
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f7fd feb4 	bl	8000108 <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e00e      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	000a      	movs	r2, r1
 80023aa:	0152      	lsls	r2, r2, #5
 80023ac:	1a52      	subs	r2, r2, r1
 80023ae:	0193      	lsls	r3, r2, #6
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	185b      	adds	r3, r3, r1
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7fd fea4 	bl	8000108 <__udivsi3>
 80023c0:	0003      	movs	r3, r0
 80023c2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	e00d      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0b5b      	lsrs	r3, r3, #13
 80023d0:	2207      	movs	r2, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	2280      	movs	r2, #128	@ 0x80
 80023dc:	0212      	lsls	r2, r2, #8
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      break;
 80023e4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023e6:	693b      	ldr	r3, [r7, #16]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b006      	add	sp, #24
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	003d0900 	.word	0x003d0900
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	08003278 	.word	0x08003278

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff2 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002420:	0001      	movs	r1, r0
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	2207      	movs	r2, #7
 800242a:	4013      	ands	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	40d9      	lsrs	r1, r3
 8002432:	000b      	movs	r3, r1
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	40021000 	.word	0x40021000
 8002440:	08003270 	.word	0x08003270

08002444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002448:	f7ff ffdc 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 800244c:	0001      	movs	r1, r0
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	0adb      	lsrs	r3, r3, #11
 8002454:	2207      	movs	r2, #7
 8002456:	4013      	ands	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_RCC_GetPCLK2Freq+0x28>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	40d9      	lsrs	r1, r3
 800245e:	000b      	movs	r3, r1
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	40021000 	.word	0x40021000
 800246c:	08003270 	.word	0x08003270

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002478:	2317      	movs	r3, #23
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2220      	movs	r2, #32
 8002486:	4013      	ands	r3, r2
 8002488:	d106      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	4013      	ands	r3, r2
 8002494:	d100      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002496:	e104      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002498:	4bb9      	ldr	r3, [pc, #740]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800249a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	055b      	lsls	r3, r3, #21
 80024a0:	4013      	ands	r3, r2
 80024a2:	d10a      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4bb6      	ldr	r3, [pc, #728]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024a8:	4bb5      	ldr	r3, [pc, #724]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024aa:	2180      	movs	r1, #128	@ 0x80
 80024ac:	0549      	lsls	r1, r1, #21
 80024ae:	430a      	orrs	r2, r1
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80024b2:	2317      	movs	r3, #23
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4bb2      	ldr	r3, [pc, #712]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	d11a      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4baf      	ldr	r3, [pc, #700]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4bae      	ldr	r3, [pc, #696]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80024cc:	2180      	movs	r1, #128	@ 0x80
 80024ce:	0049      	lsls	r1, r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d4:	f7fe fb64 	bl	8000ba0 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe fb5f 	bl	8000ba0 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	@ 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e143      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4ba4      	ldr	r3, [pc, #656]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d0f0      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	23c0      	movs	r3, #192	@ 0xc0
 8002502:	039b      	lsls	r3, r3, #14
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	23c0      	movs	r3, #192	@ 0xc0
 800250e:	039b      	lsls	r3, r3, #14
 8002510:	4013      	ands	r3, r2
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d107      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	23c0      	movs	r3, #192	@ 0xc0
 800251e:	039b      	lsls	r3, r3, #14
 8002520:	4013      	ands	r3, r2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d013      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	23c0      	movs	r3, #192	@ 0xc0
 800252e:	029b      	lsls	r3, r3, #10
 8002530:	401a      	ands	r2, r3
 8002532:	23c0      	movs	r3, #192	@ 0xc0
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	429a      	cmp	r2, r3
 8002538:	d10a      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800253a:	4b91      	ldr	r3, [pc, #580]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	029b      	lsls	r3, r3, #10
 8002542:	401a      	ands	r2, r3
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	429a      	cmp	r2, r3
 800254a:	d101      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e113      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002550:	4b8b      	ldr	r3, [pc, #556]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002554:	23c0      	movs	r3, #192	@ 0xc0
 8002556:	029b      	lsls	r3, r3, #10
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d049      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	23c0      	movs	r3, #192	@ 0xc0
 8002568:	029b      	lsls	r3, r3, #10
 800256a:	4013      	ands	r3, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	429a      	cmp	r2, r3
 8002570:	d004      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2220      	movs	r2, #32
 8002578:	4013      	ands	r3, r2
 800257a:	d10d      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	23c0      	movs	r3, #192	@ 0xc0
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	4013      	ands	r3, r2
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d034      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	4013      	ands	r3, r2
 8002596:	d02e      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002598:	4b79      	ldr	r3, [pc, #484]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800259a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259c:	4a7a      	ldr	r2, [pc, #488]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a2:	4b77      	ldr	r3, [pc, #476]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025a6:	4b76      	ldr	r3, [pc, #472]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025a8:	2180      	movs	r1, #128	@ 0x80
 80025aa:	0309      	lsls	r1, r1, #12
 80025ac:	430a      	orrs	r2, r1
 80025ae:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b0:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025b4:	4b72      	ldr	r3, [pc, #456]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025b6:	4975      	ldr	r1, [pc, #468]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80025bc:	4b70      	ldr	r3, [pc, #448]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d014      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fae8 	bl	8000ba0 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025d4:	e009      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fae3 	bl	8000ba0 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0c6      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ea:	4b65      	ldr	r3, [pc, #404]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d0ef      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	4013      	ands	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	23c0      	movs	r3, #192	@ 0xc0
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	401a      	ands	r2, r3
 800260c:	23c0      	movs	r3, #192	@ 0xc0
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	429a      	cmp	r2, r3
 8002612:	d10c      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002614:	4b5a      	ldr	r3, [pc, #360]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5e      	ldr	r2, [pc, #376]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	23c0      	movs	r3, #192	@ 0xc0
 8002624:	039b      	lsls	r3, r3, #14
 8002626:	401a      	ands	r2, r3
 8002628:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b54      	ldr	r3, [pc, #336]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002630:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	23c0      	movs	r3, #192	@ 0xc0
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	401a      	ands	r2, r3
 800263c:	4b50      	ldr	r3, [pc, #320]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800263e:	430a      	orrs	r2, r1
 8002640:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2220      	movs	r2, #32
 8002648:	4013      	ands	r3, r2
 800264a:	d01f      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	23c0      	movs	r3, #192	@ 0xc0
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	401a      	ands	r2, r3
 8002656:	23c0      	movs	r3, #192	@ 0xc0
 8002658:	029b      	lsls	r3, r3, #10
 800265a:	429a      	cmp	r2, r3
 800265c:	d10c      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800265e:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a4c      	ldr	r2, [pc, #304]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23c0      	movs	r3, #192	@ 0xc0
 800266e:	039b      	lsls	r3, r3, #14
 8002670:	401a      	ands	r2, r3
 8002672:	4b43      	ldr	r3, [pc, #268]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800267a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	23c0      	movs	r3, #192	@ 0xc0
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	401a      	ands	r2, r3
 8002686:	4b3e      	ldr	r3, [pc, #248]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002688:	430a      	orrs	r2, r1
 800268a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800268c:	2317      	movs	r3, #23
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800269a:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800269c:	493e      	ldr	r1, [pc, #248]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800269e:	400a      	ands	r2, r1
 80026a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ac:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b0:	2203      	movs	r2, #3
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	220c      	movs	r2, #12
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e8:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ec:	4a2b      	ldr	r2, [pc, #172]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	4013      	ands	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002706:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	4a25      	ldr	r2, [pc, #148]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002716:	430a      	orrs	r2, r1
 8002718:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800272c:	4013      	ands	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002736:	430a      	orrs	r2, r1
 8002738:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	4013      	ands	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002744:	4b0e      	ldr	r3, [pc, #56]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002748:	4a16      	ldr	r2, [pc, #88]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002752:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002754:	430a      	orrs	r2, r1
 8002756:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2280      	movs	r2, #128	@ 0x80
 800275e:	4013      	ands	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002762:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a10      	ldr	r2, [pc, #64]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002768:	4013      	ands	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1a      	ldr	r2, [r3, #32]
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002772:	430a      	orrs	r2, r1
 8002774:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b006      	add	sp, #24
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	fffcffff 	.word	0xfffcffff
 800278c:	fff7ffff 	.word	0xfff7ffff
 8002790:	00001388 	.word	0x00001388
 8002794:	ffcfffff 	.word	0xffcfffff
 8002798:	efffffff 	.word	0xefffffff
 800279c:	fffff3ff 	.word	0xfffff3ff
 80027a0:	ffffcfff 	.word	0xffffcfff
 80027a4:	fbffffff 	.word	0xfbffffff
 80027a8:	fff3ffff 	.word	0xfff3ffff

080027ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e044      	b.n	8002848 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2278      	movs	r2, #120	@ 0x78
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe f911 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2224      	movs	r2, #36	@ 0x24
 80027da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 faca 	bl	8002d90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 f828 	bl	8002854 <UART_SetConfig>
 8002804:	0003      	movs	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e01c      	b.n	8002848 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	490d      	ldr	r1, [pc, #52]	@ (8002850 <HAL_UART_Init+0xa4>)
 800281a:	400a      	ands	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	212a      	movs	r1, #42	@ 0x2a
 800282a:	438a      	bics	r2, r1
 800282c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 fb59 	bl	8002ef8 <UART_CheckIdleState>
 8002846:	0003      	movs	r3, r0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	ffffb7ff 	.word	0xffffb7ff

08002854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b08e      	sub	sp, #56	@ 0x38
 8002858:	af00      	add	r7, sp, #0
 800285a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800285c:	231a      	movs	r3, #26
 800285e:	2218      	movs	r2, #24
 8002860:	189b      	adds	r3, r3, r2
 8002862:	19db      	adds	r3, r3, r7
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4313      	orrs	r3, r2
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4ac3      	ldr	r2, [pc, #780]	@ (8002b94 <UART_SetConfig+0x340>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4abe      	ldr	r2, [pc, #760]	@ (8002b98 <UART_SetConfig+0x344>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4ab8      	ldr	r2, [pc, #736]	@ (8002b9c <UART_SetConfig+0x348>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028c4:	4313      	orrs	r3, r2
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4ab4      	ldr	r2, [pc, #720]	@ (8002ba0 <UART_SetConfig+0x34c>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4ab0      	ldr	r2, [pc, #704]	@ (8002ba4 <UART_SetConfig+0x350>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d131      	bne.n	800294c <UART_SetConfig+0xf8>
 80028e8:	4baf      	ldr	r3, [pc, #700]	@ (8002ba8 <UART_SetConfig+0x354>)
 80028ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ec:	2203      	movs	r2, #3
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d01d      	beq.n	8002930 <UART_SetConfig+0xdc>
 80028f4:	d823      	bhi.n	800293e <UART_SetConfig+0xea>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d00c      	beq.n	8002914 <UART_SetConfig+0xc0>
 80028fa:	d820      	bhi.n	800293e <UART_SetConfig+0xea>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <UART_SetConfig+0xb2>
 8002900:	2b01      	cmp	r3, #1
 8002902:	d00e      	beq.n	8002922 <UART_SetConfig+0xce>
 8002904:	e01b      	b.n	800293e <UART_SetConfig+0xea>
 8002906:	231b      	movs	r3, #27
 8002908:	2218      	movs	r2, #24
 800290a:	189b      	adds	r3, r3, r2
 800290c:	19db      	adds	r3, r3, r7
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e0b4      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002914:	231b      	movs	r3, #27
 8002916:	2218      	movs	r2, #24
 8002918:	189b      	adds	r3, r3, r2
 800291a:	19db      	adds	r3, r3, r7
 800291c:	2202      	movs	r2, #2
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e0ad      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002922:	231b      	movs	r3, #27
 8002924:	2218      	movs	r2, #24
 8002926:	189b      	adds	r3, r3, r2
 8002928:	19db      	adds	r3, r3, r7
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e0a6      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002930:	231b      	movs	r3, #27
 8002932:	2218      	movs	r2, #24
 8002934:	189b      	adds	r3, r3, r2
 8002936:	19db      	adds	r3, r3, r7
 8002938:	2208      	movs	r2, #8
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e09f      	b.n	8002a7e <UART_SetConfig+0x22a>
 800293e:	231b      	movs	r3, #27
 8002940:	2218      	movs	r2, #24
 8002942:	189b      	adds	r3, r3, r2
 8002944:	19db      	adds	r3, r3, r7
 8002946:	2210      	movs	r2, #16
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e098      	b.n	8002a7e <UART_SetConfig+0x22a>
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a96      	ldr	r2, [pc, #600]	@ (8002bac <UART_SetConfig+0x358>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d131      	bne.n	80029ba <UART_SetConfig+0x166>
 8002956:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <UART_SetConfig+0x354>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	220c      	movs	r2, #12
 800295c:	4013      	ands	r3, r2
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d01d      	beq.n	800299e <UART_SetConfig+0x14a>
 8002962:	d823      	bhi.n	80029ac <UART_SetConfig+0x158>
 8002964:	2b08      	cmp	r3, #8
 8002966:	d00c      	beq.n	8002982 <UART_SetConfig+0x12e>
 8002968:	d820      	bhi.n	80029ac <UART_SetConfig+0x158>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <UART_SetConfig+0x120>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00e      	beq.n	8002990 <UART_SetConfig+0x13c>
 8002972:	e01b      	b.n	80029ac <UART_SetConfig+0x158>
 8002974:	231b      	movs	r3, #27
 8002976:	2218      	movs	r2, #24
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e07d      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002982:	231b      	movs	r3, #27
 8002984:	2218      	movs	r2, #24
 8002986:	189b      	adds	r3, r3, r2
 8002988:	19db      	adds	r3, r3, r7
 800298a:	2202      	movs	r2, #2
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e076      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002990:	231b      	movs	r3, #27
 8002992:	2218      	movs	r2, #24
 8002994:	189b      	adds	r3, r3, r2
 8002996:	19db      	adds	r3, r3, r7
 8002998:	2204      	movs	r2, #4
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e06f      	b.n	8002a7e <UART_SetConfig+0x22a>
 800299e:	231b      	movs	r3, #27
 80029a0:	2218      	movs	r2, #24
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	19db      	adds	r3, r3, r7
 80029a6:	2208      	movs	r2, #8
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e068      	b.n	8002a7e <UART_SetConfig+0x22a>
 80029ac:	231b      	movs	r3, #27
 80029ae:	2218      	movs	r2, #24
 80029b0:	189b      	adds	r3, r3, r2
 80029b2:	19db      	adds	r3, r3, r7
 80029b4:	2210      	movs	r2, #16
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e061      	b.n	8002a7e <UART_SetConfig+0x22a>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb0 <UART_SetConfig+0x35c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d106      	bne.n	80029d2 <UART_SetConfig+0x17e>
 80029c4:	231b      	movs	r3, #27
 80029c6:	2218      	movs	r2, #24
 80029c8:	189b      	adds	r3, r3, r2
 80029ca:	19db      	adds	r3, r3, r7
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e055      	b.n	8002a7e <UART_SetConfig+0x22a>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a77      	ldr	r2, [pc, #476]	@ (8002bb4 <UART_SetConfig+0x360>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d106      	bne.n	80029ea <UART_SetConfig+0x196>
 80029dc:	231b      	movs	r3, #27
 80029de:	2218      	movs	r2, #24
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	19db      	adds	r3, r3, r7
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e049      	b.n	8002a7e <UART_SetConfig+0x22a>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6b      	ldr	r2, [pc, #428]	@ (8002b9c <UART_SetConfig+0x348>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d13e      	bne.n	8002a72 <UART_SetConfig+0x21e>
 80029f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba8 <UART_SetConfig+0x354>)
 80029f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029f8:	23c0      	movs	r3, #192	@ 0xc0
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	4013      	ands	r3, r2
 80029fe:	22c0      	movs	r2, #192	@ 0xc0
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <UART_SetConfig+0x202>
 8002a06:	22c0      	movs	r2, #192	@ 0xc0
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d82a      	bhi.n	8002a64 <UART_SetConfig+0x210>
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d011      	beq.n	8002a3a <UART_SetConfig+0x1e6>
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d822      	bhi.n	8002a64 <UART_SetConfig+0x210>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <UART_SetConfig+0x1d8>
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	00d2      	lsls	r2, r2, #3
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <UART_SetConfig+0x1f4>
 8002a2a:	e01b      	b.n	8002a64 <UART_SetConfig+0x210>
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2218      	movs	r2, #24
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	19db      	adds	r3, r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e021      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002a3a:	231b      	movs	r3, #27
 8002a3c:	2218      	movs	r2, #24
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	19db      	adds	r3, r3, r7
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e01a      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2204      	movs	r2, #4
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e013      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002a56:	231b      	movs	r3, #27
 8002a58:	2218      	movs	r2, #24
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	2208      	movs	r2, #8
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e00c      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002a64:	231b      	movs	r3, #27
 8002a66:	2218      	movs	r2, #24
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e005      	b.n	8002a7e <UART_SetConfig+0x22a>
 8002a72:	231b      	movs	r3, #27
 8002a74:	2218      	movs	r2, #24
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	19db      	adds	r3, r3, r7
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <UART_SetConfig+0x348>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d000      	beq.n	8002a8a <UART_SetConfig+0x236>
 8002a88:	e09a      	b.n	8002bc0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a8a:	231b      	movs	r3, #27
 8002a8c:	2218      	movs	r2, #24
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	19db      	adds	r3, r3, r7
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d01d      	beq.n	8002ad4 <UART_SetConfig+0x280>
 8002a98:	dc20      	bgt.n	8002adc <UART_SetConfig+0x288>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d015      	beq.n	8002aca <UART_SetConfig+0x276>
 8002a9e:	dc1d      	bgt.n	8002adc <UART_SetConfig+0x288>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <UART_SetConfig+0x256>
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d005      	beq.n	8002ab4 <UART_SetConfig+0x260>
 8002aa8:	e018      	b.n	8002adc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aaa:	f7ff fcb5 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ab2:	e01c      	b.n	8002aee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba8 <UART_SetConfig+0x354>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d002      	beq.n	8002ac4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002abe:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb8 <UART_SetConfig+0x364>)
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ac2:	e014      	b.n	8002aee <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <UART_SetConfig+0x368>)
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ac8:	e011      	b.n	8002aee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aca:	f7ff fc15 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ad2:	e00c      	b.n	8002aee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ada:	e008      	b.n	8002aee <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ae0:	231a      	movs	r3, #26
 8002ae2:	2218      	movs	r2, #24
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	19db      	adds	r3, r3, r7
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
        break;
 8002aec:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d100      	bne.n	8002af6 <UART_SetConfig+0x2a2>
 8002af4:	e133      	b.n	8002d5e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	0013      	movs	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d305      	bcc.n	8002b12 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d906      	bls.n	8002b20 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002b12:	231a      	movs	r3, #26
 8002b14:	2218      	movs	r2, #24
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	19db      	adds	r3, r3, r7
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e11e      	b.n	8002d5e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	0e1b      	lsrs	r3, r3, #24
 8002b30:	0010      	movs	r0, r2
 8002b32:	0205      	lsls	r5, r0, #8
 8002b34:	431d      	orrs	r5, r3
 8002b36:	000b      	movs	r3, r1
 8002b38:	021c      	lsls	r4, r3, #8
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	1900      	adds	r0, r0, r4
 8002b4c:	4169      	adcs	r1, r5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f7fd fb60 	bl	8000220 <__aeabi_uldivmod>
 8002b60:	0002      	movs	r2, r0
 8002b62:	000b      	movs	r3, r1
 8002b64:	0013      	movs	r3, r2
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b6a:	23c0      	movs	r3, #192	@ 0xc0
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d309      	bcc.n	8002b86 <UART_SetConfig+0x332>
 8002b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	035b      	lsls	r3, r3, #13
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d204      	bcs.n	8002b86 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	e0eb      	b.n	8002d5e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002b86:	231a      	movs	r3, #26
 8002b88:	2218      	movs	r2, #24
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e0e4      	b.n	8002d5e <UART_SetConfig+0x50a>
 8002b94:	efff69f3 	.word	0xefff69f3
 8002b98:	ffffcfff 	.word	0xffffcfff
 8002b9c:	40004800 	.word	0x40004800
 8002ba0:	fffff4ff 	.word	0xfffff4ff
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40004400 	.word	0x40004400
 8002bb0:	40004c00 	.word	0x40004c00
 8002bb4:	40005000 	.word	0x40005000
 8002bb8:	003d0900 	.word	0x003d0900
 8002bbc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d000      	beq.n	8002bce <UART_SetConfig+0x37a>
 8002bcc:	e070      	b.n	8002cb0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002bce:	231b      	movs	r3, #27
 8002bd0:	2218      	movs	r2, #24
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	19db      	adds	r3, r3, r7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d822      	bhi.n	8002c22 <UART_SetConfig+0x3ce>
 8002bdc:	009a      	lsls	r2, r3, #2
 8002bde:	4b67      	ldr	r3, [pc, #412]	@ (8002d7c <UART_SetConfig+0x528>)
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7ff fc17 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002bea:	0003      	movs	r3, r0
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bee:	e021      	b.n	8002c34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff fc28 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bf8:	e01c      	b.n	8002c34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bfa:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <UART_SetConfig+0x52c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	4013      	ands	r3, r2
 8002c02:	d002      	beq.n	8002c0a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c04:	4b5f      	ldr	r3, [pc, #380]	@ (8002d84 <UART_SetConfig+0x530>)
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c08:	e014      	b.n	8002c34 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d88 <UART_SetConfig+0x534>)
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c0e:	e011      	b.n	8002c34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c10:	f7ff fb72 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8002c14:	0003      	movs	r3, r0
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c18:	e00c      	b.n	8002c34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c20:	e008      	b.n	8002c34 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002c26:	231a      	movs	r3, #26
 8002c28:	2218      	movs	r2, #24
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	19db      	adds	r3, r3, r7
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
        break;
 8002c32:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d100      	bne.n	8002c3c <UART_SetConfig+0x3e8>
 8002c3a:	e090      	b.n	8002d5e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	005a      	lsls	r2, r3, #1
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	18d2      	adds	r2, r2, r3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f7fd fa5a 	bl	8000108 <__udivsi3>
 8002c54:	0003      	movs	r3, r0
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	2b0f      	cmp	r3, #15
 8002c5c:	d921      	bls.n	8002ca2 <UART_SetConfig+0x44e>
 8002c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	025b      	lsls	r3, r3, #9
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d21c      	bcs.n	8002ca2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	200e      	movs	r0, #14
 8002c6e:	2418      	movs	r4, #24
 8002c70:	1903      	adds	r3, r0, r4
 8002c72:	19db      	adds	r3, r3, r7
 8002c74:	210f      	movs	r1, #15
 8002c76:	438a      	bics	r2, r1
 8002c78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2207      	movs	r2, #7
 8002c82:	4013      	ands	r3, r2
 8002c84:	b299      	uxth	r1, r3
 8002c86:	1903      	adds	r3, r0, r4
 8002c88:	19db      	adds	r3, r3, r7
 8002c8a:	1902      	adds	r2, r0, r4
 8002c8c:	19d2      	adds	r2, r2, r7
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1902      	adds	r2, r0, r4
 8002c9a:	19d2      	adds	r2, r2, r7
 8002c9c:	8812      	ldrh	r2, [r2, #0]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	e05d      	b.n	8002d5e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca2:	231a      	movs	r3, #26
 8002ca4:	2218      	movs	r2, #24
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	19db      	adds	r3, r3, r7
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e056      	b.n	8002d5e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb0:	231b      	movs	r3, #27
 8002cb2:	2218      	movs	r2, #24
 8002cb4:	189b      	adds	r3, r3, r2
 8002cb6:	19db      	adds	r3, r3, r7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d822      	bhi.n	8002d04 <UART_SetConfig+0x4b0>
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	4b32      	ldr	r3, [pc, #200]	@ (8002d8c <UART_SetConfig+0x538>)
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f7ff fba6 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cd0:	e021      	b.n	8002d16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd2:	f7ff fbb7 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cda:	e01c      	b.n	8002d16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <UART_SetConfig+0x52c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d002      	beq.n	8002cec <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ce6:	4b27      	ldr	r3, [pc, #156]	@ (8002d84 <UART_SetConfig+0x530>)
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cea:	e014      	b.n	8002d16 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002cec:	4b26      	ldr	r3, [pc, #152]	@ (8002d88 <UART_SetConfig+0x534>)
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cf0:	e011      	b.n	8002d16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf2:	f7ff fb01 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cfa:	e00c      	b.n	8002d16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d02:	e008      	b.n	8002d16 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002d08:	231a      	movs	r3, #26
 8002d0a:	2218      	movs	r2, #24
 8002d0c:	189b      	adds	r3, r3, r2
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
        break;
 8002d14:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	085a      	lsrs	r2, r3, #1
 8002d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d24:	18d2      	adds	r2, r2, r3
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	f7fd f9eb 	bl	8000108 <__udivsi3>
 8002d32:	0003      	movs	r3, r0
 8002d34:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d90a      	bls.n	8002d52 <UART_SetConfig+0x4fe>
 8002d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d205      	bcs.n	8002d52 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	e005      	b.n	8002d5e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002d52:	231a      	movs	r3, #26
 8002d54:	2218      	movs	r2, #24
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	19db      	adds	r3, r3, r7
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2200      	movs	r2, #0
 8002d62:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2200      	movs	r2, #0
 8002d68:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d6a:	231a      	movs	r3, #26
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	19db      	adds	r3, r3, r7
 8002d72:	781b      	ldrb	r3, [r3, #0]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b00e      	add	sp, #56	@ 0x38
 8002d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7c:	08003284 	.word	0x08003284
 8002d80:	40021000 	.word	0x40021000
 8002d84:	003d0900 	.word	0x003d0900
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	080032a8 	.word	0x080032a8

08002d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d00b      	beq.n	8002dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed4 <UART_AdvFeatureConfig+0x144>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d00b      	beq.n	8002ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a43      	ldr	r2, [pc, #268]	@ (8002ed8 <UART_AdvFeatureConfig+0x148>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	2202      	movs	r2, #2
 8002de2:	4013      	ands	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a3b      	ldr	r2, [pc, #236]	@ (8002edc <UART_AdvFeatureConfig+0x14c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	2204      	movs	r2, #4
 8002e04:	4013      	ands	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ee0 <UART_AdvFeatureConfig+0x150>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	2210      	movs	r2, #16
 8002e26:	4013      	ands	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <UART_AdvFeatureConfig+0x154>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	2220      	movs	r2, #32
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4a25      	ldr	r2, [pc, #148]	@ (8002ee8 <UART_AdvFeatureConfig+0x158>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	2240      	movs	r2, #64	@ 0x40
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a1d      	ldr	r2, [pc, #116]	@ (8002eec <UART_AdvFeatureConfig+0x15c>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	035b      	lsls	r3, r3, #13
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10b      	bne.n	8002eaa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <UART_AdvFeatureConfig+0x160>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	2280      	movs	r2, #128	@ 0x80
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef4 <UART_AdvFeatureConfig+0x164>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	ffff7fff 	.word	0xffff7fff
 8002ed8:	fffdffff 	.word	0xfffdffff
 8002edc:	fffeffff 	.word	0xfffeffff
 8002ee0:	fffbffff 	.word	0xfffbffff
 8002ee4:	ffffefff 	.word	0xffffefff
 8002ee8:	ffffdfff 	.word	0xffffdfff
 8002eec:	ffefffff 	.word	0xffefffff
 8002ef0:	ff9fffff 	.word	0xff9fffff
 8002ef4:	fff7ffff 	.word	0xfff7ffff

08002ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b092      	sub	sp, #72	@ 0x48
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2284      	movs	r2, #132	@ 0x84
 8002f04:	2100      	movs	r1, #0
 8002f06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f08:	f7fd fe4a 	bl	8000ba0 <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2208      	movs	r2, #8
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d12c      	bne.n	8002f78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f20:	2280      	movs	r2, #128	@ 0x80
 8002f22:	0391      	lsls	r1, r2, #14
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4a46      	ldr	r2, [pc, #280]	@ (8003040 <UART_CheckIdleState+0x148>)
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f000 f88c 	bl	8003048 <UART_WaitOnFlagUntilTimeout>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d021      	beq.n	8002f78 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8310 	mrs	r3, PRIMASK
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2180      	movs	r1, #128	@ 0x80
 8002f56:	438a      	bics	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2278      	movs	r2, #120	@ 0x78
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e05f      	b.n	8003038 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d146      	bne.n	8003014 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f88:	2280      	movs	r2, #128	@ 0x80
 8002f8a:	03d1      	lsls	r1, r2, #15
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003040 <UART_CheckIdleState+0x148>)
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f000 f858 	bl	8003048 <UART_WaitOnFlagUntilTimeout>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d03b      	beq.n	8003014 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			@ (mov r8, r8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4921      	ldr	r1, [pc, #132]	@ (8003044 <UART_CheckIdleState+0x14c>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fd8:	2301      	movs	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2101      	movs	r1, #1
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2280      	movs	r2, #128	@ 0x80
 8003004:	2120      	movs	r1, #32
 8003006:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2278      	movs	r2, #120	@ 0x78
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e011      	b.n	8003038 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	2120      	movs	r1, #32
 8003020:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2278      	movs	r2, #120	@ 0x78
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b010      	add	sp, #64	@ 0x40
 800303e:	bd80      	pop	{r7, pc}
 8003040:	01ffffff 	.word	0x01ffffff
 8003044:	fffffedf 	.word	0xfffffedf

08003048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	1dfb      	adds	r3, r7, #7
 8003056:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003058:	e051      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	3301      	adds	r3, #1
 800305e:	d04e      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fd fd9e 	bl	8000ba0 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e051      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2204      	movs	r2, #4
 8003082:	4013      	ands	r3, r2
 8003084:	d03b      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b80      	cmp	r3, #128	@ 0x80
 800308a:	d038      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b40      	cmp	r3, #64	@ 0x40
 8003090:	d035      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2208      	movs	r2, #8
 800309a:	4013      	ands	r3, r2
 800309c:	2b08      	cmp	r3, #8
 800309e:	d111      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2208      	movs	r2, #8
 80030a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f83c 	bl	8003128 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2284      	movs	r2, #132	@ 0x84
 80030b4:	2108      	movs	r1, #8
 80030b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2278      	movs	r2, #120	@ 0x78
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e02c      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	401a      	ands	r2, r3
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d112      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f81f 	bl	8003128 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2284      	movs	r2, #132	@ 0x84
 80030ee:	2120      	movs	r1, #32
 80030f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2278      	movs	r2, #120	@ 0x78
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e00f      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	425a      	negs	r2, r3
 800310e:	4153      	adcs	r3, r2
 8003110:	b2db      	uxtb	r3, r3
 8003112:	001a      	movs	r2, r3
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d09e      	beq.n	800305a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	@ 0x38
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	617b      	str	r3, [r7, #20]
  return(result);
 8003136:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4926      	ldr	r1, [pc, #152]	@ (80031ec <UART_EndRxTransfer+0xc4>)
 8003152:	400a      	ands	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003158:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f383 8810 	msr	PRIMASK, r3
}
 8003160:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8310 	mrs	r3, PRIMASK
 8003166:	623b      	str	r3, [r7, #32]
  return(result);
 8003168:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	633b      	str	r3, [r7, #48]	@ 0x30
 800316c:	2301      	movs	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	438a      	bics	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	2b01      	cmp	r3, #1
 800319a:	d118      	bne.n	80031ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319c:	f3ef 8310 	mrs	r3, PRIMASK
 80031a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a6:	2301      	movs	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			@ (mov r8, r8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2110      	movs	r1, #16
 80031be:	438a      	bics	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	@ 0x80
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b00e      	add	sp, #56	@ 0x38
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	fffffedf 	.word	0xfffffedf

080031f0 <memset>:
 80031f0:	0003      	movs	r3, r0
 80031f2:	1882      	adds	r2, r0, r2
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	7019      	strb	r1, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	2600      	movs	r6, #0
 8003204:	4c0c      	ldr	r4, [pc, #48]	@ (8003238 <__libc_init_array+0x38>)
 8003206:	4d0d      	ldr	r5, [pc, #52]	@ (800323c <__libc_init_array+0x3c>)
 8003208:	1b64      	subs	r4, r4, r5
 800320a:	10a4      	asrs	r4, r4, #2
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	2600      	movs	r6, #0
 8003212:	f000 f819 	bl	8003248 <_init>
 8003216:	4c0a      	ldr	r4, [pc, #40]	@ (8003240 <__libc_init_array+0x40>)
 8003218:	4d0a      	ldr	r5, [pc, #40]	@ (8003244 <__libc_init_array+0x44>)
 800321a:	1b64      	subs	r4, r4, r5
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	00b3      	lsls	r3, r6, #2
 8003226:	58eb      	ldr	r3, [r5, r3]
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	00b3      	lsls	r3, r6, #2
 8003230:	58eb      	ldr	r3, [r5, r3]
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	080032d4 	.word	0x080032d4
 800323c:	080032d4 	.word	0x080032d4
 8003240:	080032d8 	.word	0x080032d8
 8003244:	080032d4 	.word	0x080032d4

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
