
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004570  08004570  00005570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e4  080045e4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e4  080045e4  000055e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080045f8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080045f8  000061a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2f8  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283b  00000000  00000000  0001532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00017b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a06  00000000  00000000  00018870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152d3  00000000  00000000  00019276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001175f  00000000  00000000  0002e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863dd  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  000c60c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c8de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004558 	.word	0x08004558

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004558 	.word	0x08004558

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f004 f850 	bl	8004500 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000462:	4a38      	ldr	r2, [pc, #224]	@ (8000544 <MX_ADC_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b36      	ldr	r3, [pc, #216]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MX_ADC_Init+0xf4>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC_Init+0xf4>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fe1e 	bl	8001114 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 fa57 	bl	800098e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 f87d 	bl	80015f4 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fa46 	bl	800098e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <MX_ADC_Init+0xfc>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_ADC_Init+0xf4>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f870 	bl	80015f4 <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fa39 	bl	800098e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800051c:	003b      	movs	r3, r7
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_ADC_Init+0x100>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f863 	bl	80015f4 <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 fa2c 	bl	800098e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	20000028 	.word	0x20000028
 8000544:	40012400 	.word	0x40012400
 8000548:	04000002 	.word	0x04000002
 800054c:	3c008000 	.word	0x3c008000

08000550 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f003 ffcc 	bl	8004500 <memset>
  if(adcHandle->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <HAL_ADC_MspInit+0xa8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13d      	bne.n	80005ee <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 80005a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fab6 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0xb0>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f001 faa7 	bl	8001b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	@ 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40012400 	.word	0x40012400
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000800 	.word	0x50000800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	@ 0x2c
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2414      	movs	r4, #20
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f003 ff73 	bl	8004500 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b52      	ldr	r3, [pc, #328]	@ (8000764 <MX_GPIO_Init+0x160>)
 800061c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061e:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000620:	2104      	movs	r1, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000626:	4b4f      	ldr	r3, [pc, #316]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062a:	2204      	movs	r2, #4
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	4b4b      	ldr	r3, [pc, #300]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063e:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <MX_GPIO_Init+0x160>)
 800064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b40      	ldr	r3, [pc, #256]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066e:	4b3d      	ldr	r3, [pc, #244]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROOF_DIR_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2160      	movs	r1, #96	@ 0x60
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fbf5 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 8000688:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <MX_GPIO_Init+0x164>)
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fbef 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|OPACITY_Pin, GPIO_PIN_RESET);
 8000694:	23c0      	movs	r3, #192	@ 0xc0
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4834      	ldr	r0, [pc, #208]	@ (800076c <MX_GPIO_Init+0x168>)
 800069a:	2200      	movs	r2, #0
 800069c:	0019      	movs	r1, r3
 800069e:	f001 fbe8 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2284      	movs	r2, #132	@ 0x84
 80006ae:	0392      	lsls	r2, r2, #14
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_GPIO_Init+0x168>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f001 fa3c 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2203      	movs	r2, #3
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	22c4      	movs	r2, #196	@ 0xc4
 80006d0:	0392      	lsls	r2, r2, #14
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	4a23      	ldr	r2, [pc, #140]	@ (800076c <MX_GPIO_Init+0x168>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f001 fa2a 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROOF_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROOF_DIR_Pin;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2260      	movs	r2, #96	@ 0x60
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	193a      	adds	r2, r7, r4
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fa17 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2204      	movs	r2, #4
 8000712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2201      	movs	r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x164>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f001 fa05 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin OPACITY_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|OPACITY_Pin;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	22c0      	movs	r2, #192	@ 0xc0
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	187b      	adds	r3, r7, r1
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <MX_GPIO_Init+0x168>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f001 f9f1 	bl	8001b3c <HAL_GPIO_Init>

}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00b      	add	sp, #44	@ 0x2c
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400
 800076c:	50000800 	.word	0x50000800

08000770 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1 Second Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	static uint8_t timer_count = 0;

	if(htim->Instance == TIM7)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d112      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		timer_count++;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800078c:	701a      	strb	r2, [r3, #0]
		illum = 1;
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]

		//rain_read = 1;
		if(timer_count == 10)
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0a      	cmp	r3, #10
 800079a:	d105      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			rain = 1;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
			timer_count = 0;
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40001400 	.word	0x40001400
 80007b4:	20000092 	.word	0x20000092
 80007b8:	20000090 	.word	0x20000090
 80007bc:	20000091 	.word	0x20000091

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fc36 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f868 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff ff1a 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 fb92 	bl	8000ef8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80007d4:	f7ff fe3a 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 80007d8:	f000 faf0 	bl	8000dbc <MX_TIM7_Init>
  MX_TIM2_Init();
 80007dc:	f000 fa70 	bl	8000cc0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007e0:	f000 f8c0 	bl	8000964 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <main+0xb0>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fb32 	bl	8002e50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007ec:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <main+0xb4>)
 80007ee:	2104      	movs	r1, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fbc7 	bl	8002f84 <HAL_TIM_PWM_Start>

  // Initialize Motor
  Sunroof_Set(STOP);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 f92e 	bl	8000a58 <Sunroof_Set>
  encoder = 0;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <main+0xb8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(illum)
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <main+0xbc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d015      	beq.n	8000836 <main+0x76>
	  {
		  read_illum();
 800080a:	f000 f9d7 	bl	8000bbc <read_illum>
		  film_opacity = (in_illum < (out_illum - 50));
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <main+0xc0>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	001a      	movs	r2, r3
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <main+0xc4>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	b29b      	uxth	r3, r3
 800081c:	3b32      	subs	r3, #50	@ 0x32
 800081e:	2101      	movs	r1, #1
 8000820:	429a      	cmp	r2, r3
 8000822:	db01      	blt.n	8000828 <main+0x68>
 8000824:	2300      	movs	r3, #0
 8000826:	1c19      	adds	r1, r3, #0
 8000828:	b2cb      	uxtb	r3, r1
 800082a:	001a      	movs	r2, r3
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <main+0xc8>)
 800082e:	801a      	strh	r2, [r3, #0]
		  illum = 0;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <main+0xbc>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	  }
	  if(rain)
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <main+0xcc>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <main+0x88>
	  {
		  read_rain();
 800083e:	f000 f9d7 	bl	8000bf0 <read_rain>
		  rain = 0;
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <main+0xcc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
	  }

	  // 내부 조도가 밖의 조도보다 낮으면 켜짐
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, film_opacity);
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <main+0xc8>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	480e      	ldr	r0, [pc, #56]	@ (8000890 <main+0xd0>)
 8000856:	0019      	movs	r1, r3
 8000858:	f001 fb0b 	bl	8001e72 <HAL_GPIO_WritePin>

	  // 비 감지 시 켜짐
	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, rain_state);
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <main+0xd4>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	480d      	ldr	r0, [pc, #52]	@ (8000898 <main+0xd8>)
 8000864:	001a      	movs	r2, r3
 8000866:	2104      	movs	r1, #4
 8000868:	f001 fb03 	bl	8001e72 <HAL_GPIO_WritePin>
	  if(illum)
 800086c:	e7c9      	b.n	8000802 <main+0x42>
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	200000d4 	.word	0x200000d4
 8000874:	20000094 	.word	0x20000094
 8000878:	20000084 	.word	0x20000084
 800087c:	20000090 	.word	0x20000090
 8000880:	20000088 	.word	0x20000088
 8000884:	2000008a 	.word	0x2000008a
 8000888:	2000008e 	.word	0x2000008e
 800088c:	20000091 	.word	0x20000091
 8000890:	50000800 	.word	0x50000800
 8000894:	2000008c 	.word	0x2000008c
 8000898:	50000400 	.word	0x50000400

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b09f      	sub	sp, #124	@ 0x7c
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	2440      	movs	r4, #64	@ 0x40
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	0018      	movs	r0, r3
 80008a8:	2338      	movs	r3, #56	@ 0x38
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f003 fe27 	bl	8004500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b2:	232c      	movs	r3, #44	@ 0x2c
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0018      	movs	r0, r3
 80008b8:	2314      	movs	r3, #20
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f003 fe1f 	bl	8004500 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	0018      	movs	r0, r3
 80008c6:	2328      	movs	r3, #40	@ 0x28
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 fe18 	bl	8004500 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <SystemClock_Config+0xc0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <SystemClock_Config+0xc4>)
 80008d6:	401a      	ands	r2, r3
 80008d8:	4b20      	ldr	r3, [pc, #128]	@ (800095c <SystemClock_Config+0xc0>)
 80008da:	2180      	movs	r1, #128	@ 0x80
 80008dc:	0109      	lsls	r1, r1, #4
 80008de:	430a      	orrs	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	22a0      	movs	r2, #160	@ 0xa0
 80008ec:	02d2      	lsls	r2, r2, #11
 80008ee:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 faf3 	bl	8001ee4 <HAL_RCC_OscConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000902:	f000 f844 	bl	800098e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	212c      	movs	r1, #44	@ 0x2c
 8000908:	187b      	adds	r3, r7, r1
 800090a:	220f      	movs	r2, #15
 800090c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2202      	movs	r2, #2
 8000912:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2100      	movs	r1, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f001 feae 	bl	800268c <HAL_RCC_ClockConfig>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000934:	f000 f82b 	bl	800098e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2202      	movs	r2, #2
 800093c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	0018      	movs	r0, r3
 8000948:	f002 f8a4 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000950:	f000 f81d 	bl	800098e <Error_Handler>
  }
}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b01f      	add	sp, #124	@ 0x7c
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40007000 	.word	0x40007000
 8000960:	ffffe7ff 	.word	0xffffe7ff

08000964 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2005      	movs	r0, #5
 800096e:	f001 f8b3 	bl	8001ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000972:	2005      	movs	r0, #5
 8000974:	f001 f8c5 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2012      	movs	r0, #18
 800097e:	f001 f8ab 	bl	8001ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000982:	2012      	movs	r0, #18
 8000984:	f001 f8bd 	bl	8001b02 <HAL_NVIC_EnableIRQ>
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000992:	b672      	cpsid	i
}
 8000994:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	e7fd      	b.n	8000996 <Error_Handler+0x8>
	...

0800099c <HAL_GPIO_EXTI_Callback>:
 */

#include "roof.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	801a      	strh	r2, [r3, #0]
	uint8_t A_state = 0;
 80009a8:	250f      	movs	r5, #15
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	uint8_t B_state = 0;
 80009b0:	260e      	movs	r6, #14
 80009b2:	19bb      	adds	r3, r7, r6
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == ENC_A_Pin) {
 80009b8:	1dbb      	adds	r3, r7, #6
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d11e      	bne.n	80009fe <HAL_GPIO_EXTI_Callback+0x62>
		A_state = HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin);
 80009c0:	197c      	adds	r4, r7, r5
 80009c2:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xb4>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fa36 	bl	8001e38 <HAL_GPIO_ReadPin>
 80009cc:	0003      	movs	r3, r0
 80009ce:	7023      	strb	r3, [r4, #0]
		B_state = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 80009d0:	19bc      	adds	r4, r7, r6
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xb4>)
 80009d4:	2102      	movs	r1, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fa2e 	bl	8001e38 <HAL_GPIO_ReadPin>
 80009dc:	0003      	movs	r3, r0
 80009de:	7023      	strb	r3, [r4, #0]
		encoder += ((A_state == B_state) ? -1 : 1);
 80009e0:	197a      	adds	r2, r7, r5
 80009e2:	19bb      	adds	r3, r7, r6
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d102      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x56>
 80009ec:	2301      	movs	r3, #1
 80009ee:	425a      	negs	r2, r3
 80009f0:	e000      	b.n	80009f4 <HAL_GPIO_EXTI_Callback+0x58>
 80009f2:	2201      	movs	r2, #1
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	18d2      	adds	r2, r2, r3
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009fc:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == ENC_B_Pin) {
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d120      	bne.n	8000a48 <HAL_GPIO_EXTI_Callback+0xac>
		A_state = HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin);
 8000a06:	250f      	movs	r5, #15
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fa12 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000a14:	0003      	movs	r3, r0
 8000a16:	7023      	strb	r3, [r4, #0]
		B_state = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000a18:	260e      	movs	r6, #14
 8000a1a:	19bc      	adds	r4, r7, r6
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a1e:	2102      	movs	r1, #2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fa09 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000a26:	0003      	movs	r3, r0
 8000a28:	7023      	strb	r3, [r4, #0]
		encoder += ((A_state == B_state) ? 1 : -1);
 8000a2a:	197a      	adds	r2, r7, r5
 8000a2c:	19bb      	adds	r3, r7, r6
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_EXTI_Callback+0x9e>
 8000a36:	2201      	movs	r2, #1
 8000a38:	e001      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xa2>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	425a      	negs	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	18d2      	adds	r2, r2, r3
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a46:	601a      	str	r2, [r3, #0]
	}
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b005      	add	sp, #20
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a50:	50000800 	.word	0x50000800
 8000a54:	20000084 	.word	0x20000084

08000a58 <Sunroof_Set>:

void Sunroof_Set(uint8_t mode) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d013      	beq.n	8000a94 <Sunroof_Set+0x3c>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d123      	bne.n	8000ab8 <Sunroof_Set+0x60>
	case OPEN:
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <Sunroof_Set+0x80>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2250      	movs	r2, #80	@ 0x50
 8000a76:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <Sunroof_Set+0x84>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 f9f7 	bl	8001e72 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000a84:	23a0      	movs	r3, #160	@ 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 f9f0 	bl	8001e72 <HAL_GPIO_WritePin>
		break;
 8000a92:	e01c      	b.n	8000ace <Sunroof_Set+0x76>
	case CLOSE:
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <Sunroof_Set+0x80>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2250      	movs	r2, #80	@ 0x50
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <Sunroof_Set+0x84>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 f9e5 	bl	8001e72 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000aa8:	23a0      	movs	r3, #160	@ 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	2200      	movs	r2, #0
 8000aae:	2140      	movs	r1, #64	@ 0x40
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 f9de 	bl	8001e72 <HAL_GPIO_WritePin>
		break;
 8000ab6:	e00a      	b.n	8000ace <Sunroof_Set+0x76>
	case STOP:
	default:
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <Sunroof_Set+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <Sunroof_Set+0x84>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f9d3 	bl	8001e72 <HAL_GPIO_WritePin>
		break;
 8000acc:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	20000094 	.word	0x20000094
 8000adc:	50000800 	.word	0x50000800

08000ae0 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000ae8:	2316      	movs	r3, #22
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <HW_AdcReadChannel+0xc4>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2208      	movs	r2, #8
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b08      	cmp	r3, #8
 8000afc:	d1f9      	bne.n	8000af2 <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <HW_AdcReadChannel+0xc8>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b02:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <HW_AdcReadChannel+0xc8>)
 8000b04:	2180      	movs	r1, #128	@ 0x80
 8000b06:	0089      	lsls	r1, r1, #2
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fe97 	bl	8001844 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000b16:	240c      	movs	r4, #12
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	4a25      	ldr	r2, [pc, #148]	@ (8000bb0 <HW_AdcReadChannel+0xd0>)
 8000b1c:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	4a24      	ldr	r2, [pc, #144]	@ (8000bb4 <HW_AdcReadChannel+0xd4>)
 8000b22:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000b24:	193a      	adds	r2, r7, r4
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fd62 	bl	80015f4 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8000b30:	0021      	movs	r1, r4
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	0152      	lsls	r2, r2, #5
 8000b3e:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000b40:	187a      	adds	r2, r7, r1
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fd54 	bl	80015f4 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fc54 	bl	80013fc <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8000b54:	2301      	movs	r3, #1
 8000b56:	425a      	negs	r2, r3
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fca1 	bl	80014a4 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fd39 	bl	80015dc <HAL_ADC_GetValue>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	2016      	movs	r0, #22
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <HW_AdcReadChannel+0xcc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2203      	movs	r2, #3
 8000b88:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <HW_AdcReadChannel+0xc8>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HW_AdcReadChannel+0xc8>)
 8000b90:	4909      	ldr	r1, [pc, #36]	@ (8000bb8 <HW_AdcReadChannel+0xd8>)
 8000b92:	400a      	ands	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8000b96:	183b      	adds	r3, r7, r0
 8000b98:	881b      	ldrh	r3, [r3, #0]
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b007      	add	sp, #28
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	40007000 	.word	0x40007000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	0007ffff 	.word	0x0007ffff
 8000bb4:	00001001 	.word	0x00001001
 8000bb8:	fffffdff 	.word	0xfffffdff

08000bbc <read_illum>:

void read_illum(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <read_illum+0x28>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff ff8c 	bl	8000ae0 <HW_AdcReadChannel>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	001a      	movs	r2, r3
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <read_illum+0x2c>)
 8000bce:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff ff85 	bl	8000ae0 <HW_AdcReadChannel>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	001a      	movs	r2, r3
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <read_illum+0x30>)
 8000bdc:	801a      	strh	r2, [r3, #0]
}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	04000002 	.word	0x04000002
 8000be8:	20000088 	.word	0x20000088
 8000bec:	2000008a 	.word	0x2000008a

08000bf0 <read_rain>:

void read_rain(void){
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
	uint16_t rain_sense;

	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 8000bf6:	1dbc      	adds	r4, r7, #6
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <read_rain+0x34>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ff70 	bl	8000ae0 <HW_AdcReadChannel>
 8000c00:	0003      	movs	r3, r0
 8000c02:	8023      	strh	r3, [r4, #0]

	rain_state = (rain_sense > RAIN_TH);
 8000c04:	1dbb      	adds	r3, r7, #6
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	22c8      	movs	r2, #200	@ 0xc8
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	419b      	sbcs	r3, r3
 8000c10:	425b      	negs	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	001a      	movs	r2, r3
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <read_rain+0x38>)
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b003      	add	sp, #12
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	3c008000 	.word	0x3c008000
 8000c28:	2000008c 	.word	0x2000008c

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <HAL_MspInit+0x24>)
 8000c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x24>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <HAL_MspInit+0x24>)
 8000c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_MspInit+0x24>)
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	0549      	lsls	r1, r1, #21
 8000c46:	430a      	orrs	r2, r1
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 fa2e 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f001 f90e 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f001 f90b 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <TIM7_IRQHandler+0x14>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f002 fa00 	bl	80030a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	200000d4 	.word	0x200000d4

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	2318      	movs	r3, #24
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2310      	movs	r3, #16
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f003 fc15 	bl	8004500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	0018      	movs	r0, r3
 8000cdc:	2308      	movs	r3, #8
 8000cde:	001a      	movs	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f003 fc0d 	bl	8004500 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2310      	movs	r3, #16
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f003 fc06 	bl	8004500 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	05d2      	lsls	r2, r2, #23
 8000cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d08:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d0a:	2263      	movs	r2, #99	@ 0x63
 8000d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f002 f857 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f7ff fe32 	bl	800098e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	2118      	movs	r1, #24
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2280      	movs	r2, #128	@ 0x80
 8000d30:	0152      	lsls	r2, r2, #5
 8000d32:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d34:	187a      	adds	r2, r7, r1
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 fb46 	bl	80033cc <HAL_TIM_ConfigClockSource>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d44:	f7ff fe23 	bl	800098e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f002 f8d2 	bl	8002ef4 <HAL_TIM_PWM_Init>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d54:	f7ff fe1b 	bl	800098e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2110      	movs	r1, #16
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d66:	187a      	adds	r2, r7, r1
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 fe47 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000d76:	f7ff fe0a 	bl	800098e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	2260      	movs	r2, #96	@ 0x60
 8000d7e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	0039      	movs	r1, r7
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fa51 	bl	8003240 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000da2:	f7ff fdf4 	bl	800098e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <MX_TIM2_Init+0xf8>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f869 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b00a      	add	sp, #40	@ 0x28
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	20000094 	.word	0x20000094

08000dbc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	001a      	movs	r2, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f003 fb98 	bl	8004500 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000dd2:	4a16      	ldr	r2, [pc, #88]	@ (8000e2c <MX_TIM7_Init+0x70>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 799;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000dd8:	4a15      	ldr	r2, [pc, #84]	@ (8000e30 <MX_TIM7_Init+0x74>)
 8000dda:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <MX_TIM7_Init+0x78>)
 8000de6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f001 ffed 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000dfa:	f7ff fdc8 	bl	800098e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e0a:	003a      	movs	r2, r7
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_TIM7_Init+0x6c>)
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f002 fdf5 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000e1a:	f7ff fdb8 	bl	800098e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	200000d4 	.word	0x200000d4
 8000e2c:	40001400 	.word	0x40001400
 8000e30:	0000031f 	.word	0x0000031f
 8000e34:	0000270f 	.word	0x0000270f

08000e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d106      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e58:	e00a      	b.n	8000e70 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM7)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <HAL_TIM_Base_MspInit+0x44>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d105      	bne.n	8000e70 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40001400 	.word	0x40001400

08000e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	240c      	movs	r4, #12
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	2314      	movs	r3, #20
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f003 fb34 	bl	8004500 <memset>
  if(timHandle->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d121      	bne.n	8000ee8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_TIM_MspPostInit+0x70>)
 8000ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_TIM_MspPostInit+0x70>)
 8000eaa:	2102      	movs	r1, #2
 8000eac:	430a      	orrs	r2, r1
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_TIM_MspPostInit+0x70>)
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2202      	movs	r2, #2
 8000eda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <HAL_TIM_MspPostInit+0x74>)
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	f000 fe2a 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b009      	add	sp, #36	@ 0x24
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	50000400 	.word	0x50000400

08000ef8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <MX_USART2_UART_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f04:	22e1      	movs	r2, #225	@ 0xe1
 8000f06:	0252      	lsls	r2, r2, #9
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f002 fdbd 	bl	8003abc <HAL_UART_Init>
 8000f42:	1e03      	subs	r3, r0, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f7ff fd22 	bl	800098e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000114 	.word	0x20000114
 8000f54:	40004400 	.word	0x40004400

08000f58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	240c      	movs	r4, #12
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f003 fac8 	bl	8004500 <memset>
  if(uartHandle->Instance==USART2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d129      	bne.n	8000fce <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0x84>)
 8000f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_UART_MspInit+0x84>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0289      	lsls	r1, r1, #10
 8000f84:	430a      	orrs	r2, r1
 8000f86:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_UART_MspInit+0x84>)
 8000f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0x84>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_UART_MspInit+0x84>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fa0:	0021      	movs	r1, r4
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2202      	movs	r2, #2
 8000fac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	187a      	adds	r2, r7, r1
 8000fc2:	23a0      	movs	r3, #160	@ 0xa0
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fdb7 	bl	8001b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b009      	add	sp, #36	@ 0x24
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fe2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	f7ff fe66 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800100e:	f003 fa7f 	bl	8004510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fbd5 	bl	80007c0 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
   ldr   r0, =_estack
 8001018:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	200001a0 	.word	0x200001a0

08001030 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_COMP_IRQHandler>
	...

08001034 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_Init+0x3c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_Init+0x3c>)
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f811 	bl	8001074 <HAL_InitTick>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d003      	beq.n	800105e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e001      	b.n	8001062 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105e:	f7ff fde5 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_InitTick+0x5c>)
 800107e:	681c      	ldr	r4, [r3, #0]
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	0019      	movs	r1, r3
 8001086:	23fa      	movs	r3, #250	@ 0xfa
 8001088:	0098      	lsls	r0, r3, #2
 800108a:	f7ff f83d 	bl	8000108 <__udivsi3>
 800108e:	0003      	movs	r3, r0
 8001090:	0019      	movs	r1, r3
 8001092:	0020      	movs	r0, r4
 8001094:	f7ff f838 	bl	8000108 <__udivsi3>
 8001098:	0003      	movs	r3, r0
 800109a:	0018      	movs	r0, r3
 800109c:	f000 fd41 	bl	8001b22 <HAL_SYSTICK_Config>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e00f      	b.n	80010c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d80b      	bhi.n	80010c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	2301      	movs	r3, #1
 80010b2:	425b      	negs	r3, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fd0e 	bl	8001ad8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_InitTick+0x64>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b003      	add	sp, #12
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_IncTick+0x20>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	18d2      	adds	r2, r2, r3
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_IncTick+0x20>)
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	20000008 	.word	0x20000008
 80010fc:	2000019c 	.word	0x2000019c

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b02      	ldr	r3, [pc, #8]	@ (8001110 <HAL_GetTick+0x10>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	2000019c 	.word	0x2000019c

08001114 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e159      	b.n	80013da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10a      	bne.n	8001144 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2250      	movs	r2, #80	@ 0x50
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff fa06 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001148:	2210      	movs	r2, #16
 800114a:	4013      	ands	r3, r2
 800114c:	2b10      	cmp	r3, #16
 800114e:	d005      	beq.n	800115c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2204      	movs	r2, #4
 8001158:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800115a:	d00b      	beq.n	8001174 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001160:	2210      	movs	r2, #16
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2250      	movs	r2, #80	@ 0x50
 800116c:	2100      	movs	r1, #0
 800116e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e132      	b.n	80013da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001178:	4a9a      	ldr	r2, [pc, #616]	@ (80013e4 <HAL_ADC_Init+0x2d0>)
 800117a:	4013      	ands	r3, r2
 800117c:	2202      	movs	r2, #2
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2203      	movs	r2, #3
 800118c:	4013      	ands	r3, r2
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_ADC_Init+0x90>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_Init+0x90>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_ADC_Init+0x92>
 80011a4:	2300      	movs	r3, #0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d149      	bne.n	800123e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	23c0      	movs	r3, #192	@ 0xc0
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d00b      	beq.n	80011ce <HAL_ADC_Init+0xba>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	429a      	cmp	r2, r3
 80011c0:	d005      	beq.n	80011ce <HAL_ADC_Init+0xba>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d111      	bne.n	80011f2 <HAL_ADC_Init+0xde>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	0892      	lsrs	r2, r2, #2
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6919      	ldr	r1, [r3, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	e014      	b.n	800121c <HAL_ADC_Init+0x108>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	0892      	lsrs	r2, r2, #2
 8001200:	611a      	str	r2, [r3, #16]
 8001202:	4b79      	ldr	r3, [pc, #484]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001208:	4978      	ldr	r1, [pc, #480]	@ (80013ec <HAL_ADC_Init+0x2d8>)
 800120a:	400a      	ands	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b74      	ldr	r3, [pc, #464]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2118      	movs	r1, #24
 8001228:	438a      	bics	r2, r1
 800122a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800123e:	4b6a      	ldr	r3, [pc, #424]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001244:	496a      	ldr	r1, [pc, #424]	@ (80013f0 <HAL_ADC_Init+0x2dc>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800124a:	4b67      	ldr	r3, [pc, #412]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001252:	065a      	lsls	r2, r3, #25
 8001254:	4b64      	ldr	r3, [pc, #400]	@ (80013e8 <HAL_ADC_Init+0x2d4>)
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	055b      	lsls	r3, r3, #21
 8001264:	4013      	ands	r3, r2
 8001266:	d108      	bne.n	800127a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	0549      	lsls	r1, r1, #21
 8001276:	430a      	orrs	r2, r1
 8001278:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	495b      	ldr	r1, [pc, #364]	@ (80013f4 <HAL_ADC_Init+0x2e0>)
 8001286:	400a      	ands	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68d9      	ldr	r1, [r3, #12]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d101      	bne.n	80012a0 <HAL_ADC_Init+0x18c>
 800129c:	2304      	movs	r3, #4
 800129e:	e000      	b.n	80012a2 <HAL_ADC_Init+0x18e>
 80012a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2020      	movs	r0, #32
 80012a8:	5c1b      	ldrb	r3, [r3, r0]
 80012aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	202c      	movs	r0, #44	@ 0x2c
 80012b2:	5c1b      	ldrb	r3, [r3, r0]
 80012b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80012c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80012cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012da:	23c2      	movs	r3, #194	@ 0xc2
 80012dc:	33ff      	adds	r3, #255	@ 0xff
 80012de:	429a      	cmp	r2, r3
 80012e0:	d00b      	beq.n	80012fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2221      	movs	r2, #33	@ 0x21
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d11a      	bne.n	800133a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2220      	movs	r2, #32
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2180      	movs	r1, #128	@ 0x80
 800131a:	0249      	lsls	r1, r1, #9
 800131c:	430a      	orrs	r2, r1
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	e00b      	b.n	800133a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001326:	2220      	movs	r2, #32
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	2201      	movs	r2, #1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800133e:	2b01      	cmp	r3, #1
 8001340:	d11f      	bne.n	8001382 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	492a      	ldr	r1, [pc, #168]	@ (80013f8 <HAL_ADC_Init+0x2e4>)
 800134e:	400a      	ands	r2, r1
 8001350:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6919      	ldr	r1, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001360:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001366:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2101      	movs	r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	e00e      	b.n	80013a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	2b01      	cmp	r3, #1
 800138e:	d107      	bne.n	80013a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2107      	movs	r1, #7
 80013ac:	438a      	bics	r2, r1
 80013ae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6959      	ldr	r1, [r3, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	2203      	movs	r2, #3
 80013ce:	4393      	bics	r3, r2
 80013d0:	2201      	movs	r2, #1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	fffffefd 	.word	0xfffffefd
 80013e8:	40012708 	.word	0x40012708
 80013ec:	ffc3ffff 	.word	0xffc3ffff
 80013f0:	fdffffff 	.word	0xfdffffff
 80013f4:	fffe0219 	.word	0xfffe0219
 80013f8:	fffffc03 	.word	0xfffffc03

080013fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2204      	movs	r2, #4
 8001414:	4013      	ands	r3, r2
 8001416:	d138      	bne.n	800148a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2250      	movs	r2, #80	@ 0x50
 800141c:	5c9b      	ldrb	r3, [r3, r2]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_ADC_Start+0x2a>
 8001422:	2302      	movs	r3, #2
 8001424:	e038      	b.n	8001498 <HAL_ADC_Start+0x9c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2250      	movs	r2, #80	@ 0x50
 800142a:	2101      	movs	r1, #1
 800142c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d007      	beq.n	8001446 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001436:	230f      	movs	r3, #15
 8001438:	18fc      	adds	r4, r7, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0018      	movs	r0, r3
 800143e:	f000 f979 	bl	8001734 <ADC_Enable>
 8001442:	0003      	movs	r3, r0
 8001444:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d120      	bne.n	8001492 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_ADC_Start+0xa4>)
 8001456:	4013      	ands	r3, r2
 8001458:	2280      	movs	r2, #128	@ 0x80
 800145a:	0052      	lsls	r2, r2, #1
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2250      	movs	r2, #80	@ 0x50
 800146c:	2100      	movs	r1, #0
 800146e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	221c      	movs	r2, #28
 8001476:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2104      	movs	r1, #4
 8001484:	430a      	orrs	r2, r1
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	e003      	b.n	8001492 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800148a:	230f      	movs	r3, #15
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001492:	230f      	movs	r3, #15
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b005      	add	sp, #20
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	fffff0fe 	.word	0xfffff0fe

080014a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d102      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80014be:	2308      	movs	r3, #8
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e014      	b.n	80014ee <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d10b      	bne.n	80014ea <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d6:	2220      	movs	r2, #32
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2250      	movs	r2, #80	@ 0x50
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e072      	b.n	80015d0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014ea:	230c      	movs	r3, #12
 80014ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ee:	f7ff fe07 	bl	8001100 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014f6:	e01f      	b.n	8001538 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	d01c      	beq.n	8001538 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_ADC_PollForConversion+0x70>
 8001504:	f7ff fdfc 	bl	8001100 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d211      	bcs.n	8001538 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	d10b      	bne.n	8001538 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001524:	2204      	movs	r2, #4
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2250      	movs	r2, #80	@ 0x50
 8001530:	2100      	movs	r1, #0
 8001532:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e04b      	b.n	80015d0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	d0d9      	beq.n	80014f8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001548:	2280      	movs	r2, #128	@ 0x80
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	23c0      	movs	r3, #192	@ 0xc0
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d12e      	bne.n	80015be <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d129      	bne.n	80015be <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2208      	movs	r2, #8
 8001572:	4013      	ands	r3, r2
 8001574:	2b08      	cmp	r3, #8
 8001576:	d122      	bne.n	80015be <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2204      	movs	r2, #4
 8001580:	4013      	ands	r3, r2
 8001582:	d110      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	210c      	movs	r1, #12
 8001590:	438a      	bics	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001598:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <HAL_ADC_PollForConversion+0x134>)
 800159a:	4013      	ands	r3, r2
 800159c:	2201      	movs	r2, #1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80015a4:	e00b      	b.n	80015be <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015aa:	2220      	movs	r2, #32
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	2201      	movs	r2, #1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	fffffefe 	.word	0xfffffefe

080015dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2250      	movs	r2, #80	@ 0x50
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x18>
 8001608:	2302      	movs	r3, #2
 800160a:	e085      	b.n	8001718 <HAL_ADC_ConfigChannel+0x124>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2250      	movs	r2, #80	@ 0x50
 8001610:	2101      	movs	r1, #1
 8001612:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2204      	movs	r2, #4
 800161c:	4013      	ands	r3, r2
 800161e:	d00b      	beq.n	8001638 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001624:	2220      	movs	r2, #32
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2250      	movs	r2, #80	@ 0x50
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e06f      	b.n	8001718 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a38      	ldr	r2, [pc, #224]	@ (8001720 <HAL_ADC_ConfigChannel+0x12c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d035      	beq.n	80016ae <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	035b      	lsls	r3, r3, #13
 800164e:	0b5a      	lsrs	r2, r3, #13
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	02db      	lsls	r3, r3, #11
 8001660:	4013      	ands	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 800166a:	2180      	movs	r1, #128	@ 0x80
 800166c:	0409      	lsls	r1, r1, #16
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001672:	200a      	movs	r0, #10
 8001674:	f000 f8c6 	bl	8001804 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d006      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001684:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	03c9      	lsls	r1, r1, #15
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4013      	ands	r3, r2
 800169c:	d037      	beq.n	800170e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 80016a4:	2180      	movs	r1, #128	@ 0x80
 80016a6:	0449      	lsls	r1, r1, #17
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e02f      	b.n	800170e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	035b      	lsls	r3, r3, #13
 80016ba:	0b5b      	lsrs	r3, r3, #13
 80016bc:	43d9      	mvns	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	400a      	ands	r2, r1
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	02db      	lsls	r3, r3, #11
 80016ce:	4013      	ands	r3, r2
 80016d0:	d005      	beq.n	80016de <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 80016d8:	4913      	ldr	r1, [pc, #76]	@ (8001728 <HAL_ADC_ConfigChannel+0x134>)
 80016da:	400a      	ands	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	4013      	ands	r3, r2
 80016e8:	d005      	beq.n	80016f6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 80016f0:	490e      	ldr	r1, [pc, #56]	@ (800172c <HAL_ADC_ConfigChannel+0x138>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	4013      	ands	r3, r2
 8001700:	d005      	beq.n	800170e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_ADC_ConfigChannel+0x130>)
 8001708:	4909      	ldr	r1, [pc, #36]	@ (8001730 <HAL_ADC_ConfigChannel+0x13c>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2250      	movs	r2, #80	@ 0x50
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00001001 	.word	0x00001001
 8001724:	40012708 	.word	0x40012708
 8001728:	ff7fffff 	.word	0xff7fffff
 800172c:	ffbfffff 	.word	0xffbfffff
 8001730:	feffffff 	.word	0xfeffffff

08001734 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <ADC_Enable+0x2c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <ADC_Enable+0x2c>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <ADC_Enable+0x2e>
 8001760:	2300      	movs	r3, #0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d146      	bne.n	80017f4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a24      	ldr	r2, [pc, #144]	@ (8001800 <ADC_Enable+0xcc>)
 800176e:	4013      	ands	r3, r2
 8001770:	d00d      	beq.n	800178e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001776:	2210      	movs	r2, #16
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	2201      	movs	r2, #1
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e033      	b.n	80017f6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 f830 	bl	8001804 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fcac 	bl	8001100 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017ac:	e01b      	b.n	80017e6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017ae:	f7ff fca7 	bl	8001100 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b0a      	cmp	r3, #10
 80017ba:	d914      	bls.n	80017e6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d00d      	beq.n	80017e6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ce:	2210      	movs	r2, #16
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	2201      	movs	r2, #1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e007      	b.n	80017f6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d1dc      	bne.n	80017ae <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	80000017 	.word	0x80000017

08001804 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <ADC_DelayMicroSecond+0x38>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	490b      	ldr	r1, [pc, #44]	@ (8001840 <ADC_DelayMicroSecond+0x3c>)
 8001812:	0018      	movs	r0, r3
 8001814:	f7fe fc78 	bl	8000108 <__udivsi3>
 8001818:	0003      	movs	r3, r0
 800181a:	001a      	movs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4353      	muls	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001822:	e002      	b.n	800182a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3b01      	subs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f9      	bne.n	8001824 <ADC_DelayMicroSecond+0x20>
  }
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	20000000 	.word	0x20000000
 8001840:	000f4240 	.word	0x000f4240

08001844 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184e:	2317      	movs	r3, #23
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2250      	movs	r2, #80	@ 0x50
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADCEx_Calibration_Start+0x28>
 8001868:	2302      	movs	r3, #2
 800186a:	e083      	b.n	8001974 <HAL_ADCEx_Calibration_Start+0x130>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2250      	movs	r2, #80	@ 0x50
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2203      	movs	r2, #3
 800187c:	4013      	ands	r3, r2
 800187e:	2b01      	cmp	r3, #1
 8001880:	d108      	bne.n	8001894 <HAL_ADCEx_Calibration_Start+0x50>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADCEx_Calibration_Start+0x50>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_ADCEx_Calibration_Start+0x52>
 8001894:	2300      	movs	r3, #0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d15b      	bne.n	8001952 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189e:	4a37      	ldr	r2, [pc, #220]	@ (800197c <HAL_ADCEx_Calibration_Start+0x138>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	2202      	movs	r2, #2
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2203      	movs	r2, #3
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2103      	movs	r1, #3
 80018c2:	438a      	bics	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0609      	lsls	r1, r1, #24
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80018d8:	f7ff fc12 	bl	8001100 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018e0:	e01d      	b.n	800191e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018e2:	f7ff fc0d 	bl	8001100 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	d916      	bls.n	800191e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0fdb      	lsrs	r3, r3, #31
 80018f8:	07da      	lsls	r2, r3, #31
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	429a      	cmp	r2, r3
 8001900:	d10d      	bne.n	800191e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	2212      	movs	r2, #18
 8001908:	4393      	bics	r3, r2
 800190a:	2210      	movs	r2, #16
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2250      	movs	r2, #80	@ 0x50
 8001916:	2100      	movs	r1, #0
 8001918:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e02a      	b.n	8001974 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	0fdb      	lsrs	r3, r3, #31
 8001926:	07da      	lsls	r2, r3, #31
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	061b      	lsls	r3, r3, #24
 800192c:	429a      	cmp	r2, r3
 800192e:	d0d8      	beq.n	80018e2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68d9      	ldr	r1, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	2203      	movs	r2, #3
 8001946:	4393      	bics	r3, r2
 8001948:	2201      	movs	r2, #1
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001950:	e009      	b.n	8001966 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001956:	2220      	movs	r2, #32
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800195e:	2317      	movs	r3, #23
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2250      	movs	r2, #80	@ 0x50
 800196a:	2100      	movs	r1, #0
 800196c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800196e:	2317      	movs	r3, #23
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b006      	add	sp, #24
 800197a:	bd80      	pop	{r7, pc}
 800197c:	fffffefd 	.word	0xfffffefd

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	0002      	movs	r2, r0
 8001988:	1dfb      	adds	r3, r7, #7
 800198a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b7f      	cmp	r3, #127	@ 0x7f
 8001992:	d809      	bhi.n	80019a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	231f      	movs	r3, #31
 800199c:	401a      	ands	r2, r3
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <__NVIC_EnableIRQ+0x30>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	4091      	lsls	r1, r2
 80019a4:	000a      	movs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
  }
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	0002      	movs	r2, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80019c8:	d828      	bhi.n	8001a1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001a88 <__NVIC_SetPriority+0xd4>)
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	33c0      	adds	r3, #192	@ 0xc0
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	589b      	ldr	r3, [r3, r2]
 80019da:	1dfa      	adds	r2, r7, #7
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	0011      	movs	r1, r2
 80019e0:	2203      	movs	r2, #3
 80019e2:	400a      	ands	r2, r1
 80019e4:	00d2      	lsls	r2, r2, #3
 80019e6:	21ff      	movs	r1, #255	@ 0xff
 80019e8:	4091      	lsls	r1, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	22ff      	movs	r2, #255	@ 0xff
 80019f8:	401a      	ands	r2, r3
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	0018      	movs	r0, r3
 8001a00:	2303      	movs	r3, #3
 8001a02:	4003      	ands	r3, r0
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a08:	481f      	ldr	r0, [pc, #124]	@ (8001a88 <__NVIC_SetPriority+0xd4>)
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	430a      	orrs	r2, r1
 8001a14:	33c0      	adds	r3, #192	@ 0xc0
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a1a:	e031      	b.n	8001a80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <__NVIC_SetPriority+0xd8>)
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	0019      	movs	r1, r3
 8001a24:	230f      	movs	r3, #15
 8001a26:	400b      	ands	r3, r1
 8001a28:	3b08      	subs	r3, #8
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3306      	adds	r3, #6
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	3304      	adds	r3, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1dfa      	adds	r2, r7, #7
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	400a      	ands	r2, r1
 8001a40:	00d2      	lsls	r2, r2, #3
 8001a42:	21ff      	movs	r1, #255	@ 0xff
 8001a44:	4091      	lsls	r1, r2
 8001a46:	000a      	movs	r2, r1
 8001a48:	43d2      	mvns	r2, r2
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	019b      	lsls	r3, r3, #6
 8001a52:	22ff      	movs	r2, #255	@ 0xff
 8001a54:	401a      	ands	r2, r3
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	4003      	ands	r3, r0
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a64:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <__NVIC_SetPriority+0xd8>)
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	001c      	movs	r4, r3
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	4023      	ands	r3, r4
 8001a70:	3b08      	subs	r3, #8
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	430a      	orrs	r2, r1
 8001a76:	3306      	adds	r3, #6
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	18c3      	adds	r3, r0, r3
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	46c0      	nop			@ (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b003      	add	sp, #12
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	045b      	lsls	r3, r3, #17
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d301      	bcc.n	8001aa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e010      	b.n	8001aca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <SysTick_Config+0x44>)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	3a01      	subs	r2, #1
 8001aae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	425b      	negs	r3, r3
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff ff7c 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SysTick_Config+0x44>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <SysTick_Config+0x44>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	1c02      	adds	r2, r0, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	0011      	movs	r1, r2
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b004      	add	sp, #16
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	0002      	movs	r2, r0
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff ff33 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff ffaf 	bl	8001a90 <SysTick_Config>
 8001b32:	0003      	movs	r3, r0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b52:	e155      	b.n	8001e00 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <HAL_GPIO_Init+0x30>
 8001b6a:	e146      	b.n	8001dfa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d005      	beq.n	8001b84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	43da      	mvns	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	0013      	movs	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d017      	beq.n	8001c22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	409a      	lsls	r2, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2203      	movs	r2, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	58d3      	ldr	r3, [r2, r3]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2207      	movs	r2, #7
 8001c40:	4013      	ands	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2107      	movs	r1, #7
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	6939      	ldr	r1, [r7, #16]
 8001c74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	43da      	mvns	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2203      	movs	r2, #3
 8001c94:	401a      	ands	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	0013      	movs	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	23c0      	movs	r3, #192	@ 0xc0
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d100      	bne.n	8001cb8 <HAL_GPIO_Init+0x17c>
 8001cb6:	e0a0      	b.n	8001dfa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cbc:	4b56      	ldr	r3, [pc, #344]	@ (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc4:	4a55      	ldr	r2, [pc, #340]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	589b      	ldr	r3, [r3, r2]
 8001cd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	23a0      	movs	r3, #160	@ 0xa0
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x1f6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x1f2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	@ (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1ea>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	@ (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1e6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_GPIO_Init+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d1e:	2306      	movs	r3, #6
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001d32:	2300      	movs	r3, #0
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	2103      	movs	r1, #3
 8001d38:	400a      	ands	r2, r1
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	035b      	lsls	r3, r3, #13
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43da      	mvns	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	039b      	lsls	r3, r3, #14
 8001d94:	4013      	ands	r3, r2
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001da0:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43da      	mvns	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	4013      	ands	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	40da      	lsrs	r2, r3
 8001e08:	1e13      	subs	r3, r2, #0
 8001e0a:	d000      	beq.n	8001e0e <HAL_GPIO_Init+0x2d2>
 8001e0c:	e6a2      	b.n	8001b54 <HAL_GPIO_Init+0x18>
  }
}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b006      	add	sp, #24
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	50000400 	.word	0x50000400
 8001e24:	50000800 	.word	0x50000800
 8001e28:	50000c00 	.word	0x50000c00
 8001e2c:	50001000 	.word	0x50001000
 8001e30:	50001c00 	.word	0x50001c00
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	000a      	movs	r2, r1
 8001e42:	1cbb      	adds	r3, r7, #2
 8001e44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	1cba      	adds	r2, r7, #2
 8001e4c:	8812      	ldrh	r2, [r2, #0]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d004      	beq.n	8001e5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	0008      	movs	r0, r1
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	1c02      	adds	r2, r0, #0
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	1c7b      	adds	r3, r7, #1
 8001e86:	1c0a      	adds	r2, r1, #0
 8001e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e8a:	1c7b      	adds	r3, r7, #1
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	1cbb      	adds	r3, r7, #2
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e9a:	e003      	b.n	8001ea4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e9c:	1cbb      	adds	r3, r7, #2
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	1dba      	adds	r2, r7, #6
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d008      	beq.n	8001ed6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7fe fd63 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b5b0      	push	{r4, r5, r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f000 fbbf 	bl	8002676 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef8:	4bc9      	ldr	r3, [pc, #804]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	220c      	movs	r2, #12
 8001efe:	4013      	ands	r3, r2
 8001f00:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f02:	4bc7      	ldr	r3, [pc, #796]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x36>
 8001f18:	e07e      	b.n	8002018 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d007      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d112      	bne.n	8001f4c <HAL_RCC_OscConfig+0x68>
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	4bbb      	ldr	r3, [pc, #748]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	029b      	lsls	r3, r3, #10
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5a>
 8001f3c:	e06b      	b.n	8002016 <HAL_RCC_OscConfig+0x132>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d167      	bne.n	8002016 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f000 fb95 	bl	8002676 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x84>
 8001f58:	4bb1      	ldr	r3, [pc, #708]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4bb0      	ldr	r3, [pc, #704]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0249      	lsls	r1, r1, #9
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e027      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	23a0      	movs	r3, #160	@ 0xa0
 8001f6e:	02db      	lsls	r3, r3, #11
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10e      	bne.n	8001f92 <HAL_RCC_OscConfig+0xae>
 8001f74:	4baa      	ldr	r3, [pc, #680]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4ba9      	ldr	r3, [pc, #676]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f7a:	2180      	movs	r1, #128	@ 0x80
 8001f7c:	02c9      	lsls	r1, r1, #11
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4ba7      	ldr	r3, [pc, #668]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4ba6      	ldr	r3, [pc, #664]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f88:	2180      	movs	r1, #128	@ 0x80
 8001f8a:	0249      	lsls	r1, r1, #9
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e012      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f92:	4ba3      	ldr	r3, [pc, #652]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4ba2      	ldr	r3, [pc, #648]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f98:	49a2      	ldr	r1, [pc, #648]	@ (8002224 <HAL_RCC_OscConfig+0x340>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	4ba0      	ldr	r3, [pc, #640]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4b9c      	ldr	r3, [pc, #624]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fb2:	499d      	ldr	r1, [pc, #628]	@ (8002228 <HAL_RCC_OscConfig+0x344>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f89e 	bl	8001100 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fca:	f7ff f899 	bl	8001100 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	@ 0x64
 8001fd6:	d902      	bls.n	8001fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f000 fb4c 	bl	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fde:	4b90      	ldr	r3, [pc, #576]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d0ef      	beq.n	8001fca <HAL_RCC_OscConfig+0xe6>
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f888 	bl	8001100 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff6:	f7ff f883 	bl	8001100 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	@ 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e336      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002008:	4b85      	ldr	r3, [pc, #532]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x112>
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d100      	bne.n	8002024 <HAL_RCC_OscConfig+0x140>
 8002022:	e099      	b.n	8002158 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	2220      	movs	r2, #32
 800202e:	4013      	ands	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002032:	4b7b      	ldr	r3, [pc, #492]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b7a      	ldr	r3, [pc, #488]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002038:	2120      	movs	r1, #32
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	2220      	movs	r2, #32
 8002042:	4393      	bics	r3, r2
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d13e      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1ec>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d13b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002058:	4b71      	ldr	r3, [pc, #452]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2204      	movs	r2, #4
 800205e:	4013      	ands	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_RCC_OscConfig+0x188>
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e304      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b6c      	ldr	r3, [pc, #432]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a6e      	ldr	r2, [pc, #440]	@ (800222c <HAL_RCC_OscConfig+0x348>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	021a      	lsls	r2, r3, #8
 800207c:	4b68      	ldr	r3, [pc, #416]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002082:	4b67      	ldr	r3, [pc, #412]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2209      	movs	r2, #9
 8002088:	4393      	bics	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	4b64      	ldr	r3, [pc, #400]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002094:	f000 fc42 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8002098:	0001      	movs	r1, r0
 800209a:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	220f      	movs	r2, #15
 80020a2:	4013      	ands	r3, r2
 80020a4:	4a62      	ldr	r2, [pc, #392]	@ (8002230 <HAL_RCC_OscConfig+0x34c>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	000a      	movs	r2, r1
 80020aa:	40da      	lsrs	r2, r3
 80020ac:	4b61      	ldr	r3, [pc, #388]	@ (8002234 <HAL_RCC_OscConfig+0x350>)
 80020ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020b0:	4b61      	ldr	r3, [pc, #388]	@ (8002238 <HAL_RCC_OscConfig+0x354>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2513      	movs	r5, #19
 80020b6:	197c      	adds	r4, r7, r5
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7fe ffdb 	bl	8001074 <HAL_InitTick>
 80020be:	0003      	movs	r3, r0
 80020c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020c2:	197b      	adds	r3, r7, r5
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d046      	beq.n	8002158 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80020ca:	197b      	adds	r3, r7, r5
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	e2d2      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d027      	beq.n	8002126 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020d6:	4b52      	ldr	r3, [pc, #328]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2209      	movs	r2, #9
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 80020e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f80a 	bl	8001100 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff f805 	bl	8001100 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2b8      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	d0f1      	beq.n	80020f2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b44      	ldr	r3, [pc, #272]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a46      	ldr	r2, [pc, #280]	@ (800222c <HAL_RCC_OscConfig+0x348>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	e018      	b.n	8002158 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b3e      	ldr	r3, [pc, #248]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b3d      	ldr	r3, [pc, #244]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800212c:	2101      	movs	r1, #1
 800212e:	438a      	bics	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe ffe5 	bl	8001100 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213c:	f7fe ffe0 	bl	8001100 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e293      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800214e:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2204      	movs	r2, #4
 8002154:	4013      	ands	r3, r2
 8002156:	d1f1      	bne.n	800213c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2210      	movs	r2, #16
 800215e:	4013      	ands	r3, r2
 8002160:	d100      	bne.n	8002164 <HAL_RCC_OscConfig+0x280>
 8002162:	e0a2      	b.n	80022aa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d140      	bne.n	80021ec <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216a:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x29e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e279      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002182:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <HAL_RCC_OscConfig+0x358>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002190:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	0a19      	lsrs	r1, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	061a      	lsls	r2, r3, #24
 80021a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	3301      	adds	r3, #1
 80021b2:	2280      	movs	r2, #128	@ 0x80
 80021b4:	0212      	lsls	r2, r2, #8
 80021b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021b8:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	210f      	movs	r1, #15
 80021c0:	400b      	ands	r3, r1
 80021c2:	491b      	ldr	r1, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x34c>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <HAL_RCC_OscConfig+0x350>)
 80021ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <HAL_RCC_OscConfig+0x354>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2513      	movs	r5, #19
 80021d2:	197c      	adds	r4, r7, r5
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fe ff4d 	bl	8001074 <HAL_InitTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021de:	197b      	adds	r3, r7, r5
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d061      	beq.n	80022aa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80021e6:	197b      	adds	r3, r7, r5
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	e244      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d040      	beq.n	8002276 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021fa:	2180      	movs	r1, #128	@ 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe ff7d 	bl	8001100 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800220c:	f7fe ff78 	bl	8001100 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d912      	bls.n	8002240 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e22b      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	fffeffff 	.word	0xfffeffff
 8002228:	fffbffff 	.word	0xfffbffff
 800222c:	ffffe0ff 	.word	0xffffe0ff
 8002230:	08004570 	.word	0x08004570
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004
 800223c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002240:	4bca      	ldr	r3, [pc, #808]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d0df      	beq.n	800220c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224c:	4bc7      	ldr	r3, [pc, #796]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4ac7      	ldr	r2, [pc, #796]	@ (8002570 <HAL_RCC_OscConfig+0x68c>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800225a:	4bc4      	ldr	r3, [pc, #784]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002260:	4bc2      	ldr	r3, [pc, #776]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	0a19      	lsrs	r1, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	061a      	lsls	r2, r3, #24
 800226e:	4bbf      	ldr	r3, [pc, #764]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	e019      	b.n	80022aa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002276:	4bbd      	ldr	r3, [pc, #756]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4bbc      	ldr	r3, [pc, #752]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800227c:	49bd      	ldr	r1, [pc, #756]	@ (8002574 <HAL_RCC_OscConfig+0x690>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe ff3d 	bl	8001100 <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228c:	f7fe ff38 	bl	8001100 <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1eb      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800229e:	4bb3      	ldr	r3, [pc, #716]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2208      	movs	r2, #8
 80022b0:	4013      	ands	r3, r2
 80022b2:	d036      	beq.n	8002322 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d019      	beq.n	80022f0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022bc:	4bab      	ldr	r3, [pc, #684]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80022be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c0:	4baa      	ldr	r3, [pc, #680]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff1a 	bl	8001100 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7fe ff15 	bl	8001100 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1c8      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e4:	4ba1      	ldr	r3, [pc, #644]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80022e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f1      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3ee>
 80022ee:	e018      	b.n	8002322 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f0:	4b9e      	ldr	r3, [pc, #632]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80022f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022f4:	4b9d      	ldr	r3, [pc, #628]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7fe ff00 	bl	8001100 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fefb 	bl	8001100 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1ae      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002318:	4b94      	ldr	r3, [pc, #592]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800231a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1f1      	bne.n	8002306 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2204      	movs	r2, #4
 8002328:	4013      	ands	r3, r2
 800232a:	d100      	bne.n	800232e <HAL_RCC_OscConfig+0x44a>
 800232c:	e0ae      	b.n	800248c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2023      	movs	r0, #35	@ 0x23
 8002330:	183b      	adds	r3, r7, r0
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b8d      	ldr	r3, [pc, #564]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	055b      	lsls	r3, r3, #21
 800233e:	4013      	ands	r3, r2
 8002340:	d109      	bne.n	8002356 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b8a      	ldr	r3, [pc, #552]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002346:	4b89      	ldr	r3, [pc, #548]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002348:	2180      	movs	r1, #128	@ 0x80
 800234a:	0549      	lsls	r1, r1, #21
 800234c:	430a      	orrs	r2, r1
 800234e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002350:	183b      	adds	r3, r7, r0
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b88      	ldr	r3, [pc, #544]	@ (8002578 <HAL_RCC_OscConfig+0x694>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d11a      	bne.n	8002398 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b85      	ldr	r3, [pc, #532]	@ (8002578 <HAL_RCC_OscConfig+0x694>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b84      	ldr	r3, [pc, #528]	@ (8002578 <HAL_RCC_OscConfig+0x694>)
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0049      	lsls	r1, r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002370:	f7fe fec6 	bl	8001100 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe fec1 	bl	8001100 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	@ 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e174      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b7a      	ldr	r3, [pc, #488]	@ (8002578 <HAL_RCC_OscConfig+0x694>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
 80023a4:	4b71      	ldr	r3, [pc, #452]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a8:	4b70      	ldr	r3, [pc, #448]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023aa:	2180      	movs	r1, #128	@ 0x80
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80023b2:	e031      	b.n	8002418 <HAL_RCC_OscConfig+0x534>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4f2>
 80023bc:	4b6b      	ldr	r3, [pc, #428]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023c0:	4b6a      	ldr	r3, [pc, #424]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023c2:	496c      	ldr	r1, [pc, #432]	@ (8002574 <HAL_RCC_OscConfig+0x690>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80023c8:	4b68      	ldr	r3, [pc, #416]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023cc:	4b67      	ldr	r3, [pc, #412]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023ce:	496b      	ldr	r1, [pc, #428]	@ (800257c <HAL_RCC_OscConfig+0x698>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80023d4:	e020      	b.n	8002418 <HAL_RCC_OscConfig+0x534>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	23a0      	movs	r3, #160	@ 0xa0
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10e      	bne.n	8002400 <HAL_RCC_OscConfig+0x51c>
 80023e2:	4b62      	ldr	r3, [pc, #392]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023e6:	4b61      	ldr	r3, [pc, #388]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023e8:	2180      	movs	r1, #128	@ 0x80
 80023ea:	00c9      	lsls	r1, r1, #3
 80023ec:	430a      	orrs	r2, r1
 80023ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80023f0:	4b5e      	ldr	r3, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023f4:	4b5d      	ldr	r3, [pc, #372]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80023f6:	2180      	movs	r1, #128	@ 0x80
 80023f8:	0049      	lsls	r1, r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x534>
 8002400:	4b5a      	ldr	r3, [pc, #360]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002402:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002404:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002406:	495b      	ldr	r1, [pc, #364]	@ (8002574 <HAL_RCC_OscConfig+0x690>)
 8002408:	400a      	ands	r2, r1
 800240a:	651a      	str	r2, [r3, #80]	@ 0x50
 800240c:	4b57      	ldr	r3, [pc, #348]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800240e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002410:	4b56      	ldr	r3, [pc, #344]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002412:	495a      	ldr	r1, [pc, #360]	@ (800257c <HAL_RCC_OscConfig+0x698>)
 8002414:	400a      	ands	r2, r1
 8002416:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7fe fe6e 	bl	8001100 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fe69 	bl	8001100 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a52      	ldr	r2, [pc, #328]	@ (8002580 <HAL_RCC_OscConfig+0x69c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e11b      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243e:	4b4b      	ldr	r3, [pc, #300]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d0ef      	beq.n	800242a <HAL_RCC_OscConfig+0x546>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe fe58 	bl	8001100 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002454:	e009      	b.n	800246a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fe53 	bl	8001100 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a47      	ldr	r2, [pc, #284]	@ (8002580 <HAL_RCC_OscConfig+0x69c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e105      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246a:	4b40      	ldr	r3, [pc, #256]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800246c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4013      	ands	r3, r2
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002476:	2323      	movs	r3, #35	@ 0x23
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002484:	4b39      	ldr	r3, [pc, #228]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002486:	493f      	ldr	r1, [pc, #252]	@ (8002584 <HAL_RCC_OscConfig+0x6a0>)
 8002488:	400a      	ands	r2, r1
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4013      	ands	r3, r2
 8002494:	d049      	beq.n	800252a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d026      	beq.n	80024ec <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800249e:	4b33      	ldr	r3, [pc, #204]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	4b32      	ldr	r3, [pc, #200]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	4b30      	ldr	r3, [pc, #192]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ae:	4b2f      	ldr	r3, [pc, #188]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024b0:	2101      	movs	r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b6:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	4b33      	ldr	r3, [pc, #204]	@ (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	0189      	lsls	r1, r1, #6
 80024c0:	430a      	orrs	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fe1c 	bl	8001100 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7fe fe17 	bl	8001100 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ca      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024e0:	4b22      	ldr	r3, [pc, #136]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d0f1      	beq.n	80024ce <HAL_RCC_OscConfig+0x5ea>
 80024ea:	e01e      	b.n	800252a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024ec:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	438a      	bics	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024fe:	4923      	ldr	r1, [pc, #140]	@ (800258c <HAL_RCC_OscConfig+0x6a8>)
 8002500:	400a      	ands	r2, r1
 8002502:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fdfc 	bl	8001100 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250e:	f7fe fdf7 	bl	8001100 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0aa      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1f1      	bne.n	800250e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	2b00      	cmp	r3, #0
 8002530:	d100      	bne.n	8002534 <HAL_RCC_OscConfig+0x650>
 8002532:	e09f      	b.n	8002674 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d100      	bne.n	800253c <HAL_RCC_OscConfig+0x658>
 800253a:	e078      	b.n	800262e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	2b02      	cmp	r3, #2
 8002542:	d159      	bne.n	80025f8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <HAL_RCC_OscConfig+0x688>)
 800254a:	4911      	ldr	r1, [pc, #68]	@ (8002590 <HAL_RCC_OscConfig+0x6ac>)
 800254c:	400a      	ands	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fdd6 	bl	8001100 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fdd1 	bl	8001100 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d915      	bls.n	8002594 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e084      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
 800256c:	40021000 	.word	0x40021000
 8002570:	ffff1fff 	.word	0xffff1fff
 8002574:	fffffeff 	.word	0xfffffeff
 8002578:	40007000 	.word	0x40007000
 800257c:	fffffbff 	.word	0xfffffbff
 8002580:	00001388 	.word	0x00001388
 8002584:	efffffff 	.word	0xefffffff
 8002588:	40010000 	.word	0x40010000
 800258c:	ffffdfff 	.word	0xffffdfff
 8002590:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002594:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	049b      	lsls	r3, r3, #18
 800259c:	4013      	ands	r3, r2
 800259e:	d1dc      	bne.n	800255a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a37      	ldr	r2, [pc, #220]	@ (8002684 <HAL_RCC_OscConfig+0x7a0>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	431a      	orrs	r2, r3
 80025ba:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	0449      	lsls	r1, r1, #17
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fd97 	bl	8001100 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fd92 	bl	8001100 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025ea:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	049b      	lsls	r3, r3, #18
 80025f2:	4013      	ands	r3, r2
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x6f4>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025fe:	4922      	ldr	r1, [pc, #136]	@ (8002688 <HAL_RCC_OscConfig+0x7a4>)
 8002600:	400a      	ands	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe fd7c 	bl	8001100 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fd77 	bl	8001100 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e02a      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	049b      	lsls	r3, r3, #18
 8002628:	4013      	ands	r3, r2
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x72a>
 800262c:	e022      	b.n	8002674 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e01d      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_RCC_OscConfig+0x79c>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	429a      	cmp	r2, r3
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	23f0      	movs	r3, #240	@ 0xf0
 8002654:	039b      	lsls	r3, r3, #14
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	23c0      	movs	r3, #192	@ 0xc0
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b00a      	add	sp, #40	@ 0x28
 800267c:	bdb0      	pop	{r4, r5, r7, pc}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	ff02ffff 	.word	0xff02ffff
 8002688:	feffffff 	.word	0xfeffffff

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e128      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b96      	ldr	r3, [pc, #600]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d91e      	bls.n	80026ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b93      	ldr	r3, [pc, #588]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4393      	bics	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b90      	ldr	r3, [pc, #576]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fd1e 	bl	8001100 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7fe fd19 	bl	8001100 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a8a      	ldr	r2, [pc, #552]	@ (8002900 <HAL_RCC_ClockConfig+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e109      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b87      	ldr	r3, [pc, #540]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f6:	4b83      	ldr	r3, [pc, #524]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	22f0      	movs	r2, #240	@ 0xf0
 80026fc:	4393      	bics	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	4b7f      	ldr	r3, [pc, #508]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_ClockConfig+0x8a>
 8002714:	e089      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271e:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	4013      	ands	r3, r2
 8002728:	d120      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0e1      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002736:	4b73      	ldr	r3, [pc, #460]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	049b      	lsls	r3, r3, #18
 800273e:	4013      	ands	r3, r2
 8002740:	d114      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0d5      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274e:	4b6d      	ldr	r3, [pc, #436]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d109      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0ca      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800275c:	4b69      	ldr	r3, [pc, #420]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0c2      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276c:	4b65      	ldr	r3, [pc, #404]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2203      	movs	r2, #3
 8002772:	4393      	bics	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4b62      	ldr	r3, [pc, #392]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fcbe 	bl	8001100 <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d111      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002792:	f7fe fcb5 	bl	8001100 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a58      	ldr	r2, [pc, #352]	@ (8002900 <HAL_RCC_ClockConfig+0x274>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0a5      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a6:	4b57      	ldr	r3, [pc, #348]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	220c      	movs	r2, #12
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_ClockConfig+0x106>
 80027b2:	e03a      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d111      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7fe fc9f 	bl	8001100 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002900 <HAL_RCC_ClockConfig+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e08f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	220c      	movs	r2, #12
 80027d8:	4013      	ands	r3, r2
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_ClockConfig+0x132>
 80027de:	e024      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d11b      	bne.n	8002820 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e8:	e009      	b.n	80027fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ea:	f7fe fc89 	bl	8001100 <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	4a42      	ldr	r2, [pc, #264]	@ (8002900 <HAL_RCC_ClockConfig+0x274>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e079      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fe:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	220c      	movs	r2, #12
 8002804:	4013      	ands	r3, r2
 8002806:	2b04      	cmp	r3, #4
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_ClockConfig+0x15e>
 800280a:	e00e      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fc78 	bl	8001100 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	4a3a      	ldr	r2, [pc, #232]	@ (8002900 <HAL_RCC_ClockConfig+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e068      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002820:	4b38      	ldr	r3, [pc, #224]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	220c      	movs	r2, #12
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282a:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2201      	movs	r2, #1
 8002830:	4013      	ands	r3, r2
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d21e      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002838:	4b30      	ldr	r3, [pc, #192]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4393      	bics	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	4b2e      	ldr	r3, [pc, #184]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800284a:	f7fe fc59 	bl	8001100 <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	e009      	b.n	8002868 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe fc54 	bl	8001100 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	4a28      	ldr	r2, [pc, #160]	@ (8002900 <HAL_RCC_ClockConfig+0x274>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e044      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002868:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_RCC_ClockConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2204      	movs	r2, #4
 800287c:	4013      	ands	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_RCC_ClockConfig+0x27c>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002890:	430a      	orrs	r2, r1
 8002892:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2208      	movs	r2, #8
 800289a:	4013      	ands	r3, r2
 800289c:	d00a      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289e:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a1a      	ldr	r2, [pc, #104]	@ (800290c <HAL_RCC_ClockConfig+0x280>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00da      	lsls	r2, r3, #3
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b4:	f000 f832 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028b8:	0001      	movs	r1, r0
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_ClockConfig+0x278>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	220f      	movs	r2, #15
 80028c2:	4013      	ands	r3, r2
 80028c4:	4a12      	ldr	r2, [pc, #72]	@ (8002910 <HAL_RCC_ClockConfig+0x284>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	000a      	movs	r2, r1
 80028ca:	40da      	lsrs	r2, r3
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_RCC_ClockConfig+0x288>)
 80028ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_ClockConfig+0x28c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	250b      	movs	r5, #11
 80028d6:	197c      	adds	r4, r7, r5
 80028d8:	0018      	movs	r0, r3
 80028da:	f7fe fbcb 	bl	8001074 <HAL_InitTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028e2:	197b      	adds	r3, r7, r5
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028ea:	197b      	adds	r3, r7, r5
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bdb0      	pop	{r4, r5, r7, pc}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	40022000 	.word	0x40022000
 8002900:	00001388 	.word	0x00001388
 8002904:	40021000 	.word	0x40021000
 8002908:	fffff8ff 	.word	0xfffff8ff
 800290c:	ffffc7ff 	.word	0xffffc7ff
 8002910:	08004570 	.word	0x08004570
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002922:	4b3c      	ldr	r3, [pc, #240]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	220c      	movs	r2, #12
 800292c:	4013      	ands	r3, r2
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d013      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x3e>
 8002932:	d85c      	bhi.n	80029ee <HAL_RCC_GetSysClockFreq+0xd2>
 8002934:	2b04      	cmp	r3, #4
 8002936:	d002      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x22>
 8002938:	2b08      	cmp	r3, #8
 800293a:	d00b      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x38>
 800293c:	e057      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800293e:	4b35      	ldr	r3, [pc, #212]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2210      	movs	r2, #16
 8002944:	4013      	ands	r3, r2
 8002946:	d002      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002948:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0xfc>)
 800294a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800294c:	e05d      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800294e:	4b33      	ldr	r3, [pc, #204]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x100>)
 8002950:	613b      	str	r3, [r7, #16]
      break;
 8002952:	e05a      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002954:	4b32      	ldr	r3, [pc, #200]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002956:	613b      	str	r3, [r7, #16]
      break;
 8002958:	e057      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0c9b      	lsrs	r3, r3, #18
 800295e:	220f      	movs	r2, #15
 8002960:	4013      	ands	r3, r2
 8002962:	4a30      	ldr	r2, [pc, #192]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	0d9b      	lsrs	r3, r3, #22
 800296c:	2203      	movs	r2, #3
 800296e:	4013      	ands	r3, r2
 8002970:	3301      	adds	r3, #1
 8002972:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002974:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	4013      	ands	r3, r2
 800297e:	d00f      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	000a      	movs	r2, r1
 8002984:	0152      	lsls	r2, r2, #5
 8002986:	1a52      	subs	r2, r2, r1
 8002988:	0193      	lsls	r3, r2, #6
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	185b      	adds	r3, r3, r1
 8002990:	025b      	lsls	r3, r3, #9
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fd fbb7 	bl	8000108 <__udivsi3>
 800299a:	0003      	movs	r3, r0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e023      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2210      	movs	r2, #16
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00f      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	000a      	movs	r2, r1
 80029ae:	0152      	lsls	r2, r2, #5
 80029b0:	1a52      	subs	r2, r2, r1
 80029b2:	0193      	lsls	r3, r2, #6
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	185b      	adds	r3, r3, r1
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7fd fba2 	bl	8000108 <__udivsi3>
 80029c4:	0003      	movs	r3, r0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e00e      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	000a      	movs	r2, r1
 80029ce:	0152      	lsls	r2, r2, #5
 80029d0:	1a52      	subs	r2, r2, r1
 80029d2:	0193      	lsls	r3, r2, #6
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	185b      	adds	r3, r3, r1
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f7fd fb92 	bl	8000108 <__udivsi3>
 80029e4:	0003      	movs	r3, r0
 80029e6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
      break;
 80029ec:	e00d      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0b5b      	lsrs	r3, r3, #13
 80029f4:	2207      	movs	r2, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	0212      	lsls	r2, r2, #8
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a0a:	693b      	ldr	r3, [r7, #16]
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b006      	add	sp, #24
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	003d0900 	.word	0x003d0900
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	007a1200 	.word	0x007a1200
 8002a24:	08004588 	.word	0x08004588

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	@ (8002a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	20000000 	.word	0x20000000

08002a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a40:	f7ff fff2 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a44:	0001      	movs	r1, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	4013      	ands	r3, r2
 8002a50:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	40d9      	lsrs	r1, r3
 8002a56:	000b      	movs	r3, r1
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08004580 	.word	0x08004580

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	0001      	movs	r1, r0
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	0adb      	lsrs	r3, r3, #11
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	40d9      	lsrs	r1, r3
 8002a82:	000b      	movs	r3, r1
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08004580 	.word	0x08004580

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a9c:	2317      	movs	r3, #23
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d106      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d100      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002aba:	e104      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abc:	4bb9      	ldr	r3, [pc, #740]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	055b      	lsls	r3, r3, #21
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d10a      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4bb6      	ldr	r3, [pc, #728]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002acc:	4bb5      	ldr	r3, [pc, #724]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ace:	2180      	movs	r1, #128	@ 0x80
 8002ad0:	0549      	lsls	r1, r1, #21
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ad6:	2317      	movs	r3, #23
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4bb2      	ldr	r3, [pc, #712]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d11a      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4baf      	ldr	r3, [pc, #700]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4bae      	ldr	r3, [pc, #696]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002af0:	2180      	movs	r1, #128	@ 0x80
 8002af2:	0049      	lsls	r1, r1, #1
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fb02 	bl	8001100 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fafd 	bl	8001100 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	@ 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e143      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4ba4      	ldr	r3, [pc, #656]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b20:	4ba0      	ldr	r3, [pc, #640]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	23c0      	movs	r3, #192	@ 0xc0
 8002b26:	039b      	lsls	r3, r3, #14
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	23c0      	movs	r3, #192	@ 0xc0
 8002b32:	039b      	lsls	r3, r3, #14
 8002b34:	4013      	ands	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	23c0      	movs	r3, #192	@ 0xc0
 8002b42:	039b      	lsls	r3, r3, #14
 8002b44:	4013      	ands	r3, r2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	23c0      	movs	r3, #192	@ 0xc0
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	401a      	ands	r2, r3
 8002b56:	23c0      	movs	r3, #192	@ 0xc0
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d10a      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b91      	ldr	r3, [pc, #580]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	029b      	lsls	r3, r3, #10
 8002b66:	401a      	ands	r2, r3
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e113      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b74:	4b8b      	ldr	r3, [pc, #556]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b78:	23c0      	movs	r3, #192	@ 0xc0
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d049      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	23c0      	movs	r3, #192	@ 0xc0
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	4013      	ands	r3, r2
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d004      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	23c0      	movs	r3, #192	@ 0xc0
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	4013      	ands	r3, r2
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d034      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d02e      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bbc:	4b79      	ldr	r3, [pc, #484]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc0:	4a7a      	ldr	r2, [pc, #488]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b77      	ldr	r3, [pc, #476]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bca:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bcc:	2180      	movs	r1, #128	@ 0x80
 8002bce:	0309      	lsls	r1, r1, #12
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd4:	4b73      	ldr	r3, [pc, #460]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bd8:	4b72      	ldr	r3, [pc, #456]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bda:	4975      	ldr	r1, [pc, #468]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002be0:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	d014      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fa86 	bl	8001100 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fa81 	bl	8001100 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a6b      	ldr	r2, [pc, #428]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0c6      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0e:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d0ef      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4013      	ands	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	23c0      	movs	r3, #192	@ 0xc0
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	401a      	ands	r2, r3
 8002c30:	23c0      	movs	r3, #192	@ 0xc0
 8002c32:	029b      	lsls	r3, r3, #10
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c38:	4b5a      	ldr	r3, [pc, #360]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a5e      	ldr	r2, [pc, #376]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	23c0      	movs	r3, #192	@ 0xc0
 8002c48:	039b      	lsls	r3, r3, #14
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	4b55      	ldr	r3, [pc, #340]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	23c0      	movs	r3, #192	@ 0xc0
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	401a      	ands	r2, r3
 8002c60:	4b50      	ldr	r3, [pc, #320]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d01f      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	23c0      	movs	r3, #192	@ 0xc0
 8002c76:	029b      	lsls	r3, r3, #10
 8002c78:	401a      	ands	r2, r3
 8002c7a:	23c0      	movs	r3, #192	@ 0xc0
 8002c7c:	029b      	lsls	r3, r3, #10
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002c82:	4b48      	ldr	r3, [pc, #288]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a4c      	ldr	r2, [pc, #304]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	23c0      	movs	r3, #192	@ 0xc0
 8002c92:	039b      	lsls	r3, r3, #14
 8002c94:	401a      	ands	r2, r3
 8002c96:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c9e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	23c0      	movs	r3, #192	@ 0xc0
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	401a      	ands	r2, r3
 8002caa:	4b3e      	ldr	r3, [pc, #248]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cac:	430a      	orrs	r2, r1
 8002cae:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb0:	2317      	movs	r3, #23
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b3a      	ldr	r3, [pc, #232]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cbe:	4b39      	ldr	r3, [pc, #228]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cc0:	493e      	ldr	r1, [pc, #248]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd0:	4b34      	ldr	r3, [pc, #208]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cee:	4b2d      	ldr	r3, [pc, #180]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	4393      	bics	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d009      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d0c:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d10:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2208      	movs	r2, #8
 8002d26:	4013      	ands	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	4a25      	ldr	r2, [pc, #148]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d4a:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	4a17      	ldr	r2, [pc, #92]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2240      	movs	r2, #64	@ 0x40
 8002d64:	4013      	ands	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d68:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6c:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2280      	movs	r2, #128	@ 0x80
 8002d82:	4013      	ands	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4b03      	ldr	r3, [pc, #12]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b006      	add	sp, #24
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	fffcffff 	.word	0xfffcffff
 8002db0:	fff7ffff 	.word	0xfff7ffff
 8002db4:	00001388 	.word	0x00001388
 8002db8:	ffcfffff 	.word	0xffcfffff
 8002dbc:	efffffff 	.word	0xefffffff
 8002dc0:	fffff3ff 	.word	0xfffff3ff
 8002dc4:	ffffcfff 	.word	0xffffcfff
 8002dc8:	fbffffff 	.word	0xfbffffff
 8002dcc:	fff3ffff 	.word	0xfff3ffff

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e032      	b.n	8002e48 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2239      	movs	r2, #57	@ 0x39
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2238      	movs	r2, #56	@ 0x38
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fe f81d 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2239      	movs	r2, #57	@ 0x39
 8002e02:	2102      	movs	r1, #2
 8002e04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	0019      	movs	r1, r3
 8002e10:	0010      	movs	r0, r2
 8002e12:	f000 fbcf 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223e      	movs	r2, #62	@ 0x3e
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223a      	movs	r2, #58	@ 0x3a
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	223b      	movs	r2, #59	@ 0x3b
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223c      	movs	r2, #60	@ 0x3c
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	223d      	movs	r2, #61	@ 0x3d
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2239      	movs	r2, #57	@ 0x39
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2239      	movs	r2, #57	@ 0x39
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e03b      	b.n	8002ee0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2239      	movs	r2, #57	@ 0x39
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	05db      	lsls	r3, r3, #23
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d00e      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x5a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a15      	ldr	r2, [pc, #84]	@ (8002ee8 <HAL_TIM_Base_Start_IT+0x98>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x5a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <HAL_TIM_Base_Start_IT+0x9c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x5a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d111      	bne.n	8002ece <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d010      	beq.n	8002ede <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	e007      	b.n	8002ede <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40011400 	.word	0x40011400

08002ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e032      	b.n	8002f6c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2239      	movs	r2, #57	@ 0x39
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2238      	movs	r2, #56	@ 0x38
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 f829 	bl	8002f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2239      	movs	r2, #57	@ 0x39
 8002f26:	2102      	movs	r1, #2
 8002f28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	0019      	movs	r1, r3
 8002f34:	0010      	movs	r0, r2
 8002f36:	f000 fb3d 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	223e      	movs	r2, #62	@ 0x3e
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	223a      	movs	r2, #58	@ 0x3a
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223b      	movs	r2, #59	@ 0x3b
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	223c      	movs	r2, #60	@ 0x3c
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	223d      	movs	r2, #61	@ 0x3d
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2239      	movs	r2, #57	@ 0x39
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0x22>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	223a      	movs	r2, #58	@ 0x3a
 8002f98:	5c9b      	ldrb	r3, [r3, r2]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	1e5a      	subs	r2, r3, #1
 8002fa0:	4193      	sbcs	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e01f      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x62>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d108      	bne.n	8002fbe <HAL_TIM_PWM_Start+0x3a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	223b      	movs	r2, #59	@ 0x3b
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	4193      	sbcs	r3, r2
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e013      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x62>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d108      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x52>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	223c      	movs	r2, #60	@ 0x3c
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	4193      	sbcs	r3, r2
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e007      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x62>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223d      	movs	r2, #61	@ 0x3d
 8002fda:	5c9b      	ldrb	r3, [r3, r2]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	4193      	sbcs	r3, r2
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e052      	b.n	8003094 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x7a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	223a      	movs	r2, #58	@ 0x3a
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	5499      	strb	r1, [r3, r2]
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_PWM_Start+0xa2>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0x8a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223b      	movs	r2, #59	@ 0x3b
 8003008:	2102      	movs	r1, #2
 800300a:	5499      	strb	r1, [r3, r2]
 800300c:	e00b      	b.n	8003026 <HAL_TIM_PWM_Start+0xa2>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start+0x9a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	223c      	movs	r2, #60	@ 0x3c
 8003018:	2102      	movs	r1, #2
 800301a:	5499      	strb	r1, [r3, r2]
 800301c:	e003      	b.n	8003026 <HAL_TIM_PWM_Start+0xa2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	223d      	movs	r2, #61	@ 0x3d
 8003022:	2102      	movs	r1, #2
 8003024:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	0018      	movs	r0, r3
 8003030:	f000 fcc2 	bl	80039b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	05db      	lsls	r3, r3, #23
 800303c:	429a      	cmp	r2, r3
 800303e:	d00e      	beq.n	800305e <HAL_TIM_PWM_Start+0xda>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a15      	ldr	r2, [pc, #84]	@ (800309c <HAL_TIM_PWM_Start+0x118>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_TIM_PWM_Start+0xda>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <HAL_TIM_PWM_Start+0x11c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_TIM_PWM_Start+0xda>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <HAL_TIM_PWM_Start+0x120>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d111      	bne.n	8003082 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2207      	movs	r2, #7
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d010      	beq.n	8003092 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003080:	e007      	b.n	8003092 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40000400 	.word	0x40000400
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40011400 	.word	0x40011400

080030a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d021      	beq.n	800310c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	d01d      	beq.n	800310c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2203      	movs	r2, #3
 80030d6:	4252      	negs	r2, r2
 80030d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 fa48 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e007      	b.n	8003106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fa3b 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	0018      	movs	r0, r3
 8003102:	f000 fa47 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2204      	movs	r2, #4
 8003110:	4013      	ands	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d01e      	beq.n	800315a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2205      	movs	r2, #5
 8003122:	4252      	negs	r2, r2
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	23c0      	movs	r3, #192	@ 0xc0
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4013      	ands	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 fa21 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 8003142:	e007      	b.n	8003154 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fa14 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 fa20 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2208      	movs	r2, #8
 800315e:	4013      	ands	r3, r2
 8003160:	d021      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2208      	movs	r2, #8
 8003166:	4013      	ands	r3, r2
 8003168:	d01d      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2209      	movs	r2, #9
 8003170:	4252      	negs	r2, r2
 8003172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2204      	movs	r2, #4
 8003178:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2203      	movs	r2, #3
 8003182:	4013      	ands	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f9fb 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 800318e:	e007      	b.n	80031a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f9ee 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 f9fa 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2210      	movs	r2, #16
 80031aa:	4013      	ands	r3, r2
 80031ac:	d022      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2210      	movs	r2, #16
 80031b2:	4013      	ands	r3, r2
 80031b4:	d01e      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2211      	movs	r2, #17
 80031bc:	4252      	negs	r2, r2
 80031be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2208      	movs	r2, #8
 80031c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	23c0      	movs	r3, #192	@ 0xc0
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f9d4 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e007      	b.n	80031ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 f9c7 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 f9d3 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d00c      	beq.n	8003216 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d008      	beq.n	8003216 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2202      	movs	r2, #2
 800320a:	4252      	negs	r2, r2
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd faad 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d00c      	beq.n	8003238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2240      	movs	r2, #64	@ 0x40
 8003222:	4013      	ands	r3, r2
 8003224:	d008      	beq.n	8003238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2241      	movs	r2, #65	@ 0x41
 800322c:	4252      	negs	r2, r2
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 f9b6 	bl	80035a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2317      	movs	r3, #23
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2238      	movs	r2, #56	@ 0x38
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x22>
 800325e:	2302      	movs	r3, #2
 8003260:	e0ad      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2238      	movs	r2, #56	@ 0x38
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d100      	bne.n	8003272 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003270:	e076      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d900      	bls.n	800327a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003278:	e095      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d04e      	beq.n	800331e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b08      	cmp	r3, #8
 8003284:	d900      	bls.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003286:	e08e      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x56>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d021      	beq.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003294:	e087      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	0011      	movs	r1, r2
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f9ec 	bl	800367c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2108      	movs	r1, #8
 80032b0:	430a      	orrs	r2, r1
 80032b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2104      	movs	r1, #4
 80032c0:	438a      	bics	r2, r1
 80032c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6999      	ldr	r1, [r3, #24]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]
      break;
 80032d6:	e06b      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	0011      	movs	r1, r2
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fa07 	bl	80036f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2180      	movs	r1, #128	@ 0x80
 80032f2:	0109      	lsls	r1, r1, #4
 80032f4:	430a      	orrs	r2, r1
 80032f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4931      	ldr	r1, [pc, #196]	@ (80033c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003304:	400a      	ands	r2, r1
 8003306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      break;
 800331c:	e048      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fa26 	bl	8003778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2108      	movs	r1, #8
 8003338:	430a      	orrs	r2, r1
 800333a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2104      	movs	r1, #4
 8003348:	438a      	bics	r2, r1
 800334a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69d9      	ldr	r1, [r3, #28]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	61da      	str	r2, [r3, #28]
      break;
 800335e:	e027      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	0011      	movs	r1, r2
 8003368:	0018      	movs	r0, r3
 800336a:	f000 fa45 	bl	80037f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	0109      	lsls	r1, r1, #4
 800337c:	430a      	orrs	r2, r1
 800337e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	490f      	ldr	r1, [pc, #60]	@ (80033c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800338c:	400a      	ands	r2, r1
 800338e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69d9      	ldr	r1, [r3, #28]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
      break;
 80033a4:	e004      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80033a6:	2317      	movs	r3, #23
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
      break;
 80033ae:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2238      	movs	r2, #56	@ 0x38
 80033b4:	2100      	movs	r1, #0
 80033b6:	5499      	strb	r1, [r3, r2]

  return status;
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	781b      	ldrb	r3, [r3, #0]
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	fffffbff 	.word	0xfffffbff

080033cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	230f      	movs	r3, #15
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2238      	movs	r2, #56	@ 0x38
 80033e2:	5c9b      	ldrb	r3, [r3, r2]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x20>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0bc      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x19a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2238      	movs	r2, #56	@ 0x38
 80033f0:	2101      	movs	r1, #1
 80033f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2239      	movs	r2, #57	@ 0x39
 80033f8:	2102      	movs	r1, #2
 80033fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2277      	movs	r2, #119	@ 0x77
 8003408:	4393      	bics	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4a58      	ldr	r2, [pc, #352]	@ (8003570 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	0192      	lsls	r2, r2, #6
 8003424:	4293      	cmp	r3, r2
 8003426:	d040      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0xde>
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	0192      	lsls	r2, r2, #6
 800342c:	4293      	cmp	r3, r2
 800342e:	d900      	bls.n	8003432 <HAL_TIM_ConfigClockSource+0x66>
 8003430:	e088      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	0152      	lsls	r2, r2, #5
 8003436:	4293      	cmp	r3, r2
 8003438:	d100      	bne.n	800343c <HAL_TIM_ConfigClockSource+0x70>
 800343a:	e088      	b.n	800354e <HAL_TIM_ConfigClockSource+0x182>
 800343c:	2280      	movs	r2, #128	@ 0x80
 800343e:	0152      	lsls	r2, r2, #5
 8003440:	4293      	cmp	r3, r2
 8003442:	d900      	bls.n	8003446 <HAL_TIM_ConfigClockSource+0x7a>
 8003444:	e07e      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 8003446:	2b70      	cmp	r3, #112	@ 0x70
 8003448:	d018      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xb0>
 800344a:	d900      	bls.n	800344e <HAL_TIM_ConfigClockSource+0x82>
 800344c:	e07a      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 800344e:	2b60      	cmp	r3, #96	@ 0x60
 8003450:	d04f      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x126>
 8003452:	d900      	bls.n	8003456 <HAL_TIM_ConfigClockSource+0x8a>
 8003454:	e076      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 8003456:	2b50      	cmp	r3, #80	@ 0x50
 8003458:	d03b      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x106>
 800345a:	d900      	bls.n	800345e <HAL_TIM_ConfigClockSource+0x92>
 800345c:	e072      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d057      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x146>
 8003462:	d900      	bls.n	8003466 <HAL_TIM_ConfigClockSource+0x9a>
 8003464:	e06e      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 8003466:	2b30      	cmp	r3, #48	@ 0x30
 8003468:	d063      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x166>
 800346a:	d86b      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 800346c:	2b20      	cmp	r3, #32
 800346e:	d060      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x166>
 8003470:	d868      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d05d      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x166>
 8003476:	2b10      	cmp	r3, #16
 8003478:	d05b      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x166>
 800347a:	e063      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	f000 fa74 	bl	8003978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2277      	movs	r2, #119	@ 0x77
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
      break;
 80034a8:	e052      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	f000 fa5d 	bl	8003978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2180      	movs	r1, #128	@ 0x80
 80034ca:	01c9      	lsls	r1, r1, #7
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
      break;
 80034d0:	e03e      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	001a      	movs	r2, r3
 80034e0:	f000 f9d0 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2150      	movs	r1, #80	@ 0x50
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fa2a 	bl	8003944 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e02e      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034fe:	001a      	movs	r2, r3
 8003500:	f000 f9ee 	bl	80038e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2160      	movs	r1, #96	@ 0x60
 800350a:	0018      	movs	r0, r3
 800350c:	f000 fa1a 	bl	8003944 <TIM_ITRx_SetConfig>
      break;
 8003510:	e01e      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	001a      	movs	r2, r3
 8003520:	f000 f9b0 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2140      	movs	r1, #64	@ 0x40
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fa0a 	bl	8003944 <TIM_ITRx_SetConfig>
      break;
 8003530:	e00e      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0019      	movs	r1, r3
 800353c:	0010      	movs	r0, r2
 800353e:	f000 fa01 	bl	8003944 <TIM_ITRx_SetConfig>
      break;
 8003542:	e005      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003544:	230f      	movs	r3, #15
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
      break;
 800354c:	e000      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800354e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2239      	movs	r2, #57	@ 0x39
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2238      	movs	r2, #56	@ 0x38
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

  return status;
 8003560:	230f      	movs	r3, #15
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	781b      	ldrb	r3, [r3, #0]
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b004      	add	sp, #16
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	ffff00ff 	.word	0xffff00ff

08003574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800357c:	46c0      	nop			@ (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358c:	46c0      	nop			@ (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	05db      	lsls	r3, r3, #23
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0x32>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a26      	ldr	r2, [pc, #152]	@ (800366c <TIM_Base_SetConfig+0xb8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0x32>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <TIM_Base_SetConfig+0xbc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0x32>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a24      	ldr	r2, [pc, #144]	@ (8003674 <TIM_Base_SetConfig+0xc0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2270      	movs	r2, #112	@ 0x70
 80035ea:	4393      	bics	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	429a      	cmp	r2, r3
 8003600:	d00b      	beq.n	800361a <TIM_Base_SetConfig+0x66>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a19      	ldr	r2, [pc, #100]	@ (800366c <TIM_Base_SetConfig+0xb8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x66>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a18      	ldr	r2, [pc, #96]	@ (8003670 <TIM_Base_SetConfig+0xbc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x66>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <TIM_Base_SetConfig+0xc0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a16      	ldr	r2, [pc, #88]	@ (8003678 <TIM_Base_SetConfig+0xc4>)
 800361e:	4013      	ands	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2280      	movs	r2, #128	@ 0x80
 8003630:	4393      	bics	r3, r2
 8003632:	001a      	movs	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2204      	movs	r2, #4
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b004      	add	sp, #16
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40000400 	.word	0x40000400
 8003670:	40010800 	.word	0x40010800
 8003674:	40011400 	.word	0x40011400
 8003678:	fffffcff 	.word	0xfffffcff

0800367c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	2201      	movs	r2, #1
 8003692:	4393      	bics	r3, r2
 8003694:	001a      	movs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2270      	movs	r2, #112	@ 0x70
 80036aa:	4393      	bics	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4393      	bics	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2202      	movs	r2, #2
 80036c4:	4393      	bics	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b006      	add	sp, #24
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2210      	movs	r2, #16
 800370a:	4393      	bics	r3, r2
 800370c:	001a      	movs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a13      	ldr	r2, [pc, #76]	@ (8003770 <TIM_OC2_SetConfig+0x7c>)
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a12      	ldr	r2, [pc, #72]	@ (8003774 <TIM_OC2_SetConfig+0x80>)
 800372a:	4013      	ands	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2220      	movs	r2, #32
 800373e:	4393      	bics	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	621a      	str	r2, [r3, #32]
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b006      	add	sp, #24
 800376e:	bd80      	pop	{r7, pc}
 8003770:	ffff8fff 	.word	0xffff8fff
 8003774:	fffffcff 	.word	0xfffffcff

08003778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a18      	ldr	r2, [pc, #96]	@ (80037f0 <TIM_OC3_SetConfig+0x78>)
 800378e:	401a      	ands	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2270      	movs	r2, #112	@ 0x70
 80037a4:	4393      	bics	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2203      	movs	r2, #3
 80037ac:	4393      	bics	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <TIM_OC3_SetConfig+0x7c>)
 80037be:	4013      	ands	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b006      	add	sp, #24
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	fffffeff 	.word	0xfffffeff
 80037f4:	fffffdff 	.word	0xfffffdff

080037f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <TIM_OC4_SetConfig+0x7c>)
 800380e:	401a      	ands	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <TIM_OC4_SetConfig+0x80>)
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a14      	ldr	r2, [pc, #80]	@ (800387c <TIM_OC4_SetConfig+0x84>)
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4a10      	ldr	r2, [pc, #64]	@ (8003880 <TIM_OC4_SetConfig+0x88>)
 8003840:	4013      	ands	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	031b      	lsls	r3, r3, #12
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b006      	add	sp, #24
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	ffffefff 	.word	0xffffefff
 8003878:	ffff8fff 	.word	0xffff8fff
 800387c:	fffffcff 	.word	0xfffffcff
 8003880:	ffffdfff 	.word	0xffffdfff

08003884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	2201      	movs	r2, #1
 800389c:	4393      	bics	r3, r2
 800389e:	001a      	movs	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	22f0      	movs	r2, #240	@ 0xf0
 80038ae:	4393      	bics	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	220a      	movs	r2, #10
 80038c0:	4393      	bics	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}

080038e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	2210      	movs	r2, #16
 80038f8:	4393      	bics	r3, r2
 80038fa:	001a      	movs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4a0d      	ldr	r2, [pc, #52]	@ (8003940 <TIM_TI2_ConfigInputStage+0x60>)
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	22a0      	movs	r2, #160	@ 0xa0
 800391c:	4393      	bics	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b006      	add	sp, #24
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	ffff0fff 	.word	0xffff0fff

08003944 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2270      	movs	r2, #112	@ 0x70
 8003958:	4393      	bics	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	2207      	movs	r2, #7
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4a09      	ldr	r2, [pc, #36]	@ (80039b4 <TIM_ETR_SetConfig+0x3c>)
 8003990:	4013      	ands	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	431a      	orrs	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b006      	add	sp, #24
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	ffff00ff 	.word	0xffff00ff

080039b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	221f      	movs	r2, #31
 80039c8:	4013      	ands	r3, r2
 80039ca:	2201      	movs	r2, #1
 80039cc:	409a      	lsls	r2, r3
 80039ce:	0013      	movs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	43d2      	mvns	r2, r2
 80039da:	401a      	ands	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	211f      	movs	r1, #31
 80039e8:	400b      	ands	r3, r1
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4099      	lsls	r1, r3
 80039ee:	000b      	movs	r3, r1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b006      	add	sp, #24
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2238      	movs	r2, #56	@ 0x38
 8003a0e:	5c9b      	ldrb	r3, [r3, r2]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e047      	b.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2238      	movs	r2, #56	@ 0x38
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2239      	movs	r2, #57	@ 0x39
 8003a24:	2102      	movs	r1, #2
 8003a26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2270      	movs	r2, #112	@ 0x70
 8003a3c:	4393      	bics	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	2380      	movs	r3, #128	@ 0x80
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a11      	ldr	r2, [pc, #68]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2280      	movs	r2, #128	@ 0x80
 8003a80:	4393      	bics	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2239      	movs	r2, #57	@ 0x39
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2238      	movs	r2, #56	@ 0x38
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40010800 	.word	0x40010800
 8003ab8:	40011400 	.word	0x40011400

08003abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e044      	b.n	8003b58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2278      	movs	r2, #120	@ 0x78
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7fd fa39 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2224      	movs	r2, #36	@ 0x24
 8003aea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	438a      	bics	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 faca 	bl	80040a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 f828 	bl	8003b64 <UART_SetConfig>
 8003b14:	0003      	movs	r3, r0
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e01c      	b.n	8003b58 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	490d      	ldr	r1, [pc, #52]	@ (8003b60 <HAL_UART_Init+0xa4>)
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	212a      	movs	r1, #42	@ 0x2a
 8003b3a:	438a      	bics	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 fb59 	bl	8004208 <UART_CheckIdleState>
 8003b56:	0003      	movs	r3, r0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	ffffb7ff 	.word	0xffffb7ff

08003b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b08e      	sub	sp, #56	@ 0x38
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b6c:	231a      	movs	r3, #26
 8003b6e:	2218      	movs	r2, #24
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4ac3      	ldr	r2, [pc, #780]	@ (8003ea4 <UART_SetConfig+0x340>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4abe      	ldr	r2, [pc, #760]	@ (8003ea8 <UART_SetConfig+0x344>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4ab8      	ldr	r2, [pc, #736]	@ (8003eac <UART_SetConfig+0x348>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4ab4      	ldr	r2, [pc, #720]	@ (8003eb0 <UART_SetConfig+0x34c>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4ab0      	ldr	r2, [pc, #704]	@ (8003eb4 <UART_SetConfig+0x350>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d131      	bne.n	8003c5c <UART_SetConfig+0xf8>
 8003bf8:	4baf      	ldr	r3, [pc, #700]	@ (8003eb8 <UART_SetConfig+0x354>)
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d01d      	beq.n	8003c40 <UART_SetConfig+0xdc>
 8003c04:	d823      	bhi.n	8003c4e <UART_SetConfig+0xea>
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d00c      	beq.n	8003c24 <UART_SetConfig+0xc0>
 8003c0a:	d820      	bhi.n	8003c4e <UART_SetConfig+0xea>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <UART_SetConfig+0xb2>
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d00e      	beq.n	8003c32 <UART_SetConfig+0xce>
 8003c14:	e01b      	b.n	8003c4e <UART_SetConfig+0xea>
 8003c16:	231b      	movs	r3, #27
 8003c18:	2218      	movs	r2, #24
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e0b4      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003c24:	231b      	movs	r3, #27
 8003c26:	2218      	movs	r2, #24
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	19db      	adds	r3, r3, r7
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e0ad      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003c32:	231b      	movs	r3, #27
 8003c34:	2218      	movs	r2, #24
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e0a6      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003c40:	231b      	movs	r3, #27
 8003c42:	2218      	movs	r2, #24
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2208      	movs	r2, #8
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e09f      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	2218      	movs	r2, #24
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	2210      	movs	r2, #16
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e098      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a96      	ldr	r2, [pc, #600]	@ (8003ebc <UART_SetConfig+0x358>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d131      	bne.n	8003cca <UART_SetConfig+0x166>
 8003c66:	4b94      	ldr	r3, [pc, #592]	@ (8003eb8 <UART_SetConfig+0x354>)
 8003c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d01d      	beq.n	8003cae <UART_SetConfig+0x14a>
 8003c72:	d823      	bhi.n	8003cbc <UART_SetConfig+0x158>
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d00c      	beq.n	8003c92 <UART_SetConfig+0x12e>
 8003c78:	d820      	bhi.n	8003cbc <UART_SetConfig+0x158>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <UART_SetConfig+0x120>
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00e      	beq.n	8003ca0 <UART_SetConfig+0x13c>
 8003c82:	e01b      	b.n	8003cbc <UART_SetConfig+0x158>
 8003c84:	231b      	movs	r3, #27
 8003c86:	2218      	movs	r2, #24
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e07d      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003c92:	231b      	movs	r3, #27
 8003c94:	2218      	movs	r2, #24
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e076      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003ca0:	231b      	movs	r3, #27
 8003ca2:	2218      	movs	r2, #24
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	2204      	movs	r2, #4
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e06f      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003cae:	231b      	movs	r3, #27
 8003cb0:	2218      	movs	r2, #24
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e068      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003cbc:	231b      	movs	r3, #27
 8003cbe:	2218      	movs	r2, #24
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e061      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7c      	ldr	r2, [pc, #496]	@ (8003ec0 <UART_SetConfig+0x35c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d106      	bne.n	8003ce2 <UART_SetConfig+0x17e>
 8003cd4:	231b      	movs	r3, #27
 8003cd6:	2218      	movs	r2, #24
 8003cd8:	189b      	adds	r3, r3, r2
 8003cda:	19db      	adds	r3, r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e055      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a77      	ldr	r2, [pc, #476]	@ (8003ec4 <UART_SetConfig+0x360>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d106      	bne.n	8003cfa <UART_SetConfig+0x196>
 8003cec:	231b      	movs	r3, #27
 8003cee:	2218      	movs	r2, #24
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	19db      	adds	r3, r3, r7
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e049      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8003eac <UART_SetConfig+0x348>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d13e      	bne.n	8003d82 <UART_SetConfig+0x21e>
 8003d04:	4b6c      	ldr	r3, [pc, #432]	@ (8003eb8 <UART_SetConfig+0x354>)
 8003d06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d08:	23c0      	movs	r3, #192	@ 0xc0
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	22c0      	movs	r2, #192	@ 0xc0
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d027      	beq.n	8003d66 <UART_SetConfig+0x202>
 8003d16:	22c0      	movs	r2, #192	@ 0xc0
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d82a      	bhi.n	8003d74 <UART_SetConfig+0x210>
 8003d1e:	2280      	movs	r2, #128	@ 0x80
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d011      	beq.n	8003d4a <UART_SetConfig+0x1e6>
 8003d26:	2280      	movs	r2, #128	@ 0x80
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d822      	bhi.n	8003d74 <UART_SetConfig+0x210>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <UART_SetConfig+0x1d8>
 8003d32:	2280      	movs	r2, #128	@ 0x80
 8003d34:	00d2      	lsls	r2, r2, #3
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00e      	beq.n	8003d58 <UART_SetConfig+0x1f4>
 8003d3a:	e01b      	b.n	8003d74 <UART_SetConfig+0x210>
 8003d3c:	231b      	movs	r3, #27
 8003d3e:	2218      	movs	r2, #24
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	19db      	adds	r3, r3, r7
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e021      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003d4a:	231b      	movs	r3, #27
 8003d4c:	2218      	movs	r2, #24
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	2202      	movs	r2, #2
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e01a      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003d58:	231b      	movs	r3, #27
 8003d5a:	2218      	movs	r2, #24
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	2204      	movs	r2, #4
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e013      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003d66:	231b      	movs	r3, #27
 8003d68:	2218      	movs	r2, #24
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	2208      	movs	r2, #8
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e00c      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003d74:	231b      	movs	r3, #27
 8003d76:	2218      	movs	r2, #24
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e005      	b.n	8003d8e <UART_SetConfig+0x22a>
 8003d82:	231b      	movs	r3, #27
 8003d84:	2218      	movs	r2, #24
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a46      	ldr	r2, [pc, #280]	@ (8003eac <UART_SetConfig+0x348>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d000      	beq.n	8003d9a <UART_SetConfig+0x236>
 8003d98:	e09a      	b.n	8003ed0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d9a:	231b      	movs	r3, #27
 8003d9c:	2218      	movs	r2, #24
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	19db      	adds	r3, r3, r7
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d01d      	beq.n	8003de4 <UART_SetConfig+0x280>
 8003da8:	dc20      	bgt.n	8003dec <UART_SetConfig+0x288>
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d015      	beq.n	8003dda <UART_SetConfig+0x276>
 8003dae:	dc1d      	bgt.n	8003dec <UART_SetConfig+0x288>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <UART_SetConfig+0x256>
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d005      	beq.n	8003dc4 <UART_SetConfig+0x260>
 8003db8:	e018      	b.n	8003dec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dba:	f7fe fe3f 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dc2:	e01c      	b.n	8003dfe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb8 <UART_SetConfig+0x354>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d002      	beq.n	8003dd4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dce:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec8 <UART_SetConfig+0x364>)
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dd2:	e014      	b.n	8003dfe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8003ecc <UART_SetConfig+0x368>)
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dd8:	e011      	b.n	8003dfe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7fe fd9f 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003dde:	0003      	movs	r3, r0
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de2:	e00c      	b.n	8003dfe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dea:	e008      	b.n	8003dfe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003df0:	231a      	movs	r3, #26
 8003df2:	2218      	movs	r2, #24
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
        break;
 8003dfc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d100      	bne.n	8003e06 <UART_SetConfig+0x2a2>
 8003e04:	e133      	b.n	800406e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d305      	bcc.n	8003e22 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d906      	bls.n	8003e30 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003e22:	231a      	movs	r3, #26
 8003e24:	2218      	movs	r2, #24
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	19db      	adds	r3, r3, r7
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e11e      	b.n	800406e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	6939      	ldr	r1, [r7, #16]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	000b      	movs	r3, r1
 8003e3e:	0e1b      	lsrs	r3, r3, #24
 8003e40:	0010      	movs	r0, r2
 8003e42:	0205      	lsls	r5, r0, #8
 8003e44:	431d      	orrs	r5, r3
 8003e46:	000b      	movs	r3, r1
 8003e48:	021c      	lsls	r4, r3, #8
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68b8      	ldr	r0, [r7, #8]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	1900      	adds	r0, r0, r4
 8003e5c:	4169      	adcs	r1, r5
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f7fc f9d8 	bl	8000220 <__aeabi_uldivmod>
 8003e70:	0002      	movs	r2, r0
 8003e72:	000b      	movs	r3, r1
 8003e74:	0013      	movs	r3, r2
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e7a:	23c0      	movs	r3, #192	@ 0xc0
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d309      	bcc.n	8003e96 <UART_SetConfig+0x332>
 8003e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	035b      	lsls	r3, r3, #13
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d204      	bcs.n	8003e96 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e0eb      	b.n	800406e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003e96:	231a      	movs	r3, #26
 8003e98:	2218      	movs	r2, #24
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e0e4      	b.n	800406e <UART_SetConfig+0x50a>
 8003ea4:	efff69f3 	.word	0xefff69f3
 8003ea8:	ffffcfff 	.word	0xffffcfff
 8003eac:	40004800 	.word	0x40004800
 8003eb0:	fffff4ff 	.word	0xfffff4ff
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40004400 	.word	0x40004400
 8003ec0:	40004c00 	.word	0x40004c00
 8003ec4:	40005000 	.word	0x40005000
 8003ec8:	003d0900 	.word	0x003d0900
 8003ecc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d000      	beq.n	8003ede <UART_SetConfig+0x37a>
 8003edc:	e070      	b.n	8003fc0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003ede:	231b      	movs	r3, #27
 8003ee0:	2218      	movs	r2, #24
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	19db      	adds	r3, r3, r7
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d822      	bhi.n	8003f32 <UART_SetConfig+0x3ce>
 8003eec:	009a      	lsls	r2, r3, #2
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <UART_SetConfig+0x528>)
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7fe fda1 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8003efa:	0003      	movs	r3, r0
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003efe:	e021      	b.n	8003f44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f00:	f7fe fdb2 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8003f04:	0003      	movs	r3, r0
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f08:	e01c      	b.n	8003f44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f0a:	4b61      	ldr	r3, [pc, #388]	@ (8004090 <UART_SetConfig+0x52c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2210      	movs	r2, #16
 8003f10:	4013      	ands	r3, r2
 8003f12:	d002      	beq.n	8003f1a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f14:	4b5f      	ldr	r3, [pc, #380]	@ (8004094 <UART_SetConfig+0x530>)
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f18:	e014      	b.n	8003f44 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004098 <UART_SetConfig+0x534>)
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f1e:	e011      	b.n	8003f44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f20:	f7fe fcfc 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003f24:	0003      	movs	r3, r0
 8003f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f28:	e00c      	b.n	8003f44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	2380      	movs	r3, #128	@ 0x80
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f30:	e008      	b.n	8003f44 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003f36:	231a      	movs	r3, #26
 8003f38:	2218      	movs	r2, #24
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
        break;
 8003f42:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d100      	bne.n	8003f4c <UART_SetConfig+0x3e8>
 8003f4a:	e090      	b.n	800406e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4e:	005a      	lsls	r2, r3, #1
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	18d2      	adds	r2, r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	0010      	movs	r0, r2
 8003f60:	f7fc f8d2 	bl	8000108 <__udivsi3>
 8003f64:	0003      	movs	r3, r0
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d921      	bls.n	8003fb2 <UART_SetConfig+0x44e>
 8003f6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	025b      	lsls	r3, r3, #9
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d21c      	bcs.n	8003fb2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	200e      	movs	r0, #14
 8003f7e:	2418      	movs	r4, #24
 8003f80:	1903      	adds	r3, r0, r4
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	210f      	movs	r1, #15
 8003f86:	438a      	bics	r2, r1
 8003f88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2207      	movs	r2, #7
 8003f92:	4013      	ands	r3, r2
 8003f94:	b299      	uxth	r1, r3
 8003f96:	1903      	adds	r3, r0, r4
 8003f98:	19db      	adds	r3, r3, r7
 8003f9a:	1902      	adds	r2, r0, r4
 8003f9c:	19d2      	adds	r2, r2, r7
 8003f9e:	8812      	ldrh	r2, [r2, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1902      	adds	r2, r0, r4
 8003faa:	19d2      	adds	r2, r2, r7
 8003fac:	8812      	ldrh	r2, [r2, #0]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	e05d      	b.n	800406e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb2:	231a      	movs	r3, #26
 8003fb4:	2218      	movs	r2, #24
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	19db      	adds	r3, r3, r7
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e056      	b.n	800406e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc0:	231b      	movs	r3, #27
 8003fc2:	2218      	movs	r2, #24
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d822      	bhi.n	8004014 <UART_SetConfig+0x4b0>
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <UART_SetConfig+0x538>)
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7fe fd30 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fe0:	e021      	b.n	8004026 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe2:	f7fe fd41 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fea:	e01c      	b.n	8004026 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <UART_SetConfig+0x52c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d002      	beq.n	8003ffc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ff6:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <UART_SetConfig+0x530>)
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ffa:	e014      	b.n	8004026 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003ffc:	4b26      	ldr	r3, [pc, #152]	@ (8004098 <UART_SetConfig+0x534>)
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004000:	e011      	b.n	8004026 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004002:	f7fe fc8b 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8004006:	0003      	movs	r3, r0
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800400a:	e00c      	b.n	8004026 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004012:	e008      	b.n	8004026 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004018:	231a      	movs	r3, #26
 800401a:	2218      	movs	r2, #24
 800401c:	189b      	adds	r3, r3, r2
 800401e:	19db      	adds	r3, r3, r7
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
        break;
 8004024:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	085a      	lsrs	r2, r3, #1
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	18d2      	adds	r2, r2, r3
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	0019      	movs	r1, r3
 800403c:	0010      	movs	r0, r2
 800403e:	f7fc f863 	bl	8000108 <__udivsi3>
 8004042:	0003      	movs	r3, r0
 8004044:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	2b0f      	cmp	r3, #15
 800404a:	d90a      	bls.n	8004062 <UART_SetConfig+0x4fe>
 800404c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	025b      	lsls	r3, r3, #9
 8004052:	429a      	cmp	r2, r3
 8004054:	d205      	bcs.n	8004062 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	b29a      	uxth	r2, r3
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	e005      	b.n	800406e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004062:	231a      	movs	r3, #26
 8004064:	2218      	movs	r2, #24
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2200      	movs	r2, #0
 8004072:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2200      	movs	r2, #0
 8004078:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800407a:	231a      	movs	r3, #26
 800407c:	2218      	movs	r2, #24
 800407e:	189b      	adds	r3, r3, r2
 8004080:	19db      	adds	r3, r3, r7
 8004082:	781b      	ldrb	r3, [r3, #0]
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b00e      	add	sp, #56	@ 0x38
 800408a:	bdb0      	pop	{r4, r5, r7, pc}
 800408c:	08004594 	.word	0x08004594
 8004090:	40021000 	.word	0x40021000
 8004094:	003d0900 	.word	0x003d0900
 8004098:	00f42400 	.word	0x00f42400
 800409c:	080045b8 	.word	0x080045b8

080040a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	2208      	movs	r2, #8
 80040ae:	4013      	ands	r3, r2
 80040b0:	d00b      	beq.n	80040ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a4a      	ldr	r2, [pc, #296]	@ (80041e4 <UART_AdvFeatureConfig+0x144>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	2201      	movs	r2, #1
 80040d0:	4013      	ands	r3, r2
 80040d2:	d00b      	beq.n	80040ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4a43      	ldr	r2, [pc, #268]	@ (80041e8 <UART_AdvFeatureConfig+0x148>)
 80040dc:	4013      	ands	r3, r2
 80040de:	0019      	movs	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	2202      	movs	r2, #2
 80040f2:	4013      	ands	r3, r2
 80040f4:	d00b      	beq.n	800410e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a3b      	ldr	r2, [pc, #236]	@ (80041ec <UART_AdvFeatureConfig+0x14c>)
 80040fe:	4013      	ands	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	2204      	movs	r2, #4
 8004114:	4013      	ands	r3, r2
 8004116:	d00b      	beq.n	8004130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4a34      	ldr	r2, [pc, #208]	@ (80041f0 <UART_AdvFeatureConfig+0x150>)
 8004120:	4013      	ands	r3, r2
 8004122:	0019      	movs	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	2210      	movs	r2, #16
 8004136:	4013      	ands	r3, r2
 8004138:	d00b      	beq.n	8004152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a2c      	ldr	r2, [pc, #176]	@ (80041f4 <UART_AdvFeatureConfig+0x154>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	2220      	movs	r2, #32
 8004158:	4013      	ands	r3, r2
 800415a:	d00b      	beq.n	8004174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	4a25      	ldr	r2, [pc, #148]	@ (80041f8 <UART_AdvFeatureConfig+0x158>)
 8004164:	4013      	ands	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	2240      	movs	r2, #64	@ 0x40
 800417a:	4013      	ands	r3, r2
 800417c:	d01d      	beq.n	80041ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a1d      	ldr	r2, [pc, #116]	@ (80041fc <UART_AdvFeatureConfig+0x15c>)
 8004186:	4013      	ands	r3, r2
 8004188:	0019      	movs	r1, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	035b      	lsls	r3, r3, #13
 800419e:	429a      	cmp	r2, r3
 80041a0:	d10b      	bne.n	80041ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a15      	ldr	r2, [pc, #84]	@ (8004200 <UART_AdvFeatureConfig+0x160>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	4013      	ands	r3, r2
 80041c2:	d00b      	beq.n	80041dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004204 <UART_AdvFeatureConfig+0x164>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	ffff7fff 	.word	0xffff7fff
 80041e8:	fffdffff 	.word	0xfffdffff
 80041ec:	fffeffff 	.word	0xfffeffff
 80041f0:	fffbffff 	.word	0xfffbffff
 80041f4:	ffffefff 	.word	0xffffefff
 80041f8:	ffffdfff 	.word	0xffffdfff
 80041fc:	ffefffff 	.word	0xffefffff
 8004200:	ff9fffff 	.word	0xff9fffff
 8004204:	fff7ffff 	.word	0xfff7ffff

08004208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b092      	sub	sp, #72	@ 0x48
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2284      	movs	r2, #132	@ 0x84
 8004214:	2100      	movs	r1, #0
 8004216:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004218:	f7fc ff72 	bl	8001100 <HAL_GetTick>
 800421c:	0003      	movs	r3, r0
 800421e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2208      	movs	r2, #8
 8004228:	4013      	ands	r3, r2
 800422a:	2b08      	cmp	r3, #8
 800422c:	d12c      	bne.n	8004288 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	0391      	lsls	r1, r2, #14
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4a46      	ldr	r2, [pc, #280]	@ (8004350 <UART_CheckIdleState+0x148>)
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	f000 f88c 	bl	8004358 <UART_WaitOnFlagUntilTimeout>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d021      	beq.n	8004288 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8310 	mrs	r3, PRIMASK
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800424c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800424e:	2301      	movs	r3, #1
 8004250:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	f383 8810 	msr	PRIMASK, r3
}
 8004258:	46c0      	nop			@ (mov r8, r8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2180      	movs	r1, #128	@ 0x80
 8004266:	438a      	bics	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2278      	movs	r2, #120	@ 0x78
 8004280:	2100      	movs	r1, #0
 8004282:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e05f      	b.n	8004348 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2204      	movs	r2, #4
 8004290:	4013      	ands	r3, r2
 8004292:	2b04      	cmp	r3, #4
 8004294:	d146      	bne.n	8004324 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004298:	2280      	movs	r2, #128	@ 0x80
 800429a:	03d1      	lsls	r1, r2, #15
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4a2c      	ldr	r2, [pc, #176]	@ (8004350 <UART_CheckIdleState+0x148>)
 80042a0:	9200      	str	r2, [sp, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f000 f858 	bl	8004358 <UART_WaitOnFlagUntilTimeout>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d03b      	beq.n	8004324 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ac:	f3ef 8310 	mrs	r3, PRIMASK
 80042b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80042b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b6:	2301      	movs	r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4921      	ldr	r1, [pc, #132]	@ (8004354 <UART_CheckIdleState+0x14c>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042de:	f3ef 8310 	mrs	r3, PRIMASK
 80042e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80042e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e8:	2301      	movs	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f383 8810 	msr	PRIMASK, r3
}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2101      	movs	r1, #1
 8004300:	438a      	bics	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2280      	movs	r2, #128	@ 0x80
 8004314:	2120      	movs	r1, #32
 8004316:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2278      	movs	r2, #120	@ 0x78
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e011      	b.n	8004348 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2280      	movs	r2, #128	@ 0x80
 800432e:	2120      	movs	r1, #32
 8004330:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2278      	movs	r2, #120	@ 0x78
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b010      	add	sp, #64	@ 0x40
 800434e:	bd80      	pop	{r7, pc}
 8004350:	01ffffff 	.word	0x01ffffff
 8004354:	fffffedf 	.word	0xfffffedf

08004358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004368:	e051      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3301      	adds	r3, #1
 800436e:	d04e      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fc fec6 	bl	8001100 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e051      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2204      	movs	r2, #4
 8004392:	4013      	ands	r3, r2
 8004394:	d03b      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b80      	cmp	r3, #128	@ 0x80
 800439a:	d038      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0xb6>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b40      	cmp	r3, #64	@ 0x40
 80043a0:	d035      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2208      	movs	r2, #8
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d111      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2208      	movs	r2, #8
 80043b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 f83c 	bl	8004438 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2284      	movs	r2, #132	@ 0x84
 80043c4:	2108      	movs	r1, #8
 80043c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2278      	movs	r2, #120	@ 0x78
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e02c      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	401a      	ands	r2, r3
 80043e0:	2380      	movs	r3, #128	@ 0x80
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d112      	bne.n	800440e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2280      	movs	r2, #128	@ 0x80
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 f81f 	bl	8004438 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2284      	movs	r2, #132	@ 0x84
 80043fe:	2120      	movs	r1, #32
 8004400:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2278      	movs	r2, #120	@ 0x78
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e00f      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	425a      	negs	r2, r3
 800441e:	4153      	adcs	r3, r2
 8004420:	b2db      	uxtb	r3, r3
 8004422:	001a      	movs	r2, r3
 8004424:	1dfb      	adds	r3, r7, #7
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d09e      	beq.n	800436a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08e      	sub	sp, #56	@ 0x38
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004440:	f3ef 8310 	mrs	r3, PRIMASK
 8004444:	617b      	str	r3, [r7, #20]
  return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	637b      	str	r3, [r7, #52]	@ 0x34
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f383 8810 	msr	PRIMASK, r3
}
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4926      	ldr	r1, [pc, #152]	@ (80044fc <UART_EndRxTransfer+0xc4>)
 8004462:	400a      	ands	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f383 8810 	msr	PRIMASK, r3
}
 8004470:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004472:	f3ef 8310 	mrs	r3, PRIMASK
 8004476:	623b      	str	r3, [r7, #32]
  return(result);
 8004478:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30
 800447c:	2301      	movs	r3, #1
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2101      	movs	r1, #1
 8004494:	438a      	bics	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	f383 8810 	msr	PRIMASK, r3
}
 80044a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d118      	bne.n	80044de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ac:	f3ef 8310 	mrs	r3, PRIMASK
 80044b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b6:	2301      	movs	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2110      	movs	r1, #16
 80044ce:	438a      	bics	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	2120      	movs	r1, #32
 80044e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b00e      	add	sp, #56	@ 0x38
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	fffffedf 	.word	0xfffffedf

08004500 <memset>:
 8004500:	0003      	movs	r3, r0
 8004502:	1882      	adds	r2, r0, r2
 8004504:	4293      	cmp	r3, r2
 8004506:	d100      	bne.n	800450a <memset+0xa>
 8004508:	4770      	bx	lr
 800450a:	7019      	strb	r1, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	e7f9      	b.n	8004504 <memset+0x4>

08004510 <__libc_init_array>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	2600      	movs	r6, #0
 8004514:	4c0c      	ldr	r4, [pc, #48]	@ (8004548 <__libc_init_array+0x38>)
 8004516:	4d0d      	ldr	r5, [pc, #52]	@ (800454c <__libc_init_array+0x3c>)
 8004518:	1b64      	subs	r4, r4, r5
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	42a6      	cmp	r6, r4
 800451e:	d109      	bne.n	8004534 <__libc_init_array+0x24>
 8004520:	2600      	movs	r6, #0
 8004522:	f000 f819 	bl	8004558 <_init>
 8004526:	4c0a      	ldr	r4, [pc, #40]	@ (8004550 <__libc_init_array+0x40>)
 8004528:	4d0a      	ldr	r5, [pc, #40]	@ (8004554 <__libc_init_array+0x44>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	42a6      	cmp	r6, r4
 8004530:	d105      	bne.n	800453e <__libc_init_array+0x2e>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	00b3      	lsls	r3, r6, #2
 8004536:	58eb      	ldr	r3, [r5, r3]
 8004538:	4798      	blx	r3
 800453a:	3601      	adds	r6, #1
 800453c:	e7ee      	b.n	800451c <__libc_init_array+0xc>
 800453e:	00b3      	lsls	r3, r6, #2
 8004540:	58eb      	ldr	r3, [r5, r3]
 8004542:	4798      	blx	r3
 8004544:	3601      	adds	r6, #1
 8004546:	e7f2      	b.n	800452e <__libc_init_array+0x1e>
 8004548:	080045e4 	.word	0x080045e4
 800454c:	080045e4 	.word	0x080045e4
 8004550:	080045e8 	.word	0x080045e8
 8004554:	080045e4 	.word	0x080045e4

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	46c0      	nop			@ (mov r8, r8)
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
