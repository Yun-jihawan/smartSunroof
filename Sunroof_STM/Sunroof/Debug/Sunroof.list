
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003914  08003914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003980  08003980  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003988  08003988  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003988  08003988  00004988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800398c  0800398c  0000498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003990  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  0800399c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  0800399c  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e300  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002455  00000000  00000000  00013334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00015790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b9  00000000  00000000  00016428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014db5  00000000  00000000  00016de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001061b  00000000  00000000  0002bb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861d8  00000000  00000000  0003c1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  000c23cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c4fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038fc 	.word	0x080038fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080038fc 	.word	0x080038fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f003 fa22 	bl	80038a4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000462:	4a38      	ldr	r2, [pc, #224]	@ (8000544 <MX_ADC_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b36      	ldr	r3, [pc, #216]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MX_ADC_Init+0xf4>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC_Init+0xf4>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fc5e 	bl	8000d94 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 faa8 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 febd 	bl	8001274 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fa97 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <MX_ADC_Init+0xfc>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_ADC_Init+0xf4>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 feb0 	bl	8001274 <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fa8a 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800051c:	003b      	movs	r3, r7
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_ADC_Init+0x100>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fea3 	bl	8001274 <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 fa7d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	20000028 	.word	0x20000028
 8000544:	40012400 	.word	0x40012400
 8000548:	04000002 	.word	0x04000002
 800054c:	3c008000 	.word	0x3c008000

08000550 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f003 f99e 	bl	80038a4 <memset>
  if(adcHandle->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <HAL_ADC_MspInit+0xa8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13d      	bne.n	80005ee <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 80005a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 f8f6 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0xb0>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f001 f8e7 	bl	80017bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	@ 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40012400 	.word	0x40012400
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000800 	.word	0x50000800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	@ 0x2c
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2414      	movs	r4, #20
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f003 f945 	bl	80038a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <MX_GPIO_Init+0x13c>)
 800061c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061e:	4b48      	ldr	r3, [pc, #288]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000620:	2104      	movs	r1, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000626:	4b46      	ldr	r3, [pc, #280]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062a:	2204      	movs	r2, #4
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b43      	ldr	r3, [pc, #268]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063e:	4b40      	ldr	r3, [pc, #256]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <MX_GPIO_Init+0x13c>)
 800064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b37      	ldr	r3, [pc, #220]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066e:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <MX_GPIO_Init+0x13c>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fa18 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 8000688:	4b2e      	ldr	r3, [pc, #184]	@ (8000744 <MX_GPIO_Init+0x140>)
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fa12 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, GPIO_PIN_RESET);
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	482b      	ldr	r0, [pc, #172]	@ (8000748 <MX_GPIO_Init+0x144>)
 800069a:	2200      	movs	r2, #0
 800069c:	0019      	movs	r1, r3
 800069e:	f001 fa0b 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2284      	movs	r2, #132	@ 0x84
 80006ae:	0392      	lsls	r2, r2, #14
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	4a23      	ldr	r2, [pc, #140]	@ (8000748 <MX_GPIO_Init+0x144>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f001 f87c 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2220      	movs	r2, #32
 80006c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2201      	movs	r2, #1
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	193a      	adds	r2, r7, r4
 80006de:	23a0      	movs	r3, #160	@ 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 f869 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2204      	movs	r2, #4
 80006ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2201      	movs	r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 8000702:	193b      	adds	r3, r7, r4
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <MX_GPIO_Init+0x140>)
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f001 f857 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OPACITY_Pin */
  GPIO_InitStruct.Pin = OPACITY_Pin;
 800070e:	0021      	movs	r1, r4
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2201      	movs	r2, #1
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OPACITY_GPIO_Port, &GPIO_InitStruct);
 800072a:	187b      	adds	r3, r7, r1
 800072c:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <MX_GPIO_Init+0x144>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f001 f843 	bl	80017bc <HAL_GPIO_Init>

}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b00b      	add	sp, #44	@ 0x2c
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40021000 	.word	0x40021000
 8000744:	50000400 	.word	0x50000400
 8000748:	50000800 	.word	0x50000800

0800074c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	static uint8_t timer_count = 0;

	if(htim->Instance == TIM7)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d112      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		timer_count++;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000768:	701a      	strb	r2, [r3, #0]
		illum_read = 1;
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]

		//rain_read = 1;
		if(timer_count == 10)
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b0a      	cmp	r3, #10
 8000776:	d105      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			rain_read = 1;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
			timer_count = 0;
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40001400 	.word	0x40001400
 8000790:	2000008e 	.word	0x2000008e
 8000794:	2000008c 	.word	0x2000008c
 8000798:	2000008d 	.word	0x2000008d

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fa88 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f872 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff ff2c 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ac:	f000 f9e4 	bl	8000b78 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80007b0:	f7ff fe4c 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 80007b4:	f000 f982 	bl	8000abc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 80007b8:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <main+0xc4>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 f950 	bl	8002a60 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(illum_read)
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <main+0xc8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d011      	beq.n	80007ec <main+0x50>
	  {
		   in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <main+0xcc>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 f8c2 	bl	8000954 <HW_AdcReadChannel>
 80007d0:	0003      	movs	r3, r0
 80007d2:	001a      	movs	r2, r3
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <main+0xd0>)
 80007d6:	801a      	strh	r2, [r3, #0]
		   out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 f8bb 	bl	8000954 <HW_AdcReadChannel>
 80007de:	0003      	movs	r3, r0
 80007e0:	001a      	movs	r2, r3
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <main+0xd4>)
 80007e4:	801a      	strh	r2, [r3, #0]

		   illum_read = 0;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <main+0xc8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	  }

	  if(rain_read)
 80007ec:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <main+0xd8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d016      	beq.n	8000822 <main+0x86>
	  {
		  rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <main+0xdc>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f8ac 	bl	8000954 <HW_AdcReadChannel>
 80007fc:	0003      	movs	r3, r0
 80007fe:	001a      	movs	r2, r3
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <main+0xe0>)
 8000802:	801a      	strh	r2, [r3, #0]
		  rain_read = 0;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <main+0xd8>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]

		  // 비가 오는지 여부를 Threshold 기준으로 정의
		  rain_state = (rain_sense > RAIN_TH);
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <main+0xe0>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	b29b      	uxth	r3, r3
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	429a      	cmp	r2, r3
 8000816:	419b      	sbcs	r3, r3
 8000818:	425b      	negs	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	001a      	movs	r2, r3
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <main+0xe4>)
 8000820:	701a      	strb	r2, [r3, #0]
	  }

	  // 내부 조도가 밖의 조도보다 낮으면 켜짐
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, (in_illum < (out_illum - 50)));
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <main+0xd0>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	001a      	movs	r2, r3
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <main+0xd4>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	3b32      	subs	r3, #50	@ 0x32
 8000832:	2101      	movs	r1, #1
 8000834:	429a      	cmp	r2, r3
 8000836:	db01      	blt.n	800083c <main+0xa0>
 8000838:	2300      	movs	r3, #0
 800083a:	1c19      	adds	r1, r3, #0
 800083c:	b2cb      	uxtb	r3, r1
 800083e:	001a      	movs	r2, r3
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	480f      	ldr	r0, [pc, #60]	@ (8000884 <main+0xe8>)
 8000846:	0019      	movs	r1, r3
 8000848:	f001 f936 	bl	8001ab8 <HAL_GPIO_WritePin>

	  // 비 감지 시 켜짐
	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, rain_state);
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <main+0xe4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <main+0xec>)
 8000854:	001a      	movs	r2, r3
 8000856:	2104      	movs	r1, #4
 8000858:	f001 f92e 	bl	8001ab8 <HAL_GPIO_WritePin>
	  if(illum_read)
 800085c:	e7b0      	b.n	80007c0 <main+0x24>
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	20000090 	.word	0x20000090
 8000864:	2000008c 	.word	0x2000008c
 8000868:	04000002 	.word	0x04000002
 800086c:	20000084 	.word	0x20000084
 8000870:	20000086 	.word	0x20000086
 8000874:	2000008d 	.word	0x2000008d
 8000878:	3c008000 	.word	0x3c008000
 800087c:	2000008a 	.word	0x2000008a
 8000880:	20000088 	.word	0x20000088
 8000884:	50000800 	.word	0x50000800
 8000888:	50000400 	.word	0x50000400

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b09f      	sub	sp, #124	@ 0x7c
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	2440      	movs	r4, #64	@ 0x40
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2338      	movs	r3, #56	@ 0x38
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f003 f801 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a2:	232c      	movs	r3, #44	@ 0x2c
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	0018      	movs	r0, r3
 80008a8:	2314      	movs	r3, #20
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f002 fff9 	bl	80038a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	0018      	movs	r0, r3
 80008b6:	2328      	movs	r3, #40	@ 0x28
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f002 fff2 	bl	80038a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <SystemClock_Config+0xc0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <SystemClock_Config+0xc4>)
 80008c6:	401a      	ands	r2, r3
 80008c8:	4b20      	ldr	r3, [pc, #128]	@ (800094c <SystemClock_Config+0xc0>)
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	0109      	lsls	r1, r1, #4
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	22a0      	movs	r2, #160	@ 0xa0
 80008dc:	02d2      	lsls	r2, r2, #11
 80008de:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 f903 	bl	8001af4 <HAL_RCC_OscConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008f2:	f000 f89d 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	212c      	movs	r1, #44	@ 0x2c
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	220f      	movs	r2, #15
 80008fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2100      	movs	r1, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fcbe 	bl	800229c <HAL_RCC_ClockConfig>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000924:	f000 f884 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2202      	movs	r2, #2
 800092c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	0018      	movs	r0, r3
 8000938:	f001 feb4 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000940:	f000 f876 	bl	8000a30 <Error_Handler>
  }
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b01f      	add	sp, #124	@ 0x7c
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	40007000 	.word	0x40007000
 8000950:	ffffe7ff 	.word	0xffffe7ff

08000954 <HW_AdcReadChannel>:

/* USER CODE BEGIN 4 */
uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b087      	sub	sp, #28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 800095c:	2316      	movs	r3, #22
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	2200      	movs	r2, #0
 8000962:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <HW_AdcReadChannel+0xc4>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2208      	movs	r2, #8
 800096c:	4013      	ands	r3, r2
 800096e:	2b08      	cmp	r3, #8
 8000970:	d1f9      	bne.n	8000966 <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <HW_AdcReadChannel+0xc8>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <HW_AdcReadChannel+0xc8>)
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	0089      	lsls	r1, r1, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 8000982:	2100      	movs	r1, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fd9d 	bl	80014c4 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 800098a:	240c      	movs	r4, #12
 800098c:	193b      	adds	r3, r7, r4
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <HW_AdcReadChannel+0xd0>)
 8000990:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	4a24      	ldr	r2, [pc, #144]	@ (8000a28 <HW_AdcReadChannel+0xd4>)
 8000996:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000998:	193a      	adds	r2, r7, r4
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fc68 	bl	8001274 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	0152      	lsls	r2, r2, #5
 80009b2:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fc5a 	bl	8001274 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fb5a 	bl	800107c <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 80009c8:	2301      	movs	r3, #1
 80009ca:	425a      	negs	r2, r3
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fba7 	bl	8001124 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fc3f 	bl	800125c <HAL_ADC_GetValue>
 80009de:	0002      	movs	r2, r0
 80009e0:	2016      	movs	r0, #22
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2102      	movs	r1, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HW_AdcReadChannel+0xcc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2203      	movs	r2, #3
 80009fc:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <HW_AdcReadChannel+0xc8>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HW_AdcReadChannel+0xc8>)
 8000a04:	4909      	ldr	r1, [pc, #36]	@ (8000a2c <HW_AdcReadChannel+0xd8>)
 8000a06:	400a      	ands	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8000a0a:	183b      	adds	r3, r7, r0
 8000a0c:	881b      	ldrh	r3, [r3, #0]
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b007      	add	sp, #28
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	40007000 	.word	0x40007000
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	20000028 	.word	0x20000028
 8000a24:	0007ffff 	.word	0x0007ffff
 8000a28:	00001001 	.word	0x00001001
 8000a2c:	fffffdff 	.word	0xfffffdff

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <HAL_MspInit+0x24>)
 8000a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x24>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <HAL_MspInit+0x24>)
 8000a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_MspInit+0x24>)
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	0549      	lsls	r1, r1, #21
 8000a56:	430a      	orrs	r2, r1
 8000a58:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	e7fd      	b.n	8000a68 <NMI_Handler+0x4>

08000a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	e7fd      	b.n	8000a70 <HardFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f966 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <TIM7_IRQHandler+0x14>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f002 f830 	bl	8002b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	20000090 	.word	0x20000090

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 feea 	bl	80038a4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000ad2:	4a16      	ldr	r2, [pc, #88]	@ (8000b2c <MX_TIM7_Init+0x70>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 799;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <MX_TIM7_Init+0x74>)
 8000ada:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000ae4:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <MX_TIM7_Init+0x78>)
 8000ae6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 ff75 	bl	80029e0 <HAL_TIM_Base_Init>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000afa:	f7ff ff99 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b0a:	003a      	movs	r2, r7
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_TIM7_Init+0x6c>)
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 f947 	bl	8002da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000b1a:	f7ff ff89 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	40001400 	.word	0x40001400
 8000b30:	0000031f 	.word	0x0000031f
 8000b34:	0000270f 	.word	0x0000270f

08000b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <HAL_TIM_Base_MspInit+0x38>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10d      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b50:	2120      	movs	r1, #32
 8000b52:	430a      	orrs	r2, r1
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2012      	movs	r0, #18
 8000b5c:	f000 fdfc 	bl	8001758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b60:	2012      	movs	r0, #18
 8000b62:	f000 fe0e 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	40001400 	.word	0x40001400
 8000b74:	40021000 	.word	0x40021000

08000b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <MX_USART2_UART_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b84:	22e1      	movs	r2, #225	@ 0xe1
 8000b86:	0252      	lsls	r2, r2, #9
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f002 f94f 	bl	8002e60 <HAL_UART_Init>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f7ff ff33 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000d0 	.word	0x200000d0
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	240c      	movs	r4, #12
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f002 fe5a 	bl	80038a4 <memset>
  if(uartHandle->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <HAL_UART_MspInit+0x80>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d129      	bne.n	8000c4e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_UART_MspInit+0x84>)
 8000bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_UART_MspInit+0x84>)
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	0289      	lsls	r1, r1, #10
 8000c04:	430a      	orrs	r2, r1
 8000c06:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_UART_MspInit+0x84>)
 8000c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_UART_MspInit+0x84>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	430a      	orrs	r2, r1
 8000c12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_UART_MspInit+0x84>)
 8000c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c20:	0021      	movs	r1, r4
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	220c      	movs	r2, #12
 8000c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2203      	movs	r2, #3
 8000c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	187a      	adds	r2, r7, r1
 8000c42:	23a0      	movs	r3, #160	@ 0xa0
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f000 fdb7 	bl	80017bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b009      	add	sp, #36	@ 0x24
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40021000 	.word	0x40021000

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c64:	f7ff ff24 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f002 fe11 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fd83 	bl	800079c <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
   ldr   r0, =_estack
 8000c98:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca4:	08003990 	.word	0x08003990
  ldr r2, =_sbss
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cac:	2000015c 	.word	0x2000015c

08000cb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_COMP_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_Init+0x3c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_Init+0x3c>)
 8000cc6:	2140      	movs	r1, #64	@ 0x40
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f811 	bl	8000cf4 <HAL_InitTick>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e001      	b.n	8000ce2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cde:	f7ff fead 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_InitTick+0x5c>)
 8000cfe:	681c      	ldr	r4, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_InitTick+0x60>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	0019      	movs	r1, r3
 8000d06:	23fa      	movs	r3, #250	@ 0xfa
 8000d08:	0098      	lsls	r0, r3, #2
 8000d0a:	f7ff f9fd 	bl	8000108 <__udivsi3>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	0019      	movs	r1, r3
 8000d12:	0020      	movs	r0, r4
 8000d14:	f7ff f9f8 	bl	8000108 <__udivsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fd41 	bl	80017a2 <HAL_SYSTICK_Config>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e00f      	b.n	8000d48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d80b      	bhi.n	8000d46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	2301      	movs	r3, #1
 8000d32:	425b      	negs	r3, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fd0e 	bl	8001758 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_InitTick+0x64>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b003      	add	sp, #12
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	001a      	movs	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	18d2      	adds	r2, r2, r3
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000158 	.word	0x20000158

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	@ (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	20000158 	.word	0x20000158

08000d94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e159      	b.n	800105a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2250      	movs	r2, #80	@ 0x50
 8000db8:	2100      	movs	r1, #0
 8000dba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fbc6 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc8:	2210      	movs	r2, #16
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d005      	beq.n	8000ddc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000dda:	d00b      	beq.n	8000df4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de0:	2210      	movs	r2, #16
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2250      	movs	r2, #80	@ 0x50
 8000dec:	2100      	movs	r1, #0
 8000dee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e132      	b.n	800105a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df8:	4a9a      	ldr	r2, [pc, #616]	@ (8001064 <HAL_ADC_Init+0x2d0>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <HAL_ADC_Init+0x90>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_ADC_Init+0x90>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_ADC_Init+0x92>
 8000e24:	2300      	movs	r3, #0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d149      	bne.n	8000ebe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	23c0      	movs	r3, #192	@ 0xc0
 8000e30:	061b      	lsls	r3, r3, #24
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d00b      	beq.n	8000e4e <HAL_ADC_Init+0xba>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d005      	beq.n	8000e4e <HAL_ADC_Init+0xba>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	061b      	lsls	r3, r3, #24
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d111      	bne.n	8000e72 <HAL_ADC_Init+0xde>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	0892      	lsrs	r2, r2, #2
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6919      	ldr	r1, [r3, #16]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	e014      	b.n	8000e9c <HAL_ADC_Init+0x108>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	0892      	lsrs	r2, r2, #2
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	4b79      	ldr	r3, [pc, #484]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b78      	ldr	r3, [pc, #480]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000e88:	4978      	ldr	r1, [pc, #480]	@ (800106c <HAL_ADC_Init+0x2d8>)
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	4b76      	ldr	r3, [pc, #472]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000e90:	6819      	ldr	r1, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4b74      	ldr	r3, [pc, #464]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2118      	movs	r1, #24
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68d9      	ldr	r1, [r3, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b69      	ldr	r3, [pc, #420]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000ec4:	496a      	ldr	r1, [pc, #424]	@ (8001070 <HAL_ADC_Init+0x2dc>)
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000eca:	4b67      	ldr	r3, [pc, #412]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed2:	065a      	lsls	r2, r3, #25
 8000ed4:	4b64      	ldr	r3, [pc, #400]	@ (8001068 <HAL_ADC_Init+0x2d4>)
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	055b      	lsls	r3, r3, #21
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d108      	bne.n	8000efa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2180      	movs	r1, #128	@ 0x80
 8000ef4:	0549      	lsls	r1, r1, #21
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	495b      	ldr	r1, [pc, #364]	@ (8001074 <HAL_ADC_Init+0x2e0>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68d9      	ldr	r1, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d101      	bne.n	8000f20 <HAL_ADC_Init+0x18c>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e000      	b.n	8000f22 <HAL_ADC_Init+0x18e>
 8000f20:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f22:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2020      	movs	r0, #32
 8000f28:	5c1b      	ldrb	r3, [r3, r0]
 8000f2a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f2c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	202c      	movs	r0, #44	@ 0x2c
 8000f32:	5c1b      	ldrb	r3, [r3, r0]
 8000f34:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f36:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f3c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f44:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f4c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f5a:	23c2      	movs	r3, #194	@ 0xc2
 8000f5c:	33ff      	adds	r3, #255	@ 0xff
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d00b      	beq.n	8000f7a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2221      	movs	r2, #33	@ 0x21
 8000f7e:	5c9b      	ldrb	r3, [r3, r2]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d11a      	bne.n	8000fba <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2220      	movs	r2, #32
 8000f88:	5c9b      	ldrb	r3, [r3, r2]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2180      	movs	r1, #128	@ 0x80
 8000f9a:	0249      	lsls	r1, r1, #9
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	e00b      	b.n	8000fba <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d11f      	bne.n	8001002 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	492a      	ldr	r1, [pc, #168]	@ (8001078 <HAL_ADC_Init+0x2e4>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6919      	ldr	r1, [r3, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000fe0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000fe6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	e00e      	b.n	8001020 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	2b01      	cmp	r3, #1
 800100e:	d107      	bne.n	8001020 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	438a      	bics	r2, r1
 800101e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2107      	movs	r1, #7
 800102c:	438a      	bics	r2, r1
 800102e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6959      	ldr	r1, [r3, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104c:	2203      	movs	r2, #3
 800104e:	4393      	bics	r3, r2
 8001050:	2201      	movs	r2, #1
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	fffffefd 	.word	0xfffffefd
 8001068:	40012708 	.word	0x40012708
 800106c:	ffc3ffff 	.word	0xffc3ffff
 8001070:	fdffffff 	.word	0xfdffffff
 8001074:	fffe0219 	.word	0xfffe0219
 8001078:	fffffc03 	.word	0xfffffc03

0800107c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2204      	movs	r2, #4
 8001094:	4013      	ands	r3, r2
 8001096:	d138      	bne.n	800110a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2250      	movs	r2, #80	@ 0x50
 800109c:	5c9b      	ldrb	r3, [r3, r2]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Start+0x2a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e038      	b.n	8001118 <HAL_ADC_Start+0x9c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2250      	movs	r2, #80	@ 0x50
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d007      	beq.n	80010c6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010b6:	230f      	movs	r3, #15
 80010b8:	18fc      	adds	r4, r7, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 f979 	bl	80013b4 <ADC_Enable>
 80010c2:	0003      	movs	r3, r0
 80010c4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d120      	bne.n	8001112 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <HAL_ADC_Start+0xa4>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	2280      	movs	r2, #128	@ 0x80
 80010da:	0052      	lsls	r2, r2, #1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2250      	movs	r2, #80	@ 0x50
 80010ec:	2100      	movs	r1, #0
 80010ee:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	221c      	movs	r2, #28
 80010f6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2104      	movs	r1, #4
 8001104:	430a      	orrs	r2, r1
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e003      	b.n	8001112 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800110a:	230f      	movs	r3, #15
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b005      	add	sp, #20
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	fffff0fe 	.word	0xfffff0fe

08001124 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d102      	bne.n	8001144 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800113e:	2308      	movs	r3, #8
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e014      	b.n	800116e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2201      	movs	r2, #1
 800114c:	4013      	ands	r3, r2
 800114e:	2b01      	cmp	r3, #1
 8001150:	d10b      	bne.n	800116a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001156:	2220      	movs	r2, #32
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2250      	movs	r2, #80	@ 0x50
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e072      	b.n	8001250 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800116a:	230c      	movs	r3, #12
 800116c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800116e:	f7ff fe07 	bl	8000d80 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001176:	e01f      	b.n	80011b8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	d01c      	beq.n	80011b8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_ADC_PollForConversion+0x70>
 8001184:	f7ff fdfc 	bl	8000d80 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d211      	bcs.n	80011b8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	d10b      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	2204      	movs	r2, #4
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2250      	movs	r2, #80	@ 0x50
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e04b      	b.n	8001250 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	d0d9      	beq.n	8001178 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	23c0      	movs	r3, #192	@ 0xc0
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4013      	ands	r3, r2
 80011de:	d12e      	bne.n	800123e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2220      	movs	r2, #32
 80011e4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d129      	bne.n	800123e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2208      	movs	r2, #8
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d122      	bne.n	800123e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2204      	movs	r2, #4
 8001200:	4013      	ands	r3, r2
 8001202:	d110      	bne.n	8001226 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	210c      	movs	r1, #12
 8001210:	438a      	bics	r2, r1
 8001212:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001218:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <HAL_ADC_PollForConversion+0x134>)
 800121a:	4013      	ands	r3, r2
 800121c:	2201      	movs	r2, #1
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	655a      	str	r2, [r3, #84]	@ 0x54
 8001224:	e00b      	b.n	800123e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800122a:	2220      	movs	r2, #32
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	2201      	movs	r2, #1
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b004      	add	sp, #16
 8001256:	bd80      	pop	{r7, pc}
 8001258:	fffffefe 	.word	0xfffffefe

0800125c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2250      	movs	r2, #80	@ 0x50
 8001282:	5c9b      	ldrb	r3, [r3, r2]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_ADC_ConfigChannel+0x18>
 8001288:	2302      	movs	r3, #2
 800128a:	e085      	b.n	8001398 <HAL_ADC_ConfigChannel+0x124>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2250      	movs	r2, #80	@ 0x50
 8001290:	2101      	movs	r1, #1
 8001292:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2204      	movs	r2, #4
 800129c:	4013      	ands	r3, r2
 800129e:	d00b      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a4:	2220      	movs	r2, #32
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2250      	movs	r2, #80	@ 0x50
 80012b0:	2100      	movs	r1, #0
 80012b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e06f      	b.n	8001398 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a38      	ldr	r2, [pc, #224]	@ (80013a0 <HAL_ADC_ConfigChannel+0x12c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d035      	beq.n	800132e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	035b      	lsls	r3, r3, #13
 80012ce:	0b5a      	lsrs	r2, r3, #13
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	02db      	lsls	r3, r3, #11
 80012e0:	4013      	ands	r3, r2
 80012e2:	d009      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 80012ea:	2180      	movs	r1, #128	@ 0x80
 80012ec:	0409      	lsls	r1, r1, #16
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f000 f8c6 	bl	8001484 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	029b      	lsls	r3, r3, #10
 8001300:	4013      	ands	r3, r2
 8001302:	d006      	beq.n	8001312 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001304:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	03c9      	lsls	r1, r1, #15
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	4013      	ands	r3, r2
 800131c:	d037      	beq.n	800138e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001324:	2180      	movs	r1, #128	@ 0x80
 8001326:	0449      	lsls	r1, r1, #17
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e02f      	b.n	800138e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	035b      	lsls	r3, r3, #13
 800133a:	0b5b      	lsrs	r3, r3, #13
 800133c:	43d9      	mvns	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	02db      	lsls	r3, r3, #11
 800134e:	4013      	ands	r3, r2
 8001350:	d005      	beq.n	800135e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001358:	4913      	ldr	r1, [pc, #76]	@ (80013a8 <HAL_ADC_ConfigChannel+0x134>)
 800135a:	400a      	ands	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d005      	beq.n	8001376 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001370:	490e      	ldr	r1, [pc, #56]	@ (80013ac <HAL_ADC_ConfigChannel+0x138>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	4013      	ands	r3, r2
 8001380:	d005      	beq.n	800138e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_ADC_ConfigChannel+0x130>)
 8001388:	4909      	ldr	r1, [pc, #36]	@ (80013b0 <HAL_ADC_ConfigChannel+0x13c>)
 800138a:	400a      	ands	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2250      	movs	r2, #80	@ 0x50
 8001392:	2100      	movs	r1, #0
 8001394:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	00001001 	.word	0x00001001
 80013a4:	40012708 	.word	0x40012708
 80013a8:	ff7fffff 	.word	0xff7fffff
 80013ac:	ffbfffff 	.word	0xffbfffff
 80013b0:	feffffff 	.word	0xfeffffff

080013b4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2203      	movs	r2, #3
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d108      	bne.n	80013e0 <ADC_Enable+0x2c>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <ADC_Enable+0x2c>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <ADC_Enable+0x2e>
 80013e0:	2300      	movs	r3, #0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d146      	bne.n	8001474 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <ADC_Enable+0xcc>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	d00d      	beq.n	800140e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f6:	2210      	movs	r2, #16
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	2201      	movs	r2, #1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e033      	b.n	8001476 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800141e:	2001      	movs	r0, #1
 8001420:	f000 f830 	bl	8001484 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001424:	f7ff fcac 	bl	8000d80 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800142c:	e01b      	b.n	8001466 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800142e:	f7ff fca7 	bl	8000d80 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b0a      	cmp	r3, #10
 800143a:	d914      	bls.n	8001466 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	2b01      	cmp	r3, #1
 8001448:	d00d      	beq.n	8001466 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144e:	2210      	movs	r2, #16
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	2201      	movs	r2, #1
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e007      	b.n	8001476 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	4013      	ands	r3, r2
 8001470:	2b01      	cmp	r3, #1
 8001472:	d1dc      	bne.n	800142e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	80000017 	.word	0x80000017

08001484 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <ADC_DelayMicroSecond+0x38>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	490b      	ldr	r1, [pc, #44]	@ (80014c0 <ADC_DelayMicroSecond+0x3c>)
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe fe38 	bl	8000108 <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	001a      	movs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4353      	muls	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80014a2:	e002      	b.n	80014aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f9      	bne.n	80014a4 <ADC_DelayMicroSecond+0x20>
  }
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000000 	.word	0x20000000
 80014c0:	000f4240 	.word	0x000f4240

080014c4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ce:	2317      	movs	r3, #23
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2250      	movs	r2, #80	@ 0x50
 80014e2:	5c9b      	ldrb	r3, [r3, r2]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADCEx_Calibration_Start+0x28>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e083      	b.n	80015f4 <HAL_ADCEx_Calibration_Start+0x130>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2250      	movs	r2, #80	@ 0x50
 80014f0:	2101      	movs	r1, #1
 80014f2:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2203      	movs	r2, #3
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d108      	bne.n	8001514 <HAL_ADCEx_Calibration_Start+0x50>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_ADCEx_Calibration_Start+0x50>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_ADCEx_Calibration_Start+0x52>
 8001514:	2300      	movs	r3, #0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d15b      	bne.n	80015d2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151e:	4a37      	ldr	r2, [pc, #220]	@ (80015fc <HAL_ADCEx_Calibration_Start+0x138>)
 8001520:	4013      	ands	r3, r2
 8001522:	2202      	movs	r2, #2
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2203      	movs	r2, #3
 8001532:	4013      	ands	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2103      	movs	r1, #3
 8001542:	438a      	bics	r2, r1
 8001544:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2180      	movs	r1, #128	@ 0x80
 8001552:	0609      	lsls	r1, r1, #24
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8001558:	f7ff fc12 	bl	8000d80 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001560:	e01d      	b.n	800159e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001562:	f7ff fc0d 	bl	8000d80 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b0a      	cmp	r3, #10
 800156e:	d916      	bls.n	800159e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	0fdb      	lsrs	r3, r3, #31
 8001578:	07da      	lsls	r2, r3, #31
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	429a      	cmp	r2, r3
 8001580:	d10d      	bne.n	800159e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	2212      	movs	r2, #18
 8001588:	4393      	bics	r3, r2
 800158a:	2210      	movs	r2, #16
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2250      	movs	r2, #80	@ 0x50
 8001596:	2100      	movs	r1, #0
 8001598:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e02a      	b.n	80015f4 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	0fdb      	lsrs	r3, r3, #31
 80015a6:	07da      	lsls	r2, r3, #31
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	061b      	lsls	r3, r3, #24
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d0d8      	beq.n	8001562 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	430a      	orrs	r2, r1
 80015be:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	2203      	movs	r2, #3
 80015c6:	4393      	bics	r3, r2
 80015c8:	2201      	movs	r2, #1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80015d0:	e009      	b.n	80015e6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d6:	2220      	movs	r2, #32
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015de:	2317      	movs	r3, #23
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2250      	movs	r2, #80	@ 0x50
 80015ea:	2100      	movs	r1, #0
 80015ec:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80015ee:	2317      	movs	r3, #23
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b006      	add	sp, #24
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	fffffefd 	.word	0xfffffefd

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	0002      	movs	r2, r0
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b7f      	cmp	r3, #127	@ 0x7f
 8001612:	d809      	bhi.n	8001628 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	001a      	movs	r2, r3
 800161a:	231f      	movs	r3, #31
 800161c:	401a      	ands	r2, r3
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <__NVIC_EnableIRQ+0x30>)
 8001620:	2101      	movs	r1, #1
 8001622:	4091      	lsls	r1, r2
 8001624:	000a      	movs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
  }
}
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	0002      	movs	r2, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b7f      	cmp	r3, #127	@ 0x7f
 8001648:	d828      	bhi.n	800169c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164a:	4a2f      	ldr	r2, [pc, #188]	@ (8001708 <__NVIC_SetPriority+0xd4>)
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	33c0      	adds	r3, #192	@ 0xc0
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	589b      	ldr	r3, [r3, r2]
 800165a:	1dfa      	adds	r2, r7, #7
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	0011      	movs	r1, r2
 8001660:	2203      	movs	r2, #3
 8001662:	400a      	ands	r2, r1
 8001664:	00d2      	lsls	r2, r2, #3
 8001666:	21ff      	movs	r1, #255	@ 0xff
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	43d2      	mvns	r2, r2
 800166e:	401a      	ands	r2, r3
 8001670:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	22ff      	movs	r2, #255	@ 0xff
 8001678:	401a      	ands	r2, r3
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	0018      	movs	r0, r3
 8001680:	2303      	movs	r3, #3
 8001682:	4003      	ands	r3, r0
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001688:	481f      	ldr	r0, [pc, #124]	@ (8001708 <__NVIC_SetPriority+0xd4>)
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	430a      	orrs	r2, r1
 8001694:	33c0      	adds	r3, #192	@ 0xc0
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800169a:	e031      	b.n	8001700 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <__NVIC_SetPriority+0xd8>)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	0019      	movs	r1, r3
 80016a4:	230f      	movs	r3, #15
 80016a6:	400b      	ands	r3, r1
 80016a8:	3b08      	subs	r3, #8
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3306      	adds	r3, #6
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	3304      	adds	r3, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	0011      	movs	r1, r2
 80016bc:	2203      	movs	r2, #3
 80016be:	400a      	ands	r2, r1
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	21ff      	movs	r1, #255	@ 0xff
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	43d2      	mvns	r2, r2
 80016ca:	401a      	ands	r2, r3
 80016cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	22ff      	movs	r2, #255	@ 0xff
 80016d4:	401a      	ands	r2, r3
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	2303      	movs	r3, #3
 80016de:	4003      	ands	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e4:	4809      	ldr	r0, [pc, #36]	@ (800170c <__NVIC_SetPriority+0xd8>)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	001c      	movs	r4, r3
 80016ec:	230f      	movs	r3, #15
 80016ee:	4023      	ands	r3, r4
 80016f0:	3b08      	subs	r3, #8
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	430a      	orrs	r2, r1
 80016f6:	3306      	adds	r3, #6
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	18c3      	adds	r3, r0, r3
 80016fc:	3304      	adds	r3, #4
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b003      	add	sp, #12
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	045b      	lsls	r3, r3, #17
 8001720:	429a      	cmp	r2, r3
 8001722:	d301      	bcc.n	8001728 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001724:	2301      	movs	r3, #1
 8001726:	e010      	b.n	800174a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <SysTick_Config+0x44>)
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	3a01      	subs	r2, #1
 800172e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001730:	2301      	movs	r3, #1
 8001732:	425b      	negs	r3, r3
 8001734:	2103      	movs	r1, #3
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff ff7c 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <SysTick_Config+0x44>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <SysTick_Config+0x44>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	210f      	movs	r1, #15
 8001764:	187b      	adds	r3, r7, r1
 8001766:	1c02      	adds	r2, r0, #0
 8001768:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b25b      	sxtb	r3, r3
 8001772:	0011      	movs	r1, r2
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	0002      	movs	r2, r0
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b25b      	sxtb	r3, r3
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff ff33 	bl	8001600 <__NVIC_EnableIRQ>
}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff ffaf 	bl	8001710 <SysTick_Config>
 80017b2:	0003      	movs	r3, r0
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b002      	add	sp, #8
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017d2:	e155      	b.n	8001a80 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4091      	lsls	r1, r2
 80017de:	000a      	movs	r2, r1
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d100      	bne.n	80017ec <HAL_GPIO_Init+0x30>
 80017ea:	e146      	b.n	8001a7a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	409a      	lsls	r2, r3
 8001812:	0013      	movs	r3, r2
 8001814:	43da      	mvns	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	409a      	lsls	r2, r3
 8001826:	0013      	movs	r3, r2
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	43da      	mvns	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	2201      	movs	r2, #1
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	409a      	lsls	r2, r3
 8001880:	0013      	movs	r3, r2
 8001882:	43da      	mvns	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	58d3      	ldr	r3, [r2, r3]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2207      	movs	r2, #7
 80018c0:	4013      	ands	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	43da      	mvns	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2107      	movs	r1, #7
 80018da:	400b      	ands	r3, r1
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	0092      	lsls	r2, r2, #2
 80018f2:	6939      	ldr	r1, [r7, #16]
 80018f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	401a      	ands	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	23c0      	movs	r3, #192	@ 0xc0
 8001930:	029b      	lsls	r3, r3, #10
 8001932:	4013      	ands	r3, r2
 8001934:	d100      	bne.n	8001938 <HAL_GPIO_Init+0x17c>
 8001936:	e0a0      	b.n	8001a7a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <HAL_GPIO_Init+0x2dc>)
 800193a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800193c:	4b56      	ldr	r3, [pc, #344]	@ (8001a98 <HAL_GPIO_Init+0x2dc>)
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001944:	4a55      	ldr	r2, [pc, #340]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	589b      	ldr	r3, [r3, r2]
 8001950:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2203      	movs	r2, #3
 8001956:	4013      	ands	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	409a      	lsls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	43da      	mvns	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	23a0      	movs	r3, #160	@ 0xa0
 800196c:	05db      	lsls	r3, r3, #23
 800196e:	429a      	cmp	r2, r3
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x1f6>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x1f2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	@ (8001aa4 <HAL_GPIO_Init+0x2e8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x1ee>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a48      	ldr	r2, [pc, #288]	@ (8001aa8 <HAL_GPIO_Init+0x2ec>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x1ea>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a47      	ldr	r2, [pc, #284]	@ (8001aac <HAL_GPIO_Init+0x2f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x1e6>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a46      	ldr	r2, [pc, #280]	@ (8001ab0 <HAL_GPIO_Init+0x2f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x1e2>
 800199a:	2305      	movs	r3, #5
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x1f8>
 800199e:	2306      	movs	r3, #6
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x1f8>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x1f8>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x1f8>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x1f8>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x1f8>
 80019b2:	2300      	movs	r3, #0
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	2103      	movs	r1, #3
 80019b8:	400a      	ands	r2, r1
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43da      	mvns	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	035b      	lsls	r3, r3, #13
 80019ea:	4013      	ands	r3, r2
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019f6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	039b      	lsls	r3, r3, #14
 8001a14:	4013      	ands	r3, r2
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	025b      	lsls	r3, r3, #9
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	1e13      	subs	r3, r2, #0
 8001a8a:	d000      	beq.n	8001a8e <HAL_GPIO_Init+0x2d2>
 8001a8c:	e6a2      	b.n	80017d4 <HAL_GPIO_Init+0x18>
  }
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b006      	add	sp, #24
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	50000400 	.word	0x50000400
 8001aa4:	50000800 	.word	0x50000800
 8001aa8:	50000c00 	.word	0x50000c00
 8001aac:	50001000 	.word	0x50001000
 8001ab0:	50001c00 	.word	0x50001c00
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	0008      	movs	r0, r1
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	1cbb      	adds	r3, r7, #2
 8001ac6:	1c02      	adds	r2, r0, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	1c7b      	adds	r3, r7, #1
 8001acc:	1c0a      	adds	r2, r1, #0
 8001ace:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad0:	1c7b      	adds	r3, r7, #1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ae0:	e003      	b.n	8001aea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ae2:	1cbb      	adds	r3, r7, #2
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f000 fbbf 	bl	8002286 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b08:	4bc9      	ldr	r3, [pc, #804]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b12:	4bc7      	ldr	r3, [pc, #796]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	2380      	movs	r3, #128	@ 0x80
 8001b18:	025b      	lsls	r3, r3, #9
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x36>
 8001b28:	e07e      	b.n	8001c28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x68>
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10d      	bne.n	8001b5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4bbb      	ldr	r3, [pc, #748]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5a>
 8001b4c:	e06b      	b.n	8001c26 <HAL_RCC_OscConfig+0x132>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d167      	bne.n	8001c26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f000 fb95 	bl	8002286 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_OscConfig+0x84>
 8001b68:	4bb1      	ldr	r3, [pc, #708]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b6e:	2180      	movs	r1, #128	@ 0x80
 8001b70:	0249      	lsls	r1, r1, #9
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e027      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	23a0      	movs	r3, #160	@ 0xa0
 8001b7e:	02db      	lsls	r3, r3, #11
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d10e      	bne.n	8001ba2 <HAL_RCC_OscConfig+0xae>
 8001b84:	4baa      	ldr	r3, [pc, #680]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4ba9      	ldr	r3, [pc, #676]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	02c9      	lsls	r1, r1, #11
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	4ba7      	ldr	r3, [pc, #668]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4ba6      	ldr	r3, [pc, #664]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0249      	lsls	r1, r1, #9
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e012      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001ba2:	4ba3      	ldr	r3, [pc, #652]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001ba8:	49a2      	ldr	r1, [pc, #648]	@ (8001e34 <HAL_RCC_OscConfig+0x340>)
 8001baa:	400a      	ands	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4ba0      	ldr	r3, [pc, #640]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b9b      	ldr	r3, [pc, #620]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001bc2:	499d      	ldr	r1, [pc, #628]	@ (8001e38 <HAL_RCC_OscConfig+0x344>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f8d6 	bl	8000d80 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff f8d1 	bl	8000d80 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	@ 0x64
 8001be6:	d902      	bls.n	8001bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f000 fb4c 	bl	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bee:	4b90      	ldr	r3, [pc, #576]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0ef      	beq.n	8001bda <HAL_RCC_OscConfig+0xe6>
 8001bfa:	e015      	b.n	8001c28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f8c0 	bl	8000d80 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c06:	f7ff f8bb 	bl	8000d80 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	@ 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e336      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c18:	4b85      	ldr	r3, [pc, #532]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x112>
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d100      	bne.n	8001c34 <HAL_RCC_OscConfig+0x140>
 8001c32:	e099      	b.n	8001d68 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c42:	4b7b      	ldr	r3, [pc, #492]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b7a      	ldr	r3, [pc, #488]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c48:	2120      	movs	r1, #32
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	2220      	movs	r2, #32
 8001c52:	4393      	bics	r3, r2
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d13e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1ec>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d13b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c68:	4b71      	ldr	r3, [pc, #452]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_RCC_OscConfig+0x188>
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e304      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a6e      	ldr	r2, [pc, #440]	@ (8001e3c <HAL_RCC_OscConfig+0x348>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	021a      	lsls	r2, r3, #8
 8001c8c:	4b68      	ldr	r3, [pc, #416]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c92:	4b67      	ldr	r3, [pc, #412]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2209      	movs	r2, #9
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b64      	ldr	r3, [pc, #400]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ca4:	f000 fc42 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	4b61      	ldr	r3, [pc, #388]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a62      	ldr	r2, [pc, #392]	@ (8001e40 <HAL_RCC_OscConfig+0x34c>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <HAL_RCC_OscConfig+0x350>)
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001cc0:	4b61      	ldr	r3, [pc, #388]	@ (8001e48 <HAL_RCC_OscConfig+0x354>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2513      	movs	r5, #19
 8001cc6:	197c      	adds	r4, r7, r5
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff f813 	bl	8000cf4 <HAL_InitTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001cd2:	197b      	adds	r3, r7, r5
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d046      	beq.n	8001d68 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001cda:	197b      	adds	r3, r7, r5
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	e2d2      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d027      	beq.n	8001d36 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ce6:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2209      	movs	r2, #9
 8001cec:	4393      	bics	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f842 	bl	8000d80 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff f83d 	bl	8000d80 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e2b8      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d14:	4b46      	ldr	r3, [pc, #280]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d0f1      	beq.n	8001d02 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a46      	ldr	r2, [pc, #280]	@ (8001e3c <HAL_RCC_OscConfig+0x348>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	021a      	lsls	r2, r3, #8
 8001d2e:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	e018      	b.n	8001d68 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	438a      	bics	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff f81d 	bl	8000d80 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f818 	bl	8000d80 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e293      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d5e:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2204      	movs	r2, #4
 8001d64:	4013      	ands	r3, r2
 8001d66:	d1f1      	bne.n	8001d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d100      	bne.n	8001d74 <HAL_RCC_OscConfig+0x280>
 8001d72:	e0a2      	b.n	8001eba <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d140      	bne.n	8001dfc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x29e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e279      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d92:	4b27      	ldr	r3, [pc, #156]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a2d      	ldr	r2, [pc, #180]	@ (8001e4c <HAL_RCC_OscConfig+0x358>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da6:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	0a19      	lsrs	r1, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	061a      	lsls	r2, r3, #24
 8001db4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	0b5b      	lsrs	r3, r3, #13
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	0212      	lsls	r2, r2, #8
 8001dc6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	210f      	movs	r1, #15
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	491b      	ldr	r1, [pc, #108]	@ (8001e40 <HAL_RCC_OscConfig+0x34c>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_RCC_OscConfig+0x350>)
 8001dda:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_RCC_OscConfig+0x354>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2513      	movs	r5, #19
 8001de2:	197c      	adds	r4, r7, r5
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7fe ff85 	bl	8000cf4 <HAL_InitTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dee:	197b      	adds	r3, r7, r5
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d061      	beq.n	8001eba <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001df6:	197b      	adds	r3, r7, r5
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	e244      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d040      	beq.n	8001e86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	0049      	lsls	r1, r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe ffb5 	bl	8000d80 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e1a:	e019      	b.n	8001e50 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e1c:	f7fe ffb0 	bl	8000d80 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d912      	bls.n	8001e50 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e22b      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	40021000 	.word	0x40021000
 8001e34:	fffeffff 	.word	0xfffeffff
 8001e38:	fffbffff 	.word	0xfffbffff
 8001e3c:	ffffe0ff 	.word	0xffffe0ff
 8001e40:	08003914 	.word	0x08003914
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e50:	4bca      	ldr	r3, [pc, #808]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0df      	beq.n	8001e1c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5c:	4bc7      	ldr	r3, [pc, #796]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4ac7      	ldr	r2, [pc, #796]	@ (8002180 <HAL_RCC_OscConfig+0x68c>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e6a:	4bc4      	ldr	r3, [pc, #784]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e70:	4bc2      	ldr	r3, [pc, #776]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	0a19      	lsrs	r1, r3, #8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	061a      	lsls	r2, r3, #24
 8001e7e:	4bbf      	ldr	r3, [pc, #764]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	e019      	b.n	8001eba <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e86:	4bbd      	ldr	r3, [pc, #756]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4bbc      	ldr	r3, [pc, #752]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001e8c:	49bd      	ldr	r1, [pc, #756]	@ (8002184 <HAL_RCC_OscConfig+0x690>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe ff75 	bl	8000d80 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e9c:	f7fe ff70 	bl	8000d80 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1eb      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eae:	4bb3      	ldr	r3, [pc, #716]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d036      	beq.n	8001f32 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ecc:	4bab      	ldr	r3, [pc, #684]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001ece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ed0:	4baa      	ldr	r3, [pc, #680]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7fe ff52 	bl	8000d80 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7fe ff4d 	bl	8000d80 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1c8      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d0f1      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3ee>
 8001efe:	e018      	b.n	8001f32 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f00:	4b9e      	ldr	r3, [pc, #632]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f04:	4b9d      	ldr	r3, [pc, #628]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7fe ff38 	bl	8000d80 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe ff33 	bl	8000d80 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1ae      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f28:	4b94      	ldr	r3, [pc, #592]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f1      	bne.n	8001f16 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x44a>
 8001f3c:	e0ae      	b.n	800209c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2023      	movs	r0, #35	@ 0x23
 8001f40:	183b      	adds	r3, r7, r0
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b8d      	ldr	r3, [pc, #564]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	055b      	lsls	r3, r3, #21
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b8a      	ldr	r3, [pc, #552]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f56:	4b89      	ldr	r3, [pc, #548]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	0549      	lsls	r1, r1, #21
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b88      	ldr	r3, [pc, #544]	@ (8002188 <HAL_RCC_OscConfig+0x694>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d11a      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x694>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b84      	ldr	r3, [pc, #528]	@ (8002188 <HAL_RCC_OscConfig+0x694>)
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	0049      	lsls	r1, r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f80:	f7fe fefe 	bl	8000d80 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7fe fef9 	bl	8000d80 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	@ 0x64
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e174      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	4b7a      	ldr	r3, [pc, #488]	@ (8002188 <HAL_RCC_OscConfig+0x694>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4d0>
 8001fb4:	4b71      	ldr	r3, [pc, #452]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001fb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fb8:	4b70      	ldr	r3, [pc, #448]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001fba:	2180      	movs	r1, #128	@ 0x80
 8001fbc:	0049      	lsls	r1, r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc2:	e031      	b.n	8002028 <HAL_RCC_OscConfig+0x534>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4f2>
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001fce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001fd2:	496c      	ldr	r1, [pc, #432]	@ (8002184 <HAL_RCC_OscConfig+0x690>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fd8:	4b68      	ldr	r3, [pc, #416]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001fda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fdc:	4b67      	ldr	r3, [pc, #412]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001fde:	496b      	ldr	r1, [pc, #428]	@ (800218c <HAL_RCC_OscConfig+0x698>)
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fe4:	e020      	b.n	8002028 <HAL_RCC_OscConfig+0x534>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	23a0      	movs	r3, #160	@ 0xa0
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d10e      	bne.n	8002010 <HAL_RCC_OscConfig+0x51c>
 8001ff2:	4b62      	ldr	r3, [pc, #392]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001ff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ff6:	4b61      	ldr	r3, [pc, #388]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8001ff8:	2180      	movs	r1, #128	@ 0x80
 8001ffa:	00c9      	lsls	r1, r1, #3
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002000:	4b5e      	ldr	r3, [pc, #376]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002002:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002004:	4b5d      	ldr	r3, [pc, #372]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	0049      	lsls	r1, r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	651a      	str	r2, [r3, #80]	@ 0x50
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x534>
 8002010:	4b5a      	ldr	r3, [pc, #360]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002012:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002014:	4b59      	ldr	r3, [pc, #356]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002016:	495b      	ldr	r1, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x690>)
 8002018:	400a      	ands	r2, r1
 800201a:	651a      	str	r2, [r3, #80]	@ 0x50
 800201c:	4b57      	ldr	r3, [pc, #348]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 800201e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002020:	4b56      	ldr	r3, [pc, #344]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002022:	495a      	ldr	r1, [pc, #360]	@ (800218c <HAL_RCC_OscConfig+0x698>)
 8002024:	400a      	ands	r2, r1
 8002026:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fea6 	bl	8000d80 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002038:	e009      	b.n	800204e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fea1 	bl	8000d80 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a52      	ldr	r2, [pc, #328]	@ (8002190 <HAL_RCC_OscConfig+0x69c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e11b      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d0ef      	beq.n	800203a <HAL_RCC_OscConfig+0x546>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205c:	f7fe fe90 	bl	8000d80 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002064:	e009      	b.n	800207a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe fe8b 	bl	8000d80 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	4a47      	ldr	r2, [pc, #284]	@ (8002190 <HAL_RCC_OscConfig+0x69c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e105      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800207a:	4b40      	ldr	r3, [pc, #256]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 800207c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d1ef      	bne.n	8002066 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002086:	2323      	movs	r3, #35	@ 0x23
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002094:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002096:	493f      	ldr	r1, [pc, #252]	@ (8002194 <HAL_RCC_OscConfig+0x6a0>)
 8002098:	400a      	ands	r2, r1
 800209a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2220      	movs	r2, #32
 80020a2:	4013      	ands	r3, r2
 80020a4:	d049      	beq.n	800213a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d026      	beq.n	80020fc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020ae:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	4b32      	ldr	r3, [pc, #200]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020be:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020c6:	4b34      	ldr	r3, [pc, #208]	@ (8002198 <HAL_RCC_OscConfig+0x6a4>)
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4b33      	ldr	r3, [pc, #204]	@ (8002198 <HAL_RCC_OscConfig+0x6a4>)
 80020cc:	2180      	movs	r1, #128	@ 0x80
 80020ce:	0189      	lsls	r1, r1, #6
 80020d0:	430a      	orrs	r2, r1
 80020d2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fe54 	bl	8000d80 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020de:	f7fe fe4f 	bl	8000d80 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0ca      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020f0:	4b22      	ldr	r3, [pc, #136]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0f1      	beq.n	80020de <HAL_RCC_OscConfig+0x5ea>
 80020fa:	e01e      	b.n	800213a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_RCC_OscConfig+0x6a4>)
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <HAL_RCC_OscConfig+0x6a4>)
 800210e:	4923      	ldr	r1, [pc, #140]	@ (800219c <HAL_RCC_OscConfig+0x6a8>)
 8002110:	400a      	ands	r2, r1
 8002112:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fe34 	bl	8000d80 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211e:	f7fe fe2f 	bl	8000d80 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0aa      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2202      	movs	r2, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d1f1      	bne.n	800211e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	2b00      	cmp	r3, #0
 8002140:	d100      	bne.n	8002144 <HAL_RCC_OscConfig+0x650>
 8002142:	e09f      	b.n	8002284 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d100      	bne.n	800214c <HAL_RCC_OscConfig+0x658>
 800214a:	e078      	b.n	800223e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	2b02      	cmp	r3, #2
 8002152:	d159      	bne.n	8002208 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_RCC_OscConfig+0x688>)
 800215a:	4911      	ldr	r1, [pc, #68]	@ (80021a0 <HAL_RCC_OscConfig+0x6ac>)
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fe0e 	bl	8000d80 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fe09 	bl	8000d80 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d915      	bls.n	80021a4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e084      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
 800217c:	40021000 	.word	0x40021000
 8002180:	ffff1fff 	.word	0xffff1fff
 8002184:	fffffeff 	.word	0xfffffeff
 8002188:	40007000 	.word	0x40007000
 800218c:	fffffbff 	.word	0xfffffbff
 8002190:	00001388 	.word	0x00001388
 8002194:	efffffff 	.word	0xefffffff
 8002198:	40010000 	.word	0x40010000
 800219c:	ffffdfff 	.word	0xffffdfff
 80021a0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	049b      	lsls	r3, r3, #18
 80021ac:	4013      	ands	r3, r2
 80021ae:	d1dc      	bne.n	800216a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b0:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a37      	ldr	r2, [pc, #220]	@ (8002294 <HAL_RCC_OscConfig+0x7a0>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c8:	431a      	orrs	r2, r3
 80021ca:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	0449      	lsls	r1, r1, #17
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fdcf 	bl	8000d80 <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fdca 	bl	8000d80 <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021fa:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	049b      	lsls	r3, r3, #18
 8002202:	4013      	ands	r3, r2
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x6f4>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 800220e:	4922      	ldr	r1, [pc, #136]	@ (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002210:	400a      	ands	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe fdb4 	bl	8000d80 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe fdaf 	bl	8000d80 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e02a      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	049b      	lsls	r3, r3, #18
 8002238:	4013      	ands	r3, r2
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x72a>
 800223c:	e022      	b.n	8002284 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e01d      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_RCC_OscConfig+0x79c>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	025b      	lsls	r3, r3, #9
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	429a      	cmp	r2, r3
 800225e:	d10f      	bne.n	8002280 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	23f0      	movs	r3, #240	@ 0xf0
 8002264:	039b      	lsls	r3, r3, #14
 8002266:	401a      	ands	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b00a      	add	sp, #40	@ 0x28
 800228c:	bdb0      	pop	{r4, r5, r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	ff02ffff 	.word	0xff02ffff
 8002298:	feffffff 	.word	0xfeffffff

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e128      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b96      	ldr	r3, [pc, #600]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d91e      	bls.n	80022fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b93      	ldr	r3, [pc, #588]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4393      	bics	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	4b90      	ldr	r3, [pc, #576]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fd56 	bl	8000d80 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022da:	f7fe fd51 	bl	8000d80 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	4a8a      	ldr	r2, [pc, #552]	@ (8002510 <HAL_RCC_ClockConfig+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e109      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b87      	ldr	r3, [pc, #540]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002306:	4b83      	ldr	r3, [pc, #524]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	22f0      	movs	r2, #240	@ 0xf0
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b7f      	ldr	r3, [pc, #508]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_RCC_ClockConfig+0x8a>
 8002324:	e089      	b.n	800243a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800232e:	4b79      	ldr	r3, [pc, #484]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	4013      	ands	r3, r2
 8002338:	d120      	bne.n	800237c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0e1      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002346:	4b73      	ldr	r3, [pc, #460]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	049b      	lsls	r3, r3, #18
 800234e:	4013      	ands	r3, r2
 8002350:	d114      	bne.n	800237c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0d5      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d106      	bne.n	800236c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
 8002366:	d109      	bne.n	800237c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0ca      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800236c:	4b69      	ldr	r3, [pc, #420]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0c2      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237c:	4b65      	ldr	r3, [pc, #404]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2203      	movs	r2, #3
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b62      	ldr	r3, [pc, #392]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002390:	f7fe fcf6 	bl	8000d80 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d111      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe fced 	bl	8000d80 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <HAL_RCC_ClockConfig+0x274>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0a5      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b6:	4b57      	ldr	r3, [pc, #348]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	220c      	movs	r2, #12
 80023bc:	4013      	ands	r3, r2
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d1ef      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x106>
 80023c2:	e03a      	b.n	800243a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d111      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7fe fcd7 	bl	8000d80 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002510 <HAL_RCC_ClockConfig+0x274>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e08f      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	220c      	movs	r2, #12
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_ClockConfig+0x132>
 80023ee:	e024      	b.n	800243a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d11b      	bne.n	8002430 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fcc1 	bl	8000d80 <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a42      	ldr	r2, [pc, #264]	@ (8002510 <HAL_RCC_ClockConfig+0x274>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e079      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	220c      	movs	r2, #12
 8002414:	4013      	ands	r3, r2
 8002416:	2b04      	cmp	r3, #4
 8002418:	d1ef      	bne.n	80023fa <HAL_RCC_ClockConfig+0x15e>
 800241a:	e00e      	b.n	800243a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7fe fcb0 	bl	8000d80 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <HAL_RCC_ClockConfig+0x274>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e068      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002430:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	220c      	movs	r2, #12
 8002436:	4013      	ands	r3, r2
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	4013      	ands	r3, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d21e      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002448:	4b30      	ldr	r3, [pc, #192]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4393      	bics	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	4b2e      	ldr	r3, [pc, #184]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800245a:	f7fe fc91 	bl	8000d80 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	e009      	b.n	8002478 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe fc8c 	bl	8000d80 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4a28      	ldr	r2, [pc, #160]	@ (8002510 <HAL_RCC_ClockConfig+0x274>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e044      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_ClockConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d1ee      	bne.n	8002464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a20      	ldr	r2, [pc, #128]	@ (8002518 <HAL_RCC_ClockConfig+0x27c>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2208      	movs	r2, #8
 80024aa:	4013      	ands	r3, r2
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a1a      	ldr	r2, [pc, #104]	@ (800251c <HAL_RCC_ClockConfig+0x280>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	00da      	lsls	r2, r3, #3
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c4:	f000 f832 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024c8:	0001      	movs	r1, r0
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	220f      	movs	r2, #15
 80024d2:	4013      	ands	r3, r2
 80024d4:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <HAL_RCC_ClockConfig+0x284>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	000a      	movs	r2, r1
 80024da:	40da      	lsrs	r2, r3
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_RCC_ClockConfig+0x288>)
 80024de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_ClockConfig+0x28c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	250b      	movs	r5, #11
 80024e6:	197c      	adds	r4, r7, r5
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fe fc03 	bl	8000cf4 <HAL_InitTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80024f2:	197b      	adds	r3, r7, r5
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80024fa:	197b      	adds	r3, r7, r5
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	e000      	b.n	8002502 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bdb0      	pop	{r4, r5, r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	40022000 	.word	0x40022000
 8002510:	00001388 	.word	0x00001388
 8002514:	40021000 	.word	0x40021000
 8002518:	fffff8ff 	.word	0xfffff8ff
 800251c:	ffffc7ff 	.word	0xffffc7ff
 8002520:	08003914 	.word	0x08003914
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002532:	4b3c      	ldr	r3, [pc, #240]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	220c      	movs	r2, #12
 800253c:	4013      	ands	r3, r2
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d013      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x3e>
 8002542:	d85c      	bhi.n	80025fe <HAL_RCC_GetSysClockFreq+0xd2>
 8002544:	2b04      	cmp	r3, #4
 8002546:	d002      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x22>
 8002548:	2b08      	cmp	r3, #8
 800254a:	d00b      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x38>
 800254c:	e057      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800254e:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2210      	movs	r2, #16
 8002554:	4013      	ands	r3, r2
 8002556:	d002      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002558:	4b33      	ldr	r3, [pc, #204]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xfc>)
 800255a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800255c:	e05d      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800255e:	4b33      	ldr	r3, [pc, #204]	@ (800262c <HAL_RCC_GetSysClockFreq+0x100>)
 8002560:	613b      	str	r3, [r7, #16]
      break;
 8002562:	e05a      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x104>)
 8002566:	613b      	str	r3, [r7, #16]
      break;
 8002568:	e057      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	220f      	movs	r2, #15
 8002570:	4013      	ands	r3, r2
 8002572:	4a30      	ldr	r2, [pc, #192]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0d9b      	lsrs	r3, r3, #22
 800257c:	2203      	movs	r2, #3
 800257e:	4013      	ands	r3, r2
 8002580:	3301      	adds	r3, #1
 8002582:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	4013      	ands	r3, r2
 800258e:	d00f      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	000a      	movs	r2, r1
 8002594:	0152      	lsls	r2, r2, #5
 8002596:	1a52      	subs	r2, r2, r1
 8002598:	0193      	lsls	r3, r2, #6
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	185b      	adds	r3, r3, r1
 80025a0:	025b      	lsls	r3, r3, #9
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7fd fdaf 	bl	8000108 <__udivsi3>
 80025aa:	0003      	movs	r3, r0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e023      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2210      	movs	r2, #16
 80025b6:	4013      	ands	r3, r2
 80025b8:	d00f      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	000a      	movs	r2, r1
 80025be:	0152      	lsls	r2, r2, #5
 80025c0:	1a52      	subs	r2, r2, r1
 80025c2:	0193      	lsls	r3, r2, #6
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	185b      	adds	r3, r3, r1
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7fd fd9a 	bl	8000108 <__udivsi3>
 80025d4:	0003      	movs	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e00e      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	000a      	movs	r2, r1
 80025de:	0152      	lsls	r2, r2, #5
 80025e0:	1a52      	subs	r2, r2, r1
 80025e2:	0193      	lsls	r3, r2, #6
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	185b      	adds	r3, r3, r1
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7fd fd8a 	bl	8000108 <__udivsi3>
 80025f4:	0003      	movs	r3, r0
 80025f6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
      break;
 80025fc:	e00d      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0b5b      	lsrs	r3, r3, #13
 8002604:	2207      	movs	r2, #7
 8002606:	4013      	ands	r3, r2
 8002608:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	2280      	movs	r2, #128	@ 0x80
 8002610:	0212      	lsls	r2, r2, #8
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
      break;
 8002618:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800261a:	693b      	ldr	r3, [r7, #16]
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b006      	add	sp, #24
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	003d0900 	.word	0x003d0900
 800262c:	00f42400 	.word	0x00f42400
 8002630:	007a1200 	.word	0x007a1200
 8002634:	0800392c 	.word	0x0800392c

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b02      	ldr	r3, [pc, #8]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002650:	f7ff fff2 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002654:	0001      	movs	r1, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	2207      	movs	r2, #7
 800265e:	4013      	ands	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	40d9      	lsrs	r1, r3
 8002666:	000b      	movs	r3, r1
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	40021000 	.word	0x40021000
 8002674:	08003924 	.word	0x08003924

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800267c:	f7ff ffdc 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002680:	0001      	movs	r1, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	0adb      	lsrs	r3, r3, #11
 8002688:	2207      	movs	r2, #7
 800268a:	4013      	ands	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	40d9      	lsrs	r1, r3
 8002692:	000b      	movs	r3, r1
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	08003924 	.word	0x08003924

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80026ac:	2317      	movs	r3, #23
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2220      	movs	r2, #32
 80026ba:	4013      	ands	r3, r2
 80026bc:	d106      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d100      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80026ca:	e104      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026cc:	4bb9      	ldr	r3, [pc, #740]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	4013      	ands	r3, r2
 80026d6:	d10a      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4bb6      	ldr	r3, [pc, #728]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026dc:	4bb5      	ldr	r3, [pc, #724]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026de:	2180      	movs	r1, #128	@ 0x80
 80026e0:	0549      	lsls	r1, r1, #21
 80026e2:	430a      	orrs	r2, r1
 80026e4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80026e6:	2317      	movs	r3, #23
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4bb2      	ldr	r3, [pc, #712]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	d11a      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4baf      	ldr	r3, [pc, #700]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4bae      	ldr	r3, [pc, #696]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	0049      	lsls	r1, r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002708:	f7fe fb3a 	bl	8000d80 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe fb35 	bl	8000d80 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	@ 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e143      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4ba4      	ldr	r3, [pc, #656]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002730:	4ba0      	ldr	r3, [pc, #640]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	23c0      	movs	r3, #192	@ 0xc0
 8002736:	039b      	lsls	r3, r3, #14
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	23c0      	movs	r3, #192	@ 0xc0
 8002742:	039b      	lsls	r3, r3, #14
 8002744:	4013      	ands	r3, r2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	23c0      	movs	r3, #192	@ 0xc0
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4013      	ands	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d013      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	23c0      	movs	r3, #192	@ 0xc0
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	401a      	ands	r2, r3
 8002766:	23c0      	movs	r3, #192	@ 0xc0
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	429a      	cmp	r2, r3
 800276c:	d10a      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800276e:	4b91      	ldr	r3, [pc, #580]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	401a      	ands	r2, r3
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	429a      	cmp	r2, r3
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e113      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002784:	4b8b      	ldr	r3, [pc, #556]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002788:	23c0      	movs	r3, #192	@ 0xc0
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d049      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	23c0      	movs	r3, #192	@ 0xc0
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	4013      	ands	r3, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d004      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2220      	movs	r2, #32
 80027ac:	4013      	ands	r3, r2
 80027ae:	d10d      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	23c0      	movs	r3, #192	@ 0xc0
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	4013      	ands	r3, r2
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d034      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d02e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027cc:	4b79      	ldr	r3, [pc, #484]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d0:	4a7a      	ldr	r2, [pc, #488]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d6:	4b77      	ldr	r3, [pc, #476]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027da:	4b76      	ldr	r3, [pc, #472]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027dc:	2180      	movs	r1, #128	@ 0x80
 80027de:	0309      	lsls	r1, r1, #12
 80027e0:	430a      	orrs	r2, r1
 80027e2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e4:	4b73      	ldr	r3, [pc, #460]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027e8:	4b72      	ldr	r3, [pc, #456]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ea:	4975      	ldr	r1, [pc, #468]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027f0:	4b70      	ldr	r3, [pc, #448]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d014      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fabe 	bl	8000d80 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002808:	e009      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fab9 	bl	8000d80 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4a6b      	ldr	r2, [pc, #428]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0c6      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	4b65      	ldr	r3, [pc, #404]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d0ef      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4013      	ands	r3, r2
 8002834:	d01f      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	23c0      	movs	r3, #192	@ 0xc0
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	401a      	ands	r2, r3
 8002840:	23c0      	movs	r3, #192	@ 0xc0
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	429a      	cmp	r2, r3
 8002846:	d10c      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002848:	4b5a      	ldr	r3, [pc, #360]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5e      	ldr	r2, [pc, #376]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	23c0      	movs	r3, #192	@ 0xc0
 8002858:	039b      	lsls	r3, r3, #14
 800285a:	401a      	ands	r2, r3
 800285c:	4b55      	ldr	r3, [pc, #340]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	4b54      	ldr	r3, [pc, #336]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002864:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	23c0      	movs	r3, #192	@ 0xc0
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	401a      	ands	r2, r3
 8002870:	4b50      	ldr	r3, [pc, #320]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002872:	430a      	orrs	r2, r1
 8002874:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2220      	movs	r2, #32
 800287c:	4013      	ands	r3, r2
 800287e:	d01f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	23c0      	movs	r3, #192	@ 0xc0
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	401a      	ands	r2, r3
 800288a:	23c0      	movs	r3, #192	@ 0xc0
 800288c:	029b      	lsls	r3, r3, #10
 800288e:	429a      	cmp	r2, r3
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002892:	4b48      	ldr	r3, [pc, #288]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4c      	ldr	r2, [pc, #304]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	23c0      	movs	r3, #192	@ 0xc0
 80028a2:	039b      	lsls	r3, r3, #14
 80028a4:	401a      	ands	r2, r3
 80028a6:	4b43      	ldr	r3, [pc, #268]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ae:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	23c0      	movs	r3, #192	@ 0xc0
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	401a      	ands	r2, r3
 80028ba:	4b3e      	ldr	r3, [pc, #248]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c0:	2317      	movs	r3, #23
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b3a      	ldr	r3, [pc, #232]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028ce:	4b39      	ldr	r3, [pc, #228]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d0:	493e      	ldr	r1, [pc, #248]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80028d2:	400a      	ands	r2, r1
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e4:	2203      	movs	r2, #3
 80028e6:	4393      	bics	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b31      	ldr	r3, [pc, #196]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2202      	movs	r2, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028fe:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	220c      	movs	r2, #12
 8002904:	4393      	bics	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800290e:	430a      	orrs	r2, r1
 8002910:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800291c:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800291e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002920:	4a2b      	ldr	r2, [pc, #172]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800292c:	430a      	orrs	r2, r1
 800292e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2208      	movs	r2, #8
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	4a25      	ldr	r2, [pc, #148]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800294a:	430a      	orrs	r2, r1
 800294c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4013      	ands	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800296a:	430a      	orrs	r2, r1
 800296c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002986:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002988:	430a      	orrs	r2, r1
 800298a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2280      	movs	r2, #128	@ 0x80
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	4b03      	ldr	r3, [pc, #12]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b006      	add	sp, #24
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	fffcffff 	.word	0xfffcffff
 80029c0:	fff7ffff 	.word	0xfff7ffff
 80029c4:	00001388 	.word	0x00001388
 80029c8:	ffcfffff 	.word	0xffcfffff
 80029cc:	efffffff 	.word	0xefffffff
 80029d0:	fffff3ff 	.word	0xfffff3ff
 80029d4:	ffffcfff 	.word	0xffffcfff
 80029d8:	fbffffff 	.word	0xfbffffff
 80029dc:	fff3ffff 	.word	0xfff3ffff

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e032      	b.n	8002a58 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2239      	movs	r2, #57	@ 0x39
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2238      	movs	r2, #56	@ 0x38
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe f895 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2239      	movs	r2, #57	@ 0x39
 8002a12:	2102      	movs	r1, #2
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f000 f95b 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223e      	movs	r2, #62	@ 0x3e
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223a      	movs	r2, #58	@ 0x3a
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	223b      	movs	r2, #59	@ 0x3b
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223c      	movs	r2, #60	@ 0x3c
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	223d      	movs	r2, #61	@ 0x3d
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2239      	movs	r2, #57	@ 0x39
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2239      	movs	r2, #57	@ 0x39
 8002a6c:	5c9b      	ldrb	r3, [r3, r2]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d001      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e03b      	b.n	8002af0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2239      	movs	r2, #57	@ 0x39
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d00e      	beq.n	8002aba <HAL_TIM_Base_Start_IT+0x5a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	@ (8002af8 <HAL_TIM_Base_Start_IT+0x98>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_TIM_Base_Start_IT+0x5a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a14      	ldr	r2, [pc, #80]	@ (8002afc <HAL_TIM_Base_Start_IT+0x9c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_TIM_Base_Start_IT+0x5a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d111      	bne.n	8002ade <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d010      	beq.n	8002aee <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	e007      	b.n	8002aee <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b004      	add	sp, #16
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40010800 	.word	0x40010800
 8002b00:	40011400 	.word	0x40011400

08002b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d021      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d01d      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2203      	movs	r2, #3
 8002b32:	4252      	negs	r2, r2
 8002b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2203      	movs	r2, #3
 8002b44:	4013      	ands	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f8ae 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8002b50:	e007      	b.n	8002b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 f8a1 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f8ad 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	d01e      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	4252      	negs	r2, r2
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	23c0      	movs	r3, #192	@ 0xc0
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f887 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8002b9e:	e007      	b.n	8002bb0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 f87a 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f886 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d021      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2209      	movs	r2, #9
 8002bcc:	4252      	negs	r2, r2
 8002bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	4013      	ands	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 f861 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8002bea:	e007      	b.n	8002bfc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 f854 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 f860 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2210      	movs	r2, #16
 8002c06:	4013      	ands	r3, r2
 8002c08:	d022      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d01e      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2211      	movs	r2, #17
 8002c18:	4252      	negs	r2, r2
 8002c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2208      	movs	r2, #8
 8002c20:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	23c0      	movs	r3, #192	@ 0xc0
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f83a 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8002c38:	e007      	b.n	8002c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f82d 	bl	8002c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f839 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d00c      	beq.n	8002c72 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d008      	beq.n	8002c72 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2202      	movs	r2, #2
 8002c66:	4252      	negs	r2, r2
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fd fd6d 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2240      	movs	r2, #64	@ 0x40
 8002c76:	4013      	ands	r3, r2
 8002c78:	d00c      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2240      	movs	r2, #64	@ 0x40
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d008      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2241      	movs	r2, #65	@ 0x41
 8002c88:	4252      	negs	r2, r2
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f81c 	bl	8002ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x32>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	@ (8002d94 <TIM_Base_SetConfig+0xb8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x32>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <TIM_Base_SetConfig+0xbc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x32>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a24      	ldr	r2, [pc, #144]	@ (8002d9c <TIM_Base_SetConfig+0xc0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2270      	movs	r2, #112	@ 0x70
 8002d12:	4393      	bics	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x66>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a19      	ldr	r2, [pc, #100]	@ (8002d94 <TIM_Base_SetConfig+0xb8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x66>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <TIM_Base_SetConfig+0xbc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x66>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a17      	ldr	r2, [pc, #92]	@ (8002d9c <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a16      	ldr	r2, [pc, #88]	@ (8002da0 <TIM_Base_SetConfig+0xc4>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	4393      	bics	r3, r2
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	fffffcff 	.word	0xfffffcff

08002da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2238      	movs	r2, #56	@ 0x38
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e047      	b.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2238      	movs	r2, #56	@ 0x38
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2239      	movs	r2, #57	@ 0x39
 8002dc8:	2102      	movs	r1, #2
 8002dca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2270      	movs	r2, #112	@ 0x70
 8002de0:	4393      	bics	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	05db      	lsls	r3, r3, #23
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d00e      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10c      	bne.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	4393      	bics	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2239      	movs	r2, #57	@ 0x39
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2238      	movs	r2, #56	@ 0x38
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40010800 	.word	0x40010800
 8002e5c:	40011400 	.word	0x40011400

08002e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e044      	b.n	8002efc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2278      	movs	r2, #120	@ 0x78
 8002e7e:	2100      	movs	r1, #0
 8002e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7fd fea7 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2224      	movs	r2, #36	@ 0x24
 8002e8e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 faca 	bl	8003444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 f828 	bl	8002f08 <UART_SetConfig>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e01c      	b.n	8002efc <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <HAL_UART_Init+0xa4>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	212a      	movs	r1, #42	@ 0x2a
 8002ede:	438a      	bics	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fb59 	bl	80035ac <UART_CheckIdleState>
 8002efa:	0003      	movs	r3, r0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	ffffb7ff 	.word	0xffffb7ff

08002f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b08e      	sub	sp, #56	@ 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f10:	231a      	movs	r3, #26
 8002f12:	2218      	movs	r2, #24
 8002f14:	189b      	adds	r3, r3, r2
 8002f16:	19db      	adds	r3, r3, r7
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4ac3      	ldr	r2, [pc, #780]	@ (8003248 <UART_SetConfig+0x340>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4abe      	ldr	r2, [pc, #760]	@ (800324c <UART_SetConfig+0x344>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4ab8      	ldr	r2, [pc, #736]	@ (8003250 <UART_SetConfig+0x348>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4ab4      	ldr	r2, [pc, #720]	@ (8003254 <UART_SetConfig+0x34c>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4ab0      	ldr	r2, [pc, #704]	@ (8003258 <UART_SetConfig+0x350>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d131      	bne.n	8003000 <UART_SetConfig+0xf8>
 8002f9c:	4baf      	ldr	r3, [pc, #700]	@ (800325c <UART_SetConfig+0x354>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d01d      	beq.n	8002fe4 <UART_SetConfig+0xdc>
 8002fa8:	d823      	bhi.n	8002ff2 <UART_SetConfig+0xea>
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d00c      	beq.n	8002fc8 <UART_SetConfig+0xc0>
 8002fae:	d820      	bhi.n	8002ff2 <UART_SetConfig+0xea>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <UART_SetConfig+0xb2>
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d00e      	beq.n	8002fd6 <UART_SetConfig+0xce>
 8002fb8:	e01b      	b.n	8002ff2 <UART_SetConfig+0xea>
 8002fba:	231b      	movs	r3, #27
 8002fbc:	2218      	movs	r2, #24
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	19db      	adds	r3, r3, r7
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e0b4      	b.n	8003132 <UART_SetConfig+0x22a>
 8002fc8:	231b      	movs	r3, #27
 8002fca:	2218      	movs	r2, #24
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	19db      	adds	r3, r3, r7
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e0ad      	b.n	8003132 <UART_SetConfig+0x22a>
 8002fd6:	231b      	movs	r3, #27
 8002fd8:	2218      	movs	r2, #24
 8002fda:	189b      	adds	r3, r3, r2
 8002fdc:	19db      	adds	r3, r3, r7
 8002fde:	2204      	movs	r2, #4
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e0a6      	b.n	8003132 <UART_SetConfig+0x22a>
 8002fe4:	231b      	movs	r3, #27
 8002fe6:	2218      	movs	r2, #24
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	19db      	adds	r3, r3, r7
 8002fec:	2208      	movs	r2, #8
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e09f      	b.n	8003132 <UART_SetConfig+0x22a>
 8002ff2:	231b      	movs	r3, #27
 8002ff4:	2218      	movs	r2, #24
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e098      	b.n	8003132 <UART_SetConfig+0x22a>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a96      	ldr	r2, [pc, #600]	@ (8003260 <UART_SetConfig+0x358>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d131      	bne.n	800306e <UART_SetConfig+0x166>
 800300a:	4b94      	ldr	r3, [pc, #592]	@ (800325c <UART_SetConfig+0x354>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	220c      	movs	r2, #12
 8003010:	4013      	ands	r3, r2
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d01d      	beq.n	8003052 <UART_SetConfig+0x14a>
 8003016:	d823      	bhi.n	8003060 <UART_SetConfig+0x158>
 8003018:	2b08      	cmp	r3, #8
 800301a:	d00c      	beq.n	8003036 <UART_SetConfig+0x12e>
 800301c:	d820      	bhi.n	8003060 <UART_SetConfig+0x158>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <UART_SetConfig+0x120>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00e      	beq.n	8003044 <UART_SetConfig+0x13c>
 8003026:	e01b      	b.n	8003060 <UART_SetConfig+0x158>
 8003028:	231b      	movs	r3, #27
 800302a:	2218      	movs	r2, #24
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e07d      	b.n	8003132 <UART_SetConfig+0x22a>
 8003036:	231b      	movs	r3, #27
 8003038:	2218      	movs	r2, #24
 800303a:	189b      	adds	r3, r3, r2
 800303c:	19db      	adds	r3, r3, r7
 800303e:	2202      	movs	r2, #2
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e076      	b.n	8003132 <UART_SetConfig+0x22a>
 8003044:	231b      	movs	r3, #27
 8003046:	2218      	movs	r2, #24
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	2204      	movs	r2, #4
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e06f      	b.n	8003132 <UART_SetConfig+0x22a>
 8003052:	231b      	movs	r3, #27
 8003054:	2218      	movs	r2, #24
 8003056:	189b      	adds	r3, r3, r2
 8003058:	19db      	adds	r3, r3, r7
 800305a:	2208      	movs	r2, #8
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e068      	b.n	8003132 <UART_SetConfig+0x22a>
 8003060:	231b      	movs	r3, #27
 8003062:	2218      	movs	r2, #24
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	2210      	movs	r2, #16
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e061      	b.n	8003132 <UART_SetConfig+0x22a>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7c      	ldr	r2, [pc, #496]	@ (8003264 <UART_SetConfig+0x35c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d106      	bne.n	8003086 <UART_SetConfig+0x17e>
 8003078:	231b      	movs	r3, #27
 800307a:	2218      	movs	r2, #24
 800307c:	189b      	adds	r3, r3, r2
 800307e:	19db      	adds	r3, r3, r7
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e055      	b.n	8003132 <UART_SetConfig+0x22a>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a77      	ldr	r2, [pc, #476]	@ (8003268 <UART_SetConfig+0x360>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d106      	bne.n	800309e <UART_SetConfig+0x196>
 8003090:	231b      	movs	r3, #27
 8003092:	2218      	movs	r2, #24
 8003094:	189b      	adds	r3, r3, r2
 8003096:	19db      	adds	r3, r3, r7
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e049      	b.n	8003132 <UART_SetConfig+0x22a>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6b      	ldr	r2, [pc, #428]	@ (8003250 <UART_SetConfig+0x348>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d13e      	bne.n	8003126 <UART_SetConfig+0x21e>
 80030a8:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <UART_SetConfig+0x354>)
 80030aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030ac:	23c0      	movs	r3, #192	@ 0xc0
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4013      	ands	r3, r2
 80030b2:	22c0      	movs	r2, #192	@ 0xc0
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <UART_SetConfig+0x202>
 80030ba:	22c0      	movs	r2, #192	@ 0xc0
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	4293      	cmp	r3, r2
 80030c0:	d82a      	bhi.n	8003118 <UART_SetConfig+0x210>
 80030c2:	2280      	movs	r2, #128	@ 0x80
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d011      	beq.n	80030ee <UART_SetConfig+0x1e6>
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d822      	bhi.n	8003118 <UART_SetConfig+0x210>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <UART_SetConfig+0x1d8>
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	00d2      	lsls	r2, r2, #3
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <UART_SetConfig+0x1f4>
 80030de:	e01b      	b.n	8003118 <UART_SetConfig+0x210>
 80030e0:	231b      	movs	r3, #27
 80030e2:	2218      	movs	r2, #24
 80030e4:	189b      	adds	r3, r3, r2
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e021      	b.n	8003132 <UART_SetConfig+0x22a>
 80030ee:	231b      	movs	r3, #27
 80030f0:	2218      	movs	r2, #24
 80030f2:	189b      	adds	r3, r3, r2
 80030f4:	19db      	adds	r3, r3, r7
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e01a      	b.n	8003132 <UART_SetConfig+0x22a>
 80030fc:	231b      	movs	r3, #27
 80030fe:	2218      	movs	r2, #24
 8003100:	189b      	adds	r3, r3, r2
 8003102:	19db      	adds	r3, r3, r7
 8003104:	2204      	movs	r2, #4
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e013      	b.n	8003132 <UART_SetConfig+0x22a>
 800310a:	231b      	movs	r3, #27
 800310c:	2218      	movs	r2, #24
 800310e:	189b      	adds	r3, r3, r2
 8003110:	19db      	adds	r3, r3, r7
 8003112:	2208      	movs	r2, #8
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e00c      	b.n	8003132 <UART_SetConfig+0x22a>
 8003118:	231b      	movs	r3, #27
 800311a:	2218      	movs	r2, #24
 800311c:	189b      	adds	r3, r3, r2
 800311e:	19db      	adds	r3, r3, r7
 8003120:	2210      	movs	r2, #16
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e005      	b.n	8003132 <UART_SetConfig+0x22a>
 8003126:	231b      	movs	r3, #27
 8003128:	2218      	movs	r2, #24
 800312a:	189b      	adds	r3, r3, r2
 800312c:	19db      	adds	r3, r3, r7
 800312e:	2210      	movs	r2, #16
 8003130:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a46      	ldr	r2, [pc, #280]	@ (8003250 <UART_SetConfig+0x348>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d000      	beq.n	800313e <UART_SetConfig+0x236>
 800313c:	e09a      	b.n	8003274 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800313e:	231b      	movs	r3, #27
 8003140:	2218      	movs	r2, #24
 8003142:	189b      	adds	r3, r3, r2
 8003144:	19db      	adds	r3, r3, r7
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d01d      	beq.n	8003188 <UART_SetConfig+0x280>
 800314c:	dc20      	bgt.n	8003190 <UART_SetConfig+0x288>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d015      	beq.n	800317e <UART_SetConfig+0x276>
 8003152:	dc1d      	bgt.n	8003190 <UART_SetConfig+0x288>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <UART_SetConfig+0x256>
 8003158:	2b02      	cmp	r3, #2
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0x260>
 800315c:	e018      	b.n	8003190 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7ff fa75 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003162:	0003      	movs	r3, r0
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003166:	e01c      	b.n	80031a2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003168:	4b3c      	ldr	r3, [pc, #240]	@ (800325c <UART_SetConfig+0x354>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	4013      	ands	r3, r2
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003172:	4b3e      	ldr	r3, [pc, #248]	@ (800326c <UART_SetConfig+0x364>)
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003176:	e014      	b.n	80031a2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003178:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <UART_SetConfig+0x368>)
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800317c:	e011      	b.n	80031a2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7ff f9d5 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003182:	0003      	movs	r3, r0
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003186:	e00c      	b.n	80031a2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800318e:	e008      	b.n	80031a2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003194:	231a      	movs	r3, #26
 8003196:	2218      	movs	r2, #24
 8003198:	189b      	adds	r3, r3, r2
 800319a:	19db      	adds	r3, r3, r7
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
        break;
 80031a0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d100      	bne.n	80031aa <UART_SetConfig+0x2a2>
 80031a8:	e133      	b.n	8003412 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	0013      	movs	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d305      	bcc.n	80031c6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d906      	bls.n	80031d4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80031c6:	231a      	movs	r3, #26
 80031c8:	2218      	movs	r2, #24
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e11e      	b.n	8003412 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	6939      	ldr	r1, [r7, #16]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	000b      	movs	r3, r1
 80031e2:	0e1b      	lsrs	r3, r3, #24
 80031e4:	0010      	movs	r0, r2
 80031e6:	0205      	lsls	r5, r0, #8
 80031e8:	431d      	orrs	r5, r3
 80031ea:	000b      	movs	r3, r1
 80031ec:	021c      	lsls	r4, r3, #8
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	1900      	adds	r0, r0, r4
 8003200:	4169      	adcs	r1, r5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f7fd f806 	bl	8000220 <__aeabi_uldivmod>
 8003214:	0002      	movs	r2, r0
 8003216:	000b      	movs	r3, r1
 8003218:	0013      	movs	r3, r2
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800321c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800321e:	23c0      	movs	r3, #192	@ 0xc0
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	429a      	cmp	r2, r3
 8003224:	d309      	bcc.n	800323a <UART_SetConfig+0x332>
 8003226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	035b      	lsls	r3, r3, #13
 800322c:	429a      	cmp	r2, r3
 800322e:	d204      	bcs.n	800323a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	e0eb      	b.n	8003412 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800323a:	231a      	movs	r3, #26
 800323c:	2218      	movs	r2, #24
 800323e:	189b      	adds	r3, r3, r2
 8003240:	19db      	adds	r3, r3, r7
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e0e4      	b.n	8003412 <UART_SetConfig+0x50a>
 8003248:	efff69f3 	.word	0xefff69f3
 800324c:	ffffcfff 	.word	0xffffcfff
 8003250:	40004800 	.word	0x40004800
 8003254:	fffff4ff 	.word	0xfffff4ff
 8003258:	40013800 	.word	0x40013800
 800325c:	40021000 	.word	0x40021000
 8003260:	40004400 	.word	0x40004400
 8003264:	40004c00 	.word	0x40004c00
 8003268:	40005000 	.word	0x40005000
 800326c:	003d0900 	.word	0x003d0900
 8003270:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	429a      	cmp	r2, r3
 800327e:	d000      	beq.n	8003282 <UART_SetConfig+0x37a>
 8003280:	e070      	b.n	8003364 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003282:	231b      	movs	r3, #27
 8003284:	2218      	movs	r2, #24
 8003286:	189b      	adds	r3, r3, r2
 8003288:	19db      	adds	r3, r3, r7
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d822      	bhi.n	80032d6 <UART_SetConfig+0x3ce>
 8003290:	009a      	lsls	r2, r3, #2
 8003292:	4b67      	ldr	r3, [pc, #412]	@ (8003430 <UART_SetConfig+0x528>)
 8003294:	18d3      	adds	r3, r2, r3
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800329a:	f7ff f9d7 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 800329e:	0003      	movs	r3, r0
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032a2:	e021      	b.n	80032e8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff f9e8 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 80032a8:	0003      	movs	r3, r0
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032ac:	e01c      	b.n	80032e8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ae:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <UART_SetConfig+0x52c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2210      	movs	r2, #16
 80032b4:	4013      	ands	r3, r2
 80032b6:	d002      	beq.n	80032be <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003438 <UART_SetConfig+0x530>)
 80032ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032bc:	e014      	b.n	80032e8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80032be:	4b5f      	ldr	r3, [pc, #380]	@ (800343c <UART_SetConfig+0x534>)
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032c2:	e011      	b.n	80032e8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c4:	f7ff f932 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80032c8:	0003      	movs	r3, r0
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032cc:	e00c      	b.n	80032e8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032d4:	e008      	b.n	80032e8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80032da:	231a      	movs	r3, #26
 80032dc:	2218      	movs	r2, #24
 80032de:	189b      	adds	r3, r3, r2
 80032e0:	19db      	adds	r3, r3, r7
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
        break;
 80032e6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d100      	bne.n	80032f0 <UART_SetConfig+0x3e8>
 80032ee:	e090      	b.n	8003412 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	005a      	lsls	r2, r3, #1
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	18d2      	adds	r2, r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0019      	movs	r1, r3
 8003302:	0010      	movs	r0, r2
 8003304:	f7fc ff00 	bl	8000108 <__udivsi3>
 8003308:	0003      	movs	r3, r0
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	2b0f      	cmp	r3, #15
 8003310:	d921      	bls.n	8003356 <UART_SetConfig+0x44e>
 8003312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	429a      	cmp	r2, r3
 800331a:	d21c      	bcs.n	8003356 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	b29a      	uxth	r2, r3
 8003320:	200e      	movs	r0, #14
 8003322:	2418      	movs	r4, #24
 8003324:	1903      	adds	r3, r0, r4
 8003326:	19db      	adds	r3, r3, r7
 8003328:	210f      	movs	r1, #15
 800332a:	438a      	bics	r2, r1
 800332c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	2207      	movs	r2, #7
 8003336:	4013      	ands	r3, r2
 8003338:	b299      	uxth	r1, r3
 800333a:	1903      	adds	r3, r0, r4
 800333c:	19db      	adds	r3, r3, r7
 800333e:	1902      	adds	r2, r0, r4
 8003340:	19d2      	adds	r2, r2, r7
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1902      	adds	r2, r0, r4
 800334e:	19d2      	adds	r2, r2, r7
 8003350:	8812      	ldrh	r2, [r2, #0]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	e05d      	b.n	8003412 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003356:	231a      	movs	r3, #26
 8003358:	2218      	movs	r2, #24
 800335a:	189b      	adds	r3, r3, r2
 800335c:	19db      	adds	r3, r3, r7
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e056      	b.n	8003412 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003364:	231b      	movs	r3, #27
 8003366:	2218      	movs	r2, #24
 8003368:	189b      	adds	r3, r3, r2
 800336a:	19db      	adds	r3, r3, r7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b08      	cmp	r3, #8
 8003370:	d822      	bhi.n	80033b8 <UART_SetConfig+0x4b0>
 8003372:	009a      	lsls	r2, r3, #2
 8003374:	4b32      	ldr	r3, [pc, #200]	@ (8003440 <UART_SetConfig+0x538>)
 8003376:	18d3      	adds	r3, r2, r3
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800337c:	f7ff f966 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003380:	0003      	movs	r3, r0
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003384:	e021      	b.n	80033ca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003386:	f7ff f977 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 800338a:	0003      	movs	r3, r0
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800338e:	e01c      	b.n	80033ca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003390:	4b28      	ldr	r3, [pc, #160]	@ (8003434 <UART_SetConfig+0x52c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2210      	movs	r2, #16
 8003396:	4013      	ands	r3, r2
 8003398:	d002      	beq.n	80033a0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800339a:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <UART_SetConfig+0x530>)
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800339e:	e014      	b.n	80033ca <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b26      	ldr	r3, [pc, #152]	@ (800343c <UART_SetConfig+0x534>)
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033a4:	e011      	b.n	80033ca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7ff f8c1 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80033aa:	0003      	movs	r3, r0
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033ae:	e00c      	b.n	80033ca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033b6:	e008      	b.n	80033ca <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80033bc:	231a      	movs	r3, #26
 80033be:	2218      	movs	r2, #24
 80033c0:	189b      	adds	r3, r3, r2
 80033c2:	19db      	adds	r3, r3, r7
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
        break;
 80033c8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	085a      	lsrs	r2, r3, #1
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	18d2      	adds	r2, r2, r3
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	0019      	movs	r1, r3
 80033e0:	0010      	movs	r0, r2
 80033e2:	f7fc fe91 	bl	8000108 <__udivsi3>
 80033e6:	0003      	movs	r3, r0
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d90a      	bls.n	8003406 <UART_SetConfig+0x4fe>
 80033f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	025b      	lsls	r3, r3, #9
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d205      	bcs.n	8003406 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e005      	b.n	8003412 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003406:	231a      	movs	r3, #26
 8003408:	2218      	movs	r2, #24
 800340a:	189b      	adds	r3, r3, r2
 800340c:	19db      	adds	r3, r3, r7
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2200      	movs	r2, #0
 8003416:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2200      	movs	r2, #0
 800341c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800341e:	231a      	movs	r3, #26
 8003420:	2218      	movs	r2, #24
 8003422:	189b      	adds	r3, r3, r2
 8003424:	19db      	adds	r3, r3, r7
 8003426:	781b      	ldrb	r3, [r3, #0]
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b00e      	add	sp, #56	@ 0x38
 800342e:	bdb0      	pop	{r4, r5, r7, pc}
 8003430:	08003938 	.word	0x08003938
 8003434:	40021000 	.word	0x40021000
 8003438:	003d0900 	.word	0x003d0900
 800343c:	00f42400 	.word	0x00f42400
 8003440:	0800395c 	.word	0x0800395c

08003444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	2208      	movs	r2, #8
 8003452:	4013      	ands	r3, r2
 8003454:	d00b      	beq.n	800346e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a4a      	ldr	r2, [pc, #296]	@ (8003588 <UART_AdvFeatureConfig+0x144>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2201      	movs	r2, #1
 8003474:	4013      	ands	r3, r2
 8003476:	d00b      	beq.n	8003490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a43      	ldr	r2, [pc, #268]	@ (800358c <UART_AdvFeatureConfig+0x148>)
 8003480:	4013      	ands	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	2202      	movs	r2, #2
 8003496:	4013      	ands	r3, r2
 8003498:	d00b      	beq.n	80034b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <UART_AdvFeatureConfig+0x14c>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <UART_AdvFeatureConfig+0x150>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	2210      	movs	r2, #16
 80034da:	4013      	ands	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <UART_AdvFeatureConfig+0x154>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	2220      	movs	r2, #32
 80034fc:	4013      	ands	r3, r2
 80034fe:	d00b      	beq.n	8003518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a25      	ldr	r2, [pc, #148]	@ (800359c <UART_AdvFeatureConfig+0x158>)
 8003508:	4013      	ands	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	2240      	movs	r2, #64	@ 0x40
 800351e:	4013      	ands	r3, r2
 8003520:	d01d      	beq.n	800355e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <UART_AdvFeatureConfig+0x15c>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	035b      	lsls	r3, r3, #13
 8003542:	429a      	cmp	r2, r3
 8003544:	d10b      	bne.n	800355e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a15      	ldr	r2, [pc, #84]	@ (80035a4 <UART_AdvFeatureConfig+0x160>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	2280      	movs	r2, #128	@ 0x80
 8003564:	4013      	ands	r3, r2
 8003566:	d00b      	beq.n	8003580 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a0e      	ldr	r2, [pc, #56]	@ (80035a8 <UART_AdvFeatureConfig+0x164>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }
}
 8003580:	46c0      	nop			@ (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}
 8003588:	ffff7fff 	.word	0xffff7fff
 800358c:	fffdffff 	.word	0xfffdffff
 8003590:	fffeffff 	.word	0xfffeffff
 8003594:	fffbffff 	.word	0xfffbffff
 8003598:	ffffefff 	.word	0xffffefff
 800359c:	ffffdfff 	.word	0xffffdfff
 80035a0:	ffefffff 	.word	0xffefffff
 80035a4:	ff9fffff 	.word	0xff9fffff
 80035a8:	fff7ffff 	.word	0xfff7ffff

080035ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b092      	sub	sp, #72	@ 0x48
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2284      	movs	r2, #132	@ 0x84
 80035b8:	2100      	movs	r1, #0
 80035ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035bc:	f7fd fbe0 	bl	8000d80 <HAL_GetTick>
 80035c0:	0003      	movs	r3, r0
 80035c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2208      	movs	r2, #8
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d12c      	bne.n	800362c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d4:	2280      	movs	r2, #128	@ 0x80
 80035d6:	0391      	lsls	r1, r2, #14
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4a46      	ldr	r2, [pc, #280]	@ (80036f4 <UART_CheckIdleState+0x148>)
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	f000 f88c 	bl	80036fc <UART_WaitOnFlagUntilTimeout>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d021      	beq.n	800362c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035f2:	2301      	movs	r3, #1
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	@ 0x80
 800360a:	438a      	bics	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2278      	movs	r2, #120	@ 0x78
 8003624:	2100      	movs	r1, #0
 8003626:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e05f      	b.n	80036ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2204      	movs	r2, #4
 8003634:	4013      	ands	r3, r2
 8003636:	2b04      	cmp	r3, #4
 8003638:	d146      	bne.n	80036c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	03d1      	lsls	r1, r2, #15
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4a2c      	ldr	r2, [pc, #176]	@ (80036f4 <UART_CheckIdleState+0x148>)
 8003644:	9200      	str	r2, [sp, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	f000 f858 	bl	80036fc <UART_WaitOnFlagUntilTimeout>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d03b      	beq.n	80036c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003650:	f3ef 8310 	mrs	r3, PRIMASK
 8003654:	60fb      	str	r3, [r7, #12]
  return(result);
 8003656:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003658:	637b      	str	r3, [r7, #52]	@ 0x34
 800365a:	2301      	movs	r3, #1
 800365c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4921      	ldr	r1, [pc, #132]	@ (80036f8 <UART_CheckIdleState+0x14c>)
 8003672:	400a      	ands	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003678:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003682:	f3ef 8310 	mrs	r3, PRIMASK
 8003686:	61bb      	str	r3, [r7, #24]
  return(result);
 8003688:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	633b      	str	r3, [r7, #48]	@ 0x30
 800368c:	2301      	movs	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	438a      	bics	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2280      	movs	r2, #128	@ 0x80
 80036b8:	2120      	movs	r1, #32
 80036ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2278      	movs	r2, #120	@ 0x78
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e011      	b.n	80036ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	2120      	movs	r1, #32
 80036d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2278      	movs	r2, #120	@ 0x78
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b010      	add	sp, #64	@ 0x40
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	01ffffff 	.word	0x01ffffff
 80036f8:	fffffedf 	.word	0xfffffedf

080036fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370c:	e051      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3301      	adds	r3, #1
 8003712:	d04e      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003714:	f7fd fb34 	bl	8000d80 <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e051      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	4013      	ands	r3, r2
 8003738:	d03b      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b80      	cmp	r3, #128	@ 0x80
 800373e:	d038      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b40      	cmp	r3, #64	@ 0x40
 8003744:	d035      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2208      	movs	r2, #8
 800374e:	4013      	ands	r3, r2
 8003750:	2b08      	cmp	r3, #8
 8003752:	d111      	bne.n	8003778 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2208      	movs	r2, #8
 800375a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f83c 	bl	80037dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2284      	movs	r2, #132	@ 0x84
 8003768:	2108      	movs	r1, #8
 800376a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2278      	movs	r2, #120	@ 0x78
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e02c      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	401a      	ands	r2, r3
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	429a      	cmp	r2, r3
 800378a:	d112      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f81f 	bl	80037dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2284      	movs	r2, #132	@ 0x84
 80037a2:	2120      	movs	r1, #32
 80037a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2278      	movs	r2, #120	@ 0x78
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00f      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	4013      	ands	r3, r2
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	425a      	negs	r2, r3
 80037c2:	4153      	adcs	r3, r2
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	001a      	movs	r2, r3
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d09e      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	@ 0x38
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	617b      	str	r3, [r7, #20]
  return(result);
 80037ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ee:	2301      	movs	r3, #1
 80037f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4926      	ldr	r1, [pc, #152]	@ (80038a0 <UART_EndRxTransfer+0xc4>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003816:	f3ef 8310 	mrs	r3, PRIMASK
 800381a:	623b      	str	r3, [r7, #32]
  return(result);
 800381c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003820:	2301      	movs	r3, #1
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	438a      	bics	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	2b01      	cmp	r3, #1
 800384e:	d118      	bne.n	8003882 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003850:	f3ef 8310 	mrs	r3, PRIMASK
 8003854:	60bb      	str	r3, [r7, #8]
  return(result);
 8003856:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385a:	2301      	movs	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2110      	movs	r1, #16
 8003872:	438a      	bics	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2280      	movs	r2, #128	@ 0x80
 8003886:	2120      	movs	r1, #32
 8003888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b00e      	add	sp, #56	@ 0x38
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	fffffedf 	.word	0xfffffedf

080038a4 <memset>:
 80038a4:	0003      	movs	r3, r0
 80038a6:	1882      	adds	r2, r0, r2
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	7019      	strb	r1, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4c0c      	ldr	r4, [pc, #48]	@ (80038ec <__libc_init_array+0x38>)
 80038ba:	4d0d      	ldr	r5, [pc, #52]	@ (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	2600      	movs	r6, #0
 80038c6:	f000 f819 	bl	80038fc <_init>
 80038ca:	4c0a      	ldr	r4, [pc, #40]	@ (80038f4 <__libc_init_array+0x40>)
 80038cc:	4d0a      	ldr	r5, [pc, #40]	@ (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	00b3      	lsls	r3, r6, #2
 80038da:	58eb      	ldr	r3, [r5, r3]
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	00b3      	lsls	r3, r6, #2
 80038e4:	58eb      	ldr	r3, [r5, r3]
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08003988 	.word	0x08003988
 80038f0:	08003988 	.word	0x08003988
 80038f4:	0800398c 	.word	0x0800398c
 80038f8:	08003988 	.word	0x08003988

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
