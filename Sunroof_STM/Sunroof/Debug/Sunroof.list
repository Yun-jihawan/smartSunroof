
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005e70  08005e70  00006e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005eec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000010  08005efc  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005efc  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011593  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e48  00000000  00000000  000185cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b12  00000000  00000000  0001c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001638e  00000000  00000000  0001cd92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e0c  00000000  00000000  00033120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a175  00000000  00000000  00046f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d10a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003198  00000000  00000000  000d10e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e58 	.word	0x08005e58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005e58 	.word	0x08005e58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f005 fccf 	bl	8005dfe <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b44      	ldr	r3, [pc, #272]	@ (8000574 <MX_ADC_Init+0x128>)
 8000462:	4a45      	ldr	r2, [pc, #276]	@ (8000578 <MX_ADC_Init+0x12c>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b43      	ldr	r3, [pc, #268]	@ (8000574 <MX_ADC_Init+0x128>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b41      	ldr	r3, [pc, #260]	@ (8000574 <MX_ADC_Init+0x128>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b3f      	ldr	r3, [pc, #252]	@ (8000574 <MX_ADC_Init+0x128>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b3e      	ldr	r3, [pc, #248]	@ (8000574 <MX_ADC_Init+0x128>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b3c      	ldr	r3, [pc, #240]	@ (8000574 <MX_ADC_Init+0x128>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b3b      	ldr	r3, [pc, #236]	@ (8000574 <MX_ADC_Init+0x128>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b39      	ldr	r3, [pc, #228]	@ (8000574 <MX_ADC_Init+0x128>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b37      	ldr	r3, [pc, #220]	@ (8000574 <MX_ADC_Init+0x128>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b35      	ldr	r3, [pc, #212]	@ (8000574 <MX_ADC_Init+0x128>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b34      	ldr	r3, [pc, #208]	@ (8000574 <MX_ADC_Init+0x128>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b32      	ldr	r3, [pc, #200]	@ (8000574 <MX_ADC_Init+0x128>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b30      	ldr	r3, [pc, #192]	@ (8000574 <MX_ADC_Init+0x128>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000574 <MX_ADC_Init+0x128>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b2d      	ldr	r3, [pc, #180]	@ (8000574 <MX_ADC_Init+0x128>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <MX_ADC_Init+0x128>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000574 <MX_ADC_Init+0x128>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <MX_ADC_Init+0x128>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 f9fa 	bl	80018cc <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 fb58 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <MX_ADC_Init+0x128>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fc59 	bl	8001dac <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fb47 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <MX_ADC_Init+0x130>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <MX_ADC_Init+0x128>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fc4c 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fb3a 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800051c:	003b      	movs	r3, r7
 800051e:	4a18      	ldr	r2, [pc, #96]	@ (8000580 <MX_ADC_Init+0x134>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_ADC_Init+0x128>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fc3f 	bl	8001dac <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 fb2d 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000536:	003b      	movs	r3, r7
 8000538:	4a12      	ldr	r2, [pc, #72]	@ (8000584 <MX_ADC_Init+0x138>)
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053c:	003a      	movs	r2, r7
 800053e:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <MX_ADC_Init+0x128>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fc32 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 800054c:	f000 fb20 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000550:	003b      	movs	r3, r7
 8000552:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <MX_ADC_Init+0x13c>)
 8000554:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000556:	003a      	movs	r2, r7
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_ADC_Init+0x128>)
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fc25 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000566:	f000 fb13 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40012400 	.word	0x40012400
 800057c:	04000002 	.word	0x04000002
 8000580:	20000100 	.word	0x20000100
 8000584:	24000200 	.word	0x24000200
 8000588:	3c008000 	.word	0x3c008000

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	@ 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	2414      	movs	r4, #20
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	2314      	movs	r3, #20
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f005 fc2d 	bl	8005dfe <memset>
  if(adcHandle->Instance==ADC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a30      	ldr	r2, [pc, #192]	@ (800066c <HAL_ADC_MspInit+0xe0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d159      	bne.n	8000662 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	0089      	lsls	r1, r1, #2
 80005b8:	430a      	orrs	r2, r1
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	4013      	ands	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005da:	2104      	movs	r1, #4
 80005dc:	430a      	orrs	r2, r1
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005e4:	2204      	movs	r2, #4
 80005e6:	4013      	ands	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005f2:	2102      	movs	r1, #2
 80005f4:	430a      	orrs	r2, r1
 80005f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fc:	2202      	movs	r2, #2
 80005fe:	4013      	ands	r3, r2
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2203      	movs	r2, #3
 8000608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2203      	movs	r2, #3
 800060e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	193a      	adds	r2, r7, r4
 8000618:	23a0      	movs	r3, #160	@ 0xa0
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f002 f8aa 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2220      	movs	r2, #32
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2203      	movs	r2, #3
 800062e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 8000636:	193b      	adds	r3, r7, r4
 8000638:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <HAL_ADC_MspInit+0xe8>)
 800063a:	0019      	movs	r1, r3
 800063c:	0010      	movs	r0, r2
 800063e:	f002 f89b 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TILTING_ENC_A_Pin|TILTING_ENC_B_Pin;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2203      	movs	r2, #3
 8000648:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	187b      	adds	r3, r7, r1
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <HAL_ADC_MspInit+0xec>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f002 f88b 	bl	8002778 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b00b      	add	sp, #44	@ 0x2c
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	40012400 	.word	0x40012400
 8000670:	40021000 	.word	0x40021000
 8000674:	50000800 	.word	0x50000800
 8000678:	50000400 	.word	0x50000400

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_DMA_Init+0x48>)
 8000684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_DMA_Init+0x48>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	631a      	str	r2, [r3, #48]	@ 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_DMA_Init+0x48>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	200a      	movs	r0, #10
 80006a0:	f001 fdf6 	bl	8002290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f001 fe08 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	200b      	movs	r0, #11
 80006b0:	f001 fdee 	bl	8002290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006b4:	200b      	movs	r0, #11
 80006b6:	f001 fe00 	bl	80022ba <HAL_NVIC_EnableIRQ>

}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	40021000 	.word	0x40021000

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08b      	sub	sp, #44	@ 0x2c
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	2414      	movs	r4, #20
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2314      	movs	r3, #20
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f005 fb90 	bl	8005dfe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b5a      	ldr	r3, [pc, #360]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006e2:	4b59      	ldr	r3, [pc, #356]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006e4:	2104      	movs	r1, #4
 80006e6:	430a      	orrs	r2, r1
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ea:	4b57      	ldr	r3, [pc, #348]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ee:	2204      	movs	r2, #4
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b54      	ldr	r3, [pc, #336]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fa:	4b53      	ldr	r3, [pc, #332]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000702:	4b51      	ldr	r3, [pc, #324]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b4e      	ldr	r3, [pc, #312]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000712:	4b4d      	ldr	r3, [pc, #308]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	@ 0x2c
 800071a:	4b4b      	ldr	r3, [pc, #300]	@ (8000848 <MX_GPIO_Init+0x180>)
 800071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b48      	ldr	r3, [pc, #288]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	4b47      	ldr	r3, [pc, #284]	@ (8000848 <MX_GPIO_Init+0x180>)
 800072c:	2102      	movs	r1, #2
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000732:	4b45      	ldr	r3, [pc, #276]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	2202      	movs	r2, #2
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b42      	ldr	r3, [pc, #264]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000742:	4b41      	ldr	r3, [pc, #260]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000744:	2108      	movs	r1, #8
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074a:	4b3f      	ldr	r3, [pc, #252]	@ (8000848 <MX_GPIO_Init+0x180>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	2208      	movs	r2, #8
 8000750:	4013      	ands	r3, r2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin, GPIO_PIN_RESET);
 8000756:	2398      	movs	r3, #152	@ 0x98
 8000758:	0099      	lsls	r1, r3, #2
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2200      	movs	r2, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f002 f9a4 	bl	8002aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 8000766:	4b39      	ldr	r3, [pc, #228]	@ (800084c <MX_GPIO_Init+0x184>)
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f99e 	bl	8002aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|OPACITY_Pin, GPIO_PIN_RESET);
 8000772:	23c0      	movs	r3, #192	@ 0xc0
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4836      	ldr	r0, [pc, #216]	@ (8000850 <MX_GPIO_Init+0x188>)
 8000778:	2200      	movs	r2, #0
 800077a:	0019      	movs	r1, r3
 800077c:	f002 f997 	bl	8002aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0192      	lsls	r2, r2, #6
 8000786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2284      	movs	r2, #132	@ 0x84
 800078c:	0392      	lsls	r2, r2, #14
 800078e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	193b      	adds	r3, r7, r4
 8000798:	4a2d      	ldr	r2, [pc, #180]	@ (8000850 <MX_GPIO_Init+0x188>)
 800079a:	0019      	movs	r1, r3
 800079c:	0010      	movs	r0, r2
 800079e:	f001 ffeb 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_ENC_A_Pin ROOF_ENC_B_Pin */
  GPIO_InitStruct.Pin = ROOF_ENC_A_Pin|ROOF_ENC_B_Pin;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2203      	movs	r2, #3
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	22c4      	movs	r2, #196	@ 0xc4
 80007ae:	0392      	lsls	r2, r2, #14
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	000c      	movs	r4, r1
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	4a24      	ldr	r2, [pc, #144]	@ (8000850 <MX_GPIO_Init+0x188>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f001 ffd9 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_DIR_Pin ROOF_DIR_Pin TILTING_BRAKE_Pin */
  GPIO_InitStruct.Pin = TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2298      	movs	r2, #152	@ 0x98
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	000c      	movs	r4, r1
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	23a0      	movs	r3, #160	@ 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 ffc3 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2204      	movs	r2, #4
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <MX_GPIO_Init+0x184>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f001 ffb1 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin OPACITY_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|OPACITY_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22c0      	movs	r2, #192	@ 0xc0
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	187b      	adds	r3, r7, r1
 8000834:	4a06      	ldr	r2, [pc, #24]	@ (8000850 <MX_GPIO_Init+0x188>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f001 ff9d 	bl	8002778 <HAL_GPIO_Init>

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b00b      	add	sp, #44	@ 0x2c
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	40021000 	.word	0x40021000
 800084c:	50000400 	.word	0x50000400
 8000850:	50000800 	.word	0x50000800

08000854 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1 Second Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d102      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		sensor_read = 1;
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
	}
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40001400 	.word	0x40001400
 8000878:	200000a8 	.word	0x200000a8

0800087c <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART4) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <HAL_UART_RxCpltCallback+0x78>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12e      	bne.n	80008ec <HAL_UART_RxCpltCallback+0x70>
    	rx_payload = 0;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
    	rx_payload |= ((uint16_t)rx_buf[0] << 8);
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <HAL_UART_RxCpltCallback+0x80>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008aa:	801a      	strh	r2, [r3, #0]
    	rx_payload |= ((uint16_t)rx_buf[1]);
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_UART_RxCpltCallback+0x80>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	001a      	movs	r2, r3
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008bc:	801a      	strh	r2, [r3, #0]

		roof_state = ((rx_payload >> 8) & 0x03);
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2203      	movs	r2, #3
 80008ca:	4013      	ands	r3, r2
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_UART_RxCpltCallback+0x84>)
 80008d0:	701a      	strb	r2, [r3, #0]
		film_opacity = ((rx_payload) & 0x01);
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_UART_RxCpltCallback+0x88>)
 80008de:	801a      	strh	r2, [r3, #0]

        // 다시 수신 시작 (반복 수신)
        HAL_UART_Receive_DMA(&huart4, rx_buf, 2);
 80008e0:	4906      	ldr	r1, [pc, #24]	@ (80008fc <HAL_UART_RxCpltCallback+0x80>)
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_UART_RxCpltCallback+0x8c>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f003 fffa 	bl	80048e0 <HAL_UART_Receive_DMA>
    }
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40004c00 	.word	0x40004c00
 80008f8:	200000a6 	.word	0x200000a6
 80008fc:	200000a4 	.word	0x200000a4
 8000900:	20000000 	.word	0x20000000
 8000904:	20000098 	.word	0x20000098
 8000908:	200001f4 	.word	0x200001f4

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 ff6c 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f89a 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f7ff fed6 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800091c:	f7ff feae 	bl	800067c <MX_DMA_Init>
  MX_ADC_Init();
 8000920:	f7ff fd94 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 8000924:	f000 fc96 	bl	8001254 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000928:	f000 fb98 	bl	800105c <MX_TIM2_Init>
  MX_TIM3_Init();
 800092c:	f000 fc14 	bl	8001158 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8000930:	f000 fd98 	bl	8001464 <MX_USART4_UART_Init>
  MX_USART2_UART_Init();
 8000934:	f000 fd66 	bl	8001404 <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8000938:	f000 fdc4 	bl	80014c4 <MX_USART5_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800093c:	f000 f8ea 	bl	8000b14 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000940:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <main+0x100>)
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f8a2 	bl	8003a8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000948:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <main+0x104>)
 800094a:	2104      	movs	r1, #4
 800094c:	0018      	movs	r0, r3
 800094e:	f003 f937 	bl	8003bc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000952:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <main+0x108>)
 8000954:	2104      	movs	r1, #4
 8000956:	0018      	movs	r0, r3
 8000958:	f003 f932 	bl	8003bc0 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart4, rx_buf, 2);
 800095c:	492e      	ldr	r1, [pc, #184]	@ (8000a18 <main+0x10c>)
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <main+0x110>)
 8000960:	2202      	movs	r2, #2
 8000962:	0018      	movs	r0, r3
 8000964:	f003 ffbc 	bl	80048e0 <HAL_UART_Receive_DMA>


  // Initialize
  roof_encoder = 0;
 8000968:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <main+0x114>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  roof_state = STOP;
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <main+0x118>)
 8000970:	2203      	movs	r2, #3
 8000972:	701a      	strb	r2, [r3, #0]
  Sunroof_Set(STOP);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f9c7 	bl	8000d08 <Sunroof_Set>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 센서 값 수신 및 UART 송신
	  if(sensor_read)
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <main+0x11c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d02b      	beq.n	80009da <main+0xce>
	  {
		  read_illum();
 8000982:	f000 fabd 	bl	8000f00 <read_illum>
		  read_rain();
 8000986:	f000 fad5 	bl	8000f34 <read_rain>

		  sensor_read = 0;
 800098a:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <main+0x11c>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

		  //UART Send
		  tx_payload = 0;
 8000990:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <main+0x120>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)in_illum & 0x0FFF) << 20;  // In Illum : 12 -> 32 - 12 = 20
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <main+0x124>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	051a      	lsls	r2, r3, #20
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <main+0x120>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	431a      	orrs	r2, r3
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <main+0x120>)
 80009a6:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)out_illum & 0x0FFF) << 8;   // Out Illum : 12 -> 20 - 12 = 8
 80009a8:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <main+0x128>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <main+0x12c>)
 80009b2:	401a      	ands	r2, r3
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <main+0x120>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <main+0x120>)
 80009bc:	601a      	str	r2, [r3, #0]
		  tx_payload |= (rain_state & 0x01) << 7;               // rain_flag : 1 0 -> 8 - 1 = 7
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <main+0x130>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	01db      	lsls	r3, r3, #7
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	4013      	ands	r3, r2
 80009ca:	001a      	movs	r2, r3
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <main+0x120>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <main+0x120>)
 80009d4:	601a      	str	r2, [r3, #0]

		  Send_Sensor_Data();
 80009d6:	f000 f8b3 	bl	8000b40 <Send_Sensor_Data>
	  }

	  Sunroof_Set(roof_state);
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <main+0x118>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 f991 	bl	8000d08 <Sunroof_Set>

	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, rain_state);
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <main+0x130>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4814      	ldr	r0, [pc, #80]	@ (8000a40 <main+0x134>)
 80009ee:	001a      	movs	r2, r3
 80009f0:	2104      	movs	r1, #4
 80009f2:	f002 f85c 	bl	8002aae <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, film_opacity);
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <main+0x138>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <main+0x13c>)
 8000a04:	0019      	movs	r1, r3
 8000a06:	f002 f852 	bl	8002aae <HAL_GPIO_WritePin>
	  if(sensor_read)
 8000a0a:	e7b6      	b.n	800097a <main+0x6e>
 8000a0c:	2000012c 	.word	0x2000012c
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	200000ec 	.word	0x200000ec
 8000a18:	200000a4 	.word	0x200000a4
 8000a1c:	200001f4 	.word	0x200001f4
 8000a20:	20000088 	.word	0x20000088
 8000a24:	20000000 	.word	0x20000000
 8000a28:	200000a8 	.word	0x200000a8
 8000a2c:	200000a0 	.word	0x200000a0
 8000a30:	20000090 	.word	0x20000090
 8000a34:	20000092 	.word	0x20000092
 8000a38:	000fff00 	.word	0x000fff00
 8000a3c:	20000096 	.word	0x20000096
 8000a40:	50000400 	.word	0x50000400
 8000a44:	20000098 	.word	0x20000098
 8000a48:	50000800 	.word	0x50000800

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b09f      	sub	sp, #124	@ 0x7c
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	2440      	movs	r4, #64	@ 0x40
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	0018      	movs	r0, r3
 8000a58:	2338      	movs	r3, #56	@ 0x38
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f005 f9ce 	bl	8005dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a62:	232c      	movs	r3, #44	@ 0x2c
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f005 f9c6 	bl	8005dfe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2328      	movs	r3, #40	@ 0x28
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f005 f9bf 	bl	8005dfe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <SystemClock_Config+0xc0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <SystemClock_Config+0xc4>)
 8000a86:	401a      	ands	r2, r3
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <SystemClock_Config+0xc0>)
 8000a8a:	2180      	movs	r1, #128	@ 0x80
 8000a8c:	0109      	lsls	r1, r1, #4
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	22a0      	movs	r2, #160	@ 0xa0
 8000a9c:	02d2      	lsls	r2, r2, #11
 8000a9e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 f839 	bl	8002b20 <HAL_RCC_OscConfig>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 f86d 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	212c      	movs	r1, #44	@ 0x2c
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	220f      	movs	r2, #15
 8000abc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fbf4 	bl	80032c8 <HAL_RCC_ClockConfig>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ae4:	f000 f854 	bl	8000b90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2202      	movs	r2, #2
 8000aec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fdea 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b00:	f000 f846 	bl	8000b90 <Error_Handler>
  }
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b01f      	add	sp, #124	@ 0x7c
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	ffffe7ff 	.word	0xffffe7ff

08000b14 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2005      	movs	r0, #5
 8000b1e:	f001 fbb7 	bl	8002290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b22:	2005      	movs	r0, #5
 8000b24:	f001 fbc9 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2012      	movs	r0, #18
 8000b2e:	f001 fbaf 	bl	8002290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b32:	2012      	movs	r0, #18
 8000b34:	f001 fbc1 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <Send_Sensor_Data>:

/* USER CODE BEGIN 4 */
void Send_Sensor_Data(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	tx_buf[0] = (tx_payload >> 24) & 0xFF;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	0e1b      	lsrs	r3, r3, #24
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b4e:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (tx_payload >> 16) & 0xFF;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	0c1b      	lsrs	r3, r3, #16
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b5a:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (tx_payload >> 8) & 0xFF;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b66:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = tx_payload & 0xFF;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b70:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit(&huart4, tx_buf, 4, 100);
 8000b72:	4905      	ldr	r1, [pc, #20]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <Send_Sensor_Data+0x4c>)
 8000b76:	2364      	movs	r3, #100	@ 0x64
 8000b78:	2204      	movs	r2, #4
 8000b7a:	f003 fe11 	bl	80047a0 <HAL_UART_Transmit>
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000a0 	.word	0x200000a0
 8000b88:	2000009c 	.word	0x2000009c
 8000b8c:	200001f4 	.word	0x200001f4

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_GPIO_EXTI_Callback>:
 */

#include "roof.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dbb      	adds	r3, r7, #6
 8000ba6:	801a      	strh	r2, [r3, #0]
	uint8_t ROOF_A_state = 0;
 8000ba8:	210f      	movs	r1, #15
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	uint8_t ROOF_B_state = 0;
 8000bb0:	260e      	movs	r6, #14
 8000bb2:	19bb      	adds	r3, r7, r6
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_A_state = 0;
 8000bb8:	230d      	movs	r3, #13
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_B_state = 0;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

	//Roof Motor
	if(GPIO_Pin == ROOF_ENC_A_Pin) {
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d11f      	bne.n	8000c10 <HAL_GPIO_EXTI_Callback+0x74>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000bd0:	000d      	movs	r5, r1
 8000bd2:	187c      	adds	r4, r7, r1
 8000bd4:	4b48      	ldr	r3, [pc, #288]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 ff4b 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000bde:	0003      	movs	r3, r0
 8000be0:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000be2:	19bc      	adds	r4, r7, r6
 8000be4:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000be6:	2102      	movs	r1, #2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 ff43 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? 1 : -1);
 8000bf2:	197a      	adds	r2, r7, r5
 8000bf4:	19bb      	adds	r3, r7, r6
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d101      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x66>
 8000bfe:	2201      	movs	r2, #1
 8000c00:	e001      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x6a>
 8000c02:	2301      	movs	r3, #1
 8000c04:	425a      	negs	r2, r3
 8000c06:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	18d2      	adds	r2, r2, r3
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c0e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == ROOF_ENC_B_Pin) {
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d120      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0xbe>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000c18:	250f      	movs	r5, #15
 8000c1a:	197c      	adds	r4, r7, r5
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 ff27 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000c26:	0003      	movs	r3, r0
 8000c28:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000c2a:	260e      	movs	r6, #14
 8000c2c:	19bc      	adds	r4, r7, r6
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c30:	2102      	movs	r1, #2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 ff1e 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? -1 : 1);
 8000c3c:	197a      	adds	r2, r7, r5
 8000c3e:	19bb      	adds	r3, r7, r6
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d102      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0xb2>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425a      	negs	r2, r3
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_EXTI_Callback+0xb4>
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	18d2      	adds	r2, r2, r3
 8000c56:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c58:	601a      	str	r2, [r3, #0]
	}

	//Tilting Motor
	if(GPIO_Pin == TILTING_ENC_A_Pin) {
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d120      	bne.n	8000ca4 <HAL_GPIO_EXTI_Callback+0x108>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000c62:	250d      	movs	r5, #13
 8000c64:	197c      	adds	r4, r7, r5
 8000c66:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 ff02 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000c70:	0003      	movs	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000c74:	260c      	movs	r6, #12
 8000c76:	19bc      	adds	r4, r7, r6
 8000c78:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 fef9 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000c82:	0003      	movs	r3, r0
 8000c84:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? 1 : -1);
 8000c86:	197a      	adds	r2, r7, r5
 8000c88:	19bb      	adds	r3, r7, r6
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0xfa>
 8000c92:	2201      	movs	r2, #1
 8000c94:	e001      	b.n	8000c9a <HAL_GPIO_EXTI_Callback+0xfe>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425a      	negs	r2, r3
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	18d2      	adds	r2, r2, r3
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ca2:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == TILTING_ENC_B_Pin) {
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d120      	bne.n	8000cee <HAL_GPIO_EXTI_Callback+0x152>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000cac:	250d      	movs	r5, #13
 8000cae:	197c      	adds	r4, r7, r5
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 fedd 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000cbe:	260c      	movs	r6, #12
 8000cc0:	19bc      	adds	r4, r7, r6
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 fed4 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
 8000cd0:	197a      	adds	r2, r7, r5
 8000cd2:	19bb      	adds	r3, r7, r6
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d102      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0x146>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425a      	negs	r2, r3
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x148>
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	18d2      	adds	r2, r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000cec:	601a      	str	r2, [r3, #0]
	}
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b005      	add	sp, #20
 8000cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	50000800 	.word	0x50000800
 8000cfc:	20000088 	.word	0x20000088
 8000d00:	50000400 	.word	0x50000400
 8000d04:	2000008c 	.word	0x2000008c

08000d08 <Sunroof_Set>:

void Sunroof_Set(uint8_t mode) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d005      	beq.n	8000d28 <Sunroof_Set+0x20>
 8000d1c:	dc69      	bgt.n	8000df2 <Sunroof_Set+0xea>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d046      	beq.n	8000db0 <Sunroof_Set+0xa8>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d022      	beq.n	8000d6c <Sunroof_Set+0x64>
 8000d26:	e064      	b.n	8000df2 <Sunroof_Set+0xea>
	case OPEN:
		if(roof_encoder <= ROOF_OPEN_MAX) {
 8000d28:	4b39      	ldr	r3, [pc, #228]	@ (8000e10 <Sunroof_Set+0x108>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a39      	ldr	r2, [pc, #228]	@ (8000e14 <Sunroof_Set+0x10c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	dc11      	bgt.n	8000d56 <Sunroof_Set+0x4e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000d32:	4b39      	ldr	r3, [pc, #228]	@ (8000e18 <Sunroof_Set+0x110>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2246      	movs	r2, #70	@ 0x46
 8000d38:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000d3a:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <Sunroof_Set+0x114>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 feb4 	bl	8002aae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000d46:	23a0      	movs	r3, #160	@ 0xa0
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2140      	movs	r1, #64	@ 0x40
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f001 fead 	bl	8002aae <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000d54:	e058      	b.n	8000e08 <Sunroof_Set+0x100>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <Sunroof_Set+0x110>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <Sunroof_Set+0x114>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 fea2 	bl	8002aae <HAL_GPIO_WritePin>
		break;
 8000d6a:	e04d      	b.n	8000e08 <Sunroof_Set+0x100>
	case TILTING:
		if(roof_encoder <= ROOF_TILTING_MAX) {
 8000d6c:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <Sunroof_Set+0x108>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2b      	ldr	r2, [pc, #172]	@ (8000e20 <Sunroof_Set+0x118>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	dc11      	bgt.n	8000d9a <Sunroof_Set+0x92>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <Sunroof_Set+0x110>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2246      	movs	r2, #70	@ 0x46
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000d7e:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <Sunroof_Set+0x114>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	0018      	movs	r0, r3
 8000d86:	f001 fe92 	bl	8002aae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2140      	movs	r1, #64	@ 0x40
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 fe8b 	bl	8002aae <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000d98:	e036      	b.n	8000e08 <Sunroof_Set+0x100>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <Sunroof_Set+0x110>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000da2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <Sunroof_Set+0x114>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 fe80 	bl	8002aae <HAL_GPIO_WritePin>
		break;
 8000dae:	e02b      	b.n	8000e08 <Sunroof_Set+0x100>
	case CLOSE:
		if(roof_encoder >= ROOF_CLOSE) {
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <Sunroof_Set+0x108>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db11      	blt.n	8000ddc <Sunroof_Set+0xd4>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <Sunroof_Set+0x110>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2246      	movs	r2, #70	@ 0x46
 8000dbe:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <Sunroof_Set+0x114>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 fe71 	bl	8002aae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000dcc:	23a0      	movs	r3, #160	@ 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2140      	movs	r1, #64	@ 0x40
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f001 fe6a 	bl	8002aae <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000dda:	e015      	b.n	8000e08 <Sunroof_Set+0x100>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <Sunroof_Set+0x110>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <Sunroof_Set+0x114>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	2180      	movs	r1, #128	@ 0x80
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 fe5f 	bl	8002aae <HAL_GPIO_WritePin>
		break;
 8000df0:	e00a      	b.n	8000e08 <Sunroof_Set+0x100>
	case STOP:
	default:
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <Sunroof_Set+0x110>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000dfa:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <Sunroof_Set+0x114>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	@ 0x80
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 fe54 	bl	8002aae <HAL_GPIO_WritePin>
		break;
 8000e06:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000088 	.word	0x20000088
 8000e14:	00001770 	.word	0x00001770
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	50000800 	.word	0x50000800
 8000e20:	00000bb8 	.word	0x00000bb8

08000e24 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000e2c:	2316      	movs	r3, #22
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <HW_AdcReadChannel+0xc4>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d1f9      	bne.n	8000e36 <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <HW_AdcReadChannel+0xc8>)
 8000e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <HW_AdcReadChannel+0xc8>)
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0089      	lsls	r1, r1, #2
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 f8d1 	bl	8001ffc <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000e5a:	240c      	movs	r4, #12
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <HW_AdcReadChannel+0xd0>)
 8000e60:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	4a24      	ldr	r2, [pc, #144]	@ (8000ef8 <HW_AdcReadChannel+0xd4>)
 8000e66:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000e68:	193a      	adds	r2, r7, r4
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 ff9c 	bl	8001dac <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8000e74:	0021      	movs	r1, r4
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	0152      	lsls	r2, r2, #5
 8000e82:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000e84:	187a      	adds	r2, r7, r1
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 ff8e 	bl	8001dac <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fe8e 	bl	8001bb4 <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425a      	negs	r2, r3
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fedb 	bl	8001c5c <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 8000ea6:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 ff73 	bl	8001d94 <HAL_ADC_GetValue>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	2016      	movs	r0, #22
 8000eb2:	183b      	adds	r3, r7, r0
 8000eb4:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HW_AdcReadChannel+0xcc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <HW_AdcReadChannel+0xc8>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HW_AdcReadChannel+0xc8>)
 8000ed4:	4909      	ldr	r1, [pc, #36]	@ (8000efc <HW_AdcReadChannel+0xd8>)
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8000eda:	183b      	adds	r3, r7, r0
 8000edc:	881b      	ldrh	r3, [r3, #0]
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b007      	add	sp, #28
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	40007000 	.word	0x40007000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	2000002c 	.word	0x2000002c
 8000ef4:	0007ffff 	.word	0x0007ffff
 8000ef8:	00001001 	.word	0x00001001
 8000efc:	fffffdff 	.word	0xfffffdff

08000f00 <read_illum>:

void read_illum(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <read_illum+0x28>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff ff8c 	bl	8000e24 <HW_AdcReadChannel>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	001a      	movs	r2, r3
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <read_illum+0x2c>)
 8000f12:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ff85 	bl	8000e24 <HW_AdcReadChannel>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <read_illum+0x30>)
 8000f20:	801a      	strh	r2, [r3, #0]
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	04000002 	.word	0x04000002
 8000f2c:	20000090 	.word	0x20000090
 8000f30:	20000092 	.word	0x20000092

08000f34 <read_rain>:

void read_rain(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <read_rain+0x34>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff ff72 	bl	8000e24 <HW_AdcReadChannel>
 8000f40:	0003      	movs	r3, r0
 8000f42:	001a      	movs	r2, r3
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <read_rain+0x38>)
 8000f46:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <read_rain+0x38>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	22c8      	movs	r2, #200	@ 0xc8
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	429a      	cmp	r2, r3
 8000f54:	419b      	sbcs	r3, r3
 8000f56:	425b      	negs	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <read_rain+0x3c>)
 8000f5e:	701a      	strb	r2, [r3, #0]
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	3c008000 	.word	0x3c008000
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	20000096 	.word	0x20000096

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_MspInit+0x24>)
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	0549      	lsls	r1, r1, #21
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 fc66 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_A_Pin);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f001 fd88 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_B_Pin);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f001 fd85 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 fae7 	bl	80025be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	20000304 	.word	0x20000304

08000ffc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f001 fadb 	bl	80025be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	2000034c 	.word	0x2000034c

08001014 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <USART4_5_IRQHandler+0x1c>)
 800101a:	0018      	movs	r0, r3
 800101c:	f003 fcbe 	bl	800499c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <USART4_5_IRQHandler+0x20>)
 8001022:	0018      	movs	r0, r3
 8001024:	f003 fcba 	bl	800499c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	200001f4 	.word	0x200001f4
 8001034:	2000027c 	.word	0x2000027c

08001038 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <TIM7_IRQHandler+0x14>)
 800103e:	0018      	movs	r0, r3
 8001040:	f002 fe50 	bl	8003ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	2000012c 	.word	0x2000012c

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	2318      	movs	r3, #24
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	0018      	movs	r0, r3
 8001068:	2310      	movs	r3, #16
 800106a:	001a      	movs	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	f004 fec6 	bl	8005dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	2310      	movs	r3, #16
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	0018      	movs	r0, r3
 8001078:	2308      	movs	r3, #8
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f004 febe 	bl	8005dfe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001082:	003b      	movs	r3, r7
 8001084:	0018      	movs	r0, r3
 8001086:	2310      	movs	r3, #16
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f004 feb7 	bl	8005dfe <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001090:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <MX_TIM2_Init+0xf8>)
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	05d2      	lsls	r2, r2, #23
 8001096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001098:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <MX_TIM2_Init+0xf8>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010a6:	2263      	movs	r2, #99	@ 0x63
 80010a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b6:	4b27      	ldr	r3, [pc, #156]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010b8:	0018      	movs	r0, r3
 80010ba:	f002 fca7 	bl	8003a0c <HAL_TIM_Base_Init>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010c2:	f7ff fd65 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c6:	2118      	movs	r1, #24
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	0152      	lsls	r2, r2, #5
 80010ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d0:	187a      	adds	r2, r7, r1
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010d4:	0011      	movs	r1, r2
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 ff96 	bl	8004008 <HAL_TIM_ConfigClockSource>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80010e0:	f7ff fd56 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_TIM2_Init+0xf8>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 fd22 	bl	8003b30 <HAL_TIM_PWM_Init>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80010f0:	f7ff fd4e 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2110      	movs	r1, #16
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001102:	187a      	adds	r2, r7, r1
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_TIM2_Init+0xf8>)
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f003 fa97 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001112:	f7ff fd3d 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001116:	003b      	movs	r3, r7
 8001118:	2260      	movs	r2, #96	@ 0x60
 800111a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800111c:	003b      	movs	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	003b      	movs	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	003b      	movs	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800112e:	0039      	movs	r1, r7
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_TIM2_Init+0xf8>)
 8001132:	2204      	movs	r2, #4
 8001134:	0018      	movs	r0, r3
 8001136:	f002 fea1 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800113e:	f7ff fd27 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <MX_TIM2_Init+0xf8>)
 8001144:	0018      	movs	r0, r3
 8001146:	f000 f8f5 	bl	8001334 <HAL_TIM_MspPostInit>

}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b00a      	add	sp, #40	@ 0x28
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	200000ac 	.word	0x200000ac

08001158 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	2318      	movs	r3, #24
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	0018      	movs	r0, r3
 8001164:	2310      	movs	r3, #16
 8001166:	001a      	movs	r2, r3
 8001168:	2100      	movs	r1, #0
 800116a:	f004 fe48 	bl	8005dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	2310      	movs	r3, #16
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	0018      	movs	r0, r3
 8001174:	2308      	movs	r3, #8
 8001176:	001a      	movs	r2, r3
 8001178:	2100      	movs	r1, #0
 800117a:	f004 fe40 	bl	8005dfe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	003b      	movs	r3, r7
 8001180:	0018      	movs	r0, r3
 8001182:	2310      	movs	r3, #16
 8001184:	001a      	movs	r2, r3
 8001186:	2100      	movs	r1, #0
 8001188:	f004 fe39 	bl	8005dfe <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118c:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <MX_TIM3_Init+0xf4>)
 800118e:	4a30      	ldr	r2, [pc, #192]	@ (8001250 <MX_TIM3_Init+0xf8>)
 8001190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <MX_TIM3_Init+0xf4>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <MX_TIM3_Init+0xf4>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <MX_TIM3_Init+0xf4>)
 80011a0:	2263      	movs	r2, #99	@ 0x63
 80011a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b29      	ldr	r3, [pc, #164]	@ (800124c <MX_TIM3_Init+0xf4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <MX_TIM3_Init+0xf4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <MX_TIM3_Init+0xf4>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f002 fc2a 	bl	8003a0c <HAL_TIM_Base_Init>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011bc:	f7ff fce8 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	2118      	movs	r1, #24
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	0152      	lsls	r2, r2, #5
 80011c8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ca:	187a      	adds	r2, r7, r1
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_TIM3_Init+0xf4>)
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f002 ff19 	bl	8004008 <HAL_TIM_ConfigClockSource>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011da:	f7ff fcd9 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_TIM3_Init+0xf4>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fca5 	bl	8003b30 <HAL_TIM_PWM_Init>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011ea:	f7ff fcd1 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2110      	movs	r1, #16
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011fc:	187a      	adds	r2, r7, r1
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_TIM3_Init+0xf4>)
 8001200:	0011      	movs	r1, r2
 8001202:	0018      	movs	r0, r3
 8001204:	f003 fa1a 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800120c:	f7ff fcc0 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	003b      	movs	r3, r7
 8001212:	2260      	movs	r2, #96	@ 0x60
 8001214:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001216:	003b      	movs	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121c:	003b      	movs	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001222:	003b      	movs	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001228:	0039      	movs	r1, r7
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <MX_TIM3_Init+0xf4>)
 800122c:	2204      	movs	r2, #4
 800122e:	0018      	movs	r0, r3
 8001230:	f002 fe24 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001238:	f7ff fcaa 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <MX_TIM3_Init+0xf4>)
 800123e:	0018      	movs	r0, r3
 8001240:	f000 f878 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b00a      	add	sp, #40	@ 0x28
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000ec 	.word	0x200000ec
 8001250:	40000400 	.word	0x40000400

08001254 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	003b      	movs	r3, r7
 800125c:	0018      	movs	r0, r3
 800125e:	2308      	movs	r3, #8
 8001260:	001a      	movs	r2, r3
 8001262:	2100      	movs	r1, #0
 8001264:	f004 fdcb 	bl	8005dfe <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 800126a:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <MX_TIM7_Init+0x70>)
 800126c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 8001270:	4a15      	ldr	r2, [pc, #84]	@ (80012c8 <MX_TIM7_Init+0x74>)
 8001272:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 800127c:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_TIM7_Init+0x78>)
 800127e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 8001288:	0018      	movs	r0, r3
 800128a:	f002 fbbf 	bl	8003a0c <HAL_TIM_Base_Init>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001292:	f7ff fc7d 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	003b      	movs	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	003b      	movs	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012a2:	003a      	movs	r2, r7
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_TIM7_Init+0x6c>)
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f003 f9c7 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80012b2:	f7ff fc6d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	2000012c 	.word	0x2000012c
 80012c4:	40001400 	.word	0x40001400
 80012c8:	00001f3f 	.word	0x00001f3f
 80012cc:	0000270f 	.word	0x0000270f

080012d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d106      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e4:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <HAL_TIM_Base_MspInit+0x58>)
 80012e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_TIM_Base_MspInit+0x58>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80012f0:	e016      	b.n	8001320 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <HAL_TIM_Base_MspInit+0x5c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d106      	bne.n	800130a <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_TIM_Base_MspInit+0x58>)
 80012fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <HAL_TIM_Base_MspInit+0x58>)
 8001302:	2102      	movs	r1, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001308:	e00a      	b.n	8001320 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM7)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_TIM_Base_MspInit+0x60>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d105      	bne.n	8001320 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <HAL_TIM_Base_MspInit+0x58>)
 8001316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_TIM_Base_MspInit+0x58>)
 800131a:	2120      	movs	r1, #32
 800131c:	430a      	orrs	r2, r1
 800131e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	40000400 	.word	0x40000400
 8001330:	40001400 	.word	0x40001400

08001334 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b08b      	sub	sp, #44	@ 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	2414      	movs	r4, #20
 800133e:	193b      	adds	r3, r7, r4
 8001340:	0018      	movs	r0, r3
 8001342:	2314      	movs	r3, #20
 8001344:	001a      	movs	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f004 fd59 	bl	8005dfe <memset>
  if(timHandle->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	429a      	cmp	r2, r3
 8001356:	d122      	bne.n	800139e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <HAL_TIM_MspPostInit+0xc4>)
 800135a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800135c:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <HAL_TIM_MspPostInit+0xc4>)
 800135e:	2102      	movs	r1, #2
 8001360:	430a      	orrs	r2, r1
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <HAL_TIM_MspPostInit+0xc4>)
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001370:	0021      	movs	r1, r4
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2208      	movs	r2, #8
 8001376:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	187b      	adds	r3, r7, r1
 800137a:	2202      	movs	r2, #2
 800137c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2202      	movs	r2, #2
 800138e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	187b      	adds	r3, r7, r1
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_TIM_MspPostInit+0xc8>)
 8001394:	0019      	movs	r1, r3
 8001396:	0010      	movs	r0, r2
 8001398:	f001 f9ee 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800139c:	e027      	b.n	80013ee <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <HAL_TIM_MspPostInit+0xcc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d122      	bne.n	80013ee <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <HAL_TIM_MspPostInit+0xc4>)
 80013aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_TIM_MspPostInit+0xc4>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_TIM_MspPostInit+0xc4>)
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013c0:	2114      	movs	r1, #20
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2280      	movs	r2, #128	@ 0x80
 80013c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2202      	movs	r2, #2
 80013cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2202      	movs	r2, #2
 80013de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	187a      	adds	r2, r7, r1
 80013e2:	23a0      	movs	r3, #160	@ 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f001 f9c5 	bl	8002778 <HAL_GPIO_Init>
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b00b      	add	sp, #44	@ 0x2c
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	40021000 	.word	0x40021000
 80013fc:	50000400 	.word	0x50000400
 8001400:	40000400 	.word	0x40000400

08001404 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart5_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_USART2_UART_Init+0x58>)
 800140a:	4a15      	ldr	r2, [pc, #84]	@ (8001460 <MX_USART2_UART_Init+0x5c>)
 800140c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001410:	22e1      	movs	r2, #225	@ 0xe1
 8001412:	0252      	lsls	r2, r2, #9
 8001414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_USART2_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_USART2_UART_Init+0x58>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <MX_USART2_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <MX_USART2_UART_Init+0x58>)
 8001448:	0018      	movs	r0, r3
 800144a:	f003 f955 	bl	80046f8 <HAL_UART_Init>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d001      	beq.n	8001456 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001452:	f7ff fb9d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000016c 	.word	0x2000016c
 8001460:	40004400 	.word	0x40004400

08001464 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 800146a:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <MX_USART4_UART_Init+0x5c>)
 800146c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 8001470:	22e1      	movs	r2, #225	@ 0xe1
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <MX_USART4_UART_Init+0x58>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f003 f925 	bl	80046f8 <HAL_UART_Init>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80014b2:	f7ff fb6d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200001f4 	.word	0x200001f4
 80014c0:	40004c00 	.word	0x40004c00

080014c4 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <MX_USART5_UART_Init+0x5c>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014d0:	22e1      	movs	r2, #225	@ 0xe1
 80014d2:	0252      	lsls	r2, r2, #9
 80014d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART5_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART5_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <MX_USART5_UART_Init+0x58>)
 8001508:	0018      	movs	r0, r3
 800150a:	f003 f8f5 	bl	80046f8 <HAL_UART_Init>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d001      	beq.n	8001516 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8001512:	f7ff fb3d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000027c 	.word	0x2000027c
 8001520:	40005000 	.word	0x40005000

08001524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b08d      	sub	sp, #52	@ 0x34
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	241c      	movs	r4, #28
 800152e:	193b      	adds	r3, r7, r4
 8001530:	0018      	movs	r0, r3
 8001532:	2314      	movs	r3, #20
 8001534:	001a      	movs	r2, r3
 8001536:	2100      	movs	r1, #0
 8001538:	f004 fc61 	bl	8005dfe <memset>
  if(uartHandle->Instance==USART2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a8b      	ldr	r2, [pc, #556]	@ (8001770 <HAL_UART_MspInit+0x24c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12a      	bne.n	800159c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001546:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800154a:	4b8a      	ldr	r3, [pc, #552]	@ (8001774 <HAL_UART_MspInit+0x250>)
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	0289      	lsls	r1, r1, #10
 8001550:	430a      	orrs	r2, r1
 8001552:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b87      	ldr	r3, [pc, #540]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001558:	4b86      	ldr	r3, [pc, #536]	@ (8001774 <HAL_UART_MspInit+0x250>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001560:	4b84      	ldr	r3, [pc, #528]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800156c:	0021      	movs	r1, r4
 800156e:	187b      	adds	r3, r7, r1
 8001570:	220c      	movs	r2, #12
 8001572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2202      	movs	r2, #2
 8001578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2203      	movs	r2, #3
 8001584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2204      	movs	r2, #4
 800158a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	187a      	adds	r2, r7, r1
 800158e:	23a0      	movs	r3, #160	@ 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f001 f8ef 	bl	8002778 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 800159a:	e0e4      	b.n	8001766 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a75      	ldr	r2, [pc, #468]	@ (8001778 <HAL_UART_MspInit+0x254>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d15b      	bne.n	800165e <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART4_CLK_ENABLE();
 80015a6:	4b73      	ldr	r3, [pc, #460]	@ (8001774 <HAL_UART_MspInit+0x250>)
 80015a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015aa:	4b72      	ldr	r3, [pc, #456]	@ (8001774 <HAL_UART_MspInit+0x250>)
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	0309      	lsls	r1, r1, #12
 80015b0:	430a      	orrs	r2, r1
 80015b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <HAL_UART_MspInit+0x250>)
 80015b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001774 <HAL_UART_MspInit+0x250>)
 80015ba:	2104      	movs	r1, #4
 80015bc:	430a      	orrs	r2, r1
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001774 <HAL_UART_MspInit+0x250>)
 80015c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c4:	2204      	movs	r2, #4
 80015c6:	4013      	ands	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015cc:	211c      	movs	r1, #28
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	22c0      	movs	r2, #192	@ 0xc0
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2202      	movs	r2, #2
 80015da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2203      	movs	r2, #3
 80015e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2206      	movs	r2, #6
 80015ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	4a62      	ldr	r2, [pc, #392]	@ (800177c <HAL_UART_MspInit+0x258>)
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f001 f8bf 	bl	8002778 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 80015fa:	4b61      	ldr	r3, [pc, #388]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 80015fc:	4a61      	ldr	r2, [pc, #388]	@ (8001784 <HAL_UART_MspInit+0x260>)
 80015fe:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8001600:	4b5f      	ldr	r3, [pc, #380]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001602:	220c      	movs	r2, #12
 8001604:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001606:	4b5e      	ldr	r3, [pc, #376]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b5c      	ldr	r3, [pc, #368]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b5b      	ldr	r3, [pc, #364]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001614:	2280      	movs	r2, #128	@ 0x80
 8001616:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001618:	4b59      	ldr	r3, [pc, #356]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161e:	4b58      	ldr	r3, [pc, #352]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8001624:	4b56      	ldr	r3, [pc, #344]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b55      	ldr	r3, [pc, #340]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8001630:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001632:	0018      	movs	r0, r3
 8001634:	f000 fe5e 	bl	80022f4 <HAL_DMA_Init>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 800163c:	f7ff faa8 	bl	8000b90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4f      	ldr	r2, [pc, #316]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001644:	675a      	str	r2, [r3, #116]	@ 0x74
 8001646:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <HAL_UART_MspInit+0x25c>)
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	200e      	movs	r0, #14
 8001652:	f000 fe1d 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001656:	200e      	movs	r0, #14
 8001658:	f000 fe2f 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 800165c:	e083      	b.n	8001766 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART5)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a49      	ldr	r2, [pc, #292]	@ (8001788 <HAL_UART_MspInit+0x264>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d000      	beq.n	800166a <HAL_UART_MspInit+0x146>
 8001668:	e07d      	b.n	8001766 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART5_CLK_ENABLE();
 800166a:	4b42      	ldr	r3, [pc, #264]	@ (8001774 <HAL_UART_MspInit+0x250>)
 800166c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0349      	lsls	r1, r1, #13
 8001674:	430a      	orrs	r2, r1
 8001676:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <HAL_UART_MspInit+0x250>)
 800167a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_UART_MspInit+0x250>)
 800167e:	2104      	movs	r1, #4
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001684:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	2204      	movs	r2, #4
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001690:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <HAL_UART_MspInit+0x250>)
 8001696:	2108      	movs	r1, #8
 8001698:	430a      	orrs	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <HAL_UART_MspInit+0x250>)
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	2208      	movs	r2, #8
 80016a2:	4013      	ands	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016a8:	211c      	movs	r1, #28
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	0152      	lsls	r2, r2, #5
 80016b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	000c      	movs	r4, r1
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	2202      	movs	r2, #2
 80016b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	2203      	movs	r2, #3
 80016c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	2202      	movs	r2, #2
 80016ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	4a2b      	ldr	r2, [pc, #172]	@ (800177c <HAL_UART_MspInit+0x258>)
 80016d0:	0019      	movs	r1, r3
 80016d2:	0010      	movs	r0, r2
 80016d4:	f001 f850 	bl	8002778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d8:	0021      	movs	r1, r4
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2204      	movs	r2, #4
 80016de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2202      	movs	r2, #2
 80016e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2203      	movs	r2, #3
 80016f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2206      	movs	r2, #6
 80016f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_UART_MspInit+0x268>)
 80016fc:	0019      	movs	r1, r3
 80016fe:	0010      	movs	r0, r2
 8001700:	f001 f83a 	bl	8002778 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel6;
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001706:	4a23      	ldr	r2, [pc, #140]	@ (8001794 <HAL_UART_MspInit+0x270>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 800170c:	220d      	movs	r2, #13
 800170e:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 800173c:	0018      	movs	r0, r3
 800173e:	f000 fdd9 	bl	80022f4 <HAL_DMA_Init>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001746:	f7ff fa23 	bl	8000b90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 800174e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_UART_MspInit+0x26c>)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	200e      	movs	r0, #14
 800175c:	f000 fd98 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001760:	200e      	movs	r0, #14
 8001762:	f000 fdaa 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b00d      	add	sp, #52	@ 0x34
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	40004400 	.word	0x40004400
 8001774:	40021000 	.word	0x40021000
 8001778:	40004c00 	.word	0x40004c00
 800177c:	50000800 	.word	0x50000800
 8001780:	20000304 	.word	0x20000304
 8001784:	4002001c 	.word	0x4002001c
 8001788:	40005000 	.word	0x40005000
 800178c:	50000c00 	.word	0x50000c00
 8001790:	2000034c 	.word	0x2000034c
 8001794:	4002006c 	.word	0x4002006c

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001798:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800179a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f7ff fc58 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopForever+0xe>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopForever+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80017c6:	f004 fb23 	bl	8005e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff f89f 	bl	800090c <main>

080017ce <LoopForever>:

LoopForever:
    b LoopForever
 80017ce:	e7fe      	b.n	80017ce <LoopForever>
   ldr   r0, =_estack
 80017d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017dc:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 80017e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017e4:	20000398 	.word	0x20000398

080017e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_COMP_IRQHandler>
	...

080017ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_Init+0x3c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_Init+0x3c>)
 80017fe:	2140      	movs	r1, #64	@ 0x40
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f811 	bl	800182c <HAL_InitTick>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d003      	beq.n	8001816 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e001      	b.n	800181a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001816:	f7ff fbad 	bl	8000f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_InitTick+0x5c>)
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	0019      	movs	r1, r3
 800183e:	23fa      	movs	r3, #250	@ 0xfa
 8001840:	0098      	lsls	r0, r3, #2
 8001842:	f7fe fc61 	bl	8000108 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	0019      	movs	r1, r3
 800184a:	0020      	movs	r0, r4
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fd41 	bl	80022da <HAL_SYSTICK_Config>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e00f      	b.n	8001880 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d80b      	bhi.n	800187e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	2301      	movs	r3, #1
 800186a:	425b      	negs	r3, r3
 800186c:	2200      	movs	r2, #0
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fd0e 	bl	8002290 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_InitTick+0x64>)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b003      	add	sp, #12
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000004 	.word	0x20000004
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	001a      	movs	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	18d2      	adds	r2, r2, r3
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_IncTick+0x20>)
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	20000394 	.word	0x20000394

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	20000394 	.word	0x20000394

080018cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e159      	b.n	8001b92 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2250      	movs	r2, #80	@ 0x50
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fe48 	bl	800058c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	2210      	movs	r2, #16
 8001902:	4013      	ands	r3, r2
 8001904:	2b10      	cmp	r3, #16
 8001906:	d005      	beq.n	8001914 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2204      	movs	r2, #4
 8001910:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001912:	d00b      	beq.n	800192c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	2210      	movs	r2, #16
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2250      	movs	r2, #80	@ 0x50
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e132      	b.n	8001b92 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001930:	4a9a      	ldr	r2, [pc, #616]	@ (8001b9c <HAL_ADC_Init+0x2d0>)
 8001932:	4013      	ands	r3, r2
 8001934:	2202      	movs	r2, #2
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	2b01      	cmp	r3, #1
 8001948:	d108      	bne.n	800195c <HAL_ADC_Init+0x90>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_Init+0x90>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_ADC_Init+0x92>
 800195c:	2300      	movs	r3, #0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d149      	bne.n	80019f6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	23c0      	movs	r3, #192	@ 0xc0
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	429a      	cmp	r2, r3
 800196c:	d00b      	beq.n	8001986 <HAL_ADC_Init+0xba>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	05db      	lsls	r3, r3, #23
 8001976:	429a      	cmp	r2, r3
 8001978:	d005      	beq.n	8001986 <HAL_ADC_Init+0xba>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	429a      	cmp	r2, r3
 8001984:	d111      	bne.n	80019aa <HAL_ADC_Init+0xde>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	0892      	lsrs	r2, r2, #2
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	e014      	b.n	80019d4 <HAL_ADC_Init+0x108>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	0892      	lsrs	r2, r2, #2
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b78      	ldr	r3, [pc, #480]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 80019c0:	4978      	ldr	r1, [pc, #480]	@ (8001ba4 <HAL_ADC_Init+0x2d8>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4b74      	ldr	r3, [pc, #464]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2118      	movs	r1, #24
 80019e0:	438a      	bics	r2, r1
 80019e2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80019f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b69      	ldr	r3, [pc, #420]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 80019fc:	496a      	ldr	r1, [pc, #424]	@ (8001ba8 <HAL_ADC_Init+0x2dc>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001a02:	4b67      	ldr	r3, [pc, #412]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0a:	065a      	lsls	r2, r3, #25
 8001a0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ba0 <HAL_ADC_Init+0x2d4>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	055b      	lsls	r3, r3, #21
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d108      	bne.n	8001a32 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2180      	movs	r1, #128	@ 0x80
 8001a2c:	0549      	lsls	r1, r1, #21
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	495b      	ldr	r1, [pc, #364]	@ (8001bac <HAL_ADC_Init+0x2e0>)
 8001a3e:	400a      	ands	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_Init+0x18c>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_Init+0x18e>
 8001a58:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a5a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2020      	movs	r0, #32
 8001a60:	5c1b      	ldrb	r3, [r3, r0]
 8001a62:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a64:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	202c      	movs	r0, #44	@ 0x2c
 8001a6a:	5c1b      	ldrb	r3, [r3, r0]
 8001a6c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a6e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a74:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001a7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a84:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a92:	23c2      	movs	r3, #194	@ 0xc2
 8001a94:	33ff      	adds	r3, #255	@ 0xff
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d00b      	beq.n	8001ab2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68d9      	ldr	r1, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2221      	movs	r2, #33	@ 0x21
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d11a      	bne.n	8001af2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2180      	movs	r1, #128	@ 0x80
 8001ad2:	0249      	lsls	r1, r1, #9
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	e00b      	b.n	8001af2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ade:	2220      	movs	r2, #32
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	2201      	movs	r2, #1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d11f      	bne.n	8001b3a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	492a      	ldr	r1, [pc, #168]	@ (8001bb0 <HAL_ADC_Init+0x2e4>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6919      	ldr	r1, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b18:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001b1e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	e00e      	b.n	8001b58 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d107      	bne.n	8001b58 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2107      	movs	r1, #7
 8001b64:	438a      	bics	r2, r1
 8001b66:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6959      	ldr	r1, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b84:	2203      	movs	r2, #3
 8001b86:	4393      	bics	r3, r2
 8001b88:	2201      	movs	r2, #1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	fffffefd 	.word	0xfffffefd
 8001ba0:	40012708 	.word	0x40012708
 8001ba4:	ffc3ffff 	.word	0xffc3ffff
 8001ba8:	fdffffff 	.word	0xfdffffff
 8001bac:	fffe0219 	.word	0xfffe0219
 8001bb0:	fffffc03 	.word	0xfffffc03

08001bb4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d138      	bne.n	8001c42 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2250      	movs	r2, #80	@ 0x50
 8001bd4:	5c9b      	ldrb	r3, [r3, r2]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Start+0x2a>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e038      	b.n	8001c50 <HAL_ADC_Start+0x9c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2250      	movs	r2, #80	@ 0x50
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d007      	beq.n	8001bfe <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001bee:	230f      	movs	r3, #15
 8001bf0:	18fc      	adds	r4, r7, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 f979 	bl	8001eec <ADC_Enable>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bfe:	230f      	movs	r3, #15
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d120      	bne.n	8001c4a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0c:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <HAL_ADC_Start+0xa4>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	0052      	lsls	r2, r2, #1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2250      	movs	r2, #80	@ 0x50
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	221c      	movs	r2, #28
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e003      	b.n	8001c4a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c42:	230f      	movs	r3, #15
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b005      	add	sp, #20
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	fffff0fe 	.word	0xfffff0fe

08001c5c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d102      	bne.n	8001c7c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c76:	2308      	movs	r3, #8
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e014      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10b      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8e:	2220      	movs	r2, #32
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2250      	movs	r2, #80	@ 0x50
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e072      	b.n	8001d88 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff fe07 	bl	80018b8 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cae:	e01f      	b.n	8001cf0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	d01c      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_ADC_PollForConversion+0x70>
 8001cbc:	f7ff fdfc 	bl	80018b8 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d211      	bcs.n	8001cf0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	2204      	movs	r2, #4
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2250      	movs	r2, #80	@ 0x50
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e04b      	b.n	8001d88 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0d9      	beq.n	8001cb0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	23c0      	movs	r3, #192	@ 0xc0
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4013      	ands	r3, r2
 8001d16:	d12e      	bne.n	8001d76 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d129      	bne.n	8001d76 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d122      	bne.n	8001d76 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d110      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	210c      	movs	r1, #12
 8001d48:	438a      	bics	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d50:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_ADC_PollForConversion+0x134>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	2201      	movs	r2, #1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d5c:	e00b      	b.n	8001d76 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	2220      	movs	r2, #32
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	2201      	movs	r2, #1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	fffffefe 	.word	0xfffffefe

08001d94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2250      	movs	r2, #80	@ 0x50
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x18>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e085      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x124>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2250      	movs	r2, #80	@ 0x50
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d00b      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	2220      	movs	r2, #32
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2250      	movs	r2, #80	@ 0x50
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e06f      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a38      	ldr	r2, [pc, #224]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x12c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d035      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	035b      	lsls	r3, r3, #13
 8001e06:	0b5a      	lsrs	r2, r3, #13
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	02db      	lsls	r3, r3, #11
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e22:	2180      	movs	r1, #128	@ 0x80
 8001e24:	0409      	lsls	r1, r1, #16
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f000 f8c6 	bl	8001fbc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d006      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e42:	2180      	movs	r1, #128	@ 0x80
 8001e44:	03c9      	lsls	r1, r1, #15
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	@ 0x80
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	4013      	ands	r3, r2
 8001e54:	d037      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	0449      	lsls	r1, r1, #17
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e02f      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	035b      	lsls	r3, r3, #13
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	43d9      	mvns	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	02db      	lsls	r3, r3, #11
 8001e86:	4013      	ands	r3, r2
 8001e88:	d005      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001e90:	4913      	ldr	r1, [pc, #76]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x134>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d005      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x138>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	025b      	lsls	r3, r3, #9
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d005      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_ADC_ConfigChannel+0x130>)
 8001ec0:	4909      	ldr	r1, [pc, #36]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x13c>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2250      	movs	r2, #80	@ 0x50
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	00001001 	.word	0x00001001
 8001edc:	40012708 	.word	0x40012708
 8001ee0:	ff7fffff 	.word	0xff7fffff
 8001ee4:	ffbfffff 	.word	0xffbfffff
 8001ee8:	feffffff 	.word	0xfeffffff

08001eec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2203      	movs	r2, #3
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <ADC_Enable+0x2c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <ADC_Enable+0x2c>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <ADC_Enable+0x2e>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d146      	bne.n	8001fac <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a24      	ldr	r2, [pc, #144]	@ (8001fb8 <ADC_Enable+0xcc>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2e:	2210      	movs	r2, #16
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e033      	b.n	8001fae <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f000 f830 	bl	8001fbc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff fcac 	bl	80018b8 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f64:	e01b      	b.n	8001f9e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f66:	f7ff fca7 	bl	80018b8 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b0a      	cmp	r3, #10
 8001f72:	d914      	bls.n	8001f9e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d00d      	beq.n	8001f9e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	2210      	movs	r2, #16
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	2201      	movs	r2, #1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d1dc      	bne.n	8001f66 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	80000017 	.word	0x80000017

08001fbc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <ADC_DelayMicroSecond+0x38>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	490b      	ldr	r1, [pc, #44]	@ (8001ff8 <ADC_DelayMicroSecond+0x3c>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe f89c 	bl	8000108 <__udivsi3>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4353      	muls	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001fda:	e002      	b.n	8001fe2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <ADC_DelayMicroSecond+0x20>
  }
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b004      	add	sp, #16
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	000f4240 	.word	0x000f4240

08001ffc <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002006:	2317      	movs	r3, #23
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2250      	movs	r2, #80	@ 0x50
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_ADCEx_Calibration_Start+0x28>
 8002020:	2302      	movs	r3, #2
 8002022:	e083      	b.n	800212c <HAL_ADCEx_Calibration_Start+0x130>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2250      	movs	r2, #80	@ 0x50
 8002028:	2101      	movs	r1, #1
 800202a:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2203      	movs	r2, #3
 8002034:	4013      	ands	r3, r2
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_ADCEx_Calibration_Start+0x50>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	4013      	ands	r3, r2
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_ADCEx_Calibration_Start+0x50>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_ADCEx_Calibration_Start+0x52>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d15b      	bne.n	800210a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	4a37      	ldr	r2, [pc, #220]	@ (8002134 <HAL_ADCEx_Calibration_Start+0x138>)
 8002058:	4013      	ands	r3, r2
 800205a:	2202      	movs	r2, #2
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2203      	movs	r2, #3
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2103      	movs	r1, #3
 800207a:	438a      	bics	r2, r1
 800207c:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	0609      	lsls	r1, r1, #24
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002090:	f7ff fc12 	bl	80018b8 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002098:	e01d      	b.n	80020d6 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800209a:	f7ff fc0d 	bl	80018b8 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b0a      	cmp	r3, #10
 80020a6:	d916      	bls.n	80020d6 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0fdb      	lsrs	r3, r3, #31
 80020b0:	07da      	lsls	r2, r3, #31
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d10d      	bne.n	80020d6 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	2212      	movs	r2, #18
 80020c0:	4393      	bics	r3, r2
 80020c2:	2210      	movs	r2, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2250      	movs	r2, #80	@ 0x50
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e02a      	b.n	800212c <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	0fdb      	lsrs	r3, r3, #31
 80020de:	07da      	lsls	r2, r3, #31
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d0d8      	beq.n	800209a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	2203      	movs	r2, #3
 80020fe:	4393      	bics	r3, r2
 8002100:	2201      	movs	r2, #1
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54
 8002108:	e009      	b.n	800211e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210e:	2220      	movs	r2, #32
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002116:	2317      	movs	r3, #23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2250      	movs	r2, #80	@ 0x50
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002126:	2317      	movs	r3, #23
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b006      	add	sp, #24
 8002132:	bd80      	pop	{r7, pc}
 8002134:	fffffefd 	.word	0xfffffefd

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	0002      	movs	r2, r0
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b7f      	cmp	r3, #127	@ 0x7f
 800214a:	d809      	bhi.n	8002160 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	001a      	movs	r2, r3
 8002152:	231f      	movs	r3, #31
 8002154:	401a      	ands	r2, r3
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__NVIC_EnableIRQ+0x30>)
 8002158:	2101      	movs	r1, #1
 800215a:	4091      	lsls	r1, r2
 800215c:	000a      	movs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
  }
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	0002      	movs	r2, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002180:	d828      	bhi.n	80021d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002182:	4a2f      	ldr	r2, [pc, #188]	@ (8002240 <__NVIC_SetPriority+0xd4>)
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	33c0      	adds	r3, #192	@ 0xc0
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	589b      	ldr	r3, [r3, r2]
 8002192:	1dfa      	adds	r2, r7, #7
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	0011      	movs	r1, r2
 8002198:	2203      	movs	r2, #3
 800219a:	400a      	ands	r2, r1
 800219c:	00d2      	lsls	r2, r2, #3
 800219e:	21ff      	movs	r1, #255	@ 0xff
 80021a0:	4091      	lsls	r1, r2
 80021a2:	000a      	movs	r2, r1
 80021a4:	43d2      	mvns	r2, r2
 80021a6:	401a      	ands	r2, r3
 80021a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	22ff      	movs	r2, #255	@ 0xff
 80021b0:	401a      	ands	r2, r3
 80021b2:	1dfb      	adds	r3, r7, #7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	0018      	movs	r0, r3
 80021b8:	2303      	movs	r3, #3
 80021ba:	4003      	ands	r3, r0
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021c0:	481f      	ldr	r0, [pc, #124]	@ (8002240 <__NVIC_SetPriority+0xd4>)
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	430a      	orrs	r2, r1
 80021cc:	33c0      	adds	r3, #192	@ 0xc0
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021d2:	e031      	b.n	8002238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <__NVIC_SetPriority+0xd8>)
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	0019      	movs	r1, r3
 80021dc:	230f      	movs	r3, #15
 80021de:	400b      	ands	r3, r1
 80021e0:	3b08      	subs	r3, #8
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3306      	adds	r3, #6
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	18d3      	adds	r3, r2, r3
 80021ea:	3304      	adds	r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1dfa      	adds	r2, r7, #7
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	0011      	movs	r1, r2
 80021f4:	2203      	movs	r2, #3
 80021f6:	400a      	ands	r2, r1
 80021f8:	00d2      	lsls	r2, r2, #3
 80021fa:	21ff      	movs	r1, #255	@ 0xff
 80021fc:	4091      	lsls	r1, r2
 80021fe:	000a      	movs	r2, r1
 8002200:	43d2      	mvns	r2, r2
 8002202:	401a      	ands	r2, r3
 8002204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	22ff      	movs	r2, #255	@ 0xff
 800220c:	401a      	ands	r2, r3
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	2303      	movs	r3, #3
 8002216:	4003      	ands	r3, r0
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800221c:	4809      	ldr	r0, [pc, #36]	@ (8002244 <__NVIC_SetPriority+0xd8>)
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	001c      	movs	r4, r3
 8002224:	230f      	movs	r3, #15
 8002226:	4023      	ands	r3, r4
 8002228:	3b08      	subs	r3, #8
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	430a      	orrs	r2, r1
 800222e:	3306      	adds	r3, #6
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	18c3      	adds	r3, r0, r3
 8002234:	3304      	adds	r3, #4
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b003      	add	sp, #12
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1e5a      	subs	r2, r3, #1
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	045b      	lsls	r3, r3, #17
 8002258:	429a      	cmp	r2, r3
 800225a:	d301      	bcc.n	8002260 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225c:	2301      	movs	r3, #1
 800225e:	e010      	b.n	8002282 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <SysTick_Config+0x44>)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	3a01      	subs	r2, #1
 8002266:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002268:	2301      	movs	r3, #1
 800226a:	425b      	negs	r3, r3
 800226c:	2103      	movs	r1, #3
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff ff7c 	bl	800216c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <SysTick_Config+0x44>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <SysTick_Config+0x44>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	210f      	movs	r1, #15
 800229c:	187b      	adds	r3, r7, r1
 800229e:	1c02      	adds	r2, r0, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	0011      	movs	r1, r2
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff ff5d 	bl	800216c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	0002      	movs	r2, r0
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ff33 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff ffaf 	bl	8002248 <SysTick_Config>
 80022ea:	0003      	movs	r3, r0
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e061      	b.n	80023ca <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a32      	ldr	r2, [pc, #200]	@ (80023d4 <HAL_DMA_Init+0xe0>)
 800230c:	4694      	mov	ip, r2
 800230e:	4463      	add	r3, ip
 8002310:	2114      	movs	r1, #20
 8002312:	0018      	movs	r0, r3
 8002314:	f7fd fef8 	bl	8000108 <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	009a      	lsls	r2, r3, #2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a2d      	ldr	r2, [pc, #180]	@ (80023d8 <HAL_DMA_Init+0xe4>)
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2225      	movs	r2, #37	@ 0x25
 800232a:	2102      	movs	r1, #2
 800232c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a28      	ldr	r2, [pc, #160]	@ (80023dc <HAL_DMA_Init+0xe8>)
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002346:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	01db      	lsls	r3, r3, #7
 800237c:	429a      	cmp	r2, r3
 800237e:	d018      	beq.n	80023b2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_DMA_Init+0xec>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	211c      	movs	r1, #28
 800238a:	400b      	ands	r3, r1
 800238c:	210f      	movs	r1, #15
 800238e:	4099      	lsls	r1, r3
 8002390:	000b      	movs	r3, r1
 8002392:	43d9      	mvns	r1, r3
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_DMA_Init+0xec>)
 8002396:	400a      	ands	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_DMA_Init+0xec>)
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	201c      	movs	r0, #28
 80023a8:	4003      	ands	r3, r0
 80023aa:	409a      	lsls	r2, r3
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_DMA_Init+0xec>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2225      	movs	r2, #37	@ 0x25
 80023bc:	2101      	movs	r1, #1
 80023be:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	@ 0x24
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b004      	add	sp, #16
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	bffdfff8 	.word	0xbffdfff8
 80023d8:	40020000 	.word	0x40020000
 80023dc:	ffff800f 	.word	0xffff800f
 80023e0:	400200a8 	.word	0x400200a8

080023e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2317      	movs	r3, #23
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2224      	movs	r2, #36	@ 0x24
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_DMA_Start_IT+0x24>
 8002404:	2302      	movs	r3, #2
 8002406:	e04f      	b.n	80024a8 <HAL_DMA_Start_IT+0xc4>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2224      	movs	r2, #36	@ 0x24
 800240c:	2101      	movs	r1, #1
 800240e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2225      	movs	r2, #37	@ 0x25
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d13a      	bne.n	8002492 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2225      	movs	r2, #37	@ 0x25
 8002420:	2102      	movs	r1, #2
 8002422:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	438a      	bics	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f96a 	bl	800271a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	210e      	movs	r1, #14
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00f      	b.n	8002480 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2104      	movs	r1, #4
 800246c:	438a      	bics	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	210a      	movs	r1, #10
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2101      	movs	r1, #1
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e007      	b.n	80024a2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2224      	movs	r2, #36	@ 0x24
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800249a:	2317      	movs	r3, #23
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	2202      	movs	r2, #2
 80024a0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80024a2:	2317      	movs	r3, #23
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	781b      	ldrb	r3, [r3, #0]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b006      	add	sp, #24
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2225      	movs	r2, #37	@ 0x25
 80024c4:	5c9b      	ldrb	r3, [r3, r2]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2224      	movs	r2, #36	@ 0x24
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e024      	b.n	8002528 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	210e      	movs	r1, #14
 80024ea:	438a      	bics	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	438a      	bics	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	221c      	movs	r2, #28
 8002504:	401a      	ands	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	2101      	movs	r1, #1
 800250c:	4091      	lsls	r1, r2
 800250e:	000a      	movs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2225      	movs	r2, #37	@ 0x25
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2224      	movs	r2, #36	@ 0x24
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

    return status;
 8002522:	230f      	movs	r3, #15
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b004      	add	sp, #16
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	210f      	movs	r1, #15
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2225      	movs	r2, #37	@ 0x25
 8002544:	5c9b      	ldrb	r3, [r3, r2]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d006      	beq.n	800255a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2204      	movs	r2, #4
 8002550:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e02a      	b.n	80025b0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	210e      	movs	r1, #14
 8002566:	438a      	bics	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	438a      	bics	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	221c      	movs	r2, #28
 8002580:	401a      	ands	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2101      	movs	r1, #1
 8002588:	4091      	lsls	r1, r2
 800258a:	000a      	movs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2225      	movs	r2, #37	@ 0x25
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	@ 0x24
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	0010      	movs	r0, r2
 80025ae:	4798      	blx	r3
    }
  }
  return status;
 80025b0:	230f      	movs	r3, #15
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	221c      	movs	r2, #28
 80025dc:	4013      	ands	r3, r2
 80025de:	2204      	movs	r2, #4
 80025e0:	409a      	lsls	r2, r3
 80025e2:	0013      	movs	r3, r2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	d026      	beq.n	8002638 <HAL_DMA_IRQHandler+0x7a>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2204      	movs	r2, #4
 80025ee:	4013      	ands	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	4013      	ands	r3, r2
 80025fc:	d107      	bne.n	800260e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2104      	movs	r1, #4
 800260a:	438a      	bics	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	221c      	movs	r2, #28
 8002614:	401a      	ands	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	2104      	movs	r1, #4
 800261c:	4091      	lsls	r1, r2
 800261e:	000a      	movs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	2b00      	cmp	r3, #0
 8002628:	d100      	bne.n	800262c <HAL_DMA_IRQHandler+0x6e>
 800262a:	e071      	b.n	8002710 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	0010      	movs	r0, r2
 8002634:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002636:	e06b      	b.n	8002710 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263c:	221c      	movs	r2, #28
 800263e:	4013      	ands	r3, r2
 8002640:	2202      	movs	r2, #2
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	d02d      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xea>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d029      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2220      	movs	r2, #32
 800265c:	4013      	ands	r3, r2
 800265e:	d10b      	bne.n	8002678 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	210a      	movs	r1, #10
 800266c:	438a      	bics	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2225      	movs	r2, #37	@ 0x25
 8002674:	2101      	movs	r1, #1
 8002676:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	221c      	movs	r2, #28
 800267e:	401a      	ands	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2102      	movs	r1, #2
 8002686:	4091      	lsls	r1, r2
 8002688:	000a      	movs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	@ 0x24
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d039      	beq.n	8002710 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	0010      	movs	r0, r2
 80026a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026a6:	e033      	b.n	8002710 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	221c      	movs	r2, #28
 80026ae:	4013      	ands	r3, r2
 80026b0:	2208      	movs	r2, #8
 80026b2:	409a      	lsls	r2, r3
 80026b4:	0013      	movs	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	d02a      	beq.n	8002712 <HAL_DMA_IRQHandler+0x154>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2208      	movs	r2, #8
 80026c0:	4013      	ands	r3, r2
 80026c2:	d026      	beq.n	8002712 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	210e      	movs	r1, #14
 80026d0:	438a      	bics	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	221c      	movs	r2, #28
 80026da:	401a      	ands	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	2101      	movs	r1, #1
 80026e2:	4091      	lsls	r1, r2
 80026e4:	000a      	movs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2225      	movs	r2, #37	@ 0x25
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2224      	movs	r2, #36	@ 0x24
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	0010      	movs	r0, r2
 800270e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46c0      	nop			@ (mov r8, r8)
}
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}

0800271a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	221c      	movs	r2, #28
 800272e:	401a      	ands	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2101      	movs	r1, #1
 8002736:	4091      	lsls	r1, r2
 8002738:	000a      	movs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b10      	cmp	r3, #16
 800274a:	d108      	bne.n	800275e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800275c:	e007      	b.n	800276e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	60da      	str	r2, [r3, #12]
}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800278e:	e155      	b.n	8002a3c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4091      	lsls	r1, r2
 800279a:	000a      	movs	r2, r1
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d100      	bne.n	80027a8 <HAL_GPIO_Init+0x30>
 80027a6:	e146      	b.n	8002a36 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2203      	movs	r2, #3
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d005      	beq.n	80027c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2203      	movs	r2, #3
 80027ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d130      	bne.n	8002822 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	409a      	lsls	r2, r3
 80027ce:	0013      	movs	r3, r2
 80027d0:	43da      	mvns	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	409a      	lsls	r2, r3
 80027e2:	0013      	movs	r3, r2
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f6:	2201      	movs	r2, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	2201      	movs	r2, #1
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
 8002814:	0013      	movs	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	4013      	ands	r3, r2
 800282a:	2b03      	cmp	r3, #3
 800282c:	d017      	beq.n	800285e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	409a      	lsls	r2, r3
 800283c:	0013      	movs	r3, r2
 800283e:	43da      	mvns	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	409a      	lsls	r2, r3
 8002850:	0013      	movs	r3, r2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2203      	movs	r2, #3
 8002864:	4013      	ands	r3, r2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d123      	bne.n	80028b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	58d3      	ldr	r3, [r2, r3]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2207      	movs	r2, #7
 800287c:	4013      	ands	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	409a      	lsls	r2, r3
 8002884:	0013      	movs	r3, r2
 8002886:	43da      	mvns	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2107      	movs	r1, #7
 8002896:	400b      	ands	r3, r1
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	6939      	ldr	r1, [r7, #16]
 80028b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	409a      	lsls	r2, r3
 80028c0:	0013      	movs	r3, r2
 80028c2:	43da      	mvns	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	401a      	ands	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	23c0      	movs	r3, #192	@ 0xc0
 80028ec:	029b      	lsls	r3, r3, #10
 80028ee:	4013      	ands	r3, r2
 80028f0:	d100      	bne.n	80028f4 <HAL_GPIO_Init+0x17c>
 80028f2:	e0a0      	b.n	8002a36 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f4:	4b57      	ldr	r3, [pc, #348]	@ (8002a54 <HAL_GPIO_Init+0x2dc>)
 80028f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f8:	4b56      	ldr	r3, [pc, #344]	@ (8002a54 <HAL_GPIO_Init+0x2dc>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002900:	4a55      	ldr	r2, [pc, #340]	@ (8002a58 <HAL_GPIO_Init+0x2e0>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	589b      	ldr	r3, [r3, r2]
 800290c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	409a      	lsls	r2, r3
 800291a:	0013      	movs	r3, r2
 800291c:	43da      	mvns	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	23a0      	movs	r3, #160	@ 0xa0
 8002928:	05db      	lsls	r3, r3, #23
 800292a:	429a      	cmp	r2, r3
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4a      	ldr	r2, [pc, #296]	@ (8002a5c <HAL_GPIO_Init+0x2e4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x1f2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a49      	ldr	r2, [pc, #292]	@ (8002a60 <HAL_GPIO_Init+0x2e8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x1ee>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a48      	ldr	r2, [pc, #288]	@ (8002a64 <HAL_GPIO_Init+0x2ec>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x1ea>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a47      	ldr	r2, [pc, #284]	@ (8002a68 <HAL_GPIO_Init+0x2f0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x1e6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a46      	ldr	r2, [pc, #280]	@ (8002a6c <HAL_GPIO_Init+0x2f4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x1e2>
 8002956:	2305      	movs	r3, #5
 8002958:	e00a      	b.n	8002970 <HAL_GPIO_Init+0x1f8>
 800295a:	2306      	movs	r3, #6
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x1f8>
 800295e:	2304      	movs	r3, #4
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x1f8>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x1f8>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x1f8>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x1f8>
 800296e:	2300      	movs	r3, #0
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	2103      	movs	r1, #3
 8002974:	400a      	ands	r2, r1
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002980:	4935      	ldr	r1, [pc, #212]	@ (8002a58 <HAL_GPIO_Init+0x2e0>)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298e:	4b38      	ldr	r3, [pc, #224]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43da      	mvns	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	035b      	lsls	r3, r3, #13
 80029a6:	4013      	ands	r3, r2
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	039b      	lsls	r3, r3, #14
 80029d0:	4013      	ands	r3, r2
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43da      	mvns	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	029b      	lsls	r3, r3, #10
 80029fa:	4013      	ands	r3, r2
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	2380      	movs	r3, #128	@ 0x80
 8002a22:	025b      	lsls	r3, r3, #9
 8002a24:	4013      	ands	r3, r2
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	40da      	lsrs	r2, r3
 8002a44:	1e13      	subs	r3, r2, #0
 8002a46:	d000      	beq.n	8002a4a <HAL_GPIO_Init+0x2d2>
 8002a48:	e6a2      	b.n	8002790 <HAL_GPIO_Init+0x18>
  }
}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b006      	add	sp, #24
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	50000400 	.word	0x50000400
 8002a60:	50000800 	.word	0x50000800
 8002a64:	50000c00 	.word	0x50000c00
 8002a68:	50001000 	.word	0x50001000
 8002a6c:	50001c00 	.word	0x50001c00
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	1cbb      	adds	r3, r7, #2
 8002a80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	1cba      	adds	r2, r7, #2
 8002a88:	8812      	ldrh	r2, [r2, #0]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a8e:	230f      	movs	r3, #15
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e003      	b.n	8002aa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a98:	230f      	movs	r3, #15
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	0008      	movs	r0, r1
 8002ab8:	0011      	movs	r1, r2
 8002aba:	1cbb      	adds	r3, r7, #2
 8002abc:	1c02      	adds	r2, r0, #0
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	1c7b      	adds	r3, r7, #1
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac6:	1c7b      	adds	r3, r7, #1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	1cbb      	adds	r3, r7, #2
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002ad6:	e003      	b.n	8002ae0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002ad8:	1cbb      	adds	r3, r7, #2
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0002      	movs	r2, r0
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002af4:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	1dba      	adds	r2, r7, #6
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	4013      	ands	r3, r2
 8002afe:	d008      	beq.n	8002b12 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b02:	1dba      	adds	r2, r7, #6
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fe f845 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f000 fbbf 	bl	80032b2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b34:	4bc9      	ldr	r3, [pc, #804]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	220c      	movs	r2, #12
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b3e:	4bc7      	ldr	r3, [pc, #796]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	025b      	lsls	r3, r3, #9
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d100      	bne.n	8002b56 <HAL_RCC_OscConfig+0x36>
 8002b54:	e07e      	b.n	8002c54 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d007      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d112      	bne.n	8002b88 <HAL_RCC_OscConfig+0x68>
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	025b      	lsls	r3, r3, #9
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4bbb      	ldr	r3, [pc, #748]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	4013      	ands	r3, r2
 8002b76:	d100      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5a>
 8002b78:	e06b      	b.n	8002c52 <HAL_RCC_OscConfig+0x132>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d167      	bne.n	8002c52 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f000 fb95 	bl	80032b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	2380      	movs	r3, #128	@ 0x80
 8002b8e:	025b      	lsls	r3, r3, #9
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x84>
 8002b94:	4bb1      	ldr	r3, [pc, #708]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4bb0      	ldr	r3, [pc, #704]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002b9a:	2180      	movs	r1, #128	@ 0x80
 8002b9c:	0249      	lsls	r1, r1, #9
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e027      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	23a0      	movs	r3, #160	@ 0xa0
 8002baa:	02db      	lsls	r3, r3, #11
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d10e      	bne.n	8002bce <HAL_RCC_OscConfig+0xae>
 8002bb0:	4baa      	ldr	r3, [pc, #680]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4ba9      	ldr	r3, [pc, #676]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	02c9      	lsls	r1, r1, #11
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	4ba7      	ldr	r3, [pc, #668]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4ba6      	ldr	r3, [pc, #664]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bc4:	2180      	movs	r1, #128	@ 0x80
 8002bc6:	0249      	lsls	r1, r1, #9
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e012      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bce:	4ba3      	ldr	r3, [pc, #652]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4ba2      	ldr	r3, [pc, #648]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bd4:	49a2      	ldr	r1, [pc, #648]	@ (8002e60 <HAL_RCC_OscConfig+0x340>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	4ba0      	ldr	r3, [pc, #640]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	025b      	lsls	r3, r3, #9
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b9b      	ldr	r3, [pc, #620]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002bee:	499d      	ldr	r1, [pc, #628]	@ (8002e64 <HAL_RCC_OscConfig+0x344>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fe5c 	bl	80018b8 <HAL_GetTick>
 8002c00:	0003      	movs	r3, r0
 8002c02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c04:	e009      	b.n	8002c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c06:	f7fe fe57 	bl	80018b8 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	@ 0x64
 8002c12:	d902      	bls.n	8002c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	f000 fb4c 	bl	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c1a:	4b90      	ldr	r3, [pc, #576]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	029b      	lsls	r3, r3, #10
 8002c22:	4013      	ands	r3, r2
 8002c24:	d0ef      	beq.n	8002c06 <HAL_RCC_OscConfig+0xe6>
 8002c26:	e015      	b.n	8002c54 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fe46 	bl	80018b8 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c32:	f7fe fe41 	bl	80018b8 <HAL_GetTick>
 8002c36:	0002      	movs	r2, r0
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b64      	cmp	r3, #100	@ 0x64
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e336      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c44:	4b85      	ldr	r3, [pc, #532]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x112>
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d100      	bne.n	8002c60 <HAL_RCC_OscConfig+0x140>
 8002c5e:	e099      	b.n	8002d94 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	2220      	movs	r2, #32
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b7a      	ldr	r3, [pc, #488]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002c74:	2120      	movs	r1, #32
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	4393      	bics	r3, r2
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d13e      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1ec>
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13b      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c94:	4b71      	ldr	r3, [pc, #452]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x188>
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e304      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a6e      	ldr	r2, [pc, #440]	@ (8002e68 <HAL_RCC_OscConfig+0x348>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	4b68      	ldr	r3, [pc, #416]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cbe:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2209      	movs	r2, #9
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	4b64      	ldr	r3, [pc, #400]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd0:	f000 fc42 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8002cd4:	0001      	movs	r1, r0
 8002cd6:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	220f      	movs	r2, #15
 8002cde:	4013      	ands	r3, r2
 8002ce0:	4a62      	ldr	r2, [pc, #392]	@ (8002e6c <HAL_RCC_OscConfig+0x34c>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	000a      	movs	r2, r1
 8002ce6:	40da      	lsrs	r2, r3
 8002ce8:	4b61      	ldr	r3, [pc, #388]	@ (8002e70 <HAL_RCC_OscConfig+0x350>)
 8002cea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002cec:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCC_OscConfig+0x354>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2513      	movs	r5, #19
 8002cf2:	197c      	adds	r4, r7, r5
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fe fd99 	bl	800182c <HAL_InitTick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002cfe:	197b      	adds	r3, r7, r5
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d046      	beq.n	8002d94 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002d06:	197b      	adds	r3, r7, r5
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	e2d2      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d027      	beq.n	8002d62 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d12:	4b52      	ldr	r3, [pc, #328]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2209      	movs	r2, #9
 8002d18:	4393      	bics	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fdc8 	bl	80018b8 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fdc3 	bl	80018b8 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e2b8      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d40:	4b46      	ldr	r3, [pc, #280]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2204      	movs	r2, #4
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f1      	beq.n	8002d2e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b44      	ldr	r3, [pc, #272]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a46      	ldr	r2, [pc, #280]	@ (8002e68 <HAL_RCC_OscConfig+0x348>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	021a      	lsls	r2, r3, #8
 8002d5a:	4b40      	ldr	r3, [pc, #256]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	e018      	b.n	8002d94 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b3e      	ldr	r3, [pc, #248]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b3d      	ldr	r3, [pc, #244]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fda3 	bl	80018b8 <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe fd9e 	bl	80018b8 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e293      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d8a:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4013      	ands	r3, r2
 8002d92:	d1f1      	bne.n	8002d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d100      	bne.n	8002da0 <HAL_RCC_OscConfig+0x280>
 8002d9e:	e0a2      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d140      	bne.n	8002e28 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x29e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e279      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e78 <HAL_RCC_OscConfig+0x358>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dcc:	4b23      	ldr	r3, [pc, #140]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd2:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	0a19      	lsrs	r1, r3, #8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	061a      	lsls	r2, r3, #24
 8002de0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	3301      	adds	r3, #1
 8002dee:	2280      	movs	r2, #128	@ 0x80
 8002df0:	0212      	lsls	r2, r2, #8
 8002df2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	491b      	ldr	r1, [pc, #108]	@ (8002e6c <HAL_RCC_OscConfig+0x34c>)
 8002e00:	5ccb      	ldrb	r3, [r1, r3]
 8002e02:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <HAL_RCC_OscConfig+0x350>)
 8002e06:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002e08:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <HAL_RCC_OscConfig+0x354>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2513      	movs	r5, #19
 8002e0e:	197c      	adds	r4, r7, r5
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7fe fd0b 	bl	800182c <HAL_InitTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e1a:	197b      	adds	r3, r7, r5
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d061      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002e22:	197b      	adds	r3, r7, r5
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	e244      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d040      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <HAL_RCC_OscConfig+0x33c>)
 8002e36:	2180      	movs	r1, #128	@ 0x80
 8002e38:	0049      	lsls	r1, r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fd3b 	bl	80018b8 <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e46:	e019      	b.n	8002e7c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e48:	f7fe fd36 	bl	80018b8 <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d912      	bls.n	8002e7c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e22b      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	fffeffff 	.word	0xfffeffff
 8002e64:	fffbffff 	.word	0xfffbffff
 8002e68:	ffffe0ff 	.word	0xffffe0ff
 8002e6c:	08005e70 	.word	0x08005e70
 8002e70:	20000004 	.word	0x20000004
 8002e74:	20000008 	.word	0x20000008
 8002e78:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e7c:	4bca      	ldr	r3, [pc, #808]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d0df      	beq.n	8002e48 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e88:	4bc7      	ldr	r3, [pc, #796]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4ac7      	ldr	r2, [pc, #796]	@ (80031ac <HAL_RCC_OscConfig+0x68c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e96:	4bc4      	ldr	r3, [pc, #784]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9c:	4bc2      	ldr	r3, [pc, #776]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	0a19      	lsrs	r1, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	061a      	lsls	r2, r3, #24
 8002eaa:	4bbf      	ldr	r3, [pc, #764]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	e019      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eb2:	4bbd      	ldr	r3, [pc, #756]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4bbc      	ldr	r3, [pc, #752]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002eb8:	49bd      	ldr	r1, [pc, #756]	@ (80031b0 <HAL_RCC_OscConfig+0x690>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fcfb 	bl	80018b8 <HAL_GetTick>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fcf6 	bl	80018b8 <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1eb      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002eda:	4bb3      	ldr	r3, [pc, #716]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2208      	movs	r2, #8
 8002eec:	4013      	ands	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d019      	beq.n	8002f2c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef8:	4bab      	ldr	r3, [pc, #684]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002efa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002efc:	4baa      	ldr	r3, [pc, #680]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	430a      	orrs	r2, r1
 8002f02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fe fcd8 	bl	80018b8 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fcd3 	bl	80018b8 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1c8      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f20:	4ba1      	ldr	r3, [pc, #644]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	2202      	movs	r2, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d0f1      	beq.n	8002f0e <HAL_RCC_OscConfig+0x3ee>
 8002f2a:	e018      	b.n	8002f5e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2c:	4b9e      	ldr	r3, [pc, #632]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f30:	4b9d      	ldr	r3, [pc, #628]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	438a      	bics	r2, r1
 8002f36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fcbe 	bl	80018b8 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fcb9 	bl	80018b8 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1ae      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f54:	4b94      	ldr	r3, [pc, #592]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d1f1      	bne.n	8002f42 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	d100      	bne.n	8002f6a <HAL_RCC_OscConfig+0x44a>
 8002f68:	e0ae      	b.n	80030c8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2023      	movs	r0, #35	@ 0x23
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b8d      	ldr	r3, [pc, #564]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	055b      	lsls	r3, r3, #21
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b8a      	ldr	r3, [pc, #552]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f82:	4b89      	ldr	r3, [pc, #548]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002f84:	2180      	movs	r1, #128	@ 0x80
 8002f86:	0549      	lsls	r1, r1, #21
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002f8c:	183b      	adds	r3, r7, r0
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <HAL_RCC_OscConfig+0x694>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b85      	ldr	r3, [pc, #532]	@ (80031b4 <HAL_RCC_OscConfig+0x694>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b84      	ldr	r3, [pc, #528]	@ (80031b4 <HAL_RCC_OscConfig+0x694>)
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	0049      	lsls	r1, r1, #1
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fac:	f7fe fc84 	bl	80018b8 <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fe fc7f 	bl	80018b8 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	@ 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e174      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80031b4 <HAL_RCC_OscConfig+0x694>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4d0>
 8002fe0:	4b71      	ldr	r3, [pc, #452]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002fe2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fe4:	4b70      	ldr	r3, [pc, #448]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002fe6:	2180      	movs	r1, #128	@ 0x80
 8002fe8:	0049      	lsls	r1, r1, #1
 8002fea:	430a      	orrs	r2, r1
 8002fec:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fee:	e031      	b.n	8003054 <HAL_RCC_OscConfig+0x534>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x4f2>
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002ffa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8002ffe:	496c      	ldr	r1, [pc, #432]	@ (80031b0 <HAL_RCC_OscConfig+0x690>)
 8003000:	400a      	ands	r2, r1
 8003002:	651a      	str	r2, [r3, #80]	@ 0x50
 8003004:	4b68      	ldr	r3, [pc, #416]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003006:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003008:	4b67      	ldr	r3, [pc, #412]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800300a:	496b      	ldr	r1, [pc, #428]	@ (80031b8 <HAL_RCC_OscConfig+0x698>)
 800300c:	400a      	ands	r2, r1
 800300e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003010:	e020      	b.n	8003054 <HAL_RCC_OscConfig+0x534>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	23a0      	movs	r3, #160	@ 0xa0
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	429a      	cmp	r2, r3
 800301c:	d10e      	bne.n	800303c <HAL_RCC_OscConfig+0x51c>
 800301e:	4b62      	ldr	r3, [pc, #392]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003022:	4b61      	ldr	r3, [pc, #388]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003024:	2180      	movs	r1, #128	@ 0x80
 8003026:	00c9      	lsls	r1, r1, #3
 8003028:	430a      	orrs	r2, r1
 800302a:	651a      	str	r2, [r3, #80]	@ 0x50
 800302c:	4b5e      	ldr	r3, [pc, #376]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800302e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003030:	4b5d      	ldr	r3, [pc, #372]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0049      	lsls	r1, r1, #1
 8003036:	430a      	orrs	r2, r1
 8003038:	651a      	str	r2, [r3, #80]	@ 0x50
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x534>
 800303c:	4b5a      	ldr	r3, [pc, #360]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800303e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003040:	4b59      	ldr	r3, [pc, #356]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003042:	495b      	ldr	r1, [pc, #364]	@ (80031b0 <HAL_RCC_OscConfig+0x690>)
 8003044:	400a      	ands	r2, r1
 8003046:	651a      	str	r2, [r3, #80]	@ 0x50
 8003048:	4b57      	ldr	r3, [pc, #348]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800304a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800304c:	4b56      	ldr	r3, [pc, #344]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800304e:	495a      	ldr	r1, [pc, #360]	@ (80031b8 <HAL_RCC_OscConfig+0x698>)
 8003050:	400a      	ands	r2, r1
 8003052:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fe fc2c 	bl	80018b8 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003064:	e009      	b.n	800307a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe fc27 	bl	80018b8 <HAL_GetTick>
 800306a:	0002      	movs	r2, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_RCC_OscConfig+0x69c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e11b      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307a:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800307c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d0ef      	beq.n	8003066 <HAL_RCC_OscConfig+0x546>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fe fc16 	bl	80018b8 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fc11 	bl	80018b8 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	4a47      	ldr	r2, [pc, #284]	@ (80031bc <HAL_RCC_OscConfig+0x69c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e105      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b2:	2323      	movs	r3, #35	@ 0x23
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b3a      	ldr	r3, [pc, #232]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030c2:	493f      	ldr	r1, [pc, #252]	@ (80031c0 <HAL_RCC_OscConfig+0x6a0>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2220      	movs	r2, #32
 80030ce:	4013      	ands	r3, r2
 80030d0:	d049      	beq.n	8003166 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d026      	beq.n	8003128 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80030da:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	4b32      	ldr	r3, [pc, #200]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ea:	4b2f      	ldr	r3, [pc, #188]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80030f2:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <HAL_RCC_OscConfig+0x6a4>)
 80030f4:	6a1a      	ldr	r2, [r3, #32]
 80030f6:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <HAL_RCC_OscConfig+0x6a4>)
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	0189      	lsls	r1, r1, #6
 80030fc:	430a      	orrs	r2, r1
 80030fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fbda 	bl	80018b8 <HAL_GetTick>
 8003104:	0003      	movs	r3, r0
 8003106:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310a:	f7fe fbd5 	bl	80018b8 <HAL_GetTick>
 800310e:	0002      	movs	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0ca      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800311c:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2202      	movs	r2, #2
 8003122:	4013      	ands	r3, r2
 8003124:	d0f1      	beq.n	800310a <HAL_RCC_OscConfig+0x5ea>
 8003126:	e01e      	b.n	8003166 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003128:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <HAL_RCC_OscConfig+0x6a4>)
 8003136:	6a1a      	ldr	r2, [r3, #32]
 8003138:	4b22      	ldr	r3, [pc, #136]	@ (80031c4 <HAL_RCC_OscConfig+0x6a4>)
 800313a:	4923      	ldr	r1, [pc, #140]	@ (80031c8 <HAL_RCC_OscConfig+0x6a8>)
 800313c:	400a      	ands	r2, r1
 800313e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fbba 	bl	80018b8 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800314a:	f7fe fbb5 	bl	80018b8 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0aa      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2202      	movs	r2, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d1f1      	bne.n	800314a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d100      	bne.n	8003170 <HAL_RCC_OscConfig+0x650>
 800316e:	e09f      	b.n	80032b0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d100      	bne.n	8003178 <HAL_RCC_OscConfig+0x658>
 8003176:	e078      	b.n	800326a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	2b02      	cmp	r3, #2
 800317e:	d159      	bne.n	8003234 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_RCC_OscConfig+0x688>)
 8003186:	4911      	ldr	r1, [pc, #68]	@ (80031cc <HAL_RCC_OscConfig+0x6ac>)
 8003188:	400a      	ands	r2, r1
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fb94 	bl	80018b8 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe fb8f 	bl	80018b8 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d915      	bls.n	80031d0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e084      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	ffff1fff 	.word	0xffff1fff
 80031b0:	fffffeff 	.word	0xfffffeff
 80031b4:	40007000 	.word	0x40007000
 80031b8:	fffffbff 	.word	0xfffffbff
 80031bc:	00001388 	.word	0x00001388
 80031c0:	efffffff 	.word	0xefffffff
 80031c4:	40010000 	.word	0x40010000
 80031c8:	ffffdfff 	.word	0xffffdfff
 80031cc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031d0:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	049b      	lsls	r3, r3, #18
 80031d8:	4013      	ands	r3, r2
 80031da:	d1dc      	bne.n	8003196 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031dc:	4b37      	ldr	r3, [pc, #220]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a37      	ldr	r2, [pc, #220]	@ (80032c0 <HAL_RCC_OscConfig+0x7a0>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f4:	431a      	orrs	r2, r3
 80031f6:	4b31      	ldr	r3, [pc, #196]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b2e      	ldr	r3, [pc, #184]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 8003202:	2180      	movs	r1, #128	@ 0x80
 8003204:	0449      	lsls	r1, r1, #17
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fb55 	bl	80018b8 <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fb50 	bl	80018b8 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e045      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003226:	4b25      	ldr	r3, [pc, #148]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	049b      	lsls	r3, r3, #18
 800322e:	4013      	ands	r3, r2
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x6f4>
 8003232:	e03d      	b.n	80032b0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 800323a:	4922      	ldr	r1, [pc, #136]	@ (80032c4 <HAL_RCC_OscConfig+0x7a4>)
 800323c:	400a      	ands	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fb3a 	bl	80018b8 <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fb35 	bl	80018b8 <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e02a      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	049b      	lsls	r3, r3, #18
 8003264:	4013      	ands	r3, r2
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x72a>
 8003268:	e022      	b.n	80032b0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e01d      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_OscConfig+0x79c>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	025b      	lsls	r3, r3, #9
 8003282:	401a      	ands	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d10f      	bne.n	80032ac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	23f0      	movs	r3, #240	@ 0xf0
 8003290:	039b      	lsls	r3, r3, #14
 8003292:	401a      	ands	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	23c0      	movs	r3, #192	@ 0xc0
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b00a      	add	sp, #40	@ 0x28
 80032b8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	40021000 	.word	0x40021000
 80032c0:	ff02ffff 	.word	0xff02ffff
 80032c4:	feffffff 	.word	0xfeffffff

080032c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e128      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b96      	ldr	r3, [pc, #600]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d91e      	bls.n	8003328 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b93      	ldr	r3, [pc, #588]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4393      	bics	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	4b90      	ldr	r3, [pc, #576]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fadc 	bl	80018b8 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003304:	e009      	b.n	800331a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003306:	f7fe fad7 	bl	80018b8 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	4a8a      	ldr	r2, [pc, #552]	@ (800353c <HAL_RCC_ClockConfig+0x274>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e109      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b87      	ldr	r3, [pc, #540]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2202      	movs	r2, #2
 800332e:	4013      	ands	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003332:	4b83      	ldr	r3, [pc, #524]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	22f0      	movs	r2, #240	@ 0xf0
 8003338:	4393      	bics	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4b7f      	ldr	r3, [pc, #508]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 8003342:	430a      	orrs	r2, r1
 8003344:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4013      	ands	r3, r2
 800334e:	d100      	bne.n	8003352 <HAL_RCC_ClockConfig+0x8a>
 8003350:	e089      	b.n	8003466 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800335a:	4b79      	ldr	r3, [pc, #484]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	4013      	ands	r3, r2
 8003364:	d120      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0e1      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003372:	4b73      	ldr	r3, [pc, #460]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	049b      	lsls	r3, r3, #18
 800337a:	4013      	ands	r3, r2
 800337c:	d114      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0d5      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d106      	bne.n	8003398 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338a:	4b6d      	ldr	r3, [pc, #436]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2204      	movs	r2, #4
 8003390:	4013      	ands	r3, r2
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0ca      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003398:	4b69      	ldr	r3, [pc, #420]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0c2      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a8:	4b65      	ldr	r3, [pc, #404]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2203      	movs	r2, #3
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4b62      	ldr	r3, [pc, #392]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fe fa7c 	bl	80018b8 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d111      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033cc:	e009      	b.n	80033e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ce:	f7fe fa73 	bl	80018b8 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	4a58      	ldr	r2, [pc, #352]	@ (800353c <HAL_RCC_ClockConfig+0x274>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0a5      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e2:	4b57      	ldr	r3, [pc, #348]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	220c      	movs	r2, #12
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d1ef      	bne.n	80033ce <HAL_RCC_ClockConfig+0x106>
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d111      	bne.n	800341c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f8:	e009      	b.n	800340e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fa:	f7fe fa5d 	bl	80018b8 <HAL_GetTick>
 80033fe:	0002      	movs	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	4a4d      	ldr	r2, [pc, #308]	@ (800353c <HAL_RCC_ClockConfig+0x274>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e08f      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340e:	4b4c      	ldr	r3, [pc, #304]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	220c      	movs	r2, #12
 8003414:	4013      	ands	r3, r2
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d1ef      	bne.n	80033fa <HAL_RCC_ClockConfig+0x132>
 800341a:	e024      	b.n	8003466 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d11b      	bne.n	800345c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003424:	e009      	b.n	800343a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003426:	f7fe fa47 	bl	80018b8 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	4a42      	ldr	r2, [pc, #264]	@ (800353c <HAL_RCC_ClockConfig+0x274>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e079      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800343a:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	220c      	movs	r2, #12
 8003440:	4013      	ands	r3, r2
 8003442:	2b04      	cmp	r3, #4
 8003444:	d1ef      	bne.n	8003426 <HAL_RCC_ClockConfig+0x15e>
 8003446:	e00e      	b.n	8003466 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fe fa36 	bl	80018b8 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	4a3a      	ldr	r2, [pc, #232]	@ (800353c <HAL_RCC_ClockConfig+0x274>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e068      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800345c:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	220c      	movs	r2, #12
 8003462:	4013      	ands	r3, r2
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d21e      	bcs.n	80034b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003474:	4b30      	ldr	r3, [pc, #192]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	4393      	bics	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003486:	f7fe fa17 	bl	80018b8 <HAL_GetTick>
 800348a:	0003      	movs	r3, r0
 800348c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	e009      	b.n	80034a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fe fa12 	bl	80018b8 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	4a28      	ldr	r2, [pc, #160]	@ (800353c <HAL_RCC_ClockConfig+0x274>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e044      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_ClockConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d1ee      	bne.n	8003490 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034bc:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a20      	ldr	r2, [pc, #128]	@ (8003544 <HAL_RCC_ClockConfig+0x27c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2208      	movs	r2, #8
 80034d6:	4013      	ands	r3, r2
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034da:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <HAL_RCC_ClockConfig+0x280>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	00da      	lsls	r2, r3, #3
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f0:	f000 f832 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80034f4:	0001      	movs	r1, r0
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_RCC_ClockConfig+0x278>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	220f      	movs	r2, #15
 80034fe:	4013      	ands	r3, r2
 8003500:	4a12      	ldr	r2, [pc, #72]	@ (800354c <HAL_RCC_ClockConfig+0x284>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	000a      	movs	r2, r1
 8003506:	40da      	lsrs	r2, r3
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_ClockConfig+0x288>)
 800350a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_ClockConfig+0x28c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	250b      	movs	r5, #11
 8003512:	197c      	adds	r4, r7, r5
 8003514:	0018      	movs	r0, r3
 8003516:	f7fe f989 	bl	800182c <HAL_InitTick>
 800351a:	0003      	movs	r3, r0
 800351c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800351e:	197b      	adds	r3, r7, r5
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003526:	197b      	adds	r3, r7, r5
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	e000      	b.n	800352e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bdb0      	pop	{r4, r5, r7, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	40022000 	.word	0x40022000
 800353c:	00001388 	.word	0x00001388
 8003540:	40021000 	.word	0x40021000
 8003544:	fffff8ff 	.word	0xfffff8ff
 8003548:	ffffc7ff 	.word	0xffffc7ff
 800354c:	08005e70 	.word	0x08005e70
 8003550:	20000004 	.word	0x20000004
 8003554:	20000008 	.word	0x20000008

08003558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800355e:	4b3c      	ldr	r3, [pc, #240]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	220c      	movs	r2, #12
 8003568:	4013      	ands	r3, r2
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d013      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x3e>
 800356e:	d85c      	bhi.n	800362a <HAL_RCC_GetSysClockFreq+0xd2>
 8003570:	2b04      	cmp	r3, #4
 8003572:	d002      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x22>
 8003574:	2b08      	cmp	r3, #8
 8003576:	d00b      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x38>
 8003578:	e057      	b.n	800362a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800357a:	4b35      	ldr	r3, [pc, #212]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2210      	movs	r2, #16
 8003580:	4013      	ands	r3, r2
 8003582:	d002      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003584:	4b33      	ldr	r3, [pc, #204]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003586:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003588:	e05d      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800358a:	4b33      	ldr	r3, [pc, #204]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x100>)
 800358c:	613b      	str	r3, [r7, #16]
      break;
 800358e:	e05a      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b32      	ldr	r3, [pc, #200]	@ (800365c <HAL_RCC_GetSysClockFreq+0x104>)
 8003592:	613b      	str	r3, [r7, #16]
      break;
 8003594:	e057      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	220f      	movs	r2, #15
 800359c:	4013      	ands	r3, r2
 800359e:	4a30      	ldr	r2, [pc, #192]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	0d9b      	lsrs	r3, r3, #22
 80035a8:	2203      	movs	r2, #3
 80035aa:	4013      	ands	r3, r2
 80035ac:	3301      	adds	r3, #1
 80035ae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b0:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	4013      	ands	r3, r2
 80035ba:	d00f      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	000a      	movs	r2, r1
 80035c0:	0152      	lsls	r2, r2, #5
 80035c2:	1a52      	subs	r2, r2, r1
 80035c4:	0193      	lsls	r3, r2, #6
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	185b      	adds	r3, r3, r1
 80035cc:	025b      	lsls	r3, r3, #9
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fc fd99 	bl	8000108 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e023      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80035dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2210      	movs	r2, #16
 80035e2:	4013      	ands	r3, r2
 80035e4:	d00f      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	000a      	movs	r2, r1
 80035ea:	0152      	lsls	r2, r2, #5
 80035ec:	1a52      	subs	r2, r2, r1
 80035ee:	0193      	lsls	r3, r2, #6
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	185b      	adds	r3, r3, r1
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fc fd84 	bl	8000108 <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e00e      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	000a      	movs	r2, r1
 800360a:	0152      	lsls	r2, r2, #5
 800360c:	1a52      	subs	r2, r2, r1
 800360e:	0193      	lsls	r3, r2, #6
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	185b      	adds	r3, r3, r1
 8003616:	029b      	lsls	r3, r3, #10
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	0018      	movs	r0, r3
 800361c:	f7fc fd74 	bl	8000108 <__udivsi3>
 8003620:	0003      	movs	r3, r0
 8003622:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
      break;
 8003628:	e00d      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800362a:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0b5b      	lsrs	r3, r3, #13
 8003630:	2207      	movs	r2, #7
 8003632:	4013      	ands	r3, r2
 8003634:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	0212      	lsls	r2, r2, #8
 800363e:	409a      	lsls	r2, r3
 8003640:	0013      	movs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
      break;
 8003644:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003646:	693b      	ldr	r3, [r7, #16]
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b006      	add	sp, #24
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	003d0900 	.word	0x003d0900
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200
 8003660:	08005e88 	.word	0x08005e88

08003664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b02      	ldr	r3, [pc, #8]	@ (8003674 <HAL_RCC_GetHCLKFreq+0x10>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800367c:	f7ff fff2 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003680:	0001      	movs	r1, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	2207      	movs	r2, #7
 800368a:	4013      	ands	r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	40d9      	lsrs	r1, r3
 8003692:	000b      	movs	r3, r1
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	40021000 	.word	0x40021000
 80036a0:	08005e80 	.word	0x08005e80

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036a8:	f7ff ffdc 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 80036ac:	0001      	movs	r1, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	40d9      	lsrs	r1, r3
 80036be:	000b      	movs	r3, r1
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08005e80 	.word	0x08005e80

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80036d8:	2317      	movs	r3, #23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	4013      	ands	r3, r2
 80036e8:	d106      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	4013      	ands	r3, r2
 80036f4:	d100      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80036f6:	e104      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f8:	4bb9      	ldr	r3, [pc, #740]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	055b      	lsls	r3, r3, #21
 8003700:	4013      	ands	r3, r2
 8003702:	d10a      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4bb6      	ldr	r3, [pc, #728]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003708:	4bb5      	ldr	r3, [pc, #724]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	0549      	lsls	r1, r1, #21
 800370e:	430a      	orrs	r2, r1
 8003710:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003712:	2317      	movs	r3, #23
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	4bb2      	ldr	r3, [pc, #712]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4013      	ands	r3, r2
 8003724:	d11a      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003726:	4baf      	ldr	r3, [pc, #700]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4bae      	ldr	r3, [pc, #696]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	0049      	lsls	r1, r1, #1
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003734:	f7fe f8c0 	bl	80018b8 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fe f8bb 	bl	80018b8 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	@ 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e143      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4ba4      	ldr	r3, [pc, #656]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d0f0      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800375c:	4ba0      	ldr	r3, [pc, #640]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	23c0      	movs	r3, #192	@ 0xc0
 8003762:	039b      	lsls	r3, r3, #14
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	23c0      	movs	r3, #192	@ 0xc0
 800376e:	039b      	lsls	r3, r3, #14
 8003770:	4013      	ands	r3, r2
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	23c0      	movs	r3, #192	@ 0xc0
 800377e:	039b      	lsls	r3, r3, #14
 8003780:	4013      	ands	r3, r2
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	429a      	cmp	r2, r3
 8003786:	d013      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	23c0      	movs	r3, #192	@ 0xc0
 800378e:	029b      	lsls	r3, r3, #10
 8003790:	401a      	ands	r2, r3
 8003792:	23c0      	movs	r3, #192	@ 0xc0
 8003794:	029b      	lsls	r3, r3, #10
 8003796:	429a      	cmp	r2, r3
 8003798:	d10a      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800379a:	4b91      	ldr	r3, [pc, #580]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	401a      	ands	r2, r3
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	029b      	lsls	r3, r3, #10
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d101      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e113      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80037b0:	4b8b      	ldr	r3, [pc, #556]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037b4:	23c0      	movs	r3, #192	@ 0xc0
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d049      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	23c0      	movs	r3, #192	@ 0xc0
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	4013      	ands	r3, r2
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d004      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	4013      	ands	r3, r2
 80037da:	d10d      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	23c0      	movs	r3, #192	@ 0xc0
 80037e2:	029b      	lsls	r3, r3, #10
 80037e4:	4013      	ands	r3, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d034      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	d02e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80037f8:	4b79      	ldr	r3, [pc, #484]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fc:	4a7a      	ldr	r2, [pc, #488]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80037fe:	4013      	ands	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003802:	4b77      	ldr	r3, [pc, #476]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003806:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	0309      	lsls	r1, r1, #12
 800380c:	430a      	orrs	r2, r1
 800380e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003810:	4b73      	ldr	r3, [pc, #460]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003814:	4b72      	ldr	r3, [pc, #456]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003816:	4975      	ldr	r1, [pc, #468]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003818:	400a      	ands	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800381c:	4b70      	ldr	r3, [pc, #448]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d014      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe f844 	bl	80018b8 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003834:	e009      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe f83f 	bl	80018b8 <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	4a6b      	ldr	r2, [pc, #428]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0c6      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800384a:	4b65      	ldr	r3, [pc, #404]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800384c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d0ef      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4013      	ands	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	23c0      	movs	r3, #192	@ 0xc0
 8003868:	029b      	lsls	r3, r3, #10
 800386a:	401a      	ands	r2, r3
 800386c:	23c0      	movs	r3, #192	@ 0xc0
 800386e:	029b      	lsls	r3, r3, #10
 8003870:	429a      	cmp	r2, r3
 8003872:	d10c      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003874:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5e      	ldr	r2, [pc, #376]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800387a:	4013      	ands	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	23c0      	movs	r3, #192	@ 0xc0
 8003884:	039b      	lsls	r3, r3, #14
 8003886:	401a      	ands	r2, r3
 8003888:	4b55      	ldr	r3, [pc, #340]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	4b54      	ldr	r3, [pc, #336]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003890:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	23c0      	movs	r3, #192	@ 0xc0
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	401a      	ands	r2, r3
 800389c:	4b50      	ldr	r3, [pc, #320]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2220      	movs	r2, #32
 80038a8:	4013      	ands	r3, r2
 80038aa:	d01f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	23c0      	movs	r3, #192	@ 0xc0
 80038b2:	029b      	lsls	r3, r3, #10
 80038b4:	401a      	ands	r2, r3
 80038b6:	23c0      	movs	r3, #192	@ 0xc0
 80038b8:	029b      	lsls	r3, r3, #10
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80038be:	4b48      	ldr	r3, [pc, #288]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	23c0      	movs	r3, #192	@ 0xc0
 80038ce:	039b      	lsls	r3, r3, #14
 80038d0:	401a      	ands	r2, r3
 80038d2:	4b43      	ldr	r3, [pc, #268]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038da:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	23c0      	movs	r3, #192	@ 0xc0
 80038e2:	029b      	lsls	r3, r3, #10
 80038e4:	401a      	ands	r2, r3
 80038e6:	4b3e      	ldr	r3, [pc, #248]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ec:	2317      	movs	r3, #23
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b3a      	ldr	r3, [pc, #232]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fa:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038fc:	493e      	ldr	r1, [pc, #248]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80038fe:	400a      	ands	r2, r1
 8003900:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800390c:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800390e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003910:	2203      	movs	r2, #3
 8003912:	4393      	bics	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800391c:	430a      	orrs	r2, r1
 800391e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	220c      	movs	r2, #12
 8003930:	4393      	bics	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	4b29      	ldr	r3, [pc, #164]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800393a:	430a      	orrs	r2, r1
 800393c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2204      	movs	r2, #4
 8003944:	4013      	ands	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003948:	4b25      	ldr	r3, [pc, #148]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800394a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394c:	4a2b      	ldr	r2, [pc, #172]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003958:	430a      	orrs	r2, r1
 800395a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2208      	movs	r2, #8
 8003962:	4013      	ands	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003976:	430a      	orrs	r2, r1
 8003978:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	2380      	movs	r3, #128	@ 0x80
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003986:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003996:	430a      	orrs	r2, r1
 8003998:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2240      	movs	r2, #64	@ 0x40
 80039a0:	4013      	ands	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a4:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a8:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039b4:	430a      	orrs	r2, r1
 80039b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	4013      	ands	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039c2:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	4a10      	ldr	r2, [pc, #64]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039d2:	430a      	orrs	r2, r1
 80039d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b006      	add	sp, #24
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40007000 	.word	0x40007000
 80039e8:	fffcffff 	.word	0xfffcffff
 80039ec:	fff7ffff 	.word	0xfff7ffff
 80039f0:	00001388 	.word	0x00001388
 80039f4:	ffcfffff 	.word	0xffcfffff
 80039f8:	efffffff 	.word	0xefffffff
 80039fc:	fffff3ff 	.word	0xfffff3ff
 8003a00:	ffffcfff 	.word	0xffffcfff
 8003a04:	fbffffff 	.word	0xfbffffff
 8003a08:	fff3ffff 	.word	0xfff3ffff

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e032      	b.n	8003a84 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2239      	movs	r2, #57	@ 0x39
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2238      	movs	r2, #56	@ 0x38
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7fd fc4b 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2239      	movs	r2, #57	@ 0x39
 8003a3e:	2102      	movs	r1, #2
 8003a40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	0010      	movs	r0, r2
 8003a4e:	f000 fbcf 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	223e      	movs	r2, #62	@ 0x3e
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	223a      	movs	r2, #58	@ 0x3a
 8003a5e:	2101      	movs	r1, #1
 8003a60:	5499      	strb	r1, [r3, r2]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	223b      	movs	r2, #59	@ 0x3b
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	223c      	movs	r2, #60	@ 0x3c
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	223d      	movs	r2, #61	@ 0x3d
 8003a76:	2101      	movs	r1, #1
 8003a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2239      	movs	r2, #57	@ 0x39
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2239      	movs	r2, #57	@ 0x39
 8003a98:	5c9b      	ldrb	r3, [r3, r2]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e03b      	b.n	8003b1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2239      	movs	r2, #57	@ 0x39
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	05db      	lsls	r3, r3, #23
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIM_Base_Start_IT+0x5a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <HAL_TIM_Base_Start_IT+0x98>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIM_Base_Start_IT+0x5a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIM_Base_Start_IT+0x5a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d111      	bne.n	8003b0a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2207      	movs	r2, #7
 8003aee:	4013      	ands	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d010      	beq.n	8003b1a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b08:	e007      	b.n	8003b1a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40010800 	.word	0x40010800
 8003b2c:	40011400 	.word	0x40011400

08003b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e032      	b.n	8003ba8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2239      	movs	r2, #57	@ 0x39
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d107      	bne.n	8003b5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2238      	movs	r2, #56	@ 0x38
 8003b52:	2100      	movs	r1, #0
 8003b54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 f829 	bl	8003bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2239      	movs	r2, #57	@ 0x39
 8003b62:	2102      	movs	r1, #2
 8003b64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	0019      	movs	r1, r3
 8003b70:	0010      	movs	r0, r2
 8003b72:	f000 fb3d 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	223e      	movs	r2, #62	@ 0x3e
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	223a      	movs	r2, #58	@ 0x3a
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	223b      	movs	r2, #59	@ 0x3b
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223c      	movs	r2, #60	@ 0x3c
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	223d      	movs	r2, #61	@ 0x3d
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2239      	movs	r2, #57	@ 0x39
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d108      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x22>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	223a      	movs	r2, #58	@ 0x3a
 8003bd4:	5c9b      	ldrb	r3, [r3, r2]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	1e5a      	subs	r2, r3, #1
 8003bdc:	4193      	sbcs	r3, r2
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e01f      	b.n	8003c22 <HAL_TIM_PWM_Start+0x62>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d108      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x3a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	223b      	movs	r2, #59	@ 0x3b
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	1e5a      	subs	r2, r3, #1
 8003bf4:	4193      	sbcs	r3, r2
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e013      	b.n	8003c22 <HAL_TIM_PWM_Start+0x62>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d108      	bne.n	8003c12 <HAL_TIM_PWM_Start+0x52>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	223c      	movs	r2, #60	@ 0x3c
 8003c04:	5c9b      	ldrb	r3, [r3, r2]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	1e5a      	subs	r2, r3, #1
 8003c0c:	4193      	sbcs	r3, r2
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	e007      	b.n	8003c22 <HAL_TIM_PWM_Start+0x62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	223d      	movs	r2, #61	@ 0x3d
 8003c16:	5c9b      	ldrb	r3, [r3, r2]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	4193      	sbcs	r3, r2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e052      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x7a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	223a      	movs	r2, #58	@ 0x3a
 8003c34:	2102      	movs	r1, #2
 8003c36:	5499      	strb	r1, [r3, r2]
 8003c38:	e013      	b.n	8003c62 <HAL_TIM_PWM_Start+0xa2>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x8a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	223b      	movs	r2, #59	@ 0x3b
 8003c44:	2102      	movs	r1, #2
 8003c46:	5499      	strb	r1, [r3, r2]
 8003c48:	e00b      	b.n	8003c62 <HAL_TIM_PWM_Start+0xa2>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x9a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	223c      	movs	r2, #60	@ 0x3c
 8003c54:	2102      	movs	r1, #2
 8003c56:	5499      	strb	r1, [r3, r2]
 8003c58:	e003      	b.n	8003c62 <HAL_TIM_PWM_Start+0xa2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223d      	movs	r2, #61	@ 0x3d
 8003c5e:	2102      	movs	r1, #2
 8003c60:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fcc2 	bl	80045f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	@ 0x80
 8003c76:	05db      	lsls	r3, r3, #23
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIM_PWM_Start+0xda>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_TIM_PWM_Start+0x118>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_PWM_Start+0xda>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <HAL_TIM_PWM_Start+0x11c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_PWM_Start+0xda>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <HAL_TIM_PWM_Start+0x120>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d111      	bne.n	8003cbe <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d010      	beq.n	8003cce <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	e007      	b.n	8003cce <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40010800 	.word	0x40010800
 8003ce0:	40011400 	.word	0x40011400

08003ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	4013      	ands	r3, r2
 8003d02:	d021      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d01d      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2203      	movs	r2, #3
 8003d12:	4252      	negs	r2, r2
 8003d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2203      	movs	r2, #3
 8003d24:	4013      	ands	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fa48 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e007      	b.n	8003d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 fa3b 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 fa47 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2204      	movs	r2, #4
 8003d54:	4013      	ands	r3, r2
 8003d56:	d01e      	beq.n	8003d96 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	4252      	negs	r2, r2
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	23c0      	movs	r3, #192	@ 0xc0
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fa21 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8003d7e:	e007      	b.n	8003d90 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 fa14 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 fa20 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d021      	beq.n	8003de2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2208      	movs	r2, #8
 8003da2:	4013      	ands	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2209      	movs	r2, #9
 8003dac:	4252      	negs	r2, r2
 8003dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2204      	movs	r2, #4
 8003db4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 f9fb 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f9ee 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 f9fa 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2210      	movs	r2, #16
 8003de6:	4013      	ands	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2210      	movs	r2, #16
 8003dee:	4013      	ands	r3, r2
 8003df0:	d01e      	beq.n	8003e30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2211      	movs	r2, #17
 8003df8:	4252      	negs	r2, r2
 8003dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2208      	movs	r2, #8
 8003e00:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	23c0      	movs	r3, #192	@ 0xc0
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f9d4 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e007      	b.n	8003e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 f9c7 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f9d3 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2201      	movs	r2, #1
 8003e34:	4013      	ands	r3, r2
 8003e36:	d00c      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d008      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2202      	movs	r2, #2
 8003e46:	4252      	negs	r2, r2
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7fc fd01 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2240      	movs	r2, #64	@ 0x40
 8003e56:	4013      	ands	r3, r2
 8003e58:	d00c      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2240      	movs	r2, #64	@ 0x40
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d008      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2241      	movs	r2, #65	@ 0x41
 8003e68:	4252      	negs	r2, r2
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f9b6 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	2317      	movs	r3, #23
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2238      	movs	r2, #56	@ 0x38
 8003e94:	5c9b      	ldrb	r3, [r3, r2]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0ad      	b.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2238      	movs	r2, #56	@ 0x38
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d100      	bne.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x32>
 8003eac:	e076      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	d900      	bls.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003eb4:	e095      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d04e      	beq.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0xde>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d900      	bls.n	8003ec4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003ec2:	e08e      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d021      	beq.n	8003f14 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003ed0:	e087      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 f9ec 	bl	80042b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2108      	movs	r1, #8
 8003eec:	430a      	orrs	r2, r1
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2104      	movs	r1, #4
 8003efc:	438a      	bics	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	619a      	str	r2, [r3, #24]
      break;
 8003f12:	e06b      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 fa07 	bl	8004330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2180      	movs	r1, #128	@ 0x80
 8003f2e:	0109      	lsls	r1, r1, #4
 8003f30:	430a      	orrs	r2, r1
 8003f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4931      	ldr	r1, [pc, #196]	@ (8004004 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6999      	ldr	r1, [r3, #24]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	619a      	str	r2, [r3, #24]
      break;
 8003f58:	e048      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fa26 	bl	80043b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2108      	movs	r1, #8
 8003f74:	430a      	orrs	r2, r1
 8003f76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2104      	movs	r1, #4
 8003f84:	438a      	bics	r2, r1
 8003f86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69d9      	ldr	r1, [r3, #28]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	61da      	str	r2, [r3, #28]
      break;
 8003f9a:	e027      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 fa45 	bl	8004434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2180      	movs	r1, #128	@ 0x80
 8003fb6:	0109      	lsls	r1, r1, #4
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	490f      	ldr	r1, [pc, #60]	@ (8004004 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003fc8:	400a      	ands	r2, r1
 8003fca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69d9      	ldr	r1, [r3, #28]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	021a      	lsls	r2, r3, #8
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	61da      	str	r2, [r3, #28]
      break;
 8003fe0:	e004      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003fe2:	2317      	movs	r3, #23
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
      break;
 8003fea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2238      	movs	r2, #56	@ 0x38
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	5499      	strb	r1, [r3, r2]

  return status;
 8003ff4:	2317      	movs	r3, #23
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	781b      	ldrb	r3, [r3, #0]
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b006      	add	sp, #24
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	fffffbff 	.word	0xfffffbff

08004008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	230f      	movs	r3, #15
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2238      	movs	r2, #56	@ 0x38
 800401e:	5c9b      	ldrb	r3, [r3, r2]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIM_ConfigClockSource+0x20>
 8004024:	2302      	movs	r3, #2
 8004026:	e0bc      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x19a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2238      	movs	r2, #56	@ 0x38
 800402c:	2101      	movs	r1, #1
 800402e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2239      	movs	r2, #57	@ 0x39
 8004034:	2102      	movs	r1, #2
 8004036:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2277      	movs	r2, #119	@ 0x77
 8004044:	4393      	bics	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a58      	ldr	r2, [pc, #352]	@ (80041ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800404c:	4013      	ands	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	0192      	lsls	r2, r2, #6
 8004060:	4293      	cmp	r3, r2
 8004062:	d040      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xde>
 8004064:	2280      	movs	r2, #128	@ 0x80
 8004066:	0192      	lsls	r2, r2, #6
 8004068:	4293      	cmp	r3, r2
 800406a:	d900      	bls.n	800406e <HAL_TIM_ConfigClockSource+0x66>
 800406c:	e088      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 800406e:	2280      	movs	r2, #128	@ 0x80
 8004070:	0152      	lsls	r2, r2, #5
 8004072:	4293      	cmp	r3, r2
 8004074:	d100      	bne.n	8004078 <HAL_TIM_ConfigClockSource+0x70>
 8004076:	e088      	b.n	800418a <HAL_TIM_ConfigClockSource+0x182>
 8004078:	2280      	movs	r2, #128	@ 0x80
 800407a:	0152      	lsls	r2, r2, #5
 800407c:	4293      	cmp	r3, r2
 800407e:	d900      	bls.n	8004082 <HAL_TIM_ConfigClockSource+0x7a>
 8004080:	e07e      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 8004082:	2b70      	cmp	r3, #112	@ 0x70
 8004084:	d018      	beq.n	80040b8 <HAL_TIM_ConfigClockSource+0xb0>
 8004086:	d900      	bls.n	800408a <HAL_TIM_ConfigClockSource+0x82>
 8004088:	e07a      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 800408a:	2b60      	cmp	r3, #96	@ 0x60
 800408c:	d04f      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x126>
 800408e:	d900      	bls.n	8004092 <HAL_TIM_ConfigClockSource+0x8a>
 8004090:	e076      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 8004092:	2b50      	cmp	r3, #80	@ 0x50
 8004094:	d03b      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x106>
 8004096:	d900      	bls.n	800409a <HAL_TIM_ConfigClockSource+0x92>
 8004098:	e072      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 800409a:	2b40      	cmp	r3, #64	@ 0x40
 800409c:	d057      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x146>
 800409e:	d900      	bls.n	80040a2 <HAL_TIM_ConfigClockSource+0x9a>
 80040a0:	e06e      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 80040a2:	2b30      	cmp	r3, #48	@ 0x30
 80040a4:	d063      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x166>
 80040a6:	d86b      	bhi.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d060      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x166>
 80040ac:	d868      	bhi.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d05d      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x166>
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d05b      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x166>
 80040b6:	e063      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	f000 fa74 	bl	80045b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2277      	movs	r2, #119	@ 0x77
 80040d8:	4313      	orrs	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
      break;
 80040e4:	e052      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f6:	f000 fa5d 	bl	80045b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2180      	movs	r1, #128	@ 0x80
 8004106:	01c9      	lsls	r1, r1, #7
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
      break;
 800410c:	e03e      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800411a:	001a      	movs	r2, r3
 800411c:	f000 f9d0 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2150      	movs	r1, #80	@ 0x50
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fa2a 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 800412c:	e02e      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800413a:	001a      	movs	r2, r3
 800413c:	f000 f9ee 	bl	800451c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2160      	movs	r1, #96	@ 0x60
 8004146:	0018      	movs	r0, r3
 8004148:	f000 fa1a 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 800414c:	e01e      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415a:	001a      	movs	r2, r3
 800415c:	f000 f9b0 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2140      	movs	r1, #64	@ 0x40
 8004166:	0018      	movs	r0, r3
 8004168:	f000 fa0a 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 800416c:	e00e      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0019      	movs	r1, r3
 8004178:	0010      	movs	r0, r2
 800417a:	f000 fa01 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 800417e:	e005      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004180:	230f      	movs	r3, #15
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
      break;
 8004188:	e000      	b.n	800418c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800418a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2239      	movs	r2, #57	@ 0x39
 8004190:	2101      	movs	r1, #1
 8004192:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2238      	movs	r2, #56	@ 0x38
 8004198:	2100      	movs	r1, #0
 800419a:	5499      	strb	r1, [r3, r2]

  return status;
 800419c:	230f      	movs	r3, #15
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	781b      	ldrb	r3, [r3, #0]
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b004      	add	sp, #16
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	ffff00ff 	.word	0xffff00ff

080041b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b8:	46c0      	nop			@ (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c8:	46c0      	nop			@ (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d8:	46c0      	nop			@ (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	2380      	movs	r3, #128	@ 0x80
 8004204:	05db      	lsls	r3, r3, #23
 8004206:	429a      	cmp	r2, r3
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0x32>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a26      	ldr	r2, [pc, #152]	@ (80042a8 <TIM_Base_SetConfig+0xb8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0x32>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a25      	ldr	r2, [pc, #148]	@ (80042ac <TIM_Base_SetConfig+0xbc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0x32>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a24      	ldr	r2, [pc, #144]	@ (80042b0 <TIM_Base_SetConfig+0xc0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2270      	movs	r2, #112	@ 0x70
 8004226:	4393      	bics	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	05db      	lsls	r3, r3, #23
 800423a:	429a      	cmp	r2, r3
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0x66>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a19      	ldr	r2, [pc, #100]	@ (80042a8 <TIM_Base_SetConfig+0xb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0x66>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a18      	ldr	r2, [pc, #96]	@ (80042ac <TIM_Base_SetConfig+0xbc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0x66>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a17      	ldr	r2, [pc, #92]	@ (80042b0 <TIM_Base_SetConfig+0xc0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a16      	ldr	r2, [pc, #88]	@ (80042b4 <TIM_Base_SetConfig+0xc4>)
 800425a:	4013      	ands	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2280      	movs	r2, #128	@ 0x80
 800426c:	4393      	bics	r3, r2
 800426e:	001a      	movs	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2204      	movs	r2, #4
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40010800 	.word	0x40010800
 80042b0:	40011400 	.word	0x40011400
 80042b4:	fffffcff 	.word	0xfffffcff

080042b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4393      	bics	r3, r2
 80042d0:	001a      	movs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2270      	movs	r2, #112	@ 0x70
 80042e6:	4393      	bics	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2203      	movs	r2, #3
 80042ee:	4393      	bics	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2202      	movs	r2, #2
 8004300:	4393      	bics	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	621a      	str	r2, [r3, #32]
}
 8004328:	46c0      	nop			@ (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b006      	add	sp, #24
 800432e:	bd80      	pop	{r7, pc}

08004330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	2210      	movs	r2, #16
 8004346:	4393      	bics	r3, r2
 8004348:	001a      	movs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <TIM_OC2_SetConfig+0x7c>)
 800435e:	4013      	ands	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a12      	ldr	r2, [pc, #72]	@ (80043b0 <TIM_OC2_SetConfig+0x80>)
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2220      	movs	r2, #32
 800437a:	4393      	bics	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	46c0      	nop			@ (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	ffff8fff 	.word	0xffff8fff
 80043b0:	fffffcff 	.word	0xfffffcff

080043b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	4a18      	ldr	r2, [pc, #96]	@ (800442c <TIM_OC3_SetConfig+0x78>)
 80043ca:	401a      	ands	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2270      	movs	r2, #112	@ 0x70
 80043e0:	4393      	bics	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2203      	movs	r2, #3
 80043e8:	4393      	bics	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <TIM_OC3_SetConfig+0x7c>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b006      	add	sp, #24
 800442a:	bd80      	pop	{r7, pc}
 800442c:	fffffeff 	.word	0xfffffeff
 8004430:	fffffdff 	.word	0xfffffdff

08004434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a19      	ldr	r2, [pc, #100]	@ (80044b0 <TIM_OC4_SetConfig+0x7c>)
 800444a:	401a      	ands	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a15      	ldr	r2, [pc, #84]	@ (80044b4 <TIM_OC4_SetConfig+0x80>)
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a14      	ldr	r2, [pc, #80]	@ (80044b8 <TIM_OC4_SetConfig+0x84>)
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4a10      	ldr	r2, [pc, #64]	@ (80044bc <TIM_OC4_SetConfig+0x88>)
 800447c:	4013      	ands	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	ffffefff 	.word	0xffffefff
 80044b4:	ffff8fff 	.word	0xffff8fff
 80044b8:	fffffcff 	.word	0xfffffcff
 80044bc:	ffffdfff 	.word	0xffffdfff

080044c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	2201      	movs	r2, #1
 80044d8:	4393      	bics	r3, r2
 80044da:	001a      	movs	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	22f0      	movs	r2, #240	@ 0xf0
 80044ea:	4393      	bics	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	220a      	movs	r2, #10
 80044fc:	4393      	bics	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b006      	add	sp, #24
 800451a:	bd80      	pop	{r7, pc}

0800451c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	2210      	movs	r2, #16
 8004534:	4393      	bics	r3, r2
 8004536:	001a      	movs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4a0d      	ldr	r2, [pc, #52]	@ (800457c <TIM_TI2_ConfigInputStage+0x60>)
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	22a0      	movs	r2, #160	@ 0xa0
 8004558:	4393      	bics	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b006      	add	sp, #24
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	ffff0fff 	.word	0xffff0fff

08004580 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2270      	movs	r2, #112	@ 0x70
 8004594:	4393      	bics	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	2207      	movs	r2, #7
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b004      	add	sp, #16
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4a09      	ldr	r2, [pc, #36]	@ (80045f0 <TIM_ETR_SetConfig+0x3c>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b006      	add	sp, #24
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	ffff00ff 	.word	0xffff00ff

080045f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	221f      	movs	r2, #31
 8004604:	4013      	ands	r3, r2
 8004606:	2201      	movs	r2, #1
 8004608:	409a      	lsls	r2, r3
 800460a:	0013      	movs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	43d2      	mvns	r2, r2
 8004616:	401a      	ands	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	211f      	movs	r1, #31
 8004624:	400b      	ands	r3, r1
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4099      	lsls	r1, r3
 800462a:	000b      	movs	r3, r1
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b006      	add	sp, #24
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2238      	movs	r2, #56	@ 0x38
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e047      	b.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2238      	movs	r2, #56	@ 0x38
 8004658:	2101      	movs	r1, #1
 800465a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2239      	movs	r2, #57	@ 0x39
 8004660:	2102      	movs	r1, #2
 8004662:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2270      	movs	r2, #112	@ 0x70
 8004678:	4393      	bics	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	05db      	lsls	r3, r3, #23
 8004696:	429a      	cmp	r2, r3
 8004698:	d00e      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a11      	ldr	r2, [pc, #68]	@ (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a10      	ldr	r2, [pc, #64]	@ (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10c      	bne.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2280      	movs	r2, #128	@ 0x80
 80046bc:	4393      	bics	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2239      	movs	r2, #57	@ 0x39
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2238      	movs	r2, #56	@ 0x38
 80046de:	2100      	movs	r1, #0
 80046e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	0018      	movs	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b004      	add	sp, #16
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40010800 	.word	0x40010800
 80046f4:	40011400 	.word	0x40011400

080046f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e044      	b.n	8004794 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2278      	movs	r2, #120	@ 0x78
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	0018      	movs	r0, r3
 800471e:	f7fc ff01 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2224      	movs	r2, #36	@ 0x24
 8004726:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 feec 	bl	8005520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fc4a 	bl	8004fe4 <UART_SetConfig>
 8004750:	0003      	movs	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e01c      	b.n	8004794 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	490d      	ldr	r1, [pc, #52]	@ (800479c <HAL_UART_Init+0xa4>)
 8004766:	400a      	ands	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	212a      	movs	r1, #42	@ 0x2a
 8004776:	438a      	bics	r2, r1
 8004778:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	430a      	orrs	r2, r1
 8004788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 ff7b 	bl	8005688 <UART_CheckIdleState>
 8004792:	0003      	movs	r3, r0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}
 800479c:	ffffb7ff 	.word	0xffffb7ff

080047a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	@ 0x28
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	1dbb      	adds	r3, r7, #6
 80047ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d000      	beq.n	80047ba <HAL_UART_Transmit+0x1a>
 80047b8:	e08c      	b.n	80048d4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_UART_Transmit+0x28>
 80047c0:	1dbb      	adds	r3, r7, #6
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e084      	b.n	80048d6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	015b      	lsls	r3, r3, #5
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d109      	bne.n	80047ec <HAL_UART_Transmit+0x4c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4013      	ands	r3, r2
 80047e6:	d001      	beq.n	80047ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e074      	b.n	80048d6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2284      	movs	r2, #132	@ 0x84
 80047f0:	2100      	movs	r1, #0
 80047f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2221      	movs	r2, #33	@ 0x21
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047fa:	f7fd f85d 	bl	80018b8 <HAL_GetTick>
 80047fe:	0003      	movs	r3, r0
 8004800:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1dba      	adds	r2, r7, #6
 8004806:	2150      	movs	r1, #80	@ 0x50
 8004808:	8812      	ldrh	r2, [r2, #0]
 800480a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1dba      	adds	r2, r7, #6
 8004810:	2152      	movs	r1, #82	@ 0x52
 8004812:	8812      	ldrh	r2, [r2, #0]
 8004814:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	2380      	movs	r3, #128	@ 0x80
 800481c:	015b      	lsls	r3, r3, #5
 800481e:	429a      	cmp	r2, r3
 8004820:	d108      	bne.n	8004834 <HAL_UART_Transmit+0x94>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e003      	b.n	800483c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800483c:	e02f      	b.n	800489e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	0013      	movs	r3, r2
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	@ 0x80
 800484c:	f000 ffc4 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8004850:	1e03      	subs	r3, r0, #0
 8004852:	d004      	beq.n	800485e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e03b      	b.n	80048d6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	001a      	movs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	05d2      	lsls	r2, r2, #23
 8004870:	0dd2      	lsrs	r2, r2, #23
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3302      	adds	r3, #2
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e007      	b.n	800488c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3301      	adds	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2252      	movs	r2, #82	@ 0x52
 8004890:	5a9b      	ldrh	r3, [r3, r2]
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b299      	uxth	r1, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2252      	movs	r2, #82	@ 0x52
 800489c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2252      	movs	r2, #82	@ 0x52
 80048a2:	5a9b      	ldrh	r3, [r3, r2]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1c9      	bne.n	800483e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	0013      	movs	r3, r2
 80048b4:	2200      	movs	r2, #0
 80048b6:	2140      	movs	r1, #64	@ 0x40
 80048b8:	f000 ff8e 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 80048bc:	1e03      	subs	r3, r0, #0
 80048be:	d004      	beq.n	80048ca <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e005      	b.n	80048d6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	0018      	movs	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	b008      	add	sp, #32
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	1dbb      	adds	r3, r7, #6
 80048ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2280      	movs	r2, #128	@ 0x80
 80048f2:	589b      	ldr	r3, [r3, r2]
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d14a      	bne.n	800498e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_UART_Receive_DMA+0x26>
 80048fe:	1dbb      	adds	r3, r7, #6
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e042      	b.n	8004990 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	015b      	lsls	r3, r3, #5
 8004912:	429a      	cmp	r2, r3
 8004914:	d109      	bne.n	800492a <HAL_UART_Receive_DMA+0x4a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2201      	movs	r2, #1
 8004922:	4013      	ands	r3, r2
 8004924:	d001      	beq.n	800492a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e032      	b.n	8004990 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <HAL_UART_Receive_DMA+0xb8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d020      	beq.n	800497c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	2380      	movs	r3, #128	@ 0x80
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	4013      	ands	r3, r2
 8004946:	d019      	beq.n	800497c <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004948:	f3ef 8310 	mrs	r3, PRIMASK
 800494c:	613b      	str	r3, [r7, #16]
  return(result);
 800494e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	2301      	movs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f383 8810 	msr	PRIMASK, r3
}
 800495c:	46c0      	nop			@ (mov r8, r8)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2180      	movs	r1, #128	@ 0x80
 800496a:	04c9      	lsls	r1, r1, #19
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f383 8810 	msr	PRIMASK, r3
}
 800497a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800497c:	1dbb      	adds	r3, r7, #6
 800497e:	881a      	ldrh	r2, [r3, #0]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	0018      	movs	r0, r3
 8004986:	f000 ff97 	bl	80058b8 <UART_Start_Receive_DMA>
 800498a:	0003      	movs	r3, r0
 800498c:	e000      	b.n	8004990 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800498e:	2302      	movs	r3, #2
  }
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b008      	add	sp, #32
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40004800 	.word	0x40004800

0800499c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b0ab      	sub	sp, #172	@ 0xac
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	22a4      	movs	r2, #164	@ 0xa4
 80049ac:	18b9      	adds	r1, r7, r2
 80049ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	20a0      	movs	r0, #160	@ 0xa0
 80049b8:	1839      	adds	r1, r7, r0
 80049ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	219c      	movs	r1, #156	@ 0x9c
 80049c4:	1879      	adds	r1, r7, r1
 80049c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049c8:	0011      	movs	r1, r2
 80049ca:	18bb      	adds	r3, r7, r2
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a99      	ldr	r2, [pc, #612]	@ (8004c34 <HAL_UART_IRQHandler+0x298>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	2298      	movs	r2, #152	@ 0x98
 80049d4:	18bc      	adds	r4, r7, r2
 80049d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80049d8:	18bb      	adds	r3, r7, r2
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d114      	bne.n	8004a0a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049e0:	187b      	adds	r3, r7, r1
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2220      	movs	r2, #32
 80049e6:	4013      	ands	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ea:	183b      	adds	r3, r7, r0
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2220      	movs	r2, #32
 80049f0:	4013      	ands	r3, r2
 80049f2:	d00a      	beq.n	8004a0a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d100      	bne.n	80049fe <HAL_UART_IRQHandler+0x62>
 80049fc:	e2be      	b.n	8004f7c <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	0010      	movs	r0, r2
 8004a06:	4798      	blx	r3
      }
      return;
 8004a08:	e2b8      	b.n	8004f7c <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a0a:	2398      	movs	r3, #152	@ 0x98
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d100      	bne.n	8004a16 <HAL_UART_IRQHandler+0x7a>
 8004a14:	e114      	b.n	8004c40 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a16:	239c      	movs	r3, #156	@ 0x9c
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d106      	bne.n	8004a30 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a22:	23a0      	movs	r3, #160	@ 0xa0
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a83      	ldr	r2, [pc, #524]	@ (8004c38 <HAL_UART_IRQHandler+0x29c>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d100      	bne.n	8004a30 <HAL_UART_IRQHandler+0x94>
 8004a2e:	e107      	b.n	8004c40 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a30:	23a4      	movs	r3, #164	@ 0xa4
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d012      	beq.n	8004a62 <HAL_UART_IRQHandler+0xc6>
 8004a3c:	23a0      	movs	r3, #160	@ 0xa0
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	2380      	movs	r3, #128	@ 0x80
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	4013      	ands	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2284      	movs	r2, #132	@ 0x84
 8004a56:	589b      	ldr	r3, [r3, r2]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2184      	movs	r1, #132	@ 0x84
 8004a60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a62:	23a4      	movs	r3, #164	@ 0xa4
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d011      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
 8004a6e:	239c      	movs	r3, #156	@ 0x9c
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2284      	movs	r2, #132	@ 0x84
 8004a86:	589b      	ldr	r3, [r3, r2]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2184      	movs	r1, #132	@ 0x84
 8004a90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a92:	23a4      	movs	r3, #164	@ 0xa4
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d011      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
 8004a9e:	239c      	movs	r3, #156	@ 0x9c
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2284      	movs	r2, #132	@ 0x84
 8004ab6:	589b      	ldr	r3, [r3, r2]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2184      	movs	r1, #132	@ 0x84
 8004ac0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ac2:	23a4      	movs	r3, #164	@ 0xa4
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	4013      	ands	r3, r2
 8004acc:	d017      	beq.n	8004afe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ace:	23a0      	movs	r3, #160	@ 0xa0
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d105      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ada:	239c      	movs	r3, #156	@ 0x9c
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ae4:	d00b      	beq.n	8004afe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2208      	movs	r2, #8
 8004aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2284      	movs	r2, #132	@ 0x84
 8004af2:	589b      	ldr	r3, [r3, r2]
 8004af4:	2208      	movs	r2, #8
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2184      	movs	r1, #132	@ 0x84
 8004afc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004afe:	23a4      	movs	r3, #164	@ 0xa4
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_UART_IRQHandler+0x198>
 8004b0c:	23a0      	movs	r3, #160	@ 0xa0
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	04db      	lsls	r3, r3, #19
 8004b16:	4013      	ands	r3, r2
 8004b18:	d00c      	beq.n	8004b34 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2280      	movs	r2, #128	@ 0x80
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2284      	movs	r2, #132	@ 0x84
 8004b28:	589b      	ldr	r3, [r3, r2]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2184      	movs	r1, #132	@ 0x84
 8004b32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2284      	movs	r2, #132	@ 0x84
 8004b38:	589b      	ldr	r3, [r3, r2]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d100      	bne.n	8004b40 <HAL_UART_IRQHandler+0x1a4>
 8004b3e:	e21f      	b.n	8004f80 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b40:	23a4      	movs	r3, #164	@ 0xa4
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2220      	movs	r2, #32
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b4c:	23a0      	movs	r3, #160	@ 0xa0
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2220      	movs	r2, #32
 8004b54:	4013      	ands	r3, r2
 8004b56:	d008      	beq.n	8004b6a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	0010      	movs	r0, r2
 8004b68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2284      	movs	r2, #132	@ 0x84
 8004b6e:	589b      	ldr	r3, [r3, r2]
 8004b70:	2194      	movs	r1, #148	@ 0x94
 8004b72:	187a      	adds	r2, r7, r1
 8004b74:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2240      	movs	r2, #64	@ 0x40
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d004      	beq.n	8004b8e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2228      	movs	r2, #40	@ 0x28
 8004b8a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b8c:	d047      	beq.n	8004c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 ff55 	bl	8005a40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2240      	movs	r2, #64	@ 0x40
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	d137      	bne.n	8004c14 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bac:	2090      	movs	r0, #144	@ 0x90
 8004bae:	183a      	adds	r2, r7, r0
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2140      	movs	r1, #64	@ 0x40
 8004bca:	438a      	bics	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bd6:	f383 8810 	msr	PRIMASK, r3
}
 8004bda:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be8:	4a14      	ldr	r2, [pc, #80]	@ (8004c3c <HAL_UART_IRQHandler+0x2a0>)
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7fd fc9d 	bl	8002530 <HAL_DMA_Abort_IT>
 8004bf6:	1e03      	subs	r3, r0, #0
 8004bf8:	d01a      	beq.n	8004c30 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c04:	0018      	movs	r0, r3
 8004c06:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e012      	b.n	8004c30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f9d5 	bl	8004fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c12:	e00d      	b.n	8004c30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 f9d0 	bl	8004fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e008      	b.n	8004c30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 f9cb 	bl	8004fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2284      	movs	r2, #132	@ 0x84
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c2e:	e1a7      	b.n	8004f80 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	46c0      	nop			@ (mov r8, r8)
    return;
 8004c32:	e1a5      	b.n	8004f80 <HAL_UART_IRQHandler+0x5e4>
 8004c34:	0000080f 	.word	0x0000080f
 8004c38:	04000120 	.word	0x04000120
 8004c3c:	08005d73 	.word	0x08005d73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d000      	beq.n	8004c4a <HAL_UART_IRQHandler+0x2ae>
 8004c48:	e159      	b.n	8004efe <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c4a:	23a4      	movs	r3, #164	@ 0xa4
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2210      	movs	r2, #16
 8004c52:	4013      	ands	r3, r2
 8004c54:	d100      	bne.n	8004c58 <HAL_UART_IRQHandler+0x2bc>
 8004c56:	e152      	b.n	8004efe <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c58:	23a0      	movs	r3, #160	@ 0xa0
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	4013      	ands	r3, r2
 8004c62:	d100      	bne.n	8004c66 <HAL_UART_IRQHandler+0x2ca>
 8004c64:	e14b      	b.n	8004efe <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2240      	movs	r2, #64	@ 0x40
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b40      	cmp	r3, #64	@ 0x40
 8004c7a:	d000      	beq.n	8004c7e <HAL_UART_IRQHandler+0x2e2>
 8004c7c:	e0bf      	b.n	8004dfe <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	217e      	movs	r1, #126	@ 0x7e
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d100      	bne.n	8004c96 <HAL_UART_IRQHandler+0x2fa>
 8004c94:	e095      	b.n	8004dc2 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2258      	movs	r2, #88	@ 0x58
 8004c9a:	5a9b      	ldrh	r3, [r3, r2]
 8004c9c:	187a      	adds	r2, r7, r1
 8004c9e:	8812      	ldrh	r2, [r2, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d300      	bcc.n	8004ca6 <HAL_UART_IRQHandler+0x30a>
 8004ca4:	e08d      	b.n	8004dc2 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	215a      	movs	r1, #90	@ 0x5a
 8004cac:	8812      	ldrh	r2, [r2, #0]
 8004cae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d16f      	bne.n	8004d9e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cc8:	2301      	movs	r3, #1
 8004cca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	49ad      	ldr	r1, [pc, #692]	@ (8004f94 <HAL_UART_IRQHandler+0x5f8>)
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cea:	f383 8810 	msr	PRIMASK, r3
}
 8004cee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	438a      	bics	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2140      	movs	r1, #64	@ 0x40
 8004d44:	438a      	bics	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d4a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	@ 0x80
 8004d58:	2120      	movs	r1, #32
 8004d5a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d62:	f3ef 8310 	mrs	r3, PRIMASK
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2110      	movs	r1, #16
 8004d84:	438a      	bics	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d8e:	f383 8810 	msr	PRIMASK, r3
}
 8004d92:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7fd fb89 	bl	80024b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2258      	movs	r2, #88	@ 0x58
 8004da8:	5a9a      	ldrh	r2, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	215a      	movs	r1, #90	@ 0x5a
 8004dae:	5a5b      	ldrh	r3, [r3, r1]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f906 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004dc0:	e0e0      	b.n	8004f84 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2258      	movs	r2, #88	@ 0x58
 8004dc6:	5a9b      	ldrh	r3, [r3, r2]
 8004dc8:	227e      	movs	r2, #126	@ 0x7e
 8004dca:	18ba      	adds	r2, r7, r2
 8004dcc:	8812      	ldrh	r2, [r2, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d000      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x438>
 8004dd2:	e0d7      	b.n	8004f84 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d000      	beq.n	8004de6 <HAL_UART_IRQHandler+0x44a>
 8004de4:	e0ce      	b.n	8004f84 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2258      	movs	r2, #88	@ 0x58
 8004df0:	5a9a      	ldrh	r2, [r3, r2]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0011      	movs	r1, r2
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 f8e8 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
      return;
 8004dfc:	e0c2      	b.n	8004f84 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2258      	movs	r2, #88	@ 0x58
 8004e02:	5a99      	ldrh	r1, [r3, r2]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	225a      	movs	r2, #90	@ 0x5a
 8004e08:	5a9b      	ldrh	r3, [r3, r2]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	208e      	movs	r0, #142	@ 0x8e
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	1a8a      	subs	r2, r1, r2
 8004e12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	225a      	movs	r2, #90	@ 0x5a
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d100      	bne.n	8004e22 <HAL_UART_IRQHandler+0x486>
 8004e20:	e0b2      	b.n	8004f88 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004e22:	183b      	adds	r3, r7, r0
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d100      	bne.n	8004e2c <HAL_UART_IRQHandler+0x490>
 8004e2a:	e0ad      	b.n	8004f88 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e32:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e34:	2488      	movs	r4, #136	@ 0x88
 8004e36:	193a      	adds	r2, r7, r4
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f383 8810 	msr	PRIMASK, r3
}
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4951      	ldr	r1, [pc, #324]	@ (8004f98 <HAL_UART_IRQHandler+0x5fc>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	193b      	adds	r3, r7, r4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f383 8810 	msr	PRIMASK, r3
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e64:	f3ef 8310 	mrs	r3, PRIMASK
 8004e68:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e6a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6c:	2484      	movs	r4, #132	@ 0x84
 8004e6e:	193a      	adds	r2, r7, r4
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	2301      	movs	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	438a      	bics	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	193b      	adds	r3, r7, r4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2280      	movs	r2, #128	@ 0x80
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb8:	2480      	movs	r4, #128	@ 0x80
 8004eba:	193a      	adds	r2, r7, r4
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			@ (mov r8, r8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eee:	183b      	adds	r3, r7, r0
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 f868 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004efc:	e044      	b.n	8004f88 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004efe:	23a4      	movs	r3, #164	@ 0xa4
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	035b      	lsls	r3, r3, #13
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d010      	beq.n	8004f2e <HAL_UART_IRQHandler+0x592>
 8004f0c:	239c      	movs	r3, #156	@ 0x9c
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	03db      	lsls	r3, r3, #15
 8004f16:	4013      	ands	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	0352      	lsls	r2, r2, #13
 8004f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f000 ff61 	bl	8005dee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f2c:	e02f      	b.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f2e:	23a4      	movs	r3, #164	@ 0xa4
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2280      	movs	r2, #128	@ 0x80
 8004f36:	4013      	ands	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f3a:	23a0      	movs	r3, #160	@ 0xa0
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2280      	movs	r2, #128	@ 0x80
 8004f42:	4013      	ands	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01e      	beq.n	8004f8c <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	0010      	movs	r0, r2
 8004f56:	4798      	blx	r3
    }
    return;
 8004f58:	e018      	b.n	8004f8c <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f5a:	23a4      	movs	r3, #164	@ 0xa4
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2240      	movs	r2, #64	@ 0x40
 8004f62:	4013      	ands	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
 8004f66:	23a0      	movs	r3, #160	@ 0xa0
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2240      	movs	r2, #64	@ 0x40
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d00d      	beq.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 ff0f 	bl	8005d98 <UART_EndTransmit_IT>
    return;
 8004f7a:	e008      	b.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
      return;
 8004f7c:	46c0      	nop			@ (mov r8, r8)
 8004f7e:	e006      	b.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
    return;
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	e004      	b.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
      return;
 8004f84:	46c0      	nop			@ (mov r8, r8)
 8004f86:	e002      	b.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
      return;
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	e000      	b.n	8004f8e <HAL_UART_IRQHandler+0x5f2>
    return;
 8004f8c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b02b      	add	sp, #172	@ 0xac
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	fffffeff 	.word	0xfffffeff
 8004f98:	fffffedf 	.word	0xfffffedf

08004f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b002      	add	sp, #8
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	1cbb      	adds	r3, r7, #2
 8004fd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b002      	add	sp, #8
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b08e      	sub	sp, #56	@ 0x38
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fec:	231a      	movs	r3, #26
 8004fee:	2218      	movs	r2, #24
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	19db      	adds	r3, r3, r7
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	431a      	orrs	r2, r3
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	431a      	orrs	r2, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4ac3      	ldr	r2, [pc, #780]	@ (8005324 <UART_SetConfig+0x340>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005022:	430a      	orrs	r2, r1
 8005024:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4abe      	ldr	r2, [pc, #760]	@ (8005328 <UART_SetConfig+0x344>)
 800502e:	4013      	ands	r3, r2
 8005030:	0019      	movs	r1, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4ab8      	ldr	r2, [pc, #736]	@ (800532c <UART_SetConfig+0x348>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005054:	4313      	orrs	r3, r2
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4ab4      	ldr	r2, [pc, #720]	@ (8005330 <UART_SetConfig+0x34c>)
 8005060:	4013      	ands	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800506a:	430a      	orrs	r2, r1
 800506c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4ab0      	ldr	r2, [pc, #704]	@ (8005334 <UART_SetConfig+0x350>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d131      	bne.n	80050dc <UART_SetConfig+0xf8>
 8005078:	4baf      	ldr	r3, [pc, #700]	@ (8005338 <UART_SetConfig+0x354>)
 800507a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507c:	2203      	movs	r2, #3
 800507e:	4013      	ands	r3, r2
 8005080:	2b03      	cmp	r3, #3
 8005082:	d01d      	beq.n	80050c0 <UART_SetConfig+0xdc>
 8005084:	d823      	bhi.n	80050ce <UART_SetConfig+0xea>
 8005086:	2b02      	cmp	r3, #2
 8005088:	d00c      	beq.n	80050a4 <UART_SetConfig+0xc0>
 800508a:	d820      	bhi.n	80050ce <UART_SetConfig+0xea>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <UART_SetConfig+0xb2>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d00e      	beq.n	80050b2 <UART_SetConfig+0xce>
 8005094:	e01b      	b.n	80050ce <UART_SetConfig+0xea>
 8005096:	231b      	movs	r3, #27
 8005098:	2218      	movs	r2, #24
 800509a:	189b      	adds	r3, r3, r2
 800509c:	19db      	adds	r3, r3, r7
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e0b4      	b.n	800520e <UART_SetConfig+0x22a>
 80050a4:	231b      	movs	r3, #27
 80050a6:	2218      	movs	r2, #24
 80050a8:	189b      	adds	r3, r3, r2
 80050aa:	19db      	adds	r3, r3, r7
 80050ac:	2202      	movs	r2, #2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e0ad      	b.n	800520e <UART_SetConfig+0x22a>
 80050b2:	231b      	movs	r3, #27
 80050b4:	2218      	movs	r2, #24
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	19db      	adds	r3, r3, r7
 80050ba:	2204      	movs	r2, #4
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e0a6      	b.n	800520e <UART_SetConfig+0x22a>
 80050c0:	231b      	movs	r3, #27
 80050c2:	2218      	movs	r2, #24
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	19db      	adds	r3, r3, r7
 80050c8:	2208      	movs	r2, #8
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	e09f      	b.n	800520e <UART_SetConfig+0x22a>
 80050ce:	231b      	movs	r3, #27
 80050d0:	2218      	movs	r2, #24
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	19db      	adds	r3, r3, r7
 80050d6:	2210      	movs	r2, #16
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e098      	b.n	800520e <UART_SetConfig+0x22a>
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a96      	ldr	r2, [pc, #600]	@ (800533c <UART_SetConfig+0x358>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d131      	bne.n	800514a <UART_SetConfig+0x166>
 80050e6:	4b94      	ldr	r3, [pc, #592]	@ (8005338 <UART_SetConfig+0x354>)
 80050e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ea:	220c      	movs	r2, #12
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d01d      	beq.n	800512e <UART_SetConfig+0x14a>
 80050f2:	d823      	bhi.n	800513c <UART_SetConfig+0x158>
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d00c      	beq.n	8005112 <UART_SetConfig+0x12e>
 80050f8:	d820      	bhi.n	800513c <UART_SetConfig+0x158>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <UART_SetConfig+0x120>
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d00e      	beq.n	8005120 <UART_SetConfig+0x13c>
 8005102:	e01b      	b.n	800513c <UART_SetConfig+0x158>
 8005104:	231b      	movs	r3, #27
 8005106:	2218      	movs	r2, #24
 8005108:	189b      	adds	r3, r3, r2
 800510a:	19db      	adds	r3, r3, r7
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e07d      	b.n	800520e <UART_SetConfig+0x22a>
 8005112:	231b      	movs	r3, #27
 8005114:	2218      	movs	r2, #24
 8005116:	189b      	adds	r3, r3, r2
 8005118:	19db      	adds	r3, r3, r7
 800511a:	2202      	movs	r2, #2
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e076      	b.n	800520e <UART_SetConfig+0x22a>
 8005120:	231b      	movs	r3, #27
 8005122:	2218      	movs	r2, #24
 8005124:	189b      	adds	r3, r3, r2
 8005126:	19db      	adds	r3, r3, r7
 8005128:	2204      	movs	r2, #4
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e06f      	b.n	800520e <UART_SetConfig+0x22a>
 800512e:	231b      	movs	r3, #27
 8005130:	2218      	movs	r2, #24
 8005132:	189b      	adds	r3, r3, r2
 8005134:	19db      	adds	r3, r3, r7
 8005136:	2208      	movs	r2, #8
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e068      	b.n	800520e <UART_SetConfig+0x22a>
 800513c:	231b      	movs	r3, #27
 800513e:	2218      	movs	r2, #24
 8005140:	189b      	adds	r3, r3, r2
 8005142:	19db      	adds	r3, r3, r7
 8005144:	2210      	movs	r2, #16
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	e061      	b.n	800520e <UART_SetConfig+0x22a>
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7c      	ldr	r2, [pc, #496]	@ (8005340 <UART_SetConfig+0x35c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d106      	bne.n	8005162 <UART_SetConfig+0x17e>
 8005154:	231b      	movs	r3, #27
 8005156:	2218      	movs	r2, #24
 8005158:	189b      	adds	r3, r3, r2
 800515a:	19db      	adds	r3, r3, r7
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e055      	b.n	800520e <UART_SetConfig+0x22a>
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a77      	ldr	r2, [pc, #476]	@ (8005344 <UART_SetConfig+0x360>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d106      	bne.n	800517a <UART_SetConfig+0x196>
 800516c:	231b      	movs	r3, #27
 800516e:	2218      	movs	r2, #24
 8005170:	189b      	adds	r3, r3, r2
 8005172:	19db      	adds	r3, r3, r7
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e049      	b.n	800520e <UART_SetConfig+0x22a>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6b      	ldr	r2, [pc, #428]	@ (800532c <UART_SetConfig+0x348>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d13e      	bne.n	8005202 <UART_SetConfig+0x21e>
 8005184:	4b6c      	ldr	r3, [pc, #432]	@ (8005338 <UART_SetConfig+0x354>)
 8005186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005188:	23c0      	movs	r3, #192	@ 0xc0
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	4013      	ands	r3, r2
 800518e:	22c0      	movs	r2, #192	@ 0xc0
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	4293      	cmp	r3, r2
 8005194:	d027      	beq.n	80051e6 <UART_SetConfig+0x202>
 8005196:	22c0      	movs	r2, #192	@ 0xc0
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	4293      	cmp	r3, r2
 800519c:	d82a      	bhi.n	80051f4 <UART_SetConfig+0x210>
 800519e:	2280      	movs	r2, #128	@ 0x80
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d011      	beq.n	80051ca <UART_SetConfig+0x1e6>
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d822      	bhi.n	80051f4 <UART_SetConfig+0x210>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <UART_SetConfig+0x1d8>
 80051b2:	2280      	movs	r2, #128	@ 0x80
 80051b4:	00d2      	lsls	r2, r2, #3
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <UART_SetConfig+0x1f4>
 80051ba:	e01b      	b.n	80051f4 <UART_SetConfig+0x210>
 80051bc:	231b      	movs	r3, #27
 80051be:	2218      	movs	r2, #24
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	19db      	adds	r3, r3, r7
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e021      	b.n	800520e <UART_SetConfig+0x22a>
 80051ca:	231b      	movs	r3, #27
 80051cc:	2218      	movs	r2, #24
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	19db      	adds	r3, r3, r7
 80051d2:	2202      	movs	r2, #2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e01a      	b.n	800520e <UART_SetConfig+0x22a>
 80051d8:	231b      	movs	r3, #27
 80051da:	2218      	movs	r2, #24
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	2204      	movs	r2, #4
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e013      	b.n	800520e <UART_SetConfig+0x22a>
 80051e6:	231b      	movs	r3, #27
 80051e8:	2218      	movs	r2, #24
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	19db      	adds	r3, r3, r7
 80051ee:	2208      	movs	r2, #8
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e00c      	b.n	800520e <UART_SetConfig+0x22a>
 80051f4:	231b      	movs	r3, #27
 80051f6:	2218      	movs	r2, #24
 80051f8:	189b      	adds	r3, r3, r2
 80051fa:	19db      	adds	r3, r3, r7
 80051fc:	2210      	movs	r2, #16
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e005      	b.n	800520e <UART_SetConfig+0x22a>
 8005202:	231b      	movs	r3, #27
 8005204:	2218      	movs	r2, #24
 8005206:	189b      	adds	r3, r3, r2
 8005208:	19db      	adds	r3, r3, r7
 800520a:	2210      	movs	r2, #16
 800520c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a46      	ldr	r2, [pc, #280]	@ (800532c <UART_SetConfig+0x348>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d000      	beq.n	800521a <UART_SetConfig+0x236>
 8005218:	e09a      	b.n	8005350 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800521a:	231b      	movs	r3, #27
 800521c:	2218      	movs	r2, #24
 800521e:	189b      	adds	r3, r3, r2
 8005220:	19db      	adds	r3, r3, r7
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d01d      	beq.n	8005264 <UART_SetConfig+0x280>
 8005228:	dc20      	bgt.n	800526c <UART_SetConfig+0x288>
 800522a:	2b04      	cmp	r3, #4
 800522c:	d015      	beq.n	800525a <UART_SetConfig+0x276>
 800522e:	dc1d      	bgt.n	800526c <UART_SetConfig+0x288>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <UART_SetConfig+0x256>
 8005234:	2b02      	cmp	r3, #2
 8005236:	d005      	beq.n	8005244 <UART_SetConfig+0x260>
 8005238:	e018      	b.n	800526c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523a:	f7fe fa1d 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800523e:	0003      	movs	r3, r0
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005242:	e01c      	b.n	800527e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005244:	4b3c      	ldr	r3, [pc, #240]	@ (8005338 <UART_SetConfig+0x354>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2210      	movs	r2, #16
 800524a:	4013      	ands	r3, r2
 800524c:	d002      	beq.n	8005254 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800524e:	4b3e      	ldr	r3, [pc, #248]	@ (8005348 <UART_SetConfig+0x364>)
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005252:	e014      	b.n	800527e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005254:	4b3d      	ldr	r3, [pc, #244]	@ (800534c <UART_SetConfig+0x368>)
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005258:	e011      	b.n	800527e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525a:	f7fe f97d 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 800525e:	0003      	movs	r3, r0
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005262:	e00c      	b.n	800527e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005264:	2380      	movs	r3, #128	@ 0x80
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800526a:	e008      	b.n	800527e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005270:	231a      	movs	r3, #26
 8005272:	2218      	movs	r2, #24
 8005274:	189b      	adds	r3, r3, r2
 8005276:	19db      	adds	r3, r3, r7
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
        break;
 800527c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d100      	bne.n	8005286 <UART_SetConfig+0x2a2>
 8005284:	e133      	b.n	80054ee <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	0013      	movs	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	189b      	adds	r3, r3, r2
 8005290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d305      	bcc.n	80052a2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800529c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800529e:	429a      	cmp	r2, r3
 80052a0:	d906      	bls.n	80052b0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80052a2:	231a      	movs	r3, #26
 80052a4:	2218      	movs	r2, #24
 80052a6:	189b      	adds	r3, r3, r2
 80052a8:	19db      	adds	r3, r3, r7
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e11e      	b.n	80054ee <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	6939      	ldr	r1, [r7, #16]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	000b      	movs	r3, r1
 80052be:	0e1b      	lsrs	r3, r3, #24
 80052c0:	0010      	movs	r0, r2
 80052c2:	0205      	lsls	r5, r0, #8
 80052c4:	431d      	orrs	r5, r3
 80052c6:	000b      	movs	r3, r1
 80052c8:	021c      	lsls	r4, r3, #8
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	1900      	adds	r0, r0, r4
 80052dc:	4169      	adcs	r1, r5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f7fa ff98 	bl	8000220 <__aeabi_uldivmod>
 80052f0:	0002      	movs	r2, r0
 80052f2:	000b      	movs	r3, r1
 80052f4:	0013      	movs	r3, r2
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fa:	23c0      	movs	r3, #192	@ 0xc0
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	429a      	cmp	r2, r3
 8005300:	d309      	bcc.n	8005316 <UART_SetConfig+0x332>
 8005302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005304:	2380      	movs	r3, #128	@ 0x80
 8005306:	035b      	lsls	r3, r3, #13
 8005308:	429a      	cmp	r2, r3
 800530a:	d204      	bcs.n	8005316 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e0eb      	b.n	80054ee <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005316:	231a      	movs	r3, #26
 8005318:	2218      	movs	r2, #24
 800531a:	189b      	adds	r3, r3, r2
 800531c:	19db      	adds	r3, r3, r7
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e0e4      	b.n	80054ee <UART_SetConfig+0x50a>
 8005324:	efff69f3 	.word	0xefff69f3
 8005328:	ffffcfff 	.word	0xffffcfff
 800532c:	40004800 	.word	0x40004800
 8005330:	fffff4ff 	.word	0xfffff4ff
 8005334:	40013800 	.word	0x40013800
 8005338:	40021000 	.word	0x40021000
 800533c:	40004400 	.word	0x40004400
 8005340:	40004c00 	.word	0x40004c00
 8005344:	40005000 	.word	0x40005000
 8005348:	003d0900 	.word	0x003d0900
 800534c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	429a      	cmp	r2, r3
 800535a:	d000      	beq.n	800535e <UART_SetConfig+0x37a>
 800535c:	e070      	b.n	8005440 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800535e:	231b      	movs	r3, #27
 8005360:	2218      	movs	r2, #24
 8005362:	189b      	adds	r3, r3, r2
 8005364:	19db      	adds	r3, r3, r7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d822      	bhi.n	80053b2 <UART_SetConfig+0x3ce>
 800536c:	009a      	lsls	r2, r3, #2
 800536e:	4b67      	ldr	r3, [pc, #412]	@ (800550c <UART_SetConfig+0x528>)
 8005370:	18d3      	adds	r3, r2, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005376:	f7fe f97f 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800537a:	0003      	movs	r3, r0
 800537c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800537e:	e021      	b.n	80053c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7fe f990 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005384:	0003      	movs	r3, r0
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005388:	e01c      	b.n	80053c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538a:	4b61      	ldr	r3, [pc, #388]	@ (8005510 <UART_SetConfig+0x52c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2210      	movs	r2, #16
 8005390:	4013      	ands	r3, r2
 8005392:	d002      	beq.n	800539a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005394:	4b5f      	ldr	r3, [pc, #380]	@ (8005514 <UART_SetConfig+0x530>)
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005398:	e014      	b.n	80053c4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800539a:	4b5f      	ldr	r3, [pc, #380]	@ (8005518 <UART_SetConfig+0x534>)
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800539e:	e011      	b.n	80053c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a0:	f7fe f8da 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80053a4:	0003      	movs	r3, r0
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053a8:	e00c      	b.n	80053c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053aa:	2380      	movs	r3, #128	@ 0x80
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053b0:	e008      	b.n	80053c4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80053b6:	231a      	movs	r3, #26
 80053b8:	2218      	movs	r2, #24
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	19db      	adds	r3, r3, r7
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
        break;
 80053c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d100      	bne.n	80053cc <UART_SetConfig+0x3e8>
 80053ca:	e090      	b.n	80054ee <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	005a      	lsls	r2, r3, #1
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	18d2      	adds	r2, r2, r3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	0019      	movs	r1, r3
 80053de:	0010      	movs	r0, r2
 80053e0:	f7fa fe92 	bl	8000108 <__udivsi3>
 80053e4:	0003      	movs	r3, r0
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	d921      	bls.n	8005432 <UART_SetConfig+0x44e>
 80053ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	025b      	lsls	r3, r3, #9
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d21c      	bcs.n	8005432 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	200e      	movs	r0, #14
 80053fe:	2418      	movs	r4, #24
 8005400:	1903      	adds	r3, r0, r4
 8005402:	19db      	adds	r3, r3, r7
 8005404:	210f      	movs	r1, #15
 8005406:	438a      	bics	r2, r1
 8005408:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	2207      	movs	r2, #7
 8005412:	4013      	ands	r3, r2
 8005414:	b299      	uxth	r1, r3
 8005416:	1903      	adds	r3, r0, r4
 8005418:	19db      	adds	r3, r3, r7
 800541a:	1902      	adds	r2, r0, r4
 800541c:	19d2      	adds	r2, r2, r7
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	1902      	adds	r2, r0, r4
 800542a:	19d2      	adds	r2, r2, r7
 800542c:	8812      	ldrh	r2, [r2, #0]
 800542e:	60da      	str	r2, [r3, #12]
 8005430:	e05d      	b.n	80054ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005432:	231a      	movs	r3, #26
 8005434:	2218      	movs	r2, #24
 8005436:	189b      	adds	r3, r3, r2
 8005438:	19db      	adds	r3, r3, r7
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e056      	b.n	80054ee <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005440:	231b      	movs	r3, #27
 8005442:	2218      	movs	r2, #24
 8005444:	189b      	adds	r3, r3, r2
 8005446:	19db      	adds	r3, r3, r7
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b08      	cmp	r3, #8
 800544c:	d822      	bhi.n	8005494 <UART_SetConfig+0x4b0>
 800544e:	009a      	lsls	r2, r3, #2
 8005450:	4b32      	ldr	r3, [pc, #200]	@ (800551c <UART_SetConfig+0x538>)
 8005452:	18d3      	adds	r3, r2, r3
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005458:	f7fe f90e 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800545c:	0003      	movs	r3, r0
 800545e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005460:	e021      	b.n	80054a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005462:	f7fe f91f 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005466:	0003      	movs	r3, r0
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800546a:	e01c      	b.n	80054a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <UART_SetConfig+0x52c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2210      	movs	r2, #16
 8005472:	4013      	ands	r3, r2
 8005474:	d002      	beq.n	800547c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005476:	4b27      	ldr	r3, [pc, #156]	@ (8005514 <UART_SetConfig+0x530>)
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800547a:	e014      	b.n	80054a6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800547c:	4b26      	ldr	r3, [pc, #152]	@ (8005518 <UART_SetConfig+0x534>)
 800547e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005480:	e011      	b.n	80054a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fe f869 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8005486:	0003      	movs	r3, r0
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800548a:	e00c      	b.n	80054a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005492:	e008      	b.n	80054a6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005498:	231a      	movs	r3, #26
 800549a:	2218      	movs	r2, #24
 800549c:	189b      	adds	r3, r3, r2
 800549e:	19db      	adds	r3, r3, r7
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
        break;
 80054a4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80054a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	085a      	lsrs	r2, r3, #1
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	18d2      	adds	r2, r2, r3
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	0019      	movs	r1, r3
 80054bc:	0010      	movs	r0, r2
 80054be:	f7fa fe23 	bl	8000108 <__udivsi3>
 80054c2:	0003      	movs	r3, r0
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d90a      	bls.n	80054e2 <UART_SetConfig+0x4fe>
 80054cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ce:	2380      	movs	r3, #128	@ 0x80
 80054d0:	025b      	lsls	r3, r3, #9
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d205      	bcs.n	80054e2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	b29a      	uxth	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e005      	b.n	80054ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80054e2:	231a      	movs	r3, #26
 80054e4:	2218      	movs	r2, #24
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	19db      	adds	r3, r3, r7
 80054ea:	2201      	movs	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2200      	movs	r2, #0
 80054f2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2200      	movs	r2, #0
 80054f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054fa:	231a      	movs	r3, #26
 80054fc:	2218      	movs	r2, #24
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	19db      	adds	r3, r3, r7
 8005502:	781b      	ldrb	r3, [r3, #0]
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b00e      	add	sp, #56	@ 0x38
 800550a:	bdb0      	pop	{r4, r5, r7, pc}
 800550c:	08005e94 	.word	0x08005e94
 8005510:	40021000 	.word	0x40021000
 8005514:	003d0900 	.word	0x003d0900
 8005518:	00f42400 	.word	0x00f42400
 800551c:	08005eb8 	.word	0x08005eb8

08005520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	2208      	movs	r2, #8
 800552e:	4013      	ands	r3, r2
 8005530:	d00b      	beq.n	800554a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a4a      	ldr	r2, [pc, #296]	@ (8005664 <UART_AdvFeatureConfig+0x144>)
 800553a:	4013      	ands	r3, r2
 800553c:	0019      	movs	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	2201      	movs	r2, #1
 8005550:	4013      	ands	r3, r2
 8005552:	d00b      	beq.n	800556c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4a43      	ldr	r2, [pc, #268]	@ (8005668 <UART_AdvFeatureConfig+0x148>)
 800555c:	4013      	ands	r3, r2
 800555e:	0019      	movs	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	2202      	movs	r2, #2
 8005572:	4013      	ands	r3, r2
 8005574:	d00b      	beq.n	800558e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a3b      	ldr	r2, [pc, #236]	@ (800566c <UART_AdvFeatureConfig+0x14c>)
 800557e:	4013      	ands	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	2204      	movs	r2, #4
 8005594:	4013      	ands	r3, r2
 8005596:	d00b      	beq.n	80055b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4a34      	ldr	r2, [pc, #208]	@ (8005670 <UART_AdvFeatureConfig+0x150>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	2210      	movs	r2, #16
 80055b6:	4013      	ands	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <UART_AdvFeatureConfig+0x154>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	0019      	movs	r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	2220      	movs	r2, #32
 80055d8:	4013      	ands	r3, r2
 80055da:	d00b      	beq.n	80055f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4a25      	ldr	r2, [pc, #148]	@ (8005678 <UART_AdvFeatureConfig+0x158>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	2240      	movs	r2, #64	@ 0x40
 80055fa:	4013      	ands	r3, r2
 80055fc:	d01d      	beq.n	800563a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4a1d      	ldr	r2, [pc, #116]	@ (800567c <UART_AdvFeatureConfig+0x15c>)
 8005606:	4013      	ands	r3, r2
 8005608:	0019      	movs	r1, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	035b      	lsls	r3, r3, #13
 800561e:	429a      	cmp	r2, r3
 8005620:	d10b      	bne.n	800563a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a15      	ldr	r2, [pc, #84]	@ (8005680 <UART_AdvFeatureConfig+0x160>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	2280      	movs	r2, #128	@ 0x80
 8005640:	4013      	ands	r3, r2
 8005642:	d00b      	beq.n	800565c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4a0e      	ldr	r2, [pc, #56]	@ (8005684 <UART_AdvFeatureConfig+0x164>)
 800564c:	4013      	ands	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }
}
 800565c:	46c0      	nop			@ (mov r8, r8)
 800565e:	46bd      	mov	sp, r7
 8005660:	b002      	add	sp, #8
 8005662:	bd80      	pop	{r7, pc}
 8005664:	ffff7fff 	.word	0xffff7fff
 8005668:	fffdffff 	.word	0xfffdffff
 800566c:	fffeffff 	.word	0xfffeffff
 8005670:	fffbffff 	.word	0xfffbffff
 8005674:	ffffefff 	.word	0xffffefff
 8005678:	ffffdfff 	.word	0xffffdfff
 800567c:	ffefffff 	.word	0xffefffff
 8005680:	ff9fffff 	.word	0xff9fffff
 8005684:	fff7ffff 	.word	0xfff7ffff

08005688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b092      	sub	sp, #72	@ 0x48
 800568c:	af02      	add	r7, sp, #8
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2284      	movs	r2, #132	@ 0x84
 8005694:	2100      	movs	r1, #0
 8005696:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005698:	f7fc f90e 	bl	80018b8 <HAL_GetTick>
 800569c:	0003      	movs	r3, r0
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2208      	movs	r2, #8
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d12c      	bne.n	8005708 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b0:	2280      	movs	r2, #128	@ 0x80
 80056b2:	0391      	lsls	r1, r2, #14
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4a46      	ldr	r2, [pc, #280]	@ (80057d0 <UART_CheckIdleState+0x148>)
 80056b8:	9200      	str	r2, [sp, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f000 f88c 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 80056c0:	1e03      	subs	r3, r0, #0
 80056c2:	d021      	beq.n	8005708 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c4:	f3ef 8310 	mrs	r3, PRIMASK
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056ce:	2301      	movs	r3, #1
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	f383 8810 	msr	PRIMASK, r3
}
 80056d8:	46c0      	nop			@ (mov r8, r8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2180      	movs	r1, #128	@ 0x80
 80056e6:	438a      	bics	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2278      	movs	r2, #120	@ 0x78
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e05f      	b.n	80057c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2204      	movs	r2, #4
 8005710:	4013      	ands	r3, r2
 8005712:	2b04      	cmp	r3, #4
 8005714:	d146      	bne.n	80057a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005718:	2280      	movs	r2, #128	@ 0x80
 800571a:	03d1      	lsls	r1, r2, #15
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4a2c      	ldr	r2, [pc, #176]	@ (80057d0 <UART_CheckIdleState+0x148>)
 8005720:	9200      	str	r2, [sp, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	f000 f858 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8005728:	1e03      	subs	r3, r0, #0
 800572a:	d03b      	beq.n	80057a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800572c:	f3ef 8310 	mrs	r3, PRIMASK
 8005730:	60fb      	str	r3, [r7, #12]
  return(result);
 8005732:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005734:	637b      	str	r3, [r7, #52]	@ 0x34
 8005736:	2301      	movs	r3, #1
 8005738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f383 8810 	msr	PRIMASK, r3
}
 8005740:	46c0      	nop			@ (mov r8, r8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4921      	ldr	r1, [pc, #132]	@ (80057d4 <UART_CheckIdleState+0x14c>)
 800574e:	400a      	ands	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f383 8810 	msr	PRIMASK, r3
}
 800575c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575e:	f3ef 8310 	mrs	r3, PRIMASK
 8005762:	61bb      	str	r3, [r7, #24]
  return(result);
 8005764:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30
 8005768:	2301      	movs	r3, #1
 800576a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f383 8810 	msr	PRIMASK, r3
}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2101      	movs	r1, #1
 8005780:	438a      	bics	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	f383 8810 	msr	PRIMASK, r3
}
 800578e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2280      	movs	r2, #128	@ 0x80
 8005794:	2120      	movs	r1, #32
 8005796:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2278      	movs	r2, #120	@ 0x78
 800579c:	2100      	movs	r1, #0
 800579e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e011      	b.n	80057c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2280      	movs	r2, #128	@ 0x80
 80057ae:	2120      	movs	r1, #32
 80057b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2278      	movs	r2, #120	@ 0x78
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b010      	add	sp, #64	@ 0x40
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	01ffffff 	.word	0x01ffffff
 80057d4:	fffffedf 	.word	0xfffffedf

080057d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	1dfb      	adds	r3, r7, #7
 80057e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e8:	e051      	b.n	800588e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	3301      	adds	r3, #1
 80057ee:	d04e      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f0:	f7fc f862 	bl	80018b8 <HAL_GetTick>
 80057f4:	0002      	movs	r2, r0
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e051      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2204      	movs	r2, #4
 8005812:	4013      	ands	r3, r2
 8005814:	d03b      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b80      	cmp	r3, #128	@ 0x80
 800581a:	d038      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0xb6>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b40      	cmp	r3, #64	@ 0x40
 8005820:	d035      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2208      	movs	r2, #8
 800582a:	4013      	ands	r3, r2
 800582c:	2b08      	cmp	r3, #8
 800582e:	d111      	bne.n	8005854 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2208      	movs	r2, #8
 8005836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	0018      	movs	r0, r3
 800583c:	f000 f900 	bl	8005a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2284      	movs	r2, #132	@ 0x84
 8005844:	2108      	movs	r1, #8
 8005846:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2278      	movs	r2, #120	@ 0x78
 800584c:	2100      	movs	r1, #0
 800584e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e02c      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	2380      	movs	r3, #128	@ 0x80
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	401a      	ands	r2, r3
 8005860:	2380      	movs	r3, #128	@ 0x80
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	429a      	cmp	r2, r3
 8005866:	d112      	bne.n	800588e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2280      	movs	r2, #128	@ 0x80
 800586e:	0112      	lsls	r2, r2, #4
 8005870:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	0018      	movs	r0, r3
 8005876:	f000 f8e3 	bl	8005a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2284      	movs	r2, #132	@ 0x84
 800587e:	2120      	movs	r1, #32
 8005880:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2278      	movs	r2, #120	@ 0x78
 8005886:	2100      	movs	r1, #0
 8005888:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e00f      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	425a      	negs	r2, r3
 800589e:	4153      	adcs	r3, r2
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	001a      	movs	r2, r3
 80058a4:	1dfb      	adds	r3, r7, #7
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d09e      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	0018      	movs	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b004      	add	sp, #16
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b090      	sub	sp, #64	@ 0x40
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	1dbb      	adds	r3, r7, #6
 80058c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1dba      	adds	r2, r7, #6
 80058d0:	2158      	movs	r1, #88	@ 0x58
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2284      	movs	r2, #132	@ 0x84
 80058da:	2100      	movs	r1, #0
 80058dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2280      	movs	r2, #128	@ 0x80
 80058e2:	2122      	movs	r1, #34	@ 0x22
 80058e4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d028      	beq.n	8005940 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f2:	4a3e      	ldr	r2, [pc, #248]	@ (80059ec <UART_Start_Receive_DMA+0x134>)
 80058f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fa:	4a3d      	ldr	r2, [pc, #244]	@ (80059f0 <UART_Start_Receive_DMA+0x138>)
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005902:	4a3c      	ldr	r2, [pc, #240]	@ (80059f4 <UART_Start_Receive_DMA+0x13c>)
 8005904:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590a:	2200      	movs	r2, #0
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3324      	adds	r3, #36	@ 0x24
 8005918:	0019      	movs	r1, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591e:	001a      	movs	r2, r3
 8005920:	1dbb      	adds	r3, r7, #6
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	f7fc fd5e 	bl	80023e4 <HAL_DMA_Start_IT>
 8005928:	1e03      	subs	r3, r0, #0
 800592a:	d009      	beq.n	8005940 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2284      	movs	r2, #132	@ 0x84
 8005930:	2110      	movs	r1, #16
 8005932:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2280      	movs	r2, #128	@ 0x80
 8005938:	2120      	movs	r1, #32
 800593a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e050      	b.n	80059e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005952:	2301      	movs	r3, #1
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2180      	movs	r1, #128	@ 0x80
 800596a:	0049      	lsls	r1, r1, #1
 800596c:	430a      	orrs	r2, r1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005972:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597c:	f3ef 8310 	mrs	r3, PRIMASK
 8005980:	613b      	str	r3, [r7, #16]
  return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f383 8810 	msr	PRIMASK, r3
}
 8005990:	46c0      	nop			@ (mov r8, r8)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2101      	movs	r1, #1
 800599e:	430a      	orrs	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f383 8810 	msr	PRIMASK, r3
}
 80059ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80059b4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b8:	2301      	movs	r3, #1
 80059ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2140      	movs	r1, #64	@ 0x40
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b010      	add	sp, #64	@ 0x40
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	08005b09 	.word	0x08005b09
 80059f0:	08005c71 	.word	0x08005c71
 80059f4:	08005cef 	.word	0x08005cef

080059f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a06:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			@ (mov r8, r8)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	21c0      	movs	r1, #192	@ 0xc0
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b006      	add	sp, #24
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08e      	sub	sp, #56	@ 0x38
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a48:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a52:	2301      	movs	r3, #1
 8005a54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f383 8810 	msr	PRIMASK, r3
}
 8005a5c:	46c0      	nop			@ (mov r8, r8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4926      	ldr	r1, [pc, #152]	@ (8005b04 <UART_EndRxTransfer+0xc4>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f383 8810 	msr	PRIMASK, r3
}
 8005a78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7e:	623b      	str	r3, [r7, #32]
  return(result);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a84:	2301      	movs	r3, #1
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	438a      	bics	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	f383 8810 	msr	PRIMASK, r3
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d118      	bne.n	8005ae6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005abe:	2301      	movs	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	438a      	bics	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f383 8810 	msr	PRIMASK, r3
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2280      	movs	r2, #128	@ 0x80
 8005aea:	2120      	movs	r1, #32
 8005aec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b00e      	add	sp, #56	@ 0x38
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	fffffedf 	.word	0xfffffedf

08005b08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b094      	sub	sp, #80	@ 0x50
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d16f      	bne.n	8005c02 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b24:	225a      	movs	r2, #90	@ 0x5a
 8005b26:	2100      	movs	r1, #0
 8005b28:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2e:	617b      	str	r3, [r7, #20]
  return(result);
 8005b30:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b34:	2301      	movs	r3, #1
 8005b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f383 8810 	msr	PRIMASK, r3
}
 8005b3e:	46c0      	nop			@ (mov r8, r8)
 8005b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4948      	ldr	r1, [pc, #288]	@ (8005c6c <UART_DMAReceiveCplt+0x164>)
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b60:	623b      	str	r3, [r7, #32]
  return(result);
 8005b62:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b66:	2301      	movs	r3, #1
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	f383 8810 	msr	PRIMASK, r3
}
 8005b70:	46c0      	nop			@ (mov r8, r8)
 8005b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	438a      	bics	r2, r1
 8005b80:	609a      	str	r2, [r3, #8]
 8005b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	f383 8810 	msr	PRIMASK, r3
}
 8005b8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b98:	2301      	movs	r3, #1
 8005b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2140      	movs	r1, #64	@ 0x40
 8005bb0:	438a      	bics	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bba:	f383 8810 	msr	PRIMASK, r3
}
 8005bbe:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc2:	2280      	movs	r2, #128	@ 0x80
 8005bc4:	2120      	movs	r1, #32
 8005bc6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d118      	bne.n	8005c02 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bda:	2301      	movs	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f383 8810 	msr	PRIMASK, r3
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	438a      	bics	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c04:	2200      	movs	r2, #0
 8005c06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d124      	bne.n	8005c5a <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c12:	225a      	movs	r2, #90	@ 0x5a
 8005c14:	2100      	movs	r1, #0
 8005c16:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	213a      	movs	r1, #58	@ 0x3a
 8005c20:	187b      	adds	r3, r7, r1
 8005c22:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c26:	2258      	movs	r2, #88	@ 0x58
 8005c28:	5a9b      	ldrh	r3, [r3, r2]
 8005c2a:	187a      	adds	r2, r7, r1
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d204      	bcs.n	8005c3c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c34:	187a      	adds	r2, r7, r1
 8005c36:	215a      	movs	r1, #90	@ 0x5a
 8005c38:	8812      	ldrh	r2, [r2, #0]
 8005c3a:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3e:	2258      	movs	r2, #88	@ 0x58
 8005c40:	5a9a      	ldrh	r2, [r3, r2]
 8005c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c44:	215a      	movs	r1, #90	@ 0x5a
 8005c46:	5a5b      	ldrh	r3, [r3, r1]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c50:	0011      	movs	r1, r2
 8005c52:	0018      	movs	r0, r3
 8005c54:	f7ff f9ba 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c58:	e003      	b.n	8005c62 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f7fa fe0d 	bl	800087c <HAL_UART_RxCpltCallback>
}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b014      	add	sp, #80	@ 0x50
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	fffffeff 	.word	0xfffffeff

08005c70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d128      	bne.n	8005cde <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2258      	movs	r2, #88	@ 0x58
 8005c90:	5a9b      	ldrh	r3, [r3, r2]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	b299      	uxth	r1, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	225a      	movs	r2, #90	@ 0x5a
 8005c9a:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	210a      	movs	r1, #10
 8005ca4:	187b      	adds	r3, r7, r1
 8005ca6:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2258      	movs	r2, #88	@ 0x58
 8005cac:	5a9b      	ldrh	r3, [r3, r2]
 8005cae:	187a      	adds	r2, r7, r1
 8005cb0:	8812      	ldrh	r2, [r2, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d804      	bhi.n	8005cc0 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	187a      	adds	r2, r7, r1
 8005cba:	215a      	movs	r1, #90	@ 0x5a
 8005cbc:	8812      	ldrh	r2, [r2, #0]
 8005cbe:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2258      	movs	r2, #88	@ 0x58
 8005cc4:	5a9a      	ldrh	r2, [r3, r2]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	215a      	movs	r1, #90	@ 0x5a
 8005cca:	5a5b      	ldrh	r3, [r3, r1]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f7ff f978 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cdc:	e003      	b.n	8005ce6 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f7ff f963 	bl	8004fac <HAL_UART_RxHalfCpltCallback>
}
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d00:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2280      	movs	r2, #128	@ 0x80
 8005d06:	589b      	ldr	r3, [r3, r2]
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2280      	movs	r2, #128	@ 0x80
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b80      	cmp	r3, #128	@ 0x80
 8005d16:	d10a      	bne.n	8005d2e <UART_DMAError+0x40>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b21      	cmp	r3, #33	@ 0x21
 8005d1c:	d107      	bne.n	8005d2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2252      	movs	r2, #82	@ 0x52
 8005d22:	2100      	movs	r1, #0
 8005d24:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7ff fe65 	bl	80059f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2240      	movs	r2, #64	@ 0x40
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d10a      	bne.n	8005d52 <UART_DMAError+0x64>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b22      	cmp	r3, #34	@ 0x22
 8005d40:	d107      	bne.n	8005d52 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	225a      	movs	r2, #90	@ 0x5a
 8005d46:	2100      	movs	r1, #0
 8005d48:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff fe77 	bl	8005a40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2284      	movs	r2, #132	@ 0x84
 8005d56:	589b      	ldr	r3, [r3, r2]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2184      	movs	r1, #132	@ 0x84
 8005d60:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7ff f929 	bl	8004fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b006      	add	sp, #24
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	225a      	movs	r2, #90	@ 0x5a
 8005d84:	2100      	movs	r1, #0
 8005d86:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7ff f916 	bl	8004fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d90:	46c0      	nop			@ (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b004      	add	sp, #16
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da0:	f3ef 8310 	mrs	r3, PRIMASK
 8005da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	2301      	movs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f383 8810 	msr	PRIMASK, r3
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2140      	movs	r1, #64	@ 0x40
 8005dc2:	438a      	bics	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f383 8810 	msr	PRIMASK, r3
}
 8005dd0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff f8db 	bl	8004f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b006      	add	sp, #24
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df6:	46c0      	nop			@ (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b002      	add	sp, #8
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <memset>:
 8005dfe:	0003      	movs	r3, r0
 8005e00:	1882      	adds	r2, r0, r2
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d100      	bne.n	8005e08 <memset+0xa>
 8005e06:	4770      	bx	lr
 8005e08:	7019      	strb	r1, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	e7f9      	b.n	8005e02 <memset+0x4>
	...

08005e10 <__libc_init_array>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	2600      	movs	r6, #0
 8005e14:	4c0c      	ldr	r4, [pc, #48]	@ (8005e48 <__libc_init_array+0x38>)
 8005e16:	4d0d      	ldr	r5, [pc, #52]	@ (8005e4c <__libc_init_array+0x3c>)
 8005e18:	1b64      	subs	r4, r4, r5
 8005e1a:	10a4      	asrs	r4, r4, #2
 8005e1c:	42a6      	cmp	r6, r4
 8005e1e:	d109      	bne.n	8005e34 <__libc_init_array+0x24>
 8005e20:	2600      	movs	r6, #0
 8005e22:	f000 f819 	bl	8005e58 <_init>
 8005e26:	4c0a      	ldr	r4, [pc, #40]	@ (8005e50 <__libc_init_array+0x40>)
 8005e28:	4d0a      	ldr	r5, [pc, #40]	@ (8005e54 <__libc_init_array+0x44>)
 8005e2a:	1b64      	subs	r4, r4, r5
 8005e2c:	10a4      	asrs	r4, r4, #2
 8005e2e:	42a6      	cmp	r6, r4
 8005e30:	d105      	bne.n	8005e3e <__libc_init_array+0x2e>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	00b3      	lsls	r3, r6, #2
 8005e36:	58eb      	ldr	r3, [r5, r3]
 8005e38:	4798      	blx	r3
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7ee      	b.n	8005e1c <__libc_init_array+0xc>
 8005e3e:	00b3      	lsls	r3, r6, #2
 8005e40:	58eb      	ldr	r3, [r5, r3]
 8005e42:	4798      	blx	r3
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7f2      	b.n	8005e2e <__libc_init_array+0x1e>
 8005e48:	08005ee4 	.word	0x08005ee4
 8005e4c:	08005ee4 	.word	0x08005ee4
 8005e50:	08005ee8 	.word	0x08005ee8
 8005e54:	08005ee4 	.word	0x08005ee4

08005e58 <_init>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	46c0      	nop			@ (mov r8, r8)
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr

08005e64 <_fini>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr
