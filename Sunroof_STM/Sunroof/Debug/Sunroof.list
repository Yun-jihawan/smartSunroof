
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005600  08005600  00006600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800566c  0800566c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800566c  0800566c  0000666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005674  08005674  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005678  08005678  00006678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800567c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000010  0800568c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800568c  000071bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011092  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cff  00000000  00000000  000180ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0001add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ade  00000000  00000000  0001bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001612f  00000000  00000000  0001c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133d7  00000000  00000000  000327fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f9c  00000000  00000000  00045bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfb70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  000cfbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d2c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055e8 	.word	0x080055e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080055e8 	.word	0x080055e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f005 f898 	bl	8005590 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000462:	4a38      	ldr	r2, [pc, #224]	@ (8000544 <MX_ADC_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b36      	ldr	r3, [pc, #216]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MX_ADC_Init+0xf4>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC_Init+0xf4>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fef0 	bl	80012b8 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 faf2 	bl	8000ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 f94f 	bl	8001798 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fae1 	bl	8000ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <MX_ADC_Init+0xfc>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_ADC_Init+0xf4>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f942 	bl	8001798 <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fad4 	bl	8000ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800051c:	003b      	movs	r3, r7
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_ADC_Init+0x100>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f935 	bl	8001798 <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 fac7 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40012400 	.word	0x40012400
 8000548:	04000002 	.word	0x04000002
 800054c:	3c008000 	.word	0x3c008000

08000550 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f005 f814 	bl	8005590 <memset>
  if(adcHandle->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <HAL_ADC_MspInit+0xa8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13d      	bne.n	80005ee <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 80005a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fc10 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0xb0>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f001 fc01 	bl	8001df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	@ 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40012400 	.word	0x40012400
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000800 	.word	0x50000800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	@ 0x2c
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2414      	movs	r4, #20
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 ffbb 	bl	8005590 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b52      	ldr	r3, [pc, #328]	@ (8000764 <MX_GPIO_Init+0x160>)
 800061c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061e:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000620:	2104      	movs	r1, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000626:	4b4f      	ldr	r3, [pc, #316]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062a:	2204      	movs	r2, #4
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	4b4b      	ldr	r3, [pc, #300]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063e:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <MX_GPIO_Init+0x160>)
 800064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b40      	ldr	r3, [pc, #256]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066e:	4b3d      	ldr	r3, [pc, #244]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROOF_DIR_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2160      	movs	r1, #96	@ 0x60
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fd4f 	bl	8002126 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 8000688:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <MX_GPIO_Init+0x164>)
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fd49 	bl	8002126 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|OPACITY_Pin, GPIO_PIN_RESET);
 8000694:	23c0      	movs	r3, #192	@ 0xc0
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4834      	ldr	r0, [pc, #208]	@ (800076c <MX_GPIO_Init+0x168>)
 800069a:	2200      	movs	r2, #0
 800069c:	0019      	movs	r1, r3
 800069e:	f001 fd42 	bl	8002126 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2284      	movs	r2, #132	@ 0x84
 80006ae:	0392      	lsls	r2, r2, #14
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_GPIO_Init+0x168>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f001 fb96 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2203      	movs	r2, #3
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	22c4      	movs	r2, #196	@ 0xc4
 80006d0:	0392      	lsls	r2, r2, #14
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	4a23      	ldr	r2, [pc, #140]	@ (800076c <MX_GPIO_Init+0x168>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f001 fb84 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROOF_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROOF_DIR_Pin;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2260      	movs	r2, #96	@ 0x60
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	193a      	adds	r2, r7, r4
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fb71 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2204      	movs	r2, #4
 8000712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2201      	movs	r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x164>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f001 fb5f 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin OPACITY_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|OPACITY_Pin;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	22c0      	movs	r2, #192	@ 0xc0
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	187b      	adds	r3, r7, r1
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <MX_GPIO_Init+0x168>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f001 fb4b 	bl	8001df0 <HAL_GPIO_Init>

}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00b      	add	sp, #44	@ 0x2c
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400
 800076c:	50000800 	.word	0x50000800

08000770 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1 Second Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	static uint8_t m = OPEN;
	if(htim->Instance == TIM7)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d102      	bne.n	8000788 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		sensor_read = 1;
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
	}
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40001400 	.word	0x40001400
 8000794:	200000ac 	.word	0x200000ac

08000798 <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a25      	ldr	r2, [pc, #148]	@ (800083c <HAL_UART_RxCpltCallback+0xa4>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d143      	bne.n	8000832 <HAL_UART_RxCpltCallback+0x9a>
    	rx_payload = 0;
 80007aa:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[0] << 24);
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <HAL_UART_RxCpltCallback+0xac>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	061a      	lsls	r2, r3, #24
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007be:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[1] << 16);
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <HAL_UART_RxCpltCallback+0xac>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007ce:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[2] << 8);
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <HAL_UART_RxCpltCallback+0xac>)
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	021a      	lsls	r2, r3, #8
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	431a      	orrs	r2, r3
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007de:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[3]);
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <HAL_UART_RxCpltCallback+0xac>)
 80007e2:	78db      	ldrb	r3, [r3, #3]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007ee:	601a      	str	r2, [r3, #0]

	    Control_Mode = ((rx_payload >> 24) & 0x01);
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	0e1b      	lsrs	r3, r3, #24
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2201      	movs	r2, #1
 80007fa:	4013      	ands	r3, r2
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_UART_RxCpltCallback+0xb0>)
 8000800:	701a      	strb	r2, [r3, #0]
		film_opacity = ((rx_payload >> 16) & 0x01);
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4013      	ands	r3, r2
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_UART_RxCpltCallback+0xb4>)
 8000812:	801a      	strh	r2, [r3, #0]
		roof_state = ((rx_payload >> 8) & 0x03);
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_UART_RxCpltCallback+0xa8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2203      	movs	r2, #3
 800081e:	4013      	ands	r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <HAL_UART_RxCpltCallback+0xb8>)
 8000824:	701a      	strb	r2, [r3, #0]

        // 다시 수신 시작 (반복 수신)
        HAL_UART_Receive_IT(&huart2, rx_buf, 4);
 8000826:	4907      	ldr	r1, [pc, #28]	@ (8000844 <HAL_UART_RxCpltCallback+0xac>)
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_UART_RxCpltCallback+0xbc>)
 800082a:	2204      	movs	r2, #4
 800082c:	0018      	movs	r0, r3
 800082e:	f003 fb93 	bl	8003f58 <HAL_UART_Receive_IT>
    }
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	40004400 	.word	0x40004400
 8000840:	200000a8 	.word	0x200000a8
 8000844:	200000a4 	.word	0x200000a4
 8000848:	20000088 	.word	0x20000088
 800084c:	20000098 	.word	0x20000098
 8000850:	20000000 	.word	0x20000000
 8000854:	20000130 	.word	0x20000130

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fcbc 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f88e 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff fece 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000868:	f000 fc10 	bl	800108c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800086c:	f7ff fdee 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 8000870:	f000 fb6e 	bl	8000f50 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000874:	f000 faee 	bl	8000e54 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000878:	f000 f8e6 	bl	8000a48 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800087c:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <main+0xe8>)
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fc40 	bl	8003104 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000884:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <main+0xec>)
 8000886:	2104      	movs	r1, #4
 8000888:	0018      	movs	r0, r3
 800088a:	f002 fcd5 	bl	8003238 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, rx_buf, 4);
 800088e:	492e      	ldr	r1, [pc, #184]	@ (8000948 <main+0xf0>)
 8000890:	4b2e      	ldr	r3, [pc, #184]	@ (800094c <main+0xf4>)
 8000892:	2204      	movs	r2, #4
 8000894:	0018      	movs	r0, r3
 8000896:	f003 fb5f 	bl	8003f58 <HAL_UART_Receive_IT>

  // Initialize
  encoder = 0;
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <main+0xf8>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
  roof_state = STOP;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <main+0xfc>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	701a      	strb	r2, [r3, #0]
  Sunroof_Set(STOP);
 80008a6:	2002      	movs	r0, #2
 80008a8:	f000 f970 	bl	8000b8c <Sunroof_Set>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 센서 값 수신 및 UART 송신
	  if(sensor_read)
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <main+0x100>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d02b      	beq.n	800090c <main+0xb4>
	  {
		  read_illum();
 80008b4:	f000 fa3e 	bl	8000d34 <read_illum>
		  read_rain();
 80008b8:	f000 fa56 	bl	8000d68 <read_rain>

		  sensor_read = 0;
 80008bc:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <main+0x100>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]

		  //UART Send
		  tx_payload = 0;
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <main+0x104>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)in_illum & 0x0FFF) << 20;  // In Illum : 12 -> 32 - 12 = 20
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <main+0x108>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	051a      	lsls	r2, r3, #20
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <main+0x104>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	431a      	orrs	r2, r3
 80008d6:	4b21      	ldr	r3, [pc, #132]	@ (800095c <main+0x104>)
 80008d8:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)out_illum & 0x0FFF) << 8;   // Out Illum : 12 -> 20 - 12 = 8
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <main+0x10c>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <main+0x110>)
 80008e4:	401a      	ands	r2, r3
 80008e6:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <main+0x104>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <main+0x104>)
 80008ee:	601a      	str	r2, [r3, #0]
		  tx_payload |= (rain_state & 0x01) << 7;               // rain_flag : 1 0 -> 8 - 1 = 7
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <main+0x114>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	01db      	lsls	r3, r3, #7
 80008f8:	2280      	movs	r2, #128	@ 0x80
 80008fa:	4013      	ands	r3, r2
 80008fc:	001a      	movs	r2, r3
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <main+0x104>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	431a      	orrs	r2, r3
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <main+0x104>)
 8000906:	601a      	str	r2, [r3, #0]

		  Send_Sensor_Data();
 8000908:	f000 f8b4 	bl	8000a74 <Send_Sensor_Data>
	  }

	  Sunroof_Set(roof_state);
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <main+0xfc>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f93a 	bl	8000b8c <Sunroof_Set>

	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, Control_Mode);
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <main+0x118>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4815      	ldr	r0, [pc, #84]	@ (8000974 <main+0x11c>)
 8000920:	001a      	movs	r2, r3
 8000922:	2104      	movs	r1, #4
 8000924:	f001 fbff 	bl	8002126 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, film_opacity);
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <main+0x120>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2da      	uxtb	r2, r3
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <main+0x124>)
 8000936:	0019      	movs	r1, r3
 8000938:	f001 fbf5 	bl	8002126 <HAL_GPIO_WritePin>
	  if(sensor_read)
 800093c:	e7b6      	b.n	80008ac <main+0x54>
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	200000f0 	.word	0x200000f0
 8000944:	200000b0 	.word	0x200000b0
 8000948:	200000a4 	.word	0x200000a4
 800094c:	20000130 	.word	0x20000130
 8000950:	2000008c 	.word	0x2000008c
 8000954:	20000000 	.word	0x20000000
 8000958:	200000ac 	.word	0x200000ac
 800095c:	200000a0 	.word	0x200000a0
 8000960:	20000090 	.word	0x20000090
 8000964:	20000092 	.word	0x20000092
 8000968:	000fff00 	.word	0x000fff00
 800096c:	20000096 	.word	0x20000096
 8000970:	20000088 	.word	0x20000088
 8000974:	50000400 	.word	0x50000400
 8000978:	20000098 	.word	0x20000098
 800097c:	50000800 	.word	0x50000800

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b09f      	sub	sp, #124	@ 0x7c
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	2440      	movs	r4, #64	@ 0x40
 8000988:	193b      	adds	r3, r7, r4
 800098a:	0018      	movs	r0, r3
 800098c:	2338      	movs	r3, #56	@ 0x38
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f004 fdfd 	bl	8005590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000996:	232c      	movs	r3, #44	@ 0x2c
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	2314      	movs	r3, #20
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f004 fdf5 	bl	8005590 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	0018      	movs	r0, r3
 80009aa:	2328      	movs	r3, #40	@ 0x28
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f004 fdee 	bl	8005590 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <SystemClock_Config+0xc0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <SystemClock_Config+0xc4>)
 80009ba:	401a      	ands	r2, r3
 80009bc:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <SystemClock_Config+0xc0>)
 80009be:	2180      	movs	r1, #128	@ 0x80
 80009c0:	0109      	lsls	r1, r1, #4
 80009c2:	430a      	orrs	r2, r1
 80009c4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	22a0      	movs	r2, #160	@ 0xa0
 80009d0:	02d2      	lsls	r2, r2, #11
 80009d2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 fbdb 	bl	8002198 <HAL_RCC_OscConfig>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f86d 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	212c      	movs	r1, #44	@ 0x2c
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	220f      	movs	r2, #15
 80009f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2202      	movs	r2, #2
 80009f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 ff96 	bl	8002940 <HAL_RCC_ClockConfig>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a18:	f000 f854 	bl	8000ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2202      	movs	r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 f98c 	bl	8002d48 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a34:	f000 f846 	bl	8000ac4 <Error_Handler>
  }
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b01f      	add	sp, #124	@ 0x7c
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40007000 	.word	0x40007000
 8000a44:	ffffe7ff 	.word	0xffffe7ff

08000a48 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2005      	movs	r0, #5
 8000a52:	f001 f913 	bl	8001c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a56:	2005      	movs	r0, #5
 8000a58:	f001 f925 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2012      	movs	r0, #18
 8000a62:	f001 f90b 	bl	8001c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a66:	2012      	movs	r0, #18
 8000a68:	f001 f91d 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <Send_Sensor_Data>:

/* USER CODE BEGIN 4 */
void Send_Sensor_Data(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	tx_buf[0] = (tx_payload >> 24) & 0xFF;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <Send_Sensor_Data+0x44>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	0e1b      	lsrs	r3, r3, #24
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <Send_Sensor_Data+0x48>)
 8000a82:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (tx_payload >> 16) & 0xFF;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <Send_Sensor_Data+0x44>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	0c1b      	lsrs	r3, r3, #16
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <Send_Sensor_Data+0x48>)
 8000a8e:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (tx_payload >> 8) & 0xFF;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <Send_Sensor_Data+0x44>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <Send_Sensor_Data+0x48>)
 8000a9a:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = tx_payload & 0xFF;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <Send_Sensor_Data+0x44>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <Send_Sensor_Data+0x48>)
 8000aa4:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit(&huart2, tx_buf, 4, 100);
 8000aa6:	4905      	ldr	r1, [pc, #20]	@ (8000abc <Send_Sensor_Data+0x48>)
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <Send_Sensor_Data+0x4c>)
 8000aaa:	2364      	movs	r3, #100	@ 0x64
 8000aac:	2204      	movs	r2, #4
 8000aae:	f003 f9b3 	bl	8003e18 <HAL_UART_Transmit>
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000a0 	.word	0x200000a0
 8000abc:	2000009c 	.word	0x2000009c
 8000ac0:	20000130 	.word	0x20000130

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_GPIO_EXTI_Callback>:
 */

#include "roof.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	801a      	strh	r2, [r3, #0]
	uint8_t A_state = 0;
 8000adc:	250f      	movs	r5, #15
 8000ade:	197b      	adds	r3, r7, r5
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
	uint8_t B_state = 0;
 8000ae4:	260e      	movs	r6, #14
 8000ae6:	19bb      	adds	r3, r7, r6
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == ENC_A_Pin) {
 8000aec:	1dbb      	adds	r3, r7, #6
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11e      	bne.n	8000b32 <HAL_GPIO_EXTI_Callback+0x62>
		A_state = HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin);
 8000af4:	197c      	adds	r4, r7, r5
 8000af6:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 faf6 	bl	80020ec <HAL_GPIO_ReadPin>
 8000b00:	0003      	movs	r3, r0
 8000b02:	7023      	strb	r3, [r4, #0]
		B_state = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000b04:	19bc      	adds	r4, r7, r6
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b08:	2102      	movs	r1, #2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 faee 	bl	80020ec <HAL_GPIO_ReadPin>
 8000b10:	0003      	movs	r3, r0
 8000b12:	7023      	strb	r3, [r4, #0]
		encoder += ((A_state == B_state) ? 1 : -1);
 8000b14:	197a      	adds	r2, r7, r5
 8000b16:	19bb      	adds	r3, r7, r6
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d101      	bne.n	8000b24 <HAL_GPIO_EXTI_Callback+0x54>
 8000b20:	2201      	movs	r2, #1
 8000b22:	e001      	b.n	8000b28 <HAL_GPIO_EXTI_Callback+0x58>
 8000b24:	2301      	movs	r3, #1
 8000b26:	425a      	negs	r2, r3
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	18d2      	adds	r2, r2, r3
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b30:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == ENC_B_Pin) {
 8000b32:	1dbb      	adds	r3, r7, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d120      	bne.n	8000b7c <HAL_GPIO_EXTI_Callback+0xac>
		A_state = HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin);
 8000b3a:	250f      	movs	r5, #15
 8000b3c:	197c      	adds	r4, r7, r5
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 fad2 	bl	80020ec <HAL_GPIO_ReadPin>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	7023      	strb	r3, [r4, #0]
		B_state = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000b4c:	260e      	movs	r6, #14
 8000b4e:	19bc      	adds	r4, r7, r6
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b52:	2102      	movs	r1, #2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f001 fac9 	bl	80020ec <HAL_GPIO_ReadPin>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	7023      	strb	r3, [r4, #0]
		encoder += ((A_state == B_state) ? -1 : 1);
 8000b5e:	197a      	adds	r2, r7, r5
 8000b60:	19bb      	adds	r3, r7, r6
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d102      	bne.n	8000b70 <HAL_GPIO_EXTI_Callback+0xa0>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	425a      	negs	r2, r3
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_EXTI_Callback+0xa2>
 8000b70:	2201      	movs	r2, #1
 8000b72:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	18d2      	adds	r2, r2, r3
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b7a:	601a      	str	r2, [r3, #0]
	}
}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b005      	add	sp, #20
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b84:	50000800 	.word	0x50000800
 8000b88:	2000008c 	.word	0x2000008c

08000b8c <Sunroof_Set>:

void Sunroof_Set(uint8_t mode) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	0002      	movs	r2, r0
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d023      	beq.n	8000be8 <Sunroof_Set+0x5c>
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d142      	bne.n	8000c2a <Sunroof_Set+0x9e>
	case OPEN:
		if(encoder <= ROOF_MAX) {
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <Sunroof_Set+0xbc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a28      	ldr	r2, [pc, #160]	@ (8000c4c <Sunroof_Set+0xc0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	dc11      	bgt.n	8000bd2 <Sunroof_Set+0x46>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <Sunroof_Set+0xc4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2246      	movs	r2, #70	@ 0x46
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <Sunroof_Set+0xc8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2180      	movs	r1, #128	@ 0x80
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 fab2 	bl	8002126 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000bc2:	23a0      	movs	r3, #160	@ 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 faab 	bl	8002126 <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000bd0:	e036      	b.n	8000c40 <Sunroof_Set+0xb4>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <Sunroof_Set+0xc4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000bda:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <Sunroof_Set+0xc8>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 faa0 	bl	8002126 <HAL_GPIO_WritePin>
		break;
 8000be6:	e02b      	b.n	8000c40 <Sunroof_Set+0xb4>
	case CLOSE:
		if(encoder >= 0) {
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <Sunroof_Set+0xbc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db11      	blt.n	8000c14 <Sunroof_Set+0x88>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <Sunroof_Set+0xc4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2246      	movs	r2, #70	@ 0x46
 8000bf6:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <Sunroof_Set+0xc8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 fa91 	bl	8002126 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000c04:	23a0      	movs	r3, #160	@ 0xa0
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2140      	movs	r1, #64	@ 0x40
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fa8a 	bl	8002126 <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000c12:	e015      	b.n	8000c40 <Sunroof_Set+0xb4>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <Sunroof_Set+0xc4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <Sunroof_Set+0xc8>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	0018      	movs	r0, r3
 8000c24:	f001 fa7f 	bl	8002126 <HAL_GPIO_WritePin>
		break;
 8000c28:	e00a      	b.n	8000c40 <Sunroof_Set+0xb4>
	case STOP:
	default:
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <Sunroof_Set+0xc4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <Sunroof_Set+0xc8>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	2180      	movs	r1, #128	@ 0x80
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fa74 	bl	8002126 <HAL_GPIO_WritePin>
		break;
 8000c3e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000008c 	.word	0x2000008c
 8000c4c:	00001388 	.word	0x00001388
 8000c50:	200000b0 	.word	0x200000b0
 8000c54:	50000800 	.word	0x50000800

08000c58 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000c60:	2316      	movs	r3, #22
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <HW_AdcReadChannel+0xc4>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2208      	movs	r2, #8
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d1f9      	bne.n	8000c6a <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <HW_AdcReadChannel+0xc8>)
 8000c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <HW_AdcReadChannel+0xc8>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0089      	lsls	r1, r1, #2
 8000c80:	430a      	orrs	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fead 	bl	80019e8 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000c8e:	240c      	movs	r4, #12
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a25      	ldr	r2, [pc, #148]	@ (8000d28 <HW_AdcReadChannel+0xd0>)
 8000c94:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <HW_AdcReadChannel+0xd4>)
 8000c9a:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000c9c:	193a      	adds	r2, r7, r4
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fd78 	bl	8001798 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8000ca8:	0021      	movs	r1, r4
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2280      	movs	r2, #128	@ 0x80
 8000cb4:	0152      	lsls	r2, r2, #5
 8000cb6:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000cb8:	187a      	adds	r2, r7, r1
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fd6a 	bl	8001798 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fc6a 	bl	80015a0 <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8000ccc:	2301      	movs	r3, #1
 8000cce:	425a      	negs	r2, r3
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fcb7 	bl	8001648 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fd4f 	bl	8001780 <HAL_ADC_GetValue>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	2016      	movs	r0, #22
 8000ce6:	183b      	adds	r3, r7, r0
 8000ce8:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HW_AdcReadChannel+0xcc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <HW_AdcReadChannel+0xc8>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HW_AdcReadChannel+0xc8>)
 8000d08:	4909      	ldr	r1, [pc, #36]	@ (8000d30 <HW_AdcReadChannel+0xd8>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8000d0e:	183b      	adds	r3, r7, r0
 8000d10:	881b      	ldrh	r3, [r3, #0]
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b007      	add	sp, #28
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	40007000 	.word	0x40007000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	2000002c 	.word	0x2000002c
 8000d28:	0007ffff 	.word	0x0007ffff
 8000d2c:	00001001 	.word	0x00001001
 8000d30:	fffffdff 	.word	0xfffffdff

08000d34 <read_illum>:

void read_illum(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <read_illum+0x28>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff ff8c 	bl	8000c58 <HW_AdcReadChannel>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <read_illum+0x2c>)
 8000d46:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff ff85 	bl	8000c58 <HW_AdcReadChannel>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	001a      	movs	r2, r3
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <read_illum+0x30>)
 8000d54:	801a      	strh	r2, [r3, #0]
}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	04000002 	.word	0x04000002
 8000d60:	20000090 	.word	0x20000090
 8000d64:	20000092 	.word	0x20000092

08000d68 <read_rain>:

void read_rain(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <read_rain+0x34>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff ff72 	bl	8000c58 <HW_AdcReadChannel>
 8000d74:	0003      	movs	r3, r0
 8000d76:	001a      	movs	r2, r3
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <read_rain+0x38>)
 8000d7a:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <read_rain+0x38>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	22c8      	movs	r2, #200	@ 0xc8
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	429a      	cmp	r2, r3
 8000d88:	419b      	sbcs	r3, r3
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	001a      	movs	r2, r3
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <read_rain+0x3c>)
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	3c008000 	.word	0x3c008000
 8000da0:	20000094 	.word	0x20000094
 8000da4:	20000096 	.word	0x20000096

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <HAL_MspInit+0x24>)
 8000dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_MspInit+0x24>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <HAL_MspInit+0x24>)
 8000dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_MspInit+0x24>)
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	0549      	lsls	r1, r1, #21
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	e7fd      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	e7fd      	b.n	8000ddc <HardFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 fa42 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f001 f9aa 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f001 f9a7 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <TIM7_IRQHandler+0x14>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f002 fa9c 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	200000f0 	.word	0x200000f0

08000e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <USART2_IRQHandler+0x14>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f003 f8ec 	bl	8004014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	20000130 	.word	0x20000130

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	2318      	movs	r3, #24
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	0018      	movs	r0, r3
 8000e60:	2310      	movs	r3, #16
 8000e62:	001a      	movs	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f004 fb93 	bl	8005590 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2308      	movs	r3, #8
 8000e72:	001a      	movs	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f004 fb8b 	bl	8005590 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	2310      	movs	r3, #16
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f004 fb84 	bl	8005590 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e88:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	05d2      	lsls	r2, r2, #23
 8000e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000e9e:	2263      	movs	r2, #99	@ 0x63
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eae:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f002 f8e7 	bl	8003084 <HAL_TIM_Base_Init>
 8000eb6:	1e03      	subs	r3, r0, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000eba:	f7ff fe03 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	2118      	movs	r1, #24
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	0152      	lsls	r2, r2, #5
 8000ec6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec8:	187a      	adds	r2, r7, r1
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f002 fbd6 	bl	8003680 <HAL_TIM_ConfigClockSource>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ed8:	f7ff fdf4 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f002 f962 	bl	80031a8 <HAL_TIM_PWM_Init>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ee8:	f7ff fdec 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2110      	movs	r1, #16
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	187a      	adds	r2, r7, r1
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f002 fed7 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f0a:	f7ff fddb 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2260      	movs	r2, #96	@ 0x60
 8000f12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	003b      	movs	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f26:	0039      	movs	r1, r7
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f002 fae1 	bl	80034f4 <HAL_TIM_PWM_ConfigChannel>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000f36:	f7ff fdc5 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <MX_TIM2_Init+0xf8>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 f869 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b00a      	add	sp, #40	@ 0x28
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	200000b0 	.word	0x200000b0

08000f50 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f56:	003b      	movs	r3, r7
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f004 fb16 	bl	8005590 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000f66:	4a16      	ldr	r2, [pc, #88]	@ (8000fc0 <MX_TIM7_Init+0x70>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000f6c:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <MX_TIM7_Init+0x74>)
 8000f6e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000f78:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_TIM7_Init+0x78>)
 8000f7a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f002 f87d 	bl	8003084 <HAL_TIM_Base_Init>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f8e:	f7ff fd99 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f9e:	003a      	movs	r2, r7
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_TIM7_Init+0x6c>)
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f002 fe85 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000fae:	f7ff fd89 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	200000f0 	.word	0x200000f0
 8000fc0:	40001400 	.word	0x40001400
 8000fc4:	00001f3f 	.word	0x00001f3f
 8000fc8:	0000270f 	.word	0x0000270f

08000fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d106      	bne.n	8000fee <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000fec:	e00a      	b.n	8001004 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM7)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d105      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000ffe:	2120      	movs	r1, #32
 8001000:	430a      	orrs	r2, r1
 8001002:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	40001400 	.word	0x40001400

08001014 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	240c      	movs	r4, #12
 800101e:	193b      	adds	r3, r7, r4
 8001020:	0018      	movs	r0, r3
 8001022:	2314      	movs	r3, #20
 8001024:	001a      	movs	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f004 fab2 	bl	8005590 <memset>
  if(timHandle->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	429a      	cmp	r2, r3
 8001036:	d121      	bne.n	800107c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_TIM_MspPostInit+0x70>)
 800103a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_TIM_MspPostInit+0x70>)
 800103e:	2102      	movs	r1, #2
 8001040:	430a      	orrs	r2, r1
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_TIM_MspPostInit+0x70>)
 8001046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001048:	2202      	movs	r2, #2
 800104a:	4013      	ands	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001050:	0021      	movs	r1, r4
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2208      	movs	r2, #8
 8001056:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2202      	movs	r2, #2
 800105c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2202      	movs	r2, #2
 800106e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	187b      	adds	r3, r7, r1
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_TIM_MspPostInit+0x74>)
 8001074:	0019      	movs	r1, r3
 8001076:	0010      	movs	r0, r2
 8001078:	f000 feba 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b009      	add	sp, #36	@ 0x24
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	50000400 	.word	0x50000400

0800108c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 8001092:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <MX_USART2_UART_Init+0x5c>)
 8001094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 8001098:	22e1      	movs	r2, #225	@ 0xe1
 800109a:	0252      	lsls	r2, r2, #9
 800109c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 fe4d 	bl	8003d70 <HAL_UART_Init>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010da:	f7ff fcf3 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000130 	.word	0x20000130
 80010e8:	40004400 	.word	0x40004400

080010ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	240c      	movs	r4, #12
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	0018      	movs	r0, r3
 80010fa:	2314      	movs	r3, #20
 80010fc:	001a      	movs	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	f004 fa46 	bl	8005590 <memset>
  if(uartHandle->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <HAL_UART_MspInit+0x90>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d131      	bne.n	8001172 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <HAL_UART_MspInit+0x94>)
 8001110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_UART_MspInit+0x94>)
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	0289      	lsls	r1, r1, #10
 8001118:	430a      	orrs	r2, r1
 800111a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_UART_MspInit+0x94>)
 800111e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <HAL_UART_MspInit+0x94>)
 8001122:	2101      	movs	r1, #1
 8001124:	430a      	orrs	r2, r1
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_UART_MspInit+0x94>)
 800112a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112c:	2201      	movs	r2, #1
 800112e:	4013      	ands	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001134:	0021      	movs	r1, r4
 8001136:	187b      	adds	r3, r7, r1
 8001138:	220c      	movs	r2, #12
 800113a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2202      	movs	r2, #2
 8001140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2203      	movs	r2, #3
 800114c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2204      	movs	r2, #4
 8001152:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	187a      	adds	r2, r7, r1
 8001156:	23a0      	movs	r3, #160	@ 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fe47 	bl	8001df0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	201c      	movs	r0, #28
 8001168:	f000 fd88 	bl	8001c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800116c:	201c      	movs	r0, #28
 800116e:	f000 fd9a 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b009      	add	sp, #36	@ 0x24
 8001178:	bd90      	pop	{r4, r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	40004400 	.word	0x40004400
 8001180:	40021000 	.word	0x40021000

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001186:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001188:	f7ff fe5e 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	@ (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	@ (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 f9f5 	bl	80055a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fb4f 	bl	8000858 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
   ldr   r0, =_estack
 80011bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011c8:	0800567c 	.word	0x0800567c
  ldr r2, =_sbss
 80011cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011d0:	200001bc 	.word	0x200001bc

080011d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_COMP_IRQHandler>
	...

080011d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_Init+0x3c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Init+0x3c>)
 80011ea:	2140      	movs	r1, #64	@ 0x40
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f811 	bl	8001218 <HAL_InitTick>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d003      	beq.n	8001202 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e001      	b.n	8001206 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001202:	f7ff fdd1 	bl	8000da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_InitTick+0x5c>)
 8001222:	681c      	ldr	r4, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	0019      	movs	r1, r3
 800122a:	23fa      	movs	r3, #250	@ 0xfa
 800122c:	0098      	lsls	r0, r3, #2
 800122e:	f7fe ff6b 	bl	8000108 <__udivsi3>
 8001232:	0003      	movs	r3, r0
 8001234:	0019      	movs	r1, r3
 8001236:	0020      	movs	r0, r4
 8001238:	f7fe ff66 	bl	8000108 <__udivsi3>
 800123c:	0003      	movs	r3, r0
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fd41 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e00f      	b.n	800126c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d80b      	bhi.n	800126a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	0018      	movs	r0, r3
 800125c:	f000 fd0e 	bl	8001c7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_InitTick+0x64>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b003      	add	sp, #12
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	20000004 	.word	0x20000004
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	001a      	movs	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	18d2      	adds	r2, r2, r3
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_IncTick+0x20>)
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	200001b8 	.word	0x200001b8

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	200001b8 	.word	0x200001b8

080012b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e159      	b.n	800157e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2250      	movs	r2, #80	@ 0x50
 80012dc:	2100      	movs	r1, #0
 80012de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff f934 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ec:	2210      	movs	r2, #16
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d005      	beq.n	8001300 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012fe:	d00b      	beq.n	8001318 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001304:	2210      	movs	r2, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2250      	movs	r2, #80	@ 0x50
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e132      	b.n	800157e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131c:	4a9a      	ldr	r2, [pc, #616]	@ (8001588 <HAL_ADC_Init+0x2d0>)
 800131e:	4013      	ands	r3, r2
 8001320:	2202      	movs	r2, #2
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2203      	movs	r2, #3
 8001330:	4013      	ands	r3, r2
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_ADC_Init+0x90>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_ADC_Init+0x90>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_ADC_Init+0x92>
 8001348:	2300      	movs	r3, #0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d149      	bne.n	80013e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	@ 0xc0
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	429a      	cmp	r2, r3
 8001358:	d00b      	beq.n	8001372 <HAL_ADC_Init+0xba>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	429a      	cmp	r2, r3
 8001364:	d005      	beq.n	8001372 <HAL_ADC_Init+0xba>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	429a      	cmp	r2, r3
 8001370:	d111      	bne.n	8001396 <HAL_ADC_Init+0xde>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	0892      	lsrs	r2, r2, #2
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6919      	ldr	r1, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	e014      	b.n	80013c0 <HAL_ADC_Init+0x108>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	0892      	lsrs	r2, r2, #2
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	4b79      	ldr	r3, [pc, #484]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b78      	ldr	r3, [pc, #480]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013ac:	4978      	ldr	r1, [pc, #480]	@ (8001590 <HAL_ADC_Init+0x2d8>)
 80013ae:	400a      	ands	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	4b76      	ldr	r3, [pc, #472]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4b74      	ldr	r3, [pc, #464]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2118      	movs	r1, #24
 80013cc:	438a      	bics	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013e2:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b69      	ldr	r3, [pc, #420]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013e8:	496a      	ldr	r1, [pc, #424]	@ (8001594 <HAL_ADC_Init+0x2dc>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80013ee:	4b67      	ldr	r3, [pc, #412]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	065a      	lsls	r2, r3, #25
 80013f8:	4b64      	ldr	r3, [pc, #400]	@ (800158c <HAL_ADC_Init+0x2d4>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	055b      	lsls	r3, r3, #21
 8001408:	4013      	ands	r3, r2
 800140a:	d108      	bne.n	800141e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2180      	movs	r1, #128	@ 0x80
 8001418:	0549      	lsls	r1, r1, #21
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	495b      	ldr	r1, [pc, #364]	@ (8001598 <HAL_ADC_Init+0x2e0>)
 800142a:	400a      	ands	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68d9      	ldr	r1, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d101      	bne.n	8001444 <HAL_ADC_Init+0x18c>
 8001440:	2304      	movs	r3, #4
 8001442:	e000      	b.n	8001446 <HAL_ADC_Init+0x18e>
 8001444:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001446:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2020      	movs	r0, #32
 800144c:	5c1b      	ldrb	r3, [r3, r0]
 800144e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001450:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	202c      	movs	r0, #44	@ 0x2c
 8001456:	5c1b      	ldrb	r3, [r3, r0]
 8001458:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800145a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001460:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001468:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001470:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800147e:	23c2      	movs	r3, #194	@ 0xc2
 8001480:	33ff      	adds	r3, #255	@ 0xff
 8001482:	429a      	cmp	r2, r3
 8001484:	d00b      	beq.n	800149e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68d9      	ldr	r1, [r3, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2221      	movs	r2, #33	@ 0x21
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11a      	bne.n	80014de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	5c9b      	ldrb	r3, [r3, r2]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	0249      	lsls	r1, r1, #9
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	e00b      	b.n	80014de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ca:	2220      	movs	r2, #32
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	2201      	movs	r2, #1
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d11f      	bne.n	8001526 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	492a      	ldr	r1, [pc, #168]	@ (800159c <HAL_ADC_Init+0x2e4>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6919      	ldr	r1, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001504:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800150a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	e00e      	b.n	8001544 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	438a      	bics	r2, r1
 8001542:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2107      	movs	r1, #7
 8001550:	438a      	bics	r2, r1
 8001552:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6959      	ldr	r1, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001570:	2203      	movs	r2, #3
 8001572:	4393      	bics	r3, r2
 8001574:	2201      	movs	r2, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	fffffefd 	.word	0xfffffefd
 800158c:	40012708 	.word	0x40012708
 8001590:	ffc3ffff 	.word	0xffc3ffff
 8001594:	fdffffff 	.word	0xfdffffff
 8001598:	fffe0219 	.word	0xfffe0219
 800159c:	fffffc03 	.word	0xfffffc03

080015a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d138      	bne.n	800162e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2250      	movs	r2, #80	@ 0x50
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Start+0x2a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e038      	b.n	800163c <HAL_ADC_Start+0x9c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2250      	movs	r2, #80	@ 0x50
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d007      	beq.n	80015ea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80015da:	230f      	movs	r3, #15
 80015dc:	18fc      	adds	r4, r7, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 f979 	bl	80018d8 <ADC_Enable>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d120      	bne.n	8001636 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f8:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <HAL_ADC_Start+0xa4>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2280      	movs	r2, #128	@ 0x80
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2250      	movs	r2, #80	@ 0x50
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	221c      	movs	r2, #28
 800161a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2104      	movs	r1, #4
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e003      	b.n	8001636 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800162e:	230f      	movs	r3, #15
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2202      	movs	r2, #2
 8001634:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001636:	230f      	movs	r3, #15
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b005      	add	sp, #20
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	fffff0fe 	.word	0xfffff0fe

08001648 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b08      	cmp	r3, #8
 8001660:	d102      	bne.n	8001668 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001662:	2308      	movs	r3, #8
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e014      	b.n	8001692 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	4013      	ands	r3, r2
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10b      	bne.n	800168e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	2220      	movs	r2, #32
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2250      	movs	r2, #80	@ 0x50
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e072      	b.n	8001774 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800168e:	230c      	movs	r3, #12
 8001690:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001692:	f7ff fe07 	bl	80012a4 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800169a:	e01f      	b.n	80016dc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	d01c      	beq.n	80016dc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_ADC_PollForConversion+0x70>
 80016a8:	f7ff fdfc 	bl	80012a4 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d211      	bcs.n	80016dc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	d10b      	bne.n	80016dc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	2204      	movs	r2, #4
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2250      	movs	r2, #80	@ 0x50
 80016d4:	2100      	movs	r1, #0
 80016d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e04b      	b.n	8001774 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	d0d9      	beq.n	800169c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	2280      	movs	r2, #128	@ 0x80
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	23c0      	movs	r3, #192	@ 0xc0
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4013      	ands	r3, r2
 8001702:	d12e      	bne.n	8001762 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2220      	movs	r2, #32
 8001708:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	d129      	bne.n	8001762 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	4013      	ands	r3, r2
 8001718:	2b08      	cmp	r3, #8
 800171a:	d122      	bne.n	8001762 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d110      	bne.n	800174a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	210c      	movs	r1, #12
 8001734:	438a      	bics	r2, r1
 8001736:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173c:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <HAL_ADC_PollForConversion+0x134>)
 800173e:	4013      	ands	r3, r2
 8001740:	2201      	movs	r2, #1
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	@ 0x54
 8001748:	e00b      	b.n	8001762 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174e:	2220      	movs	r2, #32
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	2201      	movs	r2, #1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d103      	bne.n	8001772 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bd80      	pop	{r7, pc}
 800177c:	fffffefe 	.word	0xfffffefe

08001780 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2250      	movs	r2, #80	@ 0x50
 80017a6:	5c9b      	ldrb	r3, [r3, r2]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x18>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e085      	b.n	80018bc <HAL_ADC_ConfigChannel+0x124>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2250      	movs	r2, #80	@ 0x50
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d00b      	beq.n	80017dc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c8:	2220      	movs	r2, #32
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2250      	movs	r2, #80	@ 0x50
 80017d4:	2100      	movs	r1, #0
 80017d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e06f      	b.n	80018bc <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a38      	ldr	r2, [pc, #224]	@ (80018c4 <HAL_ADC_ConfigChannel+0x12c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d035      	beq.n	8001852 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	035b      	lsls	r3, r3, #13
 80017f2:	0b5a      	lsrs	r2, r3, #13
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	02db      	lsls	r3, r3, #11
 8001804:	4013      	ands	r3, r2
 8001806:	d009      	beq.n	800181c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001808:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	0409      	lsls	r1, r1, #16
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001816:	200a      	movs	r0, #10
 8001818:	f000 f8c6 	bl	80019a8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d006      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001828:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 800182e:	2180      	movs	r1, #128	@ 0x80
 8001830:	03c9      	lsls	r1, r1, #15
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	025b      	lsls	r3, r3, #9
 800183e:	4013      	ands	r3, r2
 8001840:	d037      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	0449      	lsls	r1, r1, #17
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e02f      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	035b      	lsls	r3, r3, #13
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	43d9      	mvns	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	400a      	ands	r2, r1
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	02db      	lsls	r3, r3, #11
 8001872:	4013      	ands	r3, r2
 8001874:	d005      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 800187c:	4913      	ldr	r1, [pc, #76]	@ (80018cc <HAL_ADC_ConfigChannel+0x134>)
 800187e:	400a      	ands	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	4013      	ands	r3, r2
 800188c:	d005      	beq.n	800189a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 8001894:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <HAL_ADC_ConfigChannel+0x138>)
 8001896:	400a      	ands	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	4013      	ands	r3, r2
 80018a4:	d005      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <HAL_ADC_ConfigChannel+0x130>)
 80018ac:	4909      	ldr	r1, [pc, #36]	@ (80018d4 <HAL_ADC_ConfigChannel+0x13c>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2250      	movs	r2, #80	@ 0x50
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	00001001 	.word	0x00001001
 80018c8:	40012708 	.word	0x40012708
 80018cc:	ff7fffff 	.word	0xff7fffff
 80018d0:	ffbfffff 	.word	0xffbfffff
 80018d4:	feffffff 	.word	0xfeffffff

080018d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2203      	movs	r2, #3
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <ADC_Enable+0x2c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <ADC_Enable+0x2c>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <ADC_Enable+0x2e>
 8001904:	2300      	movs	r3, #0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d146      	bne.n	8001998 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <ADC_Enable+0xcc>)
 8001912:	4013      	ands	r3, r2
 8001914:	d00d      	beq.n	8001932 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	2210      	movs	r2, #16
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	2201      	movs	r2, #1
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e033      	b.n	800199a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 f830 	bl	80019a8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001948:	f7ff fcac 	bl	80012a4 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001950:	e01b      	b.n	800198a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001952:	f7ff fca7 	bl	80012a4 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d914      	bls.n	800198a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	2b01      	cmp	r3, #1
 800196c:	d00d      	beq.n	800198a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001972:	2210      	movs	r2, #16
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	2201      	movs	r2, #1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e007      	b.n	800199a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	2b01      	cmp	r3, #1
 8001996:	d1dc      	bne.n	8001952 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	80000017 	.word	0x80000017

080019a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <ADC_DelayMicroSecond+0x38>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	490b      	ldr	r1, [pc, #44]	@ (80019e4 <ADC_DelayMicroSecond+0x3c>)
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7fe fba6 	bl	8000108 <__udivsi3>
 80019bc:	0003      	movs	r3, r0
 80019be:	001a      	movs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4353      	muls	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80019c6:	e002      	b.n	80019ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <ADC_DelayMicroSecond+0x20>
  }
}
 80019d4:	46c0      	nop			@ (mov r8, r8)
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	20000004 	.word	0x20000004
 80019e4:	000f4240 	.word	0x000f4240

080019e8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f2:	2317      	movs	r3, #23
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2250      	movs	r2, #80	@ 0x50
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADCEx_Calibration_Start+0x28>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e083      	b.n	8001b18 <HAL_ADCEx_Calibration_Start+0x130>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2250      	movs	r2, #80	@ 0x50
 8001a14:	2101      	movs	r1, #1
 8001a16:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2203      	movs	r2, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_ADCEx_Calibration_Start+0x50>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ADCEx_Calibration_Start+0x50>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_ADCEx_Calibration_Start+0x52>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d15b      	bne.n	8001af6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	4a37      	ldr	r2, [pc, #220]	@ (8001b20 <HAL_ADCEx_Calibration_Start+0x138>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	2202      	movs	r2, #2
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2103      	movs	r1, #3
 8001a66:	438a      	bics	r2, r1
 8001a68:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0609      	lsls	r1, r1, #24
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8001a7c:	f7ff fc12 	bl	80012a4 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a84:	e01d      	b.n	8001ac2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a86:	f7ff fc0d 	bl	80012a4 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d916      	bls.n	8001ac2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0fdb      	lsrs	r3, r3, #31
 8001a9c:	07da      	lsls	r2, r3, #31
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aaa:	2212      	movs	r2, #18
 8001aac:	4393      	bics	r3, r2
 8001aae:	2210      	movs	r2, #16
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2250      	movs	r2, #80	@ 0x50
 8001aba:	2100      	movs	r1, #0
 8001abc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e02a      	b.n	8001b18 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	0fdb      	lsrs	r3, r3, #31
 8001aca:	07da      	lsls	r2, r3, #31
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	061b      	lsls	r3, r3, #24
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d0d8      	beq.n	8001a86 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68d9      	ldr	r1, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4393      	bics	r3, r2
 8001aec:	2201      	movs	r2, #1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001af4:	e009      	b.n	8001b0a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	2220      	movs	r2, #32
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b02:	2317      	movs	r3, #23
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2250      	movs	r2, #80	@ 0x50
 8001b0e:	2100      	movs	r1, #0
 8001b10:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001b12:	2317      	movs	r3, #23
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b006      	add	sp, #24
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	fffffefd 	.word	0xfffffefd

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b36:	d809      	bhi.n	8001b4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	231f      	movs	r3, #31
 8001b40:	401a      	ands	r2, r3
 8001b42:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_EnableIRQ+0x30>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	4091      	lsls	r1, r2
 8001b48:	000a      	movs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
  }
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	0002      	movs	r2, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b6c:	d828      	bhi.n	8001bc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <__NVIC_SetPriority+0xd4>)
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	33c0      	adds	r3, #192	@ 0xc0
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	589b      	ldr	r3, [r3, r2]
 8001b7e:	1dfa      	adds	r2, r7, #7
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	0011      	movs	r1, r2
 8001b84:	2203      	movs	r2, #3
 8001b86:	400a      	ands	r2, r1
 8001b88:	00d2      	lsls	r2, r2, #3
 8001b8a:	21ff      	movs	r1, #255	@ 0xff
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	43d2      	mvns	r2, r2
 8001b92:	401a      	ands	r2, r3
 8001b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	22ff      	movs	r2, #255	@ 0xff
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	4003      	ands	r3, r0
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	481f      	ldr	r0, [pc, #124]	@ (8001c2c <__NVIC_SetPriority+0xd4>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	33c0      	adds	r3, #192	@ 0xc0
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bbe:	e031      	b.n	8001c24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <__NVIC_SetPriority+0xd8>)
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	230f      	movs	r3, #15
 8001bca:	400b      	ands	r3, r1
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3306      	adds	r3, #6
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	18d3      	adds	r3, r2, r3
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1dfa      	adds	r2, r7, #7
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	0011      	movs	r1, r2
 8001be0:	2203      	movs	r2, #3
 8001be2:	400a      	ands	r2, r1
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	21ff      	movs	r1, #255	@ 0xff
 8001be8:	4091      	lsls	r1, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	43d2      	mvns	r2, r2
 8001bee:	401a      	ands	r2, r3
 8001bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	22ff      	movs	r2, #255	@ 0xff
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2303      	movs	r3, #3
 8001c02:	4003      	ands	r3, r0
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c08:	4809      	ldr	r0, [pc, #36]	@ (8001c30 <__NVIC_SetPriority+0xd8>)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	001c      	movs	r4, r3
 8001c10:	230f      	movs	r3, #15
 8001c12:	4023      	ands	r3, r4
 8001c14:	3b08      	subs	r3, #8
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	18c3      	adds	r3, r0, r3
 8001c20:	3304      	adds	r3, #4
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b003      	add	sp, #12
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	045b      	lsls	r3, r3, #17
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d301      	bcc.n	8001c4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e010      	b.n	8001c6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <SysTick_Config+0x44>)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	3a01      	subs	r2, #1
 8001c52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c54:	2301      	movs	r3, #1
 8001c56:	425b      	negs	r3, r3
 8001c58:	2103      	movs	r1, #3
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7ff ff7c 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x44>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x44>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b002      	add	sp, #8
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	210f      	movs	r1, #15
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	1c02      	adds	r2, r0, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	0002      	movs	r2, r0
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff ff33 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ffaf 	bl	8001c34 <SysTick_Config>
 8001cd6:	0003      	movs	r3, r0
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	230f      	movs	r3, #15
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2225      	movs	r2, #37	@ 0x25
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2224      	movs	r2, #36	@ 0x24
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e024      	b.n	8001d58 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	210e      	movs	r1, #14
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	221c      	movs	r2, #28
 8001d34:	401a      	ands	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4091      	lsls	r1, r2
 8001d3e:	000a      	movs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2225      	movs	r2, #37	@ 0x25
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2224      	movs	r2, #36	@ 0x24
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]

    return status;
 8001d52:	230f      	movs	r3, #15
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	210f      	movs	r1, #15
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2225      	movs	r2, #37	@ 0x25
 8001d74:	5c9b      	ldrb	r3, [r3, r2]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d006      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e02a      	b.n	8001de0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	210e      	movs	r1, #14
 8001d96:	438a      	bics	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	438a      	bics	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	221c      	movs	r2, #28
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	2101      	movs	r1, #1
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2225      	movs	r2, #37	@ 0x25
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2224      	movs	r2, #36	@ 0x24
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	0010      	movs	r0, r2
 8001dde:	4798      	blx	r3
    }
  }
  return status;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e06:	e155      	b.n	80020b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4091      	lsls	r1, r2
 8001e12:	000a      	movs	r2, r1
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d100      	bne.n	8001e20 <HAL_GPIO_Init+0x30>
 8001e1e:	e146      	b.n	80020ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	409a      	lsls	r2, r3
 8001e46:	0013      	movs	r3, r2
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	43da      	mvns	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	2201      	movs	r2, #1
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d017      	beq.n	8001ed6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2203      	movs	r2, #3
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d123      	bne.n	8001f2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	58d3      	ldr	r3, [r2, r3]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	43da      	mvns	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2107      	movs	r1, #7
 8001f0e:	400b      	ands	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	6939      	ldr	r1, [r7, #16]
 8001f28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	401a      	ands	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	0013      	movs	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	23c0      	movs	r3, #192	@ 0xc0
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d100      	bne.n	8001f6c <HAL_GPIO_Init+0x17c>
 8001f6a:	e0a0      	b.n	80020ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6c:	4b57      	ldr	r3, [pc, #348]	@ (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f70:	4b56      	ldr	r3, [pc, #344]	@ (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f78:	4a55      	ldr	r2, [pc, #340]	@ (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	589b      	ldr	r3, [r3, r2]
 8001f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	23a0      	movs	r3, #160	@ 0xa0
 8001fa0:	05db      	lsls	r3, r3, #23
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x1f6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x1f2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	@ (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	@ (80020dc <HAL_GPIO_Init+0x2ec>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x1ea>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a47      	ldr	r2, [pc, #284]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x1e6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a46      	ldr	r2, [pc, #280]	@ (80020e4 <HAL_GPIO_Init+0x2f4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x1e2>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	2103      	movs	r1, #3
 8001fec:	400a      	ands	r2, r1
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff8:	4935      	ldr	r1, [pc, #212]	@ (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002006:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43da      	mvns	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	035b      	lsls	r3, r3, #13
 800201e:	4013      	ands	r3, r2
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800202a:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43da      	mvns	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	039b      	lsls	r3, r3, #14
 8002048:	4013      	ands	r3, r2
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800205a:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	029b      	lsls	r3, r3, #10
 8002072:	4013      	ands	r3, r2
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43da      	mvns	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	025b      	lsls	r3, r3, #9
 800209c:	4013      	ands	r3, r2
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	40da      	lsrs	r2, r3
 80020bc:	1e13      	subs	r3, r2, #0
 80020be:	d000      	beq.n	80020c2 <HAL_GPIO_Init+0x2d2>
 80020c0:	e6a2      	b.n	8001e08 <HAL_GPIO_Init+0x18>
  }
}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	50000400 	.word	0x50000400
 80020d8:	50000800 	.word	0x50000800
 80020dc:	50000c00 	.word	0x50000c00
 80020e0:	50001000 	.word	0x50001000
 80020e4:	50001c00 	.word	0x50001c00
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	000a      	movs	r2, r1
 80020f6:	1cbb      	adds	r3, r7, #2
 80020f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	1cba      	adds	r2, r7, #2
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	4013      	ands	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e003      	b.n	8002118 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002110:	230f      	movs	r3, #15
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002118:	230f      	movs	r3, #15
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	781b      	ldrb	r3, [r3, #0]
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	0008      	movs	r0, r1
 8002130:	0011      	movs	r1, r2
 8002132:	1cbb      	adds	r3, r7, #2
 8002134:	1c02      	adds	r2, r0, #0
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	1c7b      	adds	r3, r7, #1
 800213a:	1c0a      	adds	r2, r1, #0
 800213c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213e:	1c7b      	adds	r3, r7, #1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	1cbb      	adds	r3, r7, #2
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800214e:	e003      	b.n	8002158 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002150:	1cbb      	adds	r3, r7, #2
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	0002      	movs	r2, r0
 8002168:	1dbb      	adds	r3, r7, #6
 800216a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	1dba      	adds	r2, r7, #6
 8002172:	8812      	ldrh	r2, [r2, #0]
 8002174:	4013      	ands	r3, r2
 8002176:	d008      	beq.n	800218a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800217a:	1dba      	adds	r2, r7, #6
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe fca3 	bl	8000ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f000 fbbf 	bl	800292a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4bc9      	ldr	r3, [pc, #804]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	220c      	movs	r2, #12
 80021b2:	4013      	ands	r3, r2
 80021b4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b6:	4bc7      	ldr	r3, [pc, #796]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x36>
 80021cc:	e07e      	b.n	80022cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d112      	bne.n	8002200 <HAL_RCC_OscConfig+0x68>
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10d      	bne.n	8002200 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4bbb      	ldr	r3, [pc, #748]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	4013      	ands	r3, r2
 80021ee:	d100      	bne.n	80021f2 <HAL_RCC_OscConfig+0x5a>
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_OscConfig+0x132>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d167      	bne.n	80022ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 fb95 	bl	800292a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	429a      	cmp	r2, r3
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x84>
 800220c:	4bb1      	ldr	r3, [pc, #708]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4bb0      	ldr	r3, [pc, #704]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002212:	2180      	movs	r1, #128	@ 0x80
 8002214:	0249      	lsls	r1, r1, #9
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e027      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	23a0      	movs	r3, #160	@ 0xa0
 8002222:	02db      	lsls	r3, r3, #11
 8002224:	429a      	cmp	r2, r3
 8002226:	d10e      	bne.n	8002246 <HAL_RCC_OscConfig+0xae>
 8002228:	4baa      	ldr	r3, [pc, #680]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4ba9      	ldr	r3, [pc, #676]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	02c9      	lsls	r1, r1, #11
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4ba7      	ldr	r3, [pc, #668]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4ba6      	ldr	r3, [pc, #664]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e012      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 8002246:	4ba3      	ldr	r3, [pc, #652]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4ba2      	ldr	r3, [pc, #648]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800224c:	49a2      	ldr	r1, [pc, #648]	@ (80024d8 <HAL_RCC_OscConfig+0x340>)
 800224e:	400a      	ands	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4ba0      	ldr	r3, [pc, #640]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4b9c      	ldr	r3, [pc, #624]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b9b      	ldr	r3, [pc, #620]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002266:	499d      	ldr	r1, [pc, #628]	@ (80024dc <HAL_RCC_OscConfig+0x344>)
 8002268:	400a      	ands	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f816 	bl	80012a4 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227e:	f7ff f811 	bl	80012a4 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	@ 0x64
 800228a:	d902      	bls.n	8002292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	f000 fb4c 	bl	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002292:	4b90      	ldr	r3, [pc, #576]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	4013      	ands	r3, r2
 800229c:	d0ef      	beq.n	800227e <HAL_RCC_OscConfig+0xe6>
 800229e:	e015      	b.n	80022cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff f800 	bl	80012a4 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022aa:	f7fe fffb 	bl	80012a4 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	@ 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e336      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022bc:	4b85      	ldr	r3, [pc, #532]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	4013      	ands	r3, r2
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x112>
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d100      	bne.n	80022d8 <HAL_RCC_OscConfig+0x140>
 80022d6:	e099      	b.n	800240c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	2220      	movs	r2, #32
 80022e2:	4013      	ands	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80022e6:	4b7b      	ldr	r3, [pc, #492]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b7a      	ldr	r3, [pc, #488]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80022ec:	2120      	movs	r1, #32
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	2220      	movs	r2, #32
 80022f6:	4393      	bics	r3, r2
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d13e      	bne.n	8002384 <HAL_RCC_OscConfig+0x1ec>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d13b      	bne.n	8002384 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800230c:	4b71      	ldr	r3, [pc, #452]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2204      	movs	r2, #4
 8002312:	4013      	ands	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_RCC_OscConfig+0x188>
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e304      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b6c      	ldr	r3, [pc, #432]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a6e      	ldr	r2, [pc, #440]	@ (80024e0 <HAL_RCC_OscConfig+0x348>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	4b68      	ldr	r3, [pc, #416]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002336:	4b67      	ldr	r3, [pc, #412]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2209      	movs	r2, #9
 800233c:	4393      	bics	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	4b64      	ldr	r3, [pc, #400]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002348:	f000 fc42 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800234c:	0001      	movs	r1, r0
 800234e:	4b61      	ldr	r3, [pc, #388]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	220f      	movs	r2, #15
 8002356:	4013      	ands	r3, r2
 8002358:	4a62      	ldr	r2, [pc, #392]	@ (80024e4 <HAL_RCC_OscConfig+0x34c>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	000a      	movs	r2, r1
 800235e:	40da      	lsrs	r2, r3
 8002360:	4b61      	ldr	r3, [pc, #388]	@ (80024e8 <HAL_RCC_OscConfig+0x350>)
 8002362:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002364:	4b61      	ldr	r3, [pc, #388]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2513      	movs	r5, #19
 800236a:	197c      	adds	r4, r7, r5
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe ff53 	bl	8001218 <HAL_InitTick>
 8002372:	0003      	movs	r3, r0
 8002374:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002376:	197b      	adds	r3, r7, r5
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d046      	beq.n	800240c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800237e:	197b      	adds	r3, r7, r5
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	e2d2      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d027      	beq.n	80023da <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800238a:	4b52      	ldr	r3, [pc, #328]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2209      	movs	r2, #9
 8002390:	4393      	bics	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	4b4f      	ldr	r3, [pc, #316]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe ff82 	bl	80012a4 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe ff7d 	bl	80012a4 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e2b8      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b8:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f1      	beq.n	80023a6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b44      	ldr	r3, [pc, #272]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a46      	ldr	r2, [pc, #280]	@ (80024e0 <HAL_RCC_OscConfig+0x348>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	021a      	lsls	r2, r3, #8
 80023d2:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	e018      	b.n	800240c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b3d      	ldr	r3, [pc, #244]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	438a      	bics	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe ff5d 	bl	80012a4 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f0:	f7fe ff58 	bl	80012a4 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e293      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002402:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2204      	movs	r2, #4
 8002408:	4013      	ands	r3, r2
 800240a:	d1f1      	bne.n	80023f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2210      	movs	r2, #16
 8002412:	4013      	ands	r3, r2
 8002414:	d100      	bne.n	8002418 <HAL_RCC_OscConfig+0x280>
 8002416:	e0a2      	b.n	800255e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d140      	bne.n	80024a0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800241e:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	@ 0x80
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x29e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e279      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002436:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a2d      	ldr	r2, [pc, #180]	@ (80024f0 <HAL_RCC_OscConfig+0x358>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002444:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244a:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	0a19      	lsrs	r1, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	061a      	lsls	r2, r3, #24
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	0b5b      	lsrs	r3, r3, #13
 8002464:	3301      	adds	r3, #1
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	0212      	lsls	r2, r2, #8
 800246a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	210f      	movs	r1, #15
 8002474:	400b      	ands	r3, r1
 8002476:	491b      	ldr	r1, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x34c>)
 8002478:	5ccb      	ldrb	r3, [r1, r3]
 800247a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800247c:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <HAL_RCC_OscConfig+0x350>)
 800247e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002480:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2513      	movs	r5, #19
 8002486:	197c      	adds	r4, r7, r5
 8002488:	0018      	movs	r0, r3
 800248a:	f7fe fec5 	bl	8001218 <HAL_InitTick>
 800248e:	0003      	movs	r3, r0
 8002490:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002492:	197b      	adds	r3, r7, r5
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d061      	beq.n	800255e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800249a:	197b      	adds	r3, r7, r5
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	e244      	b.n	800292a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d040      	beq.n	800252a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_RCC_OscConfig+0x33c>)
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	0049      	lsls	r1, r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fef5 	bl	80012a4 <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024be:	e019      	b.n	80024f4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c0:	f7fe fef0 	bl	80012a4 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d912      	bls.n	80024f4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e22b      	b.n	800292a <HAL_RCC_OscConfig+0x792>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	40021000 	.word	0x40021000
 80024d8:	fffeffff 	.word	0xfffeffff
 80024dc:	fffbffff 	.word	0xfffbffff
 80024e0:	ffffe0ff 	.word	0xffffe0ff
 80024e4:	08005600 	.word	0x08005600
 80024e8:	20000004 	.word	0x20000004
 80024ec:	20000008 	.word	0x20000008
 80024f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024f4:	4bca      	ldr	r3, [pc, #808]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	d0df      	beq.n	80024c0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002500:	4bc7      	ldr	r3, [pc, #796]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4ac7      	ldr	r2, [pc, #796]	@ (8002824 <HAL_RCC_OscConfig+0x68c>)
 8002506:	4013      	ands	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800250e:	4bc4      	ldr	r3, [pc, #784]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002514:	4bc2      	ldr	r3, [pc, #776]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	0a19      	lsrs	r1, r3, #8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	061a      	lsls	r2, r3, #24
 8002522:	4bbf      	ldr	r3, [pc, #764]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002524:	430a      	orrs	r2, r1
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	e019      	b.n	800255e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800252a:	4bbd      	ldr	r3, [pc, #756]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4bbc      	ldr	r3, [pc, #752]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002530:	49bd      	ldr	r1, [pc, #756]	@ (8002828 <HAL_RCC_OscConfig+0x690>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe feb5 	bl	80012a4 <HAL_GetTick>
 800253a:	0003      	movs	r3, r0
 800253c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002540:	f7fe feb0 	bl	80012a4 <HAL_GetTick>
 8002544:	0002      	movs	r2, r0
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1eb      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002552:	4bb3      	ldr	r3, [pc, #716]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4013      	ands	r3, r2
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2208      	movs	r2, #8
 8002564:	4013      	ands	r3, r2
 8002566:	d036      	beq.n	80025d6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d019      	beq.n	80025a4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002570:	4bab      	ldr	r3, [pc, #684]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002572:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002574:	4baa      	ldr	r3, [pc, #680]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe fe92 	bl	80012a4 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002586:	f7fe fe8d 	bl	80012a4 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1c8      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002598:	4ba1      	ldr	r3, [pc, #644]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800259a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d0f1      	beq.n	8002586 <HAL_RCC_OscConfig+0x3ee>
 80025a2:	e018      	b.n	80025d6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a4:	4b9e      	ldr	r3, [pc, #632]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80025a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	438a      	bics	r2, r1
 80025ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe fe78 	bl	80012a4 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe fe73 	bl	80012a4 <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1ae      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025cc:	4b94      	ldr	r3, [pc, #592]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80025ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d0:	2202      	movs	r2, #2
 80025d2:	4013      	ands	r3, r2
 80025d4:	d1f1      	bne.n	80025ba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2204      	movs	r2, #4
 80025dc:	4013      	ands	r3, r2
 80025de:	d100      	bne.n	80025e2 <HAL_RCC_OscConfig+0x44a>
 80025e0:	e0ae      	b.n	8002740 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2023      	movs	r0, #35	@ 0x23
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80025ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	055b      	lsls	r3, r3, #21
 80025f2:	4013      	ands	r3, r2
 80025f4:	d109      	bne.n	800260a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80025f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025fa:	4b89      	ldr	r3, [pc, #548]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	0549      	lsls	r1, r1, #21
 8002600:	430a      	orrs	r2, r1
 8002602:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002604:	183b      	adds	r3, r7, r0
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b88      	ldr	r3, [pc, #544]	@ (800282c <HAL_RCC_OscConfig+0x694>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b85      	ldr	r3, [pc, #532]	@ (800282c <HAL_RCC_OscConfig+0x694>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b84      	ldr	r3, [pc, #528]	@ (800282c <HAL_RCC_OscConfig+0x694>)
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0049      	lsls	r1, r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002624:	f7fe fe3e 	bl	80012a4 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fe39 	bl	80012a4 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	@ 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e174      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b7a      	ldr	r3, [pc, #488]	@ (800282c <HAL_RCC_OscConfig+0x694>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d0>
 8002658:	4b71      	ldr	r3, [pc, #452]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800265a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800265c:	4b70      	ldr	r3, [pc, #448]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0049      	lsls	r1, r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	651a      	str	r2, [r3, #80]	@ 0x50
 8002666:	e031      	b.n	80026cc <HAL_RCC_OscConfig+0x534>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x4f2>
 8002670:	4b6b      	ldr	r3, [pc, #428]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002672:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002674:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002676:	496c      	ldr	r1, [pc, #432]	@ (8002828 <HAL_RCC_OscConfig+0x690>)
 8002678:	400a      	ands	r2, r1
 800267a:	651a      	str	r2, [r3, #80]	@ 0x50
 800267c:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800267e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002680:	4b67      	ldr	r3, [pc, #412]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002682:	496b      	ldr	r1, [pc, #428]	@ (8002830 <HAL_RCC_OscConfig+0x698>)
 8002684:	400a      	ands	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	@ 0x50
 8002688:	e020      	b.n	80026cc <HAL_RCC_OscConfig+0x534>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	23a0      	movs	r3, #160	@ 0xa0
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	429a      	cmp	r2, r3
 8002694:	d10e      	bne.n	80026b4 <HAL_RCC_OscConfig+0x51c>
 8002696:	4b62      	ldr	r3, [pc, #392]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800269a:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	00c9      	lsls	r1, r1, #3
 80026a0:	430a      	orrs	r2, r1
 80026a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80026a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026aa:	2180      	movs	r1, #128	@ 0x80
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0x534>
 80026b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026b8:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026ba:	495b      	ldr	r1, [pc, #364]	@ (8002828 <HAL_RCC_OscConfig+0x690>)
 80026bc:	400a      	ands	r2, r1
 80026be:	651a      	str	r2, [r3, #80]	@ 0x50
 80026c0:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026c4:	4b56      	ldr	r3, [pc, #344]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026c6:	495a      	ldr	r1, [pc, #360]	@ (8002830 <HAL_RCC_OscConfig+0x698>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7fe fde6 	bl	80012a4 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fde1 	bl	80012a4 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4a52      	ldr	r2, [pc, #328]	@ (8002834 <HAL_RCC_OscConfig+0x69c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e11b      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80026f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	d0ef      	beq.n	80026de <HAL_RCC_OscConfig+0x546>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002700:	f7fe fdd0 	bl	80012a4 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002708:	e009      	b.n	800271e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fdcb 	bl	80012a4 <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4a47      	ldr	r2, [pc, #284]	@ (8002834 <HAL_RCC_OscConfig+0x69c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e105      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800271e:	4b40      	ldr	r3, [pc, #256]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d1ef      	bne.n	800270a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800272a:	2323      	movs	r3, #35	@ 0x23
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002734:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002738:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 800273a:	493f      	ldr	r1, [pc, #252]	@ (8002838 <HAL_RCC_OscConfig+0x6a0>)
 800273c:	400a      	ands	r2, r1
 800273e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	4013      	ands	r3, r2
 8002748:	d049      	beq.n	80027de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d026      	beq.n	80027a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002752:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002758:	2101      	movs	r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	4b30      	ldr	r3, [pc, #192]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002762:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34
 800276a:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_RCC_OscConfig+0x6a4>)
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	4b33      	ldr	r3, [pc, #204]	@ (800283c <HAL_RCC_OscConfig+0x6a4>)
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	0189      	lsls	r1, r1, #6
 8002774:	430a      	orrs	r2, r1
 8002776:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fd94 	bl	80012a4 <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002782:	f7fe fd8f 	bl	80012a4 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ca      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2202      	movs	r2, #2
 800279a:	4013      	ands	r3, r2
 800279c:	d0f1      	beq.n	8002782 <HAL_RCC_OscConfig+0x5ea>
 800279e:	e01e      	b.n	80027de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_RCC_OscConfig+0x6a4>)
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	4b22      	ldr	r3, [pc, #136]	@ (800283c <HAL_RCC_OscConfig+0x6a4>)
 80027b2:	4923      	ldr	r1, [pc, #140]	@ (8002840 <HAL_RCC_OscConfig+0x6a8>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd74 	bl	80012a4 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c2:	f7fe fd6f 	bl	80012a4 <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0aa      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2202      	movs	r2, #2
 80027da:	4013      	ands	r3, r2
 80027dc:	d1f1      	bne.n	80027c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d100      	bne.n	80027e8 <HAL_RCC_OscConfig+0x650>
 80027e6:	e09f      	b.n	8002928 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d100      	bne.n	80027f0 <HAL_RCC_OscConfig+0x658>
 80027ee:	e078      	b.n	80028e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d159      	bne.n	80028ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 80027fe:	4911      	ldr	r1, [pc, #68]	@ (8002844 <HAL_RCC_OscConfig+0x6ac>)
 8002800:	400a      	ands	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe fd4e 	bl	80012a4 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fd49 	bl	80012a4 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d915      	bls.n	8002848 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e084      	b.n	800292a <HAL_RCC_OscConfig+0x792>
 8002820:	40021000 	.word	0x40021000
 8002824:	ffff1fff 	.word	0xffff1fff
 8002828:	fffffeff 	.word	0xfffffeff
 800282c:	40007000 	.word	0x40007000
 8002830:	fffffbff 	.word	0xfffffbff
 8002834:	00001388 	.word	0x00001388
 8002838:	efffffff 	.word	0xefffffff
 800283c:	40010000 	.word	0x40010000
 8002840:	ffffdfff 	.word	0xffffdfff
 8002844:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002848:	4b3a      	ldr	r3, [pc, #232]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	049b      	lsls	r3, r3, #18
 8002850:	4013      	ands	r3, r2
 8002852:	d1dc      	bne.n	800280e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b37      	ldr	r3, [pc, #220]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a37      	ldr	r2, [pc, #220]	@ (8002938 <HAL_RCC_OscConfig+0x7a0>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	431a      	orrs	r2, r3
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002874:	4b2f      	ldr	r3, [pc, #188]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b2e      	ldr	r3, [pc, #184]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	0449      	lsls	r1, r1, #17
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fd0f 	bl	80012a4 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fd0a 	bl	80012a4 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e045      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800289e:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	049b      	lsls	r3, r3, #18
 80028a6:	4013      	ands	r3, r2
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x6f4>
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 80028b2:	4922      	ldr	r1, [pc, #136]	@ (800293c <HAL_RCC_OscConfig+0x7a4>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fcf4 	bl	80012a4 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fcef 	bl	80012a4 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e02a      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	049b      	lsls	r3, r3, #18
 80028dc:	4013      	ands	r3, r2
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x72a>
 80028e0:	e022      	b.n	8002928 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e01d      	b.n	800292a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_OscConfig+0x79c>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	025b      	lsls	r3, r3, #9
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	429a      	cmp	r2, r3
 8002902:	d10f      	bne.n	8002924 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	23f0      	movs	r3, #240	@ 0xf0
 8002908:	039b      	lsls	r3, r3, #14
 800290a:	401a      	ands	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	23c0      	movs	r3, #192	@ 0xc0
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b00a      	add	sp, #40	@ 0x28
 8002930:	bdb0      	pop	{r4, r5, r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	40021000 	.word	0x40021000
 8002938:	ff02ffff 	.word	0xff02ffff
 800293c:	feffffff 	.word	0xfeffffff

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e128      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b96      	ldr	r3, [pc, #600]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2201      	movs	r2, #1
 800295a:	4013      	ands	r3, r2
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d91e      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b93      	ldr	r3, [pc, #588]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2201      	movs	r2, #1
 8002968:	4393      	bics	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	4b90      	ldr	r3, [pc, #576]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002974:	f7fe fc96 	bl	80012a4 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297c:	e009      	b.n	8002992 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297e:	f7fe fc91 	bl	80012a4 <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	4a8a      	ldr	r2, [pc, #552]	@ (8002bb4 <HAL_RCC_ClockConfig+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e109      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b87      	ldr	r3, [pc, #540]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029aa:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	22f0      	movs	r2, #240	@ 0xf0
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d100      	bne.n	80029ca <HAL_RCC_ClockConfig+0x8a>
 80029c8:	e089      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d2:	4b79      	ldr	r3, [pc, #484]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	4013      	ands	r3, r2
 80029dc:	d120      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0e1      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ea:	4b73      	ldr	r3, [pc, #460]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	049b      	lsls	r3, r3, #18
 80029f2:	4013      	ands	r3, r2
 80029f4:	d114      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0d5      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a02:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2204      	movs	r2, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0ca      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a10:	4b69      	ldr	r3, [pc, #420]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0c2      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a20:	4b65      	ldr	r3, [pc, #404]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4393      	bics	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4b62      	ldr	r3, [pc, #392]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002a30:	430a      	orrs	r2, r1
 8002a32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fc36 	bl	80012a4 <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d111      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a46:	f7fe fc2d 	bl	80012a4 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	4a58      	ldr	r2, [pc, #352]	@ (8002bb4 <HAL_RCC_ClockConfig+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0a5      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5a:	4b57      	ldr	r3, [pc, #348]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	220c      	movs	r2, #12
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d1ef      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x106>
 8002a66:	e03a      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a72:	f7fe fc17 	bl	80012a4 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb4 <HAL_RCC_ClockConfig+0x274>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e08f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a86:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d1ef      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x132>
 8002a92:	e024      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7fe fc01 	bl	80012a4 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a42      	ldr	r2, [pc, #264]	@ (8002bb4 <HAL_RCC_ClockConfig+0x274>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e079      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d1ef      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x15e>
 8002abe:	e00e      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe fbf0 	bl	80012a4 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb4 <HAL_RCC_ClockConfig+0x274>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e068      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ad4:	4b38      	ldr	r3, [pc, #224]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	220c      	movs	r2, #12
 8002ada:	4013      	ands	r3, r2
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d21e      	bcs.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aec:	4b30      	ldr	r3, [pc, #192]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4393      	bics	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fbd1 	bl	80012a4 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	e009      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe fbcc 	bl	80012a4 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	4a28      	ldr	r2, [pc, #160]	@ (8002bb4 <HAL_RCC_ClockConfig+0x274>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e044      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1c:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCC_ClockConfig+0x270>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d1ee      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a20      	ldr	r2, [pc, #128]	@ (8002bbc <HAL_RCC_ClockConfig+0x27c>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b52:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_RCC_ClockConfig+0x280>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00da      	lsls	r2, r3, #3
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b68:	f000 f832 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b6c:	0001      	movs	r1, r0
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x278>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	220f      	movs	r2, #15
 8002b76:	4013      	ands	r3, r2
 8002b78:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <HAL_RCC_ClockConfig+0x284>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	000a      	movs	r2, r1
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_RCC_ClockConfig+0x288>)
 8002b82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_RCC_ClockConfig+0x28c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	250b      	movs	r5, #11
 8002b8a:	197c      	adds	r4, r7, r5
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fe fb43 	bl	8001218 <HAL_InitTick>
 8002b92:	0003      	movs	r3, r0
 8002b94:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b96:	197b      	adds	r3, r7, r5
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b9e:	197b      	adds	r3, r7, r5
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b004      	add	sp, #16
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	00001388 	.word	0x00001388
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	fffff8ff 	.word	0xfffff8ff
 8002bc0:	ffffc7ff 	.word	0xffffc7ff
 8002bc4:	08005600 	.word	0x08005600
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	20000008 	.word	0x20000008

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	220c      	movs	r2, #12
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d013      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x3e>
 8002be6:	d85c      	bhi.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xd2>
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d002      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x22>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d00b      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x38>
 8002bf0:	e057      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bf2:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d002      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bfe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c00:	e05d      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002c02:	4b33      	ldr	r3, [pc, #204]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c04:	613b      	str	r3, [r7, #16]
      break;
 8002c06:	e05a      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c08:	4b32      	ldr	r3, [pc, #200]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c0a:	613b      	str	r3, [r7, #16]
      break;
 8002c0c:	e057      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0c9b      	lsrs	r3, r3, #18
 8002c12:	220f      	movs	r2, #15
 8002c14:	4013      	ands	r3, r2
 8002c16:	4a30      	ldr	r2, [pc, #192]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c18:	5cd3      	ldrb	r3, [r2, r3]
 8002c1a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	0d9b      	lsrs	r3, r3, #22
 8002c20:	2203      	movs	r2, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	3301      	adds	r3, #1
 8002c26:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c28:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	4013      	ands	r3, r2
 8002c32:	d00f      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	000a      	movs	r2, r1
 8002c38:	0152      	lsls	r2, r2, #5
 8002c3a:	1a52      	subs	r2, r2, r1
 8002c3c:	0193      	lsls	r3, r2, #6
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	185b      	adds	r3, r3, r1
 8002c44:	025b      	lsls	r3, r3, #9
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7fd fa5d 	bl	8000108 <__udivsi3>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e023      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c54:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d00f      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	000a      	movs	r2, r1
 8002c62:	0152      	lsls	r2, r2, #5
 8002c64:	1a52      	subs	r2, r2, r1
 8002c66:	0193      	lsls	r3, r2, #6
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	185b      	adds	r3, r3, r1
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7fd fa48 	bl	8000108 <__udivsi3>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	000a      	movs	r2, r1
 8002c82:	0152      	lsls	r2, r2, #5
 8002c84:	1a52      	subs	r2, r2, r1
 8002c86:	0193      	lsls	r3, r2, #6
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7fd fa38 	bl	8000108 <__udivsi3>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	613b      	str	r3, [r7, #16]
      break;
 8002ca0:	e00d      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0b5b      	lsrs	r3, r3, #13
 8002ca8:	2207      	movs	r2, #7
 8002caa:	4013      	ands	r3, r2
 8002cac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	0212      	lsls	r2, r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
      break;
 8002cbc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cbe:	693b      	ldr	r3, [r7, #16]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	003d0900 	.word	0x003d0900
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200
 8002cd8:	08005618 	.word	0x08005618

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	@ (8002cec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff2 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cf8:	0001      	movs	r1, r0
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	2207      	movs	r2, #7
 8002d02:	4013      	ands	r3, r2
 8002d04:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	40d9      	lsrs	r1, r3
 8002d0a:	000b      	movs	r3, r1
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08005610 	.word	0x08005610

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffdc 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d24:	0001      	movs	r1, r0
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	0adb      	lsrs	r3, r3, #11
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	4013      	ands	r3, r2
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	40d9      	lsrs	r1, r3
 8002d36:	000b      	movs	r3, r1
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08005610 	.word	0x08005610

08002d48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d50:	2317      	movs	r3, #23
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d106      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d100      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d6e:	e104      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4bb9      	ldr	r3, [pc, #740]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	055b      	lsls	r3, r3, #21
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d10a      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4bb6      	ldr	r3, [pc, #728]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d80:	4bb5      	ldr	r3, [pc, #724]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	0549      	lsls	r1, r1, #21
 8002d86:	430a      	orrs	r2, r1
 8002d88:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002d8a:	2317      	movs	r3, #23
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d92:	4bb2      	ldr	r3, [pc, #712]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9e:	4baf      	ldr	r3, [pc, #700]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4bae      	ldr	r3, [pc, #696]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	0049      	lsls	r1, r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dac:	f7fe fa7a 	bl	80012a4 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	e008      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db6:	f7fe fa75 	bl	80012a4 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b64      	cmp	r3, #100	@ 0x64
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e143      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	4ba4      	ldr	r3, [pc, #656]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	23c0      	movs	r3, #192	@ 0xc0
 8002dda:	039b      	lsls	r3, r3, #14
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	23c0      	movs	r3, #192	@ 0xc0
 8002de6:	039b      	lsls	r3, r3, #14
 8002de8:	4013      	ands	r3, r2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	23c0      	movs	r3, #192	@ 0xc0
 8002df6:	039b      	lsls	r3, r3, #14
 8002df8:	4013      	ands	r3, r2
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	23c0      	movs	r3, #192	@ 0xc0
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	401a      	ands	r2, r3
 8002e0a:	23c0      	movs	r3, #192	@ 0xc0
 8002e0c:	029b      	lsls	r3, r3, #10
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10a      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e12:	4b91      	ldr	r3, [pc, #580]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d101      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e113      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e28:	4b8b      	ldr	r3, [pc, #556]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e2c:	23c0      	movs	r3, #192	@ 0xc0
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d049      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	23c0      	movs	r3, #192	@ 0xc0
 8002e40:	029b      	lsls	r3, r3, #10
 8002e42:	4013      	ands	r3, r2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d004      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	4013      	ands	r3, r2
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	23c0      	movs	r3, #192	@ 0xc0
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d034      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d02e      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e70:	4b79      	ldr	r3, [pc, #484]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	4a7a      	ldr	r2, [pc, #488]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e7a:	4b77      	ldr	r3, [pc, #476]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e7e:	4b76      	ldr	r3, [pc, #472]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e80:	2180      	movs	r1, #128	@ 0x80
 8002e82:	0309      	lsls	r1, r1, #12
 8002e84:	430a      	orrs	r2, r1
 8002e86:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e8c:	4b72      	ldr	r3, [pc, #456]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e8e:	4975      	ldr	r1, [pc, #468]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e94:	4b70      	ldr	r3, [pc, #448]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d014      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f9fe 	bl	80012a4 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eac:	e009      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe f9f9 	bl	80012a4 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0c6      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec2:	4b65      	ldr	r3, [pc, #404]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d0ef      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	23c0      	movs	r3, #192	@ 0xc0
 8002ee0:	029b      	lsls	r3, r3, #10
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	23c0      	movs	r3, #192	@ 0xc0
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002eec:	4b5a      	ldr	r3, [pc, #360]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	23c0      	movs	r3, #192	@ 0xc0
 8002efc:	039b      	lsls	r3, r3, #14
 8002efe:	401a      	ands	r2, r3
 8002f00:	4b55      	ldr	r3, [pc, #340]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4b54      	ldr	r3, [pc, #336]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	23c0      	movs	r3, #192	@ 0xc0
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	401a      	ands	r2, r3
 8002f14:	4b50      	ldr	r3, [pc, #320]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f16:	430a      	orrs	r2, r1
 8002f18:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	d01f      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	23c0      	movs	r3, #192	@ 0xc0
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	23c0      	movs	r3, #192	@ 0xc0
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002f36:	4b48      	ldr	r3, [pc, #288]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a4c      	ldr	r2, [pc, #304]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	23c0      	movs	r3, #192	@ 0xc0
 8002f46:	039b      	lsls	r3, r3, #14
 8002f48:	401a      	ands	r2, r3
 8002f4a:	4b43      	ldr	r3, [pc, #268]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f52:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	23c0      	movs	r3, #192	@ 0xc0
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f60:	430a      	orrs	r2, r1
 8002f62:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f64:	2317      	movs	r3, #23
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f72:	4b39      	ldr	r3, [pc, #228]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f74:	493e      	ldr	r1, [pc, #248]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4013      	ands	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f84:	4b34      	ldr	r3, [pc, #208]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	2203      	movs	r2, #3
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	4393      	bics	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc0:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	4a25      	ldr	r2, [pc, #148]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800300e:	430a      	orrs	r2, r1
 8003010:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	4013      	ands	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	4a16      	ldr	r2, [pc, #88]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800302c:	430a      	orrs	r2, r1
 800302e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	4013      	ands	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	4a10      	ldr	r2, [pc, #64]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800304a:	430a      	orrs	r2, r1
 800304c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	fffcffff 	.word	0xfffcffff
 8003064:	fff7ffff 	.word	0xfff7ffff
 8003068:	00001388 	.word	0x00001388
 800306c:	ffcfffff 	.word	0xffcfffff
 8003070:	efffffff 	.word	0xefffffff
 8003074:	fffff3ff 	.word	0xfffff3ff
 8003078:	ffffcfff 	.word	0xffffcfff
 800307c:	fbffffff 	.word	0xfbffffff
 8003080:	fff3ffff 	.word	0xfff3ffff

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e032      	b.n	80030fc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2239      	movs	r2, #57	@ 0x39
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2238      	movs	r2, #56	@ 0x38
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fd ff8d 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2239      	movs	r2, #57	@ 0x39
 80030b6:	2102      	movs	r1, #2
 80030b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f000 fbcf 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	223e      	movs	r2, #62	@ 0x3e
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223a      	movs	r2, #58	@ 0x3a
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	223b      	movs	r2, #59	@ 0x3b
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223c      	movs	r2, #60	@ 0x3c
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	223d      	movs	r2, #61	@ 0x3d
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2239      	movs	r2, #57	@ 0x39
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2239      	movs	r2, #57	@ 0x39
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e03b      	b.n	8003194 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2239      	movs	r2, #57	@ 0x39
 8003120:	2102      	movs	r1, #2
 8003122:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	05db      	lsls	r3, r3, #23
 800313c:	429a      	cmp	r2, r3
 800313e:	d00e      	beq.n	800315e <HAL_TIM_Base_Start_IT+0x5a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a15      	ldr	r2, [pc, #84]	@ (800319c <HAL_TIM_Base_Start_IT+0x98>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_TIM_Base_Start_IT+0x5a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a14      	ldr	r2, [pc, #80]	@ (80031a0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_TIM_Base_Start_IT+0x5a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d111      	bne.n	8003182 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2207      	movs	r2, #7
 8003166:	4013      	ands	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d010      	beq.n	8003192 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2101      	movs	r1, #1
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003180:	e007      	b.n	8003192 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b004      	add	sp, #16
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40000400 	.word	0x40000400
 80031a0:	40010800 	.word	0x40010800
 80031a4:	40011400 	.word	0x40011400

080031a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e032      	b.n	8003220 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2239      	movs	r2, #57	@ 0x39
 80031be:	5c9b      	ldrb	r3, [r3, r2]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2238      	movs	r2, #56	@ 0x38
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f829 	bl	8003228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2239      	movs	r2, #57	@ 0x39
 80031da:	2102      	movs	r1, #2
 80031dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	0019      	movs	r1, r3
 80031e8:	0010      	movs	r0, r2
 80031ea:	f000 fb3d 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	223e      	movs	r2, #62	@ 0x3e
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	223a      	movs	r2, #58	@ 0x3a
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223b      	movs	r2, #59	@ 0x3b
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223c      	movs	r2, #60	@ 0x3c
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	223d      	movs	r2, #61	@ 0x3d
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2239      	movs	r2, #57	@ 0x39
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d108      	bne.n	800325a <HAL_TIM_PWM_Start+0x22>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	223a      	movs	r2, #58	@ 0x3a
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	1e5a      	subs	r2, r3, #1
 8003254:	4193      	sbcs	r3, r2
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e01f      	b.n	800329a <HAL_TIM_PWM_Start+0x62>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d108      	bne.n	8003272 <HAL_TIM_PWM_Start+0x3a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	223b      	movs	r2, #59	@ 0x3b
 8003264:	5c9b      	ldrb	r3, [r3, r2]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	4193      	sbcs	r3, r2
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e013      	b.n	800329a <HAL_TIM_PWM_Start+0x62>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d108      	bne.n	800328a <HAL_TIM_PWM_Start+0x52>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	223c      	movs	r2, #60	@ 0x3c
 800327c:	5c9b      	ldrb	r3, [r3, r2]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	4193      	sbcs	r3, r2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e007      	b.n	800329a <HAL_TIM_PWM_Start+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223d      	movs	r2, #61	@ 0x3d
 800328e:	5c9b      	ldrb	r3, [r3, r2]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	4193      	sbcs	r3, r2
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e052      	b.n	8003348 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x7a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	223a      	movs	r2, #58	@ 0x3a
 80032ac:	2102      	movs	r1, #2
 80032ae:	5499      	strb	r1, [r3, r2]
 80032b0:	e013      	b.n	80032da <HAL_TIM_PWM_Start+0xa2>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x8a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	223b      	movs	r2, #59	@ 0x3b
 80032bc:	2102      	movs	r1, #2
 80032be:	5499      	strb	r1, [r3, r2]
 80032c0:	e00b      	b.n	80032da <HAL_TIM_PWM_Start+0xa2>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x9a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	223c      	movs	r2, #60	@ 0x3c
 80032cc:	2102      	movs	r1, #2
 80032ce:	5499      	strb	r1, [r3, r2]
 80032d0:	e003      	b.n	80032da <HAL_TIM_PWM_Start+0xa2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223d      	movs	r2, #61	@ 0x3d
 80032d6:	2102      	movs	r1, #2
 80032d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6839      	ldr	r1, [r7, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 fcc2 	bl	8003c6c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d00e      	beq.n	8003312 <HAL_TIM_PWM_Start+0xda>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <HAL_TIM_PWM_Start+0x118>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_TIM_PWM_Start+0xda>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a14      	ldr	r2, [pc, #80]	@ (8003354 <HAL_TIM_PWM_Start+0x11c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIM_PWM_Start+0xda>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a12      	ldr	r2, [pc, #72]	@ (8003358 <HAL_TIM_PWM_Start+0x120>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2207      	movs	r2, #7
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b06      	cmp	r3, #6
 8003322:	d010      	beq.n	8003346 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2101      	movs	r1, #1
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	e007      	b.n	8003346 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40000400 	.word	0x40000400
 8003354:	40010800 	.word	0x40010800
 8003358:	40011400 	.word	0x40011400

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2202      	movs	r2, #2
 8003378:	4013      	ands	r3, r2
 800337a:	d021      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2202      	movs	r2, #2
 8003380:	4013      	ands	r3, r2
 8003382:	d01d      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2203      	movs	r2, #3
 800338a:	4252      	negs	r2, r2
 800338c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2203      	movs	r2, #3
 800339c:	4013      	ands	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 fa48 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e007      	b.n	80033ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 fa3b 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 fa47 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2204      	movs	r2, #4
 80033c4:	4013      	ands	r3, r2
 80033c6:	d022      	beq.n	800340e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	d01e      	beq.n	800340e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2205      	movs	r2, #5
 80033d6:	4252      	negs	r2, r2
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	23c0      	movs	r3, #192	@ 0xc0
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4013      	ands	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fa21 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 80033f6:	e007      	b.n	8003408 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 fa14 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fa20 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2208      	movs	r2, #8
 8003412:	4013      	ands	r3, r2
 8003414:	d021      	beq.n	800345a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2208      	movs	r2, #8
 800341a:	4013      	ands	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2209      	movs	r2, #9
 8003424:	4252      	negs	r2, r2
 8003426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2204      	movs	r2, #4
 800342c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2203      	movs	r2, #3
 8003436:	4013      	ands	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f000 f9fb 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 8003442:	e007      	b.n	8003454 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 f9ee 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f000 f9fa 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2210      	movs	r2, #16
 800345e:	4013      	ands	r3, r2
 8003460:	d022      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2210      	movs	r2, #16
 8003466:	4013      	ands	r3, r2
 8003468:	d01e      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2211      	movs	r2, #17
 8003470:	4252      	negs	r2, r2
 8003472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2208      	movs	r2, #8
 8003478:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	23c0      	movs	r3, #192	@ 0xc0
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4013      	ands	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f9d4 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 8003490:	e007      	b.n	80034a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f9c7 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f9d3 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	d00c      	beq.n	80034ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	4013      	ands	r3, r2
 80034b6:	d008      	beq.n	80034ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2202      	movs	r2, #2
 80034be:	4252      	negs	r2, r2
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7fd f953 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2240      	movs	r2, #64	@ 0x40
 80034ce:	4013      	ands	r3, r2
 80034d0:	d00c      	beq.n	80034ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2240      	movs	r2, #64	@ 0x40
 80034d6:	4013      	ands	r3, r2
 80034d8:	d008      	beq.n	80034ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2241      	movs	r2, #65	@ 0x41
 80034e0:	4252      	negs	r2, r2
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 f9b6 	bl	8003858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	2317      	movs	r3, #23
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2238      	movs	r2, #56	@ 0x38
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003512:	2302      	movs	r3, #2
 8003514:	e0ad      	b.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2238      	movs	r2, #56	@ 0x38
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d100      	bne.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003524:	e076      	b.n	8003614 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d900      	bls.n	800352e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800352c:	e095      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x166>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d04e      	beq.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d900      	bls.n	800353c <HAL_TIM_PWM_ConfigChannel+0x48>
 800353a:	e08e      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x166>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d021      	beq.n	800358c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003548:	e087      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0011      	movs	r1, r2
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f9ec 	bl	8003930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2108      	movs	r1, #8
 8003564:	430a      	orrs	r2, r1
 8003566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2104      	movs	r1, #4
 8003574:	438a      	bics	r2, r1
 8003576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
      break;
 800358a:	e06b      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f000 fa07 	bl	80039a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2180      	movs	r1, #128	@ 0x80
 80035a6:	0109      	lsls	r1, r1, #4
 80035a8:	430a      	orrs	r2, r1
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4931      	ldr	r1, [pc, #196]	@ (800367c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
      break;
 80035d0:	e048      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fa26 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2108      	movs	r1, #8
 80035ec:	430a      	orrs	r2, r1
 80035ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2104      	movs	r1, #4
 80035fc:	438a      	bics	r2, r1
 80035fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69d9      	ldr	r1, [r3, #28]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	61da      	str	r2, [r3, #28]
      break;
 8003612:	e027      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	0011      	movs	r1, r2
 800361c:	0018      	movs	r0, r3
 800361e:	f000 fa45 	bl	8003aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2180      	movs	r1, #128	@ 0x80
 800362e:	0109      	lsls	r1, r1, #4
 8003630:	430a      	orrs	r2, r1
 8003632:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	490f      	ldr	r1, [pc, #60]	@ (800367c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003640:	400a      	ands	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69d9      	ldr	r1, [r3, #28]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	021a      	lsls	r2, r3, #8
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	61da      	str	r2, [r3, #28]
      break;
 8003658:	e004      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800365a:	2317      	movs	r3, #23
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2238      	movs	r2, #56	@ 0x38
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

  return status;
 800366c:	2317      	movs	r3, #23
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	fffffbff 	.word	0xfffffbff

08003680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2238      	movs	r2, #56	@ 0x38
 8003696:	5c9b      	ldrb	r3, [r3, r2]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_TIM_ConfigClockSource+0x20>
 800369c:	2302      	movs	r3, #2
 800369e:	e0bc      	b.n	800381a <HAL_TIM_ConfigClockSource+0x19a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2238      	movs	r2, #56	@ 0x38
 80036a4:	2101      	movs	r1, #1
 80036a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2239      	movs	r2, #57	@ 0x39
 80036ac:	2102      	movs	r1, #2
 80036ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2277      	movs	r2, #119	@ 0x77
 80036bc:	4393      	bics	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a58      	ldr	r2, [pc, #352]	@ (8003824 <HAL_TIM_ConfigClockSource+0x1a4>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2280      	movs	r2, #128	@ 0x80
 80036d6:	0192      	lsls	r2, r2, #6
 80036d8:	4293      	cmp	r3, r2
 80036da:	d040      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xde>
 80036dc:	2280      	movs	r2, #128	@ 0x80
 80036de:	0192      	lsls	r2, r2, #6
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d900      	bls.n	80036e6 <HAL_TIM_ConfigClockSource+0x66>
 80036e4:	e088      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	0152      	lsls	r2, r2, #5
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d100      	bne.n	80036f0 <HAL_TIM_ConfigClockSource+0x70>
 80036ee:	e088      	b.n	8003802 <HAL_TIM_ConfigClockSource+0x182>
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	0152      	lsls	r2, r2, #5
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d900      	bls.n	80036fa <HAL_TIM_ConfigClockSource+0x7a>
 80036f8:	e07e      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 80036fa:	2b70      	cmp	r3, #112	@ 0x70
 80036fc:	d018      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0xb0>
 80036fe:	d900      	bls.n	8003702 <HAL_TIM_ConfigClockSource+0x82>
 8003700:	e07a      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 8003702:	2b60      	cmp	r3, #96	@ 0x60
 8003704:	d04f      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0x126>
 8003706:	d900      	bls.n	800370a <HAL_TIM_ConfigClockSource+0x8a>
 8003708:	e076      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 800370a:	2b50      	cmp	r3, #80	@ 0x50
 800370c:	d03b      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x106>
 800370e:	d900      	bls.n	8003712 <HAL_TIM_ConfigClockSource+0x92>
 8003710:	e072      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 8003712:	2b40      	cmp	r3, #64	@ 0x40
 8003714:	d057      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x146>
 8003716:	d900      	bls.n	800371a <HAL_TIM_ConfigClockSource+0x9a>
 8003718:	e06e      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 800371a:	2b30      	cmp	r3, #48	@ 0x30
 800371c:	d063      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x166>
 800371e:	d86b      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d060      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x166>
 8003724:	d868      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d05d      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x166>
 800372a:	2b10      	cmp	r3, #16
 800372c:	d05b      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x166>
 800372e:	e063      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003740:	f000 fa74 	bl	8003c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2277      	movs	r2, #119	@ 0x77
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
      break;
 800375c:	e052      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376e:	f000 fa5d 	bl	8003c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2180      	movs	r1, #128	@ 0x80
 800377e:	01c9      	lsls	r1, r1, #7
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
      break;
 8003784:	e03e      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	001a      	movs	r2, r3
 8003794:	f000 f9d0 	bl	8003b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2150      	movs	r1, #80	@ 0x50
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 fa2a 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80037a4:	e02e      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b2:	001a      	movs	r2, r3
 80037b4:	f000 f9ee 	bl	8003b94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2160      	movs	r1, #96	@ 0x60
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 fa1a 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80037c4:	e01e      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	001a      	movs	r2, r3
 80037d4:	f000 f9b0 	bl	8003b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2140      	movs	r1, #64	@ 0x40
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 fa0a 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80037e4:	e00e      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f000 fa01 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80037f6:	e005      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80037f8:	230f      	movs	r3, #15
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
      break;
 8003800:	e000      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003802:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2239      	movs	r2, #57	@ 0x39
 8003808:	2101      	movs	r1, #1
 800380a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2238      	movs	r2, #56	@ 0x38
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

  return status;
 8003814:	230f      	movs	r3, #15
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	781b      	ldrb	r3, [r3, #0]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	ffff00ff 	.word	0xffff00ff

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}

08003868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	429a      	cmp	r2, r3
 8003880:	d00b      	beq.n	800389a <TIM_Base_SetConfig+0x32>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a26      	ldr	r2, [pc, #152]	@ (8003920 <TIM_Base_SetConfig+0xb8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_Base_SetConfig+0x32>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	@ (8003924 <TIM_Base_SetConfig+0xbc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_Base_SetConfig+0x32>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <TIM_Base_SetConfig+0xc0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2270      	movs	r2, #112	@ 0x70
 800389e:	4393      	bics	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	05db      	lsls	r3, r3, #23
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d00b      	beq.n	80038ce <TIM_Base_SetConfig+0x66>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a19      	ldr	r2, [pc, #100]	@ (8003920 <TIM_Base_SetConfig+0xb8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_Base_SetConfig+0x66>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <TIM_Base_SetConfig+0xbc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_Base_SetConfig+0x66>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <TIM_Base_SetConfig+0xc0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <TIM_Base_SetConfig+0xc4>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	4393      	bics	r3, r2
 80038e6:	001a      	movs	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2204      	movs	r2, #4
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]
}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b004      	add	sp, #16
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40000400 	.word	0x40000400
 8003924:	40010800 	.word	0x40010800
 8003928:	40011400 	.word	0x40011400
 800392c:	fffffcff 	.word	0xfffffcff

08003930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	2201      	movs	r2, #1
 8003946:	4393      	bics	r3, r2
 8003948:	001a      	movs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2270      	movs	r2, #112	@ 0x70
 800395e:	4393      	bics	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2203      	movs	r2, #3
 8003966:	4393      	bics	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2202      	movs	r2, #2
 8003978:	4393      	bics	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	46c0      	nop			@ (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b006      	add	sp, #24
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	2210      	movs	r2, #16
 80039be:	4393      	bics	r3, r2
 80039c0:	001a      	movs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a13      	ldr	r2, [pc, #76]	@ (8003a24 <TIM_OC2_SetConfig+0x7c>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a12      	ldr	r2, [pc, #72]	@ (8003a28 <TIM_OC2_SetConfig+0x80>)
 80039de:	4013      	ands	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2220      	movs	r2, #32
 80039f2:	4393      	bics	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b006      	add	sp, #24
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	ffff8fff 	.word	0xffff8fff
 8003a28:	fffffcff 	.word	0xfffffcff

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <TIM_OC3_SetConfig+0x78>)
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2270      	movs	r2, #112	@ 0x70
 8003a58:	4393      	bics	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4393      	bics	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa8 <TIM_OC3_SetConfig+0x7c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	621a      	str	r2, [r3, #32]
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b006      	add	sp, #24
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	fffffeff 	.word	0xfffffeff
 8003aa8:	fffffdff 	.word	0xfffffdff

08003aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	@ (8003b28 <TIM_OC4_SetConfig+0x7c>)
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a15      	ldr	r2, [pc, #84]	@ (8003b2c <TIM_OC4_SetConfig+0x80>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a14      	ldr	r2, [pc, #80]	@ (8003b30 <TIM_OC4_SetConfig+0x84>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <TIM_OC4_SetConfig+0x88>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	031b      	lsls	r3, r3, #12
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b006      	add	sp, #24
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	ffffefff 	.word	0xffffefff
 8003b2c:	ffff8fff 	.word	0xffff8fff
 8003b30:	fffffcff 	.word	0xfffffcff
 8003b34:	ffffdfff 	.word	0xffffdfff

08003b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4393      	bics	r3, r2
 8003b52:	001a      	movs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	22f0      	movs	r2, #240	@ 0xf0
 8003b62:	4393      	bics	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	220a      	movs	r2, #10
 8003b74:	4393      	bics	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	46c0      	nop			@ (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b006      	add	sp, #24
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	2210      	movs	r2, #16
 8003bac:	4393      	bics	r3, r2
 8003bae:	001a      	movs	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <TIM_TI2_ConfigInputStage+0x60>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	22a0      	movs	r2, #160	@ 0xa0
 8003bd0:	4393      	bics	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b006      	add	sp, #24
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	ffff0fff 	.word	0xffff0fff

08003bf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2270      	movs	r2, #112	@ 0x70
 8003c0c:	4393      	bics	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	2207      	movs	r2, #7
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4a09      	ldr	r2, [pc, #36]	@ (8003c68 <TIM_ETR_SetConfig+0x3c>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b006      	add	sp, #24
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	ffff00ff 	.word	0xffff00ff

08003c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	221f      	movs	r2, #31
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2201      	movs	r2, #1
 8003c80:	409a      	lsls	r2, r3
 8003c82:	0013      	movs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	43d2      	mvns	r2, r2
 8003c8e:	401a      	ands	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	211f      	movs	r1, #31
 8003c9c:	400b      	ands	r3, r1
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4099      	lsls	r1, r3
 8003ca2:	000b      	movs	r3, r1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b006      	add	sp, #24
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2238      	movs	r2, #56	@ 0x38
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e047      	b.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2238      	movs	r2, #56	@ 0x38
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2239      	movs	r2, #57	@ 0x39
 8003cd8:	2102      	movs	r1, #2
 8003cda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2270      	movs	r2, #112	@ 0x70
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a13      	ldr	r2, [pc, #76]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a11      	ldr	r2, [pc, #68]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a10      	ldr	r2, [pc, #64]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2280      	movs	r2, #128	@ 0x80
 8003d34:	4393      	bics	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2239      	movs	r2, #57	@ 0x39
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2238      	movs	r2, #56	@ 0x38
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40010800 	.word	0x40010800
 8003d6c:	40011400 	.word	0x40011400

08003d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e044      	b.n	8003e0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2278      	movs	r2, #120	@ 0x78
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fd f9a9 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2224      	movs	r2, #36	@ 0x24
 8003d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2101      	movs	r1, #1
 8003dac:	438a      	bics	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fee4 	bl	8004b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fc42 	bl	800464c <UART_SetConfig>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01c      	b.n	8003e0c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	490d      	ldr	r1, [pc, #52]	@ (8003e14 <HAL_UART_Init+0xa4>)
 8003dde:	400a      	ands	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	212a      	movs	r1, #42	@ 0x2a
 8003dee:	438a      	bics	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f000 ff73 	bl	8004cf0 <UART_CheckIdleState>
 8003e0a:	0003      	movs	r3, r0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	ffffb7ff 	.word	0xffffb7ff

08003e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	@ 0x28
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	1dbb      	adds	r3, r7, #6
 8003e26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d000      	beq.n	8003e32 <HAL_UART_Transmit+0x1a>
 8003e30:	e08c      	b.n	8003f4c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_UART_Transmit+0x28>
 8003e38:	1dbb      	adds	r3, r7, #6
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e084      	b.n	8003f4e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d109      	bne.n	8003e64 <HAL_UART_Transmit+0x4c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d001      	beq.n	8003e64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e074      	b.n	8003f4e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2284      	movs	r2, #132	@ 0x84
 8003e68:	2100      	movs	r1, #0
 8003e6a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	@ 0x21
 8003e70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e72:	f7fd fa17 	bl	80012a4 <HAL_GetTick>
 8003e76:	0003      	movs	r3, r0
 8003e78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1dba      	adds	r2, r7, #6
 8003e7e:	2150      	movs	r1, #80	@ 0x50
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1dba      	adds	r2, r7, #6
 8003e88:	2152      	movs	r1, #82	@ 0x52
 8003e8a:	8812      	ldrh	r2, [r2, #0]
 8003e8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	015b      	lsls	r3, r3, #5
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d108      	bne.n	8003eac <HAL_UART_Transmit+0x94>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e003      	b.n	8003eb4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb4:	e02f      	b.n	8003f16 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	0013      	movs	r3, r2
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	f000 ffbc 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8003ec8:	1e03      	subs	r3, r0, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e03b      	b.n	8003f4e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	05d2      	lsls	r2, r2, #23
 8003ee8:	0dd2      	lsrs	r2, r2, #23
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	3302      	adds	r3, #2
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e007      	b.n	8003f04 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3301      	adds	r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2252      	movs	r2, #82	@ 0x52
 8003f08:	5a9b      	ldrh	r3, [r3, r2]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b299      	uxth	r1, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2252      	movs	r2, #82	@ 0x52
 8003f14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2252      	movs	r2, #82	@ 0x52
 8003f1a:	5a9b      	ldrh	r3, [r3, r2]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1c9      	bne.n	8003eb6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	@ 0x40
 8003f30:	f000 ff86 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e005      	b.n	8003f4e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b008      	add	sp, #32
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	1dbb      	adds	r3, r7, #6
 8003f64:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2280      	movs	r2, #128	@ 0x80
 8003f6a:	589b      	ldr	r3, [r3, r2]
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d14a      	bne.n	8004006 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_UART_Receive_IT+0x26>
 8003f76:	1dbb      	adds	r3, r7, #6
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e042      	b.n	8004008 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	015b      	lsls	r3, r3, #5
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d109      	bne.n	8003fa2 <HAL_UART_Receive_IT+0x4a>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d001      	beq.n	8003fa2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e032      	b.n	8004008 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <HAL_UART_Receive_IT+0xb8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d020      	beq.n	8003ff4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	2380      	movs	r3, #128	@ 0x80
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d019      	beq.n	8003ff4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2180      	movs	r1, #128	@ 0x80
 8003fe2:	04c9      	lsls	r1, r1, #19
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ff4:	1dbb      	adds	r3, r7, #6
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 ff8f 	bl	8004f20 <UART_Start_Receive_IT>
 8004002:	0003      	movs	r3, r0
 8004004:	e000      	b.n	8004008 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b008      	add	sp, #32
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40004800 	.word	0x40004800

08004014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b0ab      	sub	sp, #172	@ 0xac
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	22a4      	movs	r2, #164	@ 0xa4
 8004024:	18b9      	adds	r1, r7, r2
 8004026:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	20a0      	movs	r0, #160	@ 0xa0
 8004030:	1839      	adds	r1, r7, r0
 8004032:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	219c      	movs	r1, #156	@ 0x9c
 800403c:	1879      	adds	r1, r7, r1
 800403e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004040:	0011      	movs	r1, r2
 8004042:	18bb      	adds	r3, r7, r2
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a99      	ldr	r2, [pc, #612]	@ (80042ac <HAL_UART_IRQHandler+0x298>)
 8004048:	4013      	ands	r3, r2
 800404a:	2298      	movs	r2, #152	@ 0x98
 800404c:	18bc      	adds	r4, r7, r2
 800404e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004050:	18bb      	adds	r3, r7, r2
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d114      	bne.n	8004082 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004058:	187b      	adds	r3, r7, r1
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2220      	movs	r2, #32
 800405e:	4013      	ands	r3, r2
 8004060:	d00f      	beq.n	8004082 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004062:	183b      	adds	r3, r7, r0
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2220      	movs	r2, #32
 8004068:	4013      	ands	r3, r2
 800406a:	d00a      	beq.n	8004082 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004070:	2b00      	cmp	r3, #0
 8004072:	d100      	bne.n	8004076 <HAL_UART_IRQHandler+0x62>
 8004074:	e2be      	b.n	80045f4 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	0010      	movs	r0, r2
 800407e:	4798      	blx	r3
      }
      return;
 8004080:	e2b8      	b.n	80045f4 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004082:	2398      	movs	r3, #152	@ 0x98
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d100      	bne.n	800408e <HAL_UART_IRQHandler+0x7a>
 800408c:	e114      	b.n	80042b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800408e:	239c      	movs	r3, #156	@ 0x9c
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d106      	bne.n	80040a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800409a:	23a0      	movs	r3, #160	@ 0xa0
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a83      	ldr	r2, [pc, #524]	@ (80042b0 <HAL_UART_IRQHandler+0x29c>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	d100      	bne.n	80040a8 <HAL_UART_IRQHandler+0x94>
 80040a6:	e107      	b.n	80042b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040a8:	23a4      	movs	r3, #164	@ 0xa4
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4013      	ands	r3, r2
 80040b2:	d012      	beq.n	80040da <HAL_UART_IRQHandler+0xc6>
 80040b4:	23a0      	movs	r3, #160	@ 0xa0
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4013      	ands	r3, r2
 80040c0:	d00b      	beq.n	80040da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2284      	movs	r2, #132	@ 0x84
 80040ce:	589b      	ldr	r3, [r3, r2]
 80040d0:	2201      	movs	r2, #1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2184      	movs	r1, #132	@ 0x84
 80040d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040da:	23a4      	movs	r3, #164	@ 0xa4
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2202      	movs	r2, #2
 80040e2:	4013      	ands	r3, r2
 80040e4:	d011      	beq.n	800410a <HAL_UART_IRQHandler+0xf6>
 80040e6:	239c      	movs	r3, #156	@ 0x9c
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	d00b      	beq.n	800410a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2202      	movs	r2, #2
 80040f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2284      	movs	r2, #132	@ 0x84
 80040fe:	589b      	ldr	r3, [r3, r2]
 8004100:	2204      	movs	r2, #4
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2184      	movs	r1, #132	@ 0x84
 8004108:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800410a:	23a4      	movs	r3, #164	@ 0xa4
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2204      	movs	r2, #4
 8004112:	4013      	ands	r3, r2
 8004114:	d011      	beq.n	800413a <HAL_UART_IRQHandler+0x126>
 8004116:	239c      	movs	r3, #156	@ 0x9c
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	4013      	ands	r3, r2
 8004120:	d00b      	beq.n	800413a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2284      	movs	r2, #132	@ 0x84
 800412e:	589b      	ldr	r3, [r3, r2]
 8004130:	2202      	movs	r2, #2
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2184      	movs	r1, #132	@ 0x84
 8004138:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800413a:	23a4      	movs	r3, #164	@ 0xa4
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2208      	movs	r2, #8
 8004142:	4013      	ands	r3, r2
 8004144:	d017      	beq.n	8004176 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004146:	23a0      	movs	r3, #160	@ 0xa0
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2220      	movs	r2, #32
 800414e:	4013      	ands	r3, r2
 8004150:	d105      	bne.n	800415e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004152:	239c      	movs	r3, #156	@ 0x9c
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2201      	movs	r2, #1
 800415a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800415c:	d00b      	beq.n	8004176 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2208      	movs	r2, #8
 8004164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2284      	movs	r2, #132	@ 0x84
 800416a:	589b      	ldr	r3, [r3, r2]
 800416c:	2208      	movs	r2, #8
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2184      	movs	r1, #132	@ 0x84
 8004174:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004176:	23a4      	movs	r3, #164	@ 0xa4
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2380      	movs	r3, #128	@ 0x80
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	4013      	ands	r3, r2
 8004182:	d013      	beq.n	80041ac <HAL_UART_IRQHandler+0x198>
 8004184:	23a0      	movs	r3, #160	@ 0xa0
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	04db      	lsls	r3, r3, #19
 800418e:	4013      	ands	r3, r2
 8004190:	d00c      	beq.n	80041ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2280      	movs	r2, #128	@ 0x80
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2284      	movs	r2, #132	@ 0x84
 80041a0:	589b      	ldr	r3, [r3, r2]
 80041a2:	2220      	movs	r2, #32
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2184      	movs	r1, #132	@ 0x84
 80041aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2284      	movs	r2, #132	@ 0x84
 80041b0:	589b      	ldr	r3, [r3, r2]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d100      	bne.n	80041b8 <HAL_UART_IRQHandler+0x1a4>
 80041b6:	e21f      	b.n	80045f8 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041b8:	23a4      	movs	r3, #164	@ 0xa4
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2220      	movs	r2, #32
 80041c0:	4013      	ands	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041c4:	23a0      	movs	r3, #160	@ 0xa0
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2220      	movs	r2, #32
 80041cc:	4013      	ands	r3, r2
 80041ce:	d008      	beq.n	80041e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	0010      	movs	r0, r2
 80041e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2284      	movs	r2, #132	@ 0x84
 80041e6:	589b      	ldr	r3, [r3, r2]
 80041e8:	2194      	movs	r1, #148	@ 0x94
 80041ea:	187a      	adds	r2, r7, r1
 80041ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2240      	movs	r2, #64	@ 0x40
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d004      	beq.n	8004206 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2228      	movs	r2, #40	@ 0x28
 8004202:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004204:	d047      	beq.n	8004296 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f000 ff53 	bl	80050b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2240      	movs	r2, #64	@ 0x40
 8004216:	4013      	ands	r3, r2
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	d137      	bne.n	800428c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421c:	f3ef 8310 	mrs	r3, PRIMASK
 8004220:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004222:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004224:	2090      	movs	r0, #144	@ 0x90
 8004226:	183a      	adds	r2, r7, r0
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	2301      	movs	r3, #1
 800422c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004230:	f383 8810 	msr	PRIMASK, r3
}
 8004234:	46c0      	nop			@ (mov r8, r8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2140      	movs	r1, #64	@ 0x40
 8004242:	438a      	bics	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
 8004246:	183b      	adds	r3, r7, r0
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800424e:	f383 8810 	msr	PRIMASK, r3
}
 8004252:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004258:	2b00      	cmp	r3, #0
 800425a:	d012      	beq.n	8004282 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004260:	4a14      	ldr	r2, [pc, #80]	@ (80042b4 <HAL_UART_IRQHandler+0x2a0>)
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004268:	0018      	movs	r0, r3
 800426a:	f7fd fd79 	bl	8001d60 <HAL_DMA_Abort_IT>
 800426e:	1e03      	subs	r3, r0, #0
 8004270:	d01a      	beq.n	80042a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427c:	0018      	movs	r0, r3
 800427e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	e012      	b.n	80042a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 f9cd 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428a:	e00d      	b.n	80042a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	0018      	movs	r0, r3
 8004290:	f000 f9c8 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	e008      	b.n	80042a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 f9c3 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2284      	movs	r2, #132	@ 0x84
 80042a2:	2100      	movs	r1, #0
 80042a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80042a6:	e1a7      	b.n	80045f8 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	46c0      	nop			@ (mov r8, r8)
    return;
 80042aa:	e1a5      	b.n	80045f8 <HAL_UART_IRQHandler+0x5e4>
 80042ac:	0000080f 	.word	0x0000080f
 80042b0:	04000120 	.word	0x04000120
 80042b4:	0800517d 	.word	0x0800517d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d000      	beq.n	80042c2 <HAL_UART_IRQHandler+0x2ae>
 80042c0:	e159      	b.n	8004576 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042c2:	23a4      	movs	r3, #164	@ 0xa4
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2210      	movs	r2, #16
 80042ca:	4013      	ands	r3, r2
 80042cc:	d100      	bne.n	80042d0 <HAL_UART_IRQHandler+0x2bc>
 80042ce:	e152      	b.n	8004576 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042d0:	23a0      	movs	r3, #160	@ 0xa0
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2210      	movs	r2, #16
 80042d8:	4013      	ands	r3, r2
 80042da:	d100      	bne.n	80042de <HAL_UART_IRQHandler+0x2ca>
 80042dc:	e14b      	b.n	8004576 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2210      	movs	r2, #16
 80042e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2240      	movs	r2, #64	@ 0x40
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d000      	beq.n	80042f6 <HAL_UART_IRQHandler+0x2e2>
 80042f4:	e0bf      	b.n	8004476 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	217e      	movs	r1, #126	@ 0x7e
 8004300:	187b      	adds	r3, r7, r1
 8004302:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004304:	187b      	adds	r3, r7, r1
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d100      	bne.n	800430e <HAL_UART_IRQHandler+0x2fa>
 800430c:	e095      	b.n	800443a <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2258      	movs	r2, #88	@ 0x58
 8004312:	5a9b      	ldrh	r3, [r3, r2]
 8004314:	187a      	adds	r2, r7, r1
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d300      	bcc.n	800431e <HAL_UART_IRQHandler+0x30a>
 800431c:	e08d      	b.n	800443a <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	187a      	adds	r2, r7, r1
 8004322:	215a      	movs	r1, #90	@ 0x5a
 8004324:	8812      	ldrh	r2, [r2, #0]
 8004326:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2220      	movs	r2, #32
 8004332:	4013      	ands	r3, r2
 8004334:	d16f      	bne.n	8004416 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004336:	f3ef 8310 	mrs	r3, PRIMASK
 800433a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800433e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004340:	2301      	movs	r3, #1
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	49ad      	ldr	r1, [pc, #692]	@ (800460c <HAL_UART_IRQHandler+0x5f8>)
 8004358:	400a      	ands	r2, r1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800435e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004368:	f3ef 8310 	mrs	r3, PRIMASK
 800436c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800436e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004370:	677b      	str	r3, [r7, #116]	@ 0x74
 8004372:	2301      	movs	r3, #1
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004378:	f383 8810 	msr	PRIMASK, r3
}
 800437c:	46c0      	nop			@ (mov r8, r8)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2101      	movs	r1, #1
 800438a:	438a      	bics	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004390:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004394:	f383 8810 	msr	PRIMASK, r3
}
 8004398:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439a:	f3ef 8310 	mrs	r3, PRIMASK
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80043a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80043a4:	2301      	movs	r3, #1
 80043a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043aa:	f383 8810 	msr	PRIMASK, r3
}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2140      	movs	r1, #64	@ 0x40
 80043bc:	438a      	bics	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2280      	movs	r2, #128	@ 0x80
 80043d0:	2120      	movs	r1, #32
 80043d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043da:	f3ef 8310 	mrs	r3, PRIMASK
 80043de:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80043e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043e4:	2301      	movs	r3, #1
 80043e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2110      	movs	r1, #16
 80043fc:	438a      	bics	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004402:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004410:	0018      	movs	r0, r3
 8004412:	f7fd fc65 	bl	8001ce0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2258      	movs	r2, #88	@ 0x58
 8004420:	5a9a      	ldrh	r2, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	215a      	movs	r1, #90	@ 0x5a
 8004426:	5a5b      	ldrh	r3, [r3, r1]
 8004428:	b29b      	uxth	r3, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0011      	movs	r1, r2
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f8fe 	bl	8004634 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004438:	e0e0      	b.n	80045fc <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2258      	movs	r2, #88	@ 0x58
 800443e:	5a9b      	ldrh	r3, [r3, r2]
 8004440:	227e      	movs	r2, #126	@ 0x7e
 8004442:	18ba      	adds	r2, r7, r2
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d000      	beq.n	800444c <HAL_UART_IRQHandler+0x438>
 800444a:	e0d7      	b.n	80045fc <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2220      	movs	r2, #32
 8004456:	4013      	ands	r3, r2
 8004458:	2b20      	cmp	r3, #32
 800445a:	d000      	beq.n	800445e <HAL_UART_IRQHandler+0x44a>
 800445c:	e0ce      	b.n	80045fc <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2258      	movs	r2, #88	@ 0x58
 8004468:	5a9a      	ldrh	r2, [r3, r2]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0011      	movs	r1, r2
 800446e:	0018      	movs	r0, r3
 8004470:	f000 f8e0 	bl	8004634 <HAL_UARTEx_RxEventCallback>
      return;
 8004474:	e0c2      	b.n	80045fc <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2258      	movs	r2, #88	@ 0x58
 800447a:	5a99      	ldrh	r1, [r3, r2]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	225a      	movs	r2, #90	@ 0x5a
 8004480:	5a9b      	ldrh	r3, [r3, r2]
 8004482:	b29a      	uxth	r2, r3
 8004484:	208e      	movs	r0, #142	@ 0x8e
 8004486:	183b      	adds	r3, r7, r0
 8004488:	1a8a      	subs	r2, r1, r2
 800448a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	225a      	movs	r2, #90	@ 0x5a
 8004490:	5a9b      	ldrh	r3, [r3, r2]
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d100      	bne.n	800449a <HAL_UART_IRQHandler+0x486>
 8004498:	e0b2      	b.n	8004600 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800449a:	183b      	adds	r3, r7, r0
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d100      	bne.n	80044a4 <HAL_UART_IRQHandler+0x490>
 80044a2:	e0ad      	b.n	8004600 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a4:	f3ef 8310 	mrs	r3, PRIMASK
 80044a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80044aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ac:	2488      	movs	r4, #136	@ 0x88
 80044ae:	193a      	adds	r2, r7, r4
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	2301      	movs	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f383 8810 	msr	PRIMASK, r3
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4951      	ldr	r1, [pc, #324]	@ (8004610 <HAL_UART_IRQHandler+0x5fc>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	193b      	adds	r3, r7, r4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f383 8810 	msr	PRIMASK, r3
}
 80044da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044dc:	f3ef 8310 	mrs	r3, PRIMASK
 80044e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80044e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	2484      	movs	r4, #132	@ 0x84
 80044e6:	193a      	adds	r2, r7, r4
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	2301      	movs	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f383 8810 	msr	PRIMASK, r3
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2101      	movs	r1, #1
 8004502:	438a      	bics	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	193b      	adds	r3, r7, r4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2280      	movs	r2, #128	@ 0x80
 8004518:	2120      	movs	r1, #32
 800451a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004528:	f3ef 8310 	mrs	r3, PRIMASK
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	2480      	movs	r4, #128	@ 0x80
 8004532:	193a      	adds	r2, r7, r4
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	2301      	movs	r3, #1
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2110      	movs	r1, #16
 800454e:	438a      	bics	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	193b      	adds	r3, r7, r4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004566:	183b      	adds	r3, r7, r0
 8004568:	881a      	ldrh	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f860 	bl	8004634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004574:	e044      	b.n	8004600 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004576:	23a4      	movs	r3, #164	@ 0xa4
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	2380      	movs	r3, #128	@ 0x80
 800457e:	035b      	lsls	r3, r3, #13
 8004580:	4013      	ands	r3, r2
 8004582:	d010      	beq.n	80045a6 <HAL_UART_IRQHandler+0x592>
 8004584:	239c      	movs	r3, #156	@ 0x9c
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	03db      	lsls	r3, r3, #15
 800458e:	4013      	ands	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2280      	movs	r2, #128	@ 0x80
 8004598:	0352      	lsls	r2, r2, #13
 800459a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 ffee 	bl	8005580 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045a4:	e02f      	b.n	8004606 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045a6:	23a4      	movs	r3, #164	@ 0xa4
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2280      	movs	r2, #128	@ 0x80
 80045ae:	4013      	ands	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045b2:	23a0      	movs	r3, #160	@ 0xa0
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2280      	movs	r2, #128	@ 0x80
 80045ba:	4013      	ands	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01e      	beq.n	8004604 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	0010      	movs	r0, r2
 80045ce:	4798      	blx	r3
    }
    return;
 80045d0:	e018      	b.n	8004604 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045d2:	23a4      	movs	r3, #164	@ 0xa4
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2240      	movs	r2, #64	@ 0x40
 80045da:	4013      	ands	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_UART_IRQHandler+0x5f2>
 80045de:	23a0      	movs	r3, #160	@ 0xa0
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2240      	movs	r2, #64	@ 0x40
 80045e6:	4013      	ands	r3, r2
 80045e8:	d00d      	beq.n	8004606 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 fdd8 	bl	80051a2 <UART_EndTransmit_IT>
    return;
 80045f2:	e008      	b.n	8004606 <HAL_UART_IRQHandler+0x5f2>
      return;
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	e006      	b.n	8004606 <HAL_UART_IRQHandler+0x5f2>
    return;
 80045f8:	46c0      	nop			@ (mov r8, r8)
 80045fa:	e004      	b.n	8004606 <HAL_UART_IRQHandler+0x5f2>
      return;
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	e002      	b.n	8004606 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004600:	46c0      	nop			@ (mov r8, r8)
 8004602:	e000      	b.n	8004606 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004604:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004606:	46bd      	mov	sp, r7
 8004608:	b02b      	add	sp, #172	@ 0xac
 800460a:	bd90      	pop	{r4, r7, pc}
 800460c:	fffffeff 	.word	0xfffffeff
 8004610:	fffffedf 	.word	0xfffffedf

08004614 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	000a      	movs	r2, r1
 800463e:	1cbb      	adds	r3, r7, #2
 8004640:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	b5b0      	push	{r4, r5, r7, lr}
 800464e:	b08e      	sub	sp, #56	@ 0x38
 8004650:	af00      	add	r7, sp, #0
 8004652:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004654:	231a      	movs	r3, #26
 8004656:	2218      	movs	r2, #24
 8004658:	189b      	adds	r3, r3, r2
 800465a:	19db      	adds	r3, r3, r7
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4ac3      	ldr	r2, [pc, #780]	@ (800498c <UART_SetConfig+0x340>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4abe      	ldr	r2, [pc, #760]	@ (8004990 <UART_SetConfig+0x344>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4ab8      	ldr	r2, [pc, #736]	@ (8004994 <UART_SetConfig+0x348>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046bc:	4313      	orrs	r3, r2
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4ab4      	ldr	r2, [pc, #720]	@ (8004998 <UART_SetConfig+0x34c>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4ab0      	ldr	r2, [pc, #704]	@ (800499c <UART_SetConfig+0x350>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d131      	bne.n	8004744 <UART_SetConfig+0xf8>
 80046e0:	4baf      	ldr	r3, [pc, #700]	@ (80049a0 <UART_SetConfig+0x354>)
 80046e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e4:	2203      	movs	r2, #3
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d01d      	beq.n	8004728 <UART_SetConfig+0xdc>
 80046ec:	d823      	bhi.n	8004736 <UART_SetConfig+0xea>
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d00c      	beq.n	800470c <UART_SetConfig+0xc0>
 80046f2:	d820      	bhi.n	8004736 <UART_SetConfig+0xea>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <UART_SetConfig+0xb2>
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d00e      	beq.n	800471a <UART_SetConfig+0xce>
 80046fc:	e01b      	b.n	8004736 <UART_SetConfig+0xea>
 80046fe:	231b      	movs	r3, #27
 8004700:	2218      	movs	r2, #24
 8004702:	189b      	adds	r3, r3, r2
 8004704:	19db      	adds	r3, r3, r7
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e0b4      	b.n	8004876 <UART_SetConfig+0x22a>
 800470c:	231b      	movs	r3, #27
 800470e:	2218      	movs	r2, #24
 8004710:	189b      	adds	r3, r3, r2
 8004712:	19db      	adds	r3, r3, r7
 8004714:	2202      	movs	r2, #2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e0ad      	b.n	8004876 <UART_SetConfig+0x22a>
 800471a:	231b      	movs	r3, #27
 800471c:	2218      	movs	r2, #24
 800471e:	189b      	adds	r3, r3, r2
 8004720:	19db      	adds	r3, r3, r7
 8004722:	2204      	movs	r2, #4
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e0a6      	b.n	8004876 <UART_SetConfig+0x22a>
 8004728:	231b      	movs	r3, #27
 800472a:	2218      	movs	r2, #24
 800472c:	189b      	adds	r3, r3, r2
 800472e:	19db      	adds	r3, r3, r7
 8004730:	2208      	movs	r2, #8
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e09f      	b.n	8004876 <UART_SetConfig+0x22a>
 8004736:	231b      	movs	r3, #27
 8004738:	2218      	movs	r2, #24
 800473a:	189b      	adds	r3, r3, r2
 800473c:	19db      	adds	r3, r3, r7
 800473e:	2210      	movs	r2, #16
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e098      	b.n	8004876 <UART_SetConfig+0x22a>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a96      	ldr	r2, [pc, #600]	@ (80049a4 <UART_SetConfig+0x358>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d131      	bne.n	80047b2 <UART_SetConfig+0x166>
 800474e:	4b94      	ldr	r3, [pc, #592]	@ (80049a0 <UART_SetConfig+0x354>)
 8004750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004752:	220c      	movs	r2, #12
 8004754:	4013      	ands	r3, r2
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d01d      	beq.n	8004796 <UART_SetConfig+0x14a>
 800475a:	d823      	bhi.n	80047a4 <UART_SetConfig+0x158>
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00c      	beq.n	800477a <UART_SetConfig+0x12e>
 8004760:	d820      	bhi.n	80047a4 <UART_SetConfig+0x158>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <UART_SetConfig+0x120>
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00e      	beq.n	8004788 <UART_SetConfig+0x13c>
 800476a:	e01b      	b.n	80047a4 <UART_SetConfig+0x158>
 800476c:	231b      	movs	r3, #27
 800476e:	2218      	movs	r2, #24
 8004770:	189b      	adds	r3, r3, r2
 8004772:	19db      	adds	r3, r3, r7
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e07d      	b.n	8004876 <UART_SetConfig+0x22a>
 800477a:	231b      	movs	r3, #27
 800477c:	2218      	movs	r2, #24
 800477e:	189b      	adds	r3, r3, r2
 8004780:	19db      	adds	r3, r3, r7
 8004782:	2202      	movs	r2, #2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e076      	b.n	8004876 <UART_SetConfig+0x22a>
 8004788:	231b      	movs	r3, #27
 800478a:	2218      	movs	r2, #24
 800478c:	189b      	adds	r3, r3, r2
 800478e:	19db      	adds	r3, r3, r7
 8004790:	2204      	movs	r2, #4
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e06f      	b.n	8004876 <UART_SetConfig+0x22a>
 8004796:	231b      	movs	r3, #27
 8004798:	2218      	movs	r2, #24
 800479a:	189b      	adds	r3, r3, r2
 800479c:	19db      	adds	r3, r3, r7
 800479e:	2208      	movs	r2, #8
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e068      	b.n	8004876 <UART_SetConfig+0x22a>
 80047a4:	231b      	movs	r3, #27
 80047a6:	2218      	movs	r2, #24
 80047a8:	189b      	adds	r3, r3, r2
 80047aa:	19db      	adds	r3, r3, r7
 80047ac:	2210      	movs	r2, #16
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e061      	b.n	8004876 <UART_SetConfig+0x22a>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7c      	ldr	r2, [pc, #496]	@ (80049a8 <UART_SetConfig+0x35c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d106      	bne.n	80047ca <UART_SetConfig+0x17e>
 80047bc:	231b      	movs	r3, #27
 80047be:	2218      	movs	r2, #24
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	19db      	adds	r3, r3, r7
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e055      	b.n	8004876 <UART_SetConfig+0x22a>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a77      	ldr	r2, [pc, #476]	@ (80049ac <UART_SetConfig+0x360>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d106      	bne.n	80047e2 <UART_SetConfig+0x196>
 80047d4:	231b      	movs	r3, #27
 80047d6:	2218      	movs	r2, #24
 80047d8:	189b      	adds	r3, r3, r2
 80047da:	19db      	adds	r3, r3, r7
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e049      	b.n	8004876 <UART_SetConfig+0x22a>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004994 <UART_SetConfig+0x348>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d13e      	bne.n	800486a <UART_SetConfig+0x21e>
 80047ec:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <UART_SetConfig+0x354>)
 80047ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047f0:	23c0      	movs	r3, #192	@ 0xc0
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	22c0      	movs	r2, #192	@ 0xc0
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d027      	beq.n	800484e <UART_SetConfig+0x202>
 80047fe:	22c0      	movs	r2, #192	@ 0xc0
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	4293      	cmp	r3, r2
 8004804:	d82a      	bhi.n	800485c <UART_SetConfig+0x210>
 8004806:	2280      	movs	r2, #128	@ 0x80
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	4293      	cmp	r3, r2
 800480c:	d011      	beq.n	8004832 <UART_SetConfig+0x1e6>
 800480e:	2280      	movs	r2, #128	@ 0x80
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	4293      	cmp	r3, r2
 8004814:	d822      	bhi.n	800485c <UART_SetConfig+0x210>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <UART_SetConfig+0x1d8>
 800481a:	2280      	movs	r2, #128	@ 0x80
 800481c:	00d2      	lsls	r2, r2, #3
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <UART_SetConfig+0x1f4>
 8004822:	e01b      	b.n	800485c <UART_SetConfig+0x210>
 8004824:	231b      	movs	r3, #27
 8004826:	2218      	movs	r2, #24
 8004828:	189b      	adds	r3, r3, r2
 800482a:	19db      	adds	r3, r3, r7
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e021      	b.n	8004876 <UART_SetConfig+0x22a>
 8004832:	231b      	movs	r3, #27
 8004834:	2218      	movs	r2, #24
 8004836:	189b      	adds	r3, r3, r2
 8004838:	19db      	adds	r3, r3, r7
 800483a:	2202      	movs	r2, #2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e01a      	b.n	8004876 <UART_SetConfig+0x22a>
 8004840:	231b      	movs	r3, #27
 8004842:	2218      	movs	r2, #24
 8004844:	189b      	adds	r3, r3, r2
 8004846:	19db      	adds	r3, r3, r7
 8004848:	2204      	movs	r2, #4
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e013      	b.n	8004876 <UART_SetConfig+0x22a>
 800484e:	231b      	movs	r3, #27
 8004850:	2218      	movs	r2, #24
 8004852:	189b      	adds	r3, r3, r2
 8004854:	19db      	adds	r3, r3, r7
 8004856:	2208      	movs	r2, #8
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e00c      	b.n	8004876 <UART_SetConfig+0x22a>
 800485c:	231b      	movs	r3, #27
 800485e:	2218      	movs	r2, #24
 8004860:	189b      	adds	r3, r3, r2
 8004862:	19db      	adds	r3, r3, r7
 8004864:	2210      	movs	r2, #16
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e005      	b.n	8004876 <UART_SetConfig+0x22a>
 800486a:	231b      	movs	r3, #27
 800486c:	2218      	movs	r2, #24
 800486e:	189b      	adds	r3, r3, r2
 8004870:	19db      	adds	r3, r3, r7
 8004872:	2210      	movs	r2, #16
 8004874:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a46      	ldr	r2, [pc, #280]	@ (8004994 <UART_SetConfig+0x348>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d000      	beq.n	8004882 <UART_SetConfig+0x236>
 8004880:	e09a      	b.n	80049b8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004882:	231b      	movs	r3, #27
 8004884:	2218      	movs	r2, #24
 8004886:	189b      	adds	r3, r3, r2
 8004888:	19db      	adds	r3, r3, r7
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d01d      	beq.n	80048cc <UART_SetConfig+0x280>
 8004890:	dc20      	bgt.n	80048d4 <UART_SetConfig+0x288>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d015      	beq.n	80048c2 <UART_SetConfig+0x276>
 8004896:	dc1d      	bgt.n	80048d4 <UART_SetConfig+0x288>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <UART_SetConfig+0x256>
 800489c:	2b02      	cmp	r3, #2
 800489e:	d005      	beq.n	80048ac <UART_SetConfig+0x260>
 80048a0:	e018      	b.n	80048d4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a2:	f7fe fa25 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 80048a6:	0003      	movs	r3, r0
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048aa:	e01c      	b.n	80048e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ac:	4b3c      	ldr	r3, [pc, #240]	@ (80049a0 <UART_SetConfig+0x354>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2210      	movs	r2, #16
 80048b2:	4013      	ands	r3, r2
 80048b4:	d002      	beq.n	80048bc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048b6:	4b3e      	ldr	r3, [pc, #248]	@ (80049b0 <UART_SetConfig+0x364>)
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048ba:	e014      	b.n	80048e6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b3d      	ldr	r3, [pc, #244]	@ (80049b4 <UART_SetConfig+0x368>)
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048c0:	e011      	b.n	80048e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe f985 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 80048c6:	0003      	movs	r3, r0
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048ca:	e00c      	b.n	80048e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048d2:	e008      	b.n	80048e6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80048d8:	231a      	movs	r3, #26
 80048da:	2218      	movs	r2, #24
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	19db      	adds	r3, r3, r7
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
        break;
 80048e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d100      	bne.n	80048ee <UART_SetConfig+0x2a2>
 80048ec:	e133      	b.n	8004b56 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	0013      	movs	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d305      	bcc.n	800490a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d906      	bls.n	8004918 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800490a:	231a      	movs	r3, #26
 800490c:	2218      	movs	r2, #24
 800490e:	189b      	adds	r3, r3, r2
 8004910:	19db      	adds	r3, r3, r7
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e11e      	b.n	8004b56 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	6939      	ldr	r1, [r7, #16]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	000b      	movs	r3, r1
 8004926:	0e1b      	lsrs	r3, r3, #24
 8004928:	0010      	movs	r0, r2
 800492a:	0205      	lsls	r5, r0, #8
 800492c:	431d      	orrs	r5, r3
 800492e:	000b      	movs	r3, r1
 8004930:	021c      	lsls	r4, r3, #8
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68b8      	ldr	r0, [r7, #8]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	1900      	adds	r0, r0, r4
 8004944:	4169      	adcs	r1, r5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f7fb fc64 	bl	8000220 <__aeabi_uldivmod>
 8004958:	0002      	movs	r2, r0
 800495a:	000b      	movs	r3, r1
 800495c:	0013      	movs	r3, r2
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004962:	23c0      	movs	r3, #192	@ 0xc0
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	429a      	cmp	r2, r3
 8004968:	d309      	bcc.n	800497e <UART_SetConfig+0x332>
 800496a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	035b      	lsls	r3, r3, #13
 8004970:	429a      	cmp	r2, r3
 8004972:	d204      	bcs.n	800497e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	e0eb      	b.n	8004b56 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800497e:	231a      	movs	r3, #26
 8004980:	2218      	movs	r2, #24
 8004982:	189b      	adds	r3, r3, r2
 8004984:	19db      	adds	r3, r3, r7
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e0e4      	b.n	8004b56 <UART_SetConfig+0x50a>
 800498c:	efff69f3 	.word	0xefff69f3
 8004990:	ffffcfff 	.word	0xffffcfff
 8004994:	40004800 	.word	0x40004800
 8004998:	fffff4ff 	.word	0xfffff4ff
 800499c:	40013800 	.word	0x40013800
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40004400 	.word	0x40004400
 80049a8:	40004c00 	.word	0x40004c00
 80049ac:	40005000 	.word	0x40005000
 80049b0:	003d0900 	.word	0x003d0900
 80049b4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d000      	beq.n	80049c6 <UART_SetConfig+0x37a>
 80049c4:	e070      	b.n	8004aa8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80049c6:	231b      	movs	r3, #27
 80049c8:	2218      	movs	r2, #24
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	19db      	adds	r3, r3, r7
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d822      	bhi.n	8004a1a <UART_SetConfig+0x3ce>
 80049d4:	009a      	lsls	r2, r3, #2
 80049d6:	4b67      	ldr	r3, [pc, #412]	@ (8004b74 <UART_SetConfig+0x528>)
 80049d8:	18d3      	adds	r3, r2, r3
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7fe f987 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 80049e2:	0003      	movs	r3, r0
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049e6:	e021      	b.n	8004a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fe f998 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 80049ec:	0003      	movs	r3, r0
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049f0:	e01c      	b.n	8004a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f2:	4b61      	ldr	r3, [pc, #388]	@ (8004b78 <UART_SetConfig+0x52c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2210      	movs	r2, #16
 80049f8:	4013      	ands	r3, r2
 80049fa:	d002      	beq.n	8004a02 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049fc:	4b5f      	ldr	r3, [pc, #380]	@ (8004b7c <UART_SetConfig+0x530>)
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a00:	e014      	b.n	8004a2c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004a02:	4b5f      	ldr	r3, [pc, #380]	@ (8004b80 <UART_SetConfig+0x534>)
 8004a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a06:	e011      	b.n	8004a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a08:	f7fe f8e2 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a10:	e00c      	b.n	8004a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a18:	e008      	b.n	8004a2c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004a1e:	231a      	movs	r3, #26
 8004a20:	2218      	movs	r2, #24
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	19db      	adds	r3, r3, r7
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
        break;
 8004a2a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d100      	bne.n	8004a34 <UART_SetConfig+0x3e8>
 8004a32:	e090      	b.n	8004b56 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a36:	005a      	lsls	r2, r3, #1
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	18d2      	adds	r2, r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0019      	movs	r1, r3
 8004a46:	0010      	movs	r0, r2
 8004a48:	f7fb fb5e 	bl	8000108 <__udivsi3>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	2b0f      	cmp	r3, #15
 8004a54:	d921      	bls.n	8004a9a <UART_SetConfig+0x44e>
 8004a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	025b      	lsls	r3, r3, #9
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d21c      	bcs.n	8004a9a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	200e      	movs	r0, #14
 8004a66:	2418      	movs	r4, #24
 8004a68:	1903      	adds	r3, r0, r4
 8004a6a:	19db      	adds	r3, r3, r7
 8004a6c:	210f      	movs	r1, #15
 8004a6e:	438a      	bics	r2, r1
 8004a70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2207      	movs	r2, #7
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b299      	uxth	r1, r3
 8004a7e:	1903      	adds	r3, r0, r4
 8004a80:	19db      	adds	r3, r3, r7
 8004a82:	1902      	adds	r2, r0, r4
 8004a84:	19d2      	adds	r2, r2, r7
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	1902      	adds	r2, r0, r4
 8004a92:	19d2      	adds	r2, r2, r7
 8004a94:	8812      	ldrh	r2, [r2, #0]
 8004a96:	60da      	str	r2, [r3, #12]
 8004a98:	e05d      	b.n	8004b56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9a:	231a      	movs	r3, #26
 8004a9c:	2218      	movs	r2, #24
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	19db      	adds	r3, r3, r7
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e056      	b.n	8004b56 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa8:	231b      	movs	r3, #27
 8004aaa:	2218      	movs	r2, #24
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	19db      	adds	r3, r3, r7
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d822      	bhi.n	8004afc <UART_SetConfig+0x4b0>
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	4b32      	ldr	r3, [pc, #200]	@ (8004b84 <UART_SetConfig+0x538>)
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fe f916 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ac8:	e021      	b.n	8004b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aca:	f7fe f927 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ad2:	e01c      	b.n	8004b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad4:	4b28      	ldr	r3, [pc, #160]	@ (8004b78 <UART_SetConfig+0x52c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	4013      	ands	r3, r2
 8004adc:	d002      	beq.n	8004ae4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ade:	4b27      	ldr	r3, [pc, #156]	@ (8004b7c <UART_SetConfig+0x530>)
 8004ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ae2:	e014      	b.n	8004b0e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b26      	ldr	r3, [pc, #152]	@ (8004b80 <UART_SetConfig+0x534>)
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ae8:	e011      	b.n	8004b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe f871 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8004aee:	0003      	movs	r3, r0
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004af2:	e00c      	b.n	8004b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004afa:	e008      	b.n	8004b0e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004b00:	231a      	movs	r3, #26
 8004b02:	2218      	movs	r2, #24
 8004b04:	189b      	adds	r3, r3, r2
 8004b06:	19db      	adds	r3, r3, r7
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
        break;
 8004b0c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d020      	beq.n	8004b56 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	085a      	lsrs	r2, r3, #1
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	18d2      	adds	r2, r2, r3
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	0019      	movs	r1, r3
 8004b24:	0010      	movs	r0, r2
 8004b26:	f7fb faef 	bl	8000108 <__udivsi3>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	2b0f      	cmp	r3, #15
 8004b32:	d90a      	bls.n	8004b4a <UART_SetConfig+0x4fe>
 8004b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	025b      	lsls	r3, r3, #9
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d205      	bcs.n	8004b4a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	e005      	b.n	8004b56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004b4a:	231a      	movs	r3, #26
 8004b4c:	2218      	movs	r2, #24
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	19db      	adds	r3, r3, r7
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b62:	231a      	movs	r3, #26
 8004b64:	2218      	movs	r2, #24
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	19db      	adds	r3, r3, r7
 8004b6a:	781b      	ldrb	r3, [r3, #0]
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b00e      	add	sp, #56	@ 0x38
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}
 8004b74:	08005624 	.word	0x08005624
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	003d0900 	.word	0x003d0900
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	08005648 	.word	0x08005648

08004b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	2208      	movs	r2, #8
 8004b96:	4013      	ands	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8004ccc <UART_AdvFeatureConfig+0x144>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a43      	ldr	r2, [pc, #268]	@ (8004cd0 <UART_AdvFeatureConfig+0x148>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a3b      	ldr	r2, [pc, #236]	@ (8004cd4 <UART_AdvFeatureConfig+0x14c>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d00b      	beq.n	8004c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4a34      	ldr	r2, [pc, #208]	@ (8004cd8 <UART_AdvFeatureConfig+0x150>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d00b      	beq.n	8004c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4a2c      	ldr	r2, [pc, #176]	@ (8004cdc <UART_AdvFeatureConfig+0x154>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	2220      	movs	r2, #32
 8004c40:	4013      	ands	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ce0 <UART_AdvFeatureConfig+0x158>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	2240      	movs	r2, #64	@ 0x40
 8004c62:	4013      	ands	r3, r2
 8004c64:	d01d      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce4 <UART_AdvFeatureConfig+0x15c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	0019      	movs	r1, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	035b      	lsls	r3, r3, #13
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d10b      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <UART_AdvFeatureConfig+0x160>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	0019      	movs	r1, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	2280      	movs	r2, #128	@ 0x80
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004cec <UART_AdvFeatureConfig+0x164>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	46c0      	nop			@ (mov r8, r8)
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b002      	add	sp, #8
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	ffff7fff 	.word	0xffff7fff
 8004cd0:	fffdffff 	.word	0xfffdffff
 8004cd4:	fffeffff 	.word	0xfffeffff
 8004cd8:	fffbffff 	.word	0xfffbffff
 8004cdc:	ffffefff 	.word	0xffffefff
 8004ce0:	ffffdfff 	.word	0xffffdfff
 8004ce4:	ffefffff 	.word	0xffefffff
 8004ce8:	ff9fffff 	.word	0xff9fffff
 8004cec:	fff7ffff 	.word	0xfff7ffff

08004cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b092      	sub	sp, #72	@ 0x48
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2284      	movs	r2, #132	@ 0x84
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d00:	f7fc fad0 	bl	80012a4 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2208      	movs	r2, #8
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d12c      	bne.n	8004d70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	0391      	lsls	r1, r2, #14
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4a46      	ldr	r2, [pc, #280]	@ (8004e38 <UART_CheckIdleState+0x148>)
 8004d20:	9200      	str	r2, [sp, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f000 f88c 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004d28:	1e03      	subs	r3, r0, #0
 8004d2a:	d021      	beq.n	8004d70 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d36:	2301      	movs	r3, #1
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			@ (mov r8, r8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2180      	movs	r1, #128	@ 0x80
 8004d4e:	438a      	bics	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2278      	movs	r2, #120	@ 0x78
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e05f      	b.n	8004e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2204      	movs	r2, #4
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d146      	bne.n	8004e0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d80:	2280      	movs	r2, #128	@ 0x80
 8004d82:	03d1      	lsls	r1, r2, #15
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4a2c      	ldr	r2, [pc, #176]	@ (8004e38 <UART_CheckIdleState+0x148>)
 8004d88:	9200      	str	r2, [sp, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f000 f858 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004d90:	1e03      	subs	r3, r0, #0
 8004d92:	d03b      	beq.n	8004e0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d94:	f3ef 8310 	mrs	r3, PRIMASK
 8004d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9e:	2301      	movs	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4921      	ldr	r1, [pc, #132]	@ (8004e3c <UART_CheckIdleState+0x14c>)
 8004db6:	400a      	ands	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dca:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f383 8810 	msr	PRIMASK, r3
}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2101      	movs	r1, #1
 8004de8:	438a      	bics	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2280      	movs	r2, #128	@ 0x80
 8004dfc:	2120      	movs	r1, #32
 8004dfe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2278      	movs	r2, #120	@ 0x78
 8004e04:	2100      	movs	r1, #0
 8004e06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e011      	b.n	8004e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2280      	movs	r2, #128	@ 0x80
 8004e16:	2120      	movs	r1, #32
 8004e18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2278      	movs	r2, #120	@ 0x78
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b010      	add	sp, #64	@ 0x40
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	01ffffff 	.word	0x01ffffff
 8004e3c:	fffffedf 	.word	0xfffffedf

08004e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	1dfb      	adds	r3, r7, #7
 8004e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	e051      	b.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3301      	adds	r3, #1
 8004e56:	d04e      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e58:	f7fc fa24 	bl	80012a4 <HAL_GetTick>
 8004e5c:	0002      	movs	r2, r0
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e051      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2204      	movs	r2, #4
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d03b      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d038      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d035      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	2208      	movs	r2, #8
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d111      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 f906 	bl	80050b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2284      	movs	r2, #132	@ 0x84
 8004eac:	2108      	movs	r1, #8
 8004eae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2278      	movs	r2, #120	@ 0x78
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e02c      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	2380      	movs	r3, #128	@ 0x80
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d112      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2280      	movs	r2, #128	@ 0x80
 8004ed6:	0112      	lsls	r2, r2, #4
 8004ed8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 f8e9 	bl	80050b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2284      	movs	r2, #132	@ 0x84
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2278      	movs	r2, #120	@ 0x78
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e00f      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	425a      	negs	r2, r3
 8004f06:	4153      	adcs	r3, r2
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d09e      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b004      	add	sp, #16
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b090      	sub	sp, #64	@ 0x40
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	1dbb      	adds	r3, r7, #6
 8004f2c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1dba      	adds	r2, r7, #6
 8004f38:	2158      	movs	r1, #88	@ 0x58
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1dba      	adds	r2, r7, #6
 8004f42:	215a      	movs	r1, #90	@ 0x5a
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10d      	bne.n	8004f76 <UART_Start_Receive_IT+0x56>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <UART_Start_Receive_IT+0x4c>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	225c      	movs	r2, #92	@ 0x5c
 8004f66:	4950      	ldr	r1, [pc, #320]	@ (80050a8 <UART_Start_Receive_IT+0x188>)
 8004f68:	5299      	strh	r1, [r3, r2]
 8004f6a:	e02e      	b.n	8004fca <UART_Start_Receive_IT+0xaa>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	225c      	movs	r2, #92	@ 0x5c
 8004f70:	21ff      	movs	r1, #255	@ 0xff
 8004f72:	5299      	strh	r1, [r3, r2]
 8004f74:	e029      	b.n	8004fca <UART_Start_Receive_IT+0xaa>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10d      	bne.n	8004f9a <UART_Start_Receive_IT+0x7a>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <UART_Start_Receive_IT+0x70>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	225c      	movs	r2, #92	@ 0x5c
 8004f8a:	21ff      	movs	r1, #255	@ 0xff
 8004f8c:	5299      	strh	r1, [r3, r2]
 8004f8e:	e01c      	b.n	8004fca <UART_Start_Receive_IT+0xaa>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	225c      	movs	r2, #92	@ 0x5c
 8004f94:	217f      	movs	r1, #127	@ 0x7f
 8004f96:	5299      	strh	r1, [r3, r2]
 8004f98:	e017      	b.n	8004fca <UART_Start_Receive_IT+0xaa>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	2380      	movs	r3, #128	@ 0x80
 8004fa0:	055b      	lsls	r3, r3, #21
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d10d      	bne.n	8004fc2 <UART_Start_Receive_IT+0xa2>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <UART_Start_Receive_IT+0x98>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	225c      	movs	r2, #92	@ 0x5c
 8004fb2:	217f      	movs	r1, #127	@ 0x7f
 8004fb4:	5299      	strh	r1, [r3, r2]
 8004fb6:	e008      	b.n	8004fca <UART_Start_Receive_IT+0xaa>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	225c      	movs	r2, #92	@ 0x5c
 8004fbc:	213f      	movs	r1, #63	@ 0x3f
 8004fbe:	5299      	strh	r1, [r3, r2]
 8004fc0:	e003      	b.n	8004fca <UART_Start_Receive_IT+0xaa>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	225c      	movs	r2, #92	@ 0x5c
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2284      	movs	r2, #132	@ 0x84
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2280      	movs	r2, #128	@ 0x80
 8004fd6:	2122      	movs	r1, #34	@ 0x22
 8004fd8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fda:	f3ef 8310 	mrs	r3, PRIMASK
 8004fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fea:	f383 8810 	msr	PRIMASK, r3
}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	015b      	lsls	r3, r3, #5
 8005014:	429a      	cmp	r2, r3
 8005016:	d107      	bne.n	8005028 <UART_Start_Receive_IT+0x108>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <UART_Start_Receive_IT+0x18c>)
 8005024:	669a      	str	r2, [r3, #104]	@ 0x68
 8005026:	e002      	b.n	800502e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a21      	ldr	r2, [pc, #132]	@ (80050b0 <UART_Start_Receive_IT+0x190>)
 800502c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d019      	beq.n	800506a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	61fb      	str	r3, [r7, #28]
  return(result);
 800503c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005040:	2301      	movs	r3, #1
 8005042:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2190      	movs	r1, #144	@ 0x90
 8005058:	0049      	lsls	r1, r1, #1
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	e018      	b.n	800509c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	613b      	str	r3, [r7, #16]
  return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005072:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2120      	movs	r1, #32
 800508c:	430a      	orrs	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005092:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b010      	add	sp, #64	@ 0x40
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	000001ff 	.word	0x000001ff
 80050ac:	080053bd 	.word	0x080053bd
 80050b0:	080051f9 	.word	0x080051f9

080050b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	@ 0x38
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050bc:	f3ef 8310 	mrs	r3, PRIMASK
 80050c0:	617b      	str	r3, [r7, #20]
  return(result);
 80050c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c6:	2301      	movs	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f383 8810 	msr	PRIMASK, r3
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4926      	ldr	r1, [pc, #152]	@ (8005178 <UART_EndRxTransfer+0xc4>)
 80050de:	400a      	ands	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ee:	f3ef 8310 	mrs	r3, PRIMASK
 80050f2:	623b      	str	r3, [r7, #32]
  return(result);
 80050f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f8:	2301      	movs	r3, #1
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	f383 8810 	msr	PRIMASK, r3
}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2101      	movs	r1, #1
 8005110:	438a      	bics	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005124:	2b01      	cmp	r3, #1
 8005126:	d118      	bne.n	800515a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005128:	f3ef 8310 	mrs	r3, PRIMASK
 800512c:	60bb      	str	r3, [r7, #8]
  return(result);
 800512e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005132:	2301      	movs	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f383 8810 	msr	PRIMASK, r3
}
 800513c:	46c0      	nop			@ (mov r8, r8)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2110      	movs	r1, #16
 800514a:	438a      	bics	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2280      	movs	r2, #128	@ 0x80
 800515e:	2120      	movs	r1, #32
 8005160:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b00e      	add	sp, #56	@ 0x38
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			@ (mov r8, r8)
 8005178:	fffffedf 	.word	0xfffffedf

0800517c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	225a      	movs	r2, #90	@ 0x5a
 800518e:	2100      	movs	r1, #0
 8005190:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0018      	movs	r0, r3
 8005196:	f7ff fa45 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b004      	add	sp, #16
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051aa:	f3ef 8310 	mrs	r3, PRIMASK
 80051ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80051b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	2301      	movs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f383 8810 	msr	PRIMASK, r3
}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2140      	movs	r1, #64	@ 0x40
 80051cc:	438a      	bics	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f383 8810 	msr	PRIMASK, r3
}
 80051da:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff fa12 	bl	8004614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f0:	46c0      	nop			@ (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b006      	add	sp, #24
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b094      	sub	sp, #80	@ 0x50
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005200:	204e      	movs	r0, #78	@ 0x4e
 8005202:	183b      	adds	r3, r7, r0
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	215c      	movs	r1, #92	@ 0x5c
 8005208:	5a52      	ldrh	r2, [r2, r1]
 800520a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2280      	movs	r2, #128	@ 0x80
 8005210:	589b      	ldr	r3, [r3, r2]
 8005212:	2b22      	cmp	r3, #34	@ 0x22
 8005214:	d000      	beq.n	8005218 <UART_RxISR_8BIT+0x20>
 8005216:	e0bf      	b.n	8005398 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800521e:	214c      	movs	r1, #76	@ 0x4c
 8005220:	187b      	adds	r3, r7, r1
 8005222:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005224:	187b      	adds	r3, r7, r1
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	183b      	adds	r3, r7, r0
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b2d9      	uxtb	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	400a      	ands	r2, r1
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	225a      	movs	r2, #90	@ 0x5a
 8005248:	5a9b      	ldrh	r3, [r3, r2]
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b299      	uxth	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	225a      	movs	r2, #90	@ 0x5a
 8005254:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	225a      	movs	r2, #90	@ 0x5a
 800525a:	5a9b      	ldrh	r3, [r3, r2]
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d000      	beq.n	8005264 <UART_RxISR_8BIT+0x6c>
 8005262:	e0a1      	b.n	80053a8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005264:	f3ef 8310 	mrs	r3, PRIMASK
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526e:	2301      	movs	r3, #1
 8005270:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005274:	f383 8810 	msr	PRIMASK, r3
}
 8005278:	46c0      	nop			@ (mov r8, r8)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	494a      	ldr	r1, [pc, #296]	@ (80053b0 <UART_RxISR_8BIT+0x1b8>)
 8005286:	400a      	ands	r2, r1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005296:	f3ef 8310 	mrs	r3, PRIMASK
 800529a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529e:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a0:	2301      	movs	r3, #1
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2101      	movs	r1, #1
 80052b8:	438a      	bics	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2280      	movs	r2, #128	@ 0x80
 80052cc:	2120      	movs	r1, #32
 80052ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a34      	ldr	r2, [pc, #208]	@ (80053b4 <UART_RxISR_8BIT+0x1bc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01f      	beq.n	8005326 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	4013      	ands	r3, r2
 80052f2:	d018      	beq.n	8005326 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f4:	f3ef 8310 	mrs	r3, PRIMASK
 80052f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80052fa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			@ (mov r8, r8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4928      	ldr	r1, [pc, #160]	@ (80053b8 <UART_RxISR_8BIT+0x1c0>)
 8005316:	400a      	ands	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532a:	2b01      	cmp	r3, #1
 800532c:	d12f      	bne.n	800538e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005334:	f3ef 8310 	mrs	r3, PRIMASK
 8005338:	60fb      	str	r3, [r7, #12]
  return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800533e:	2301      	movs	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f383 8810 	msr	PRIMASK, r3
}
 8005348:	46c0      	nop			@ (mov r8, r8)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2110      	movs	r1, #16
 8005356:	438a      	bics	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800535c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f383 8810 	msr	PRIMASK, r3
}
 8005364:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	2210      	movs	r2, #16
 800536e:	4013      	ands	r3, r2
 8005370:	2b10      	cmp	r3, #16
 8005372:	d103      	bne.n	800537c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2210      	movs	r2, #16
 800537a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2258      	movs	r2, #88	@ 0x58
 8005380:	5a9a      	ldrh	r2, [r3, r2]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0011      	movs	r1, r2
 8005386:	0018      	movs	r0, r3
 8005388:	f7ff f954 	bl	8004634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800538c:	e00c      	b.n	80053a8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	0018      	movs	r0, r3
 8005392:	f7fb fa01 	bl	8000798 <HAL_UART_RxCpltCallback>
}
 8005396:	e007      	b.n	80053a8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2108      	movs	r1, #8
 80053a4:	430a      	orrs	r2, r1
 80053a6:	619a      	str	r2, [r3, #24]
}
 80053a8:	46c0      	nop			@ (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b014      	add	sp, #80	@ 0x50
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	fffffedf 	.word	0xfffffedf
 80053b4:	40004800 	.word	0x40004800
 80053b8:	fbffffff 	.word	0xfbffffff

080053bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b094      	sub	sp, #80	@ 0x50
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053c4:	204e      	movs	r0, #78	@ 0x4e
 80053c6:	183b      	adds	r3, r7, r0
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	215c      	movs	r1, #92	@ 0x5c
 80053cc:	5a52      	ldrh	r2, [r2, r1]
 80053ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2280      	movs	r2, #128	@ 0x80
 80053d4:	589b      	ldr	r3, [r3, r2]
 80053d6:	2b22      	cmp	r3, #34	@ 0x22
 80053d8:	d000      	beq.n	80053dc <UART_RxISR_16BIT+0x20>
 80053da:	e0bf      	b.n	800555c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053e2:	214c      	movs	r1, #76	@ 0x4c
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	183a      	adds	r2, r7, r0
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	8812      	ldrh	r2, [r2, #0]
 80053f6:	4013      	ands	r3, r2
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	225a      	movs	r2, #90	@ 0x5a
 800540c:	5a9b      	ldrh	r3, [r3, r2]
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b299      	uxth	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	225a      	movs	r2, #90	@ 0x5a
 8005418:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	225a      	movs	r2, #90	@ 0x5a
 800541e:	5a9b      	ldrh	r3, [r3, r2]
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d000      	beq.n	8005428 <UART_RxISR_16BIT+0x6c>
 8005426:	e0a1      	b.n	800556c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	623b      	str	r3, [r7, #32]
  return(result);
 800542e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005430:	647b      	str	r3, [r7, #68]	@ 0x44
 8005432:	2301      	movs	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	494a      	ldr	r1, [pc, #296]	@ (8005574 <UART_RxISR_16BIT+0x1b8>)
 800544a:	400a      	ands	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	643b      	str	r3, [r7, #64]	@ 0x40
 8005464:	2301      	movs	r3, #1
 8005466:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	438a      	bics	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005482:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	@ 0x80
 8005490:	2120      	movs	r1, #32
 8005492:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a34      	ldr	r2, [pc, #208]	@ (8005578 <UART_RxISR_16BIT+0x1bc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	4013      	ands	r3, r2
 80054b6:	d018      	beq.n	80054ea <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b8:	f3ef 8310 	mrs	r3, PRIMASK
 80054bc:	617b      	str	r3, [r7, #20]
  return(result);
 80054be:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f383 8810 	msr	PRIMASK, r3
}
 80054cc:	46c0      	nop			@ (mov r8, r8)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4928      	ldr	r1, [pc, #160]	@ (800557c <UART_RxISR_16BIT+0x1c0>)
 80054da:	400a      	ands	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d12f      	bne.n	8005552 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f8:	f3ef 8310 	mrs	r3, PRIMASK
 80054fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054fe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005502:	2301      	movs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f383 8810 	msr	PRIMASK, r3
}
 800550c:	46c0      	nop			@ (mov r8, r8)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2110      	movs	r1, #16
 800551a:	438a      	bics	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	2210      	movs	r2, #16
 8005532:	4013      	ands	r3, r2
 8005534:	2b10      	cmp	r3, #16
 8005536:	d103      	bne.n	8005540 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2210      	movs	r2, #16
 800553e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2258      	movs	r2, #88	@ 0x58
 8005544:	5a9a      	ldrh	r2, [r3, r2]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0011      	movs	r1, r2
 800554a:	0018      	movs	r0, r3
 800554c:	f7ff f872 	bl	8004634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005550:	e00c      	b.n	800556c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0018      	movs	r0, r3
 8005556:	f7fb f91f 	bl	8000798 <HAL_UART_RxCpltCallback>
}
 800555a:	e007      	b.n	800556c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2108      	movs	r1, #8
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
}
 800556c:	46c0      	nop			@ (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	b014      	add	sp, #80	@ 0x50
 8005572:	bd80      	pop	{r7, pc}
 8005574:	fffffedf 	.word	0xfffffedf
 8005578:	40004800 	.word	0x40004800
 800557c:	fbffffff 	.word	0xfbffffff

08005580 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b002      	add	sp, #8
 800558e:	bd80      	pop	{r7, pc}

08005590 <memset>:
 8005590:	0003      	movs	r3, r0
 8005592:	1882      	adds	r2, r0, r2
 8005594:	4293      	cmp	r3, r2
 8005596:	d100      	bne.n	800559a <memset+0xa>
 8005598:	4770      	bx	lr
 800559a:	7019      	strb	r1, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	e7f9      	b.n	8005594 <memset+0x4>

080055a0 <__libc_init_array>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	2600      	movs	r6, #0
 80055a4:	4c0c      	ldr	r4, [pc, #48]	@ (80055d8 <__libc_init_array+0x38>)
 80055a6:	4d0d      	ldr	r5, [pc, #52]	@ (80055dc <__libc_init_array+0x3c>)
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	42a6      	cmp	r6, r4
 80055ae:	d109      	bne.n	80055c4 <__libc_init_array+0x24>
 80055b0:	2600      	movs	r6, #0
 80055b2:	f000 f819 	bl	80055e8 <_init>
 80055b6:	4c0a      	ldr	r4, [pc, #40]	@ (80055e0 <__libc_init_array+0x40>)
 80055b8:	4d0a      	ldr	r5, [pc, #40]	@ (80055e4 <__libc_init_array+0x44>)
 80055ba:	1b64      	subs	r4, r4, r5
 80055bc:	10a4      	asrs	r4, r4, #2
 80055be:	42a6      	cmp	r6, r4
 80055c0:	d105      	bne.n	80055ce <__libc_init_array+0x2e>
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	00b3      	lsls	r3, r6, #2
 80055c6:	58eb      	ldr	r3, [r5, r3]
 80055c8:	4798      	blx	r3
 80055ca:	3601      	adds	r6, #1
 80055cc:	e7ee      	b.n	80055ac <__libc_init_array+0xc>
 80055ce:	00b3      	lsls	r3, r6, #2
 80055d0:	58eb      	ldr	r3, [r5, r3]
 80055d2:	4798      	blx	r3
 80055d4:	3601      	adds	r6, #1
 80055d6:	e7f2      	b.n	80055be <__libc_init_array+0x1e>
 80055d8:	08005674 	.word	0x08005674
 80055dc:	08005674 	.word	0x08005674
 80055e0:	08005678 	.word	0x08005678
 80055e4:	08005674 	.word	0x08005674

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
