
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800601c  0800601c  0000701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006088  08006088  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006088  08006088  00007088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006090  08006090  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006090  08006090  00007090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006094  08006094  00007094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006098  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000010  080060a8  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080060a8  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116cf  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7d  00000000  00000000  00019707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0001c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  0001d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163ac  00000000  00000000  0001df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e87  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a205  00000000  00000000  00048143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  000d238c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d5540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006004 	.word	0x08006004

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006004 	.word	0x08006004

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f005 fda5 	bl	8005faa <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000462:	4a38      	ldr	r2, [pc, #224]	@ (8000544 <MX_ADC_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b36      	ldr	r3, [pc, #216]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MX_ADC_Init+0xf4>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC_Init+0xf4>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fad0 	bl	8001a78 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 fb4c 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fd2f 	bl	8001f58 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fb3b 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <MX_ADC_Init+0xfc>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_ADC_Init+0xf4>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fd22 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fb2e 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800051c:	003b      	movs	r3, r7
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_ADC_Init+0x100>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fd15 	bl	8001f58 <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 fb21 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40012400 	.word	0x40012400
 8000548:	04000002 	.word	0x04000002
 800054c:	3c008000 	.word	0x3c008000

08000550 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f005 fd21 	bl	8005faa <memset>
  if(adcHandle->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <HAL_ADC_MspInit+0xa8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13d      	bne.n	80005ee <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 80005a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 f9aa 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0xb0>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f002 f99b 	bl	8002924 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	@ 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40012400 	.word	0x40012400
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000800 	.word	0x50000800

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_DMA_Init+0x48>)
 800060c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_DMA_Init+0x48>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	631a      	str	r2, [r3, #48]	@ 0x30
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <MX_DMA_Init+0x48>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	200a      	movs	r0, #10
 8000628:	f001 ff08 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800062c:	200a      	movs	r0, #10
 800062e:	f001 ff1a 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	200b      	movs	r0, #11
 8000638:	f001 ff00 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800063c:	200b      	movs	r0, #11
 800063e:	f001 ff12 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b08b      	sub	sp, #44	@ 0x2c
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	2414      	movs	r4, #20
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2314      	movs	r3, #20
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f005 fca2 	bl	8005faa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b67      	ldr	r3, [pc, #412]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 8000668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800066a:	4b66      	ldr	r3, [pc, #408]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 800066c:	2104      	movs	r1, #4
 800066e:	430a      	orrs	r2, r1
 8000670:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000672:	4b64      	ldr	r3, [pc, #400]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 8000674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000676:	2204      	movs	r2, #4
 8000678:	4013      	ands	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b61      	ldr	r3, [pc, #388]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 8000680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000682:	4b60      	ldr	r3, [pc, #384]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 8000684:	2180      	movs	r1, #128	@ 0x80
 8000686:	430a      	orrs	r2, r1
 8000688:	62da      	str	r2, [r3, #44]	@ 0x2c
 800068a:	4b5e      	ldr	r3, [pc, #376]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 800068c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b5b      	ldr	r3, [pc, #364]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 8000698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800069a:	4b5a      	ldr	r3, [pc, #360]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 800069c:	2101      	movs	r1, #1
 800069e:	430a      	orrs	r2, r1
 80006a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006a2:	4b58      	ldr	r3, [pc, #352]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a6:	2201      	movs	r2, #1
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b55      	ldr	r3, [pc, #340]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006b2:	4b54      	ldr	r3, [pc, #336]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006b4:	2102      	movs	r1, #2
 80006b6:	430a      	orrs	r2, r1
 80006b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ba:	4b52      	ldr	r3, [pc, #328]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	2202      	movs	r2, #2
 80006c0:	4013      	ands	r3, r2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006cc:	2108      	movs	r1, #8
 80006ce:	430a      	orrs	r2, r1
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000804 <MX_GPIO_Init+0x1b4>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d6:	2208      	movs	r2, #8
 80006d8:	4013      	ands	r3, r2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin, GPIO_PIN_RESET);
 80006de:	2398      	movs	r3, #152	@ 0x98
 80006e0:	0099      	lsls	r1, r3, #2
 80006e2:	23a0      	movs	r3, #160	@ 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	2200      	movs	r2, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 fab6 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 80006ee:	4b46      	ldr	r3, [pc, #280]	@ (8000808 <MX_GPIO_Init+0x1b8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 fab0 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|OPACITY_Pin, GPIO_PIN_RESET);
 80006fa:	23c0      	movs	r3, #192	@ 0xc0
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4843      	ldr	r0, [pc, #268]	@ (800080c <MX_GPIO_Init+0x1bc>)
 8000700:	2200      	movs	r2, #0
 8000702:	0019      	movs	r1, r3
 8000704:	f002 faa9 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2280      	movs	r2, #128	@ 0x80
 800070c:	0192      	lsls	r2, r2, #6
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2284      	movs	r2, #132	@ 0x84
 8000714:	0392      	lsls	r2, r2, #14
 8000716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071e:	193b      	adds	r3, r7, r4
 8000720:	4a3a      	ldr	r2, [pc, #232]	@ (800080c <MX_GPIO_Init+0x1bc>)
 8000722:	0019      	movs	r1, r3
 8000724:	0010      	movs	r0, r2
 8000726:	f002 f8fd 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_ENC_A_Pin ROOF_ENC_B_Pin */
  GPIO_InitStruct.Pin = ROOF_ENC_A_Pin|ROOF_ENC_B_Pin;
 800072a:	0021      	movs	r1, r4
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2203      	movs	r2, #3
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	22c4      	movs	r2, #196	@ 0xc4
 8000736:	0392      	lsls	r2, r2, #14
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	000c      	movs	r4, r1
 8000742:	187b      	adds	r3, r7, r1
 8000744:	4a31      	ldr	r2, [pc, #196]	@ (800080c <MX_GPIO_Init+0x1bc>)
 8000746:	0019      	movs	r1, r3
 8000748:	0010      	movs	r0, r2
 800074a:	f002 f8eb 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_DIR_Pin ROOF_DIR_Pin TILTING_BRAKE_Pin */
  GPIO_InitStruct.Pin = TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin;
 800074e:	0021      	movs	r1, r4
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2298      	movs	r2, #152	@ 0x98
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	000c      	movs	r4, r1
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	193a      	adds	r2, r7, r4
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f002 f8d5 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2204      	movs	r2, #4
 800077e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2201      	movs	r2, #1
 8000784:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_GPIO_Init+0x1b8>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f002 f8c3 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_ENC_A_Pin TILTING_ENC_B_Pin */
  GPIO_InitStruct.Pin = TILTING_ENC_A_Pin|TILTING_ENC_B_Pin;
 800079e:	0021      	movs	r1, r4
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	22c0      	movs	r2, #192	@ 0xc0
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2288      	movs	r2, #136	@ 0x88
 80007ac:	0352      	lsls	r2, r2, #13
 80007ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	000c      	movs	r4, r1
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <MX_GPIO_Init+0x1b8>)
 80007bc:	0019      	movs	r1, r3
 80007be:	0010      	movs	r0, r2
 80007c0:	f002 f8b0 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin OPACITY_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|OPACITY_Pin;
 80007c4:	0021      	movs	r1, r4
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	22c0      	movs	r2, #192	@ 0xc0
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <MX_GPIO_Init+0x1bc>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f002 f89c 	bl	8002924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2007      	movs	r0, #7
 80007f2:	f001 fe23 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f001 fe35 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b00b      	add	sp, #44	@ 0x2c
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	50000400 	.word	0x50000400
 800080c:	50000800 	.word	0x50000800

08000810 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1 Second Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d102      	bne.n	8000828 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		sensor_read = 1;
 8000822:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
	}
}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40001400 	.word	0x40001400
 8000834:	200000ad 	.word	0x200000ad

08000838 <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART4) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1a      	ldr	r2, [pc, #104]	@ (80008b0 <HAL_UART_RxCpltCallback+0x78>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d12e      	bne.n	80008a8 <HAL_UART_RxCpltCallback+0x70>
    	//rx_ready = 1;
    	rx_payload = 0;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
	    rx_payload |= ((uint16_t)rx_buf[0] << 8);
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	b21a      	sxth	r2, r3
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21b      	sxth	r3, r3
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 8000866:	801a      	strh	r2, [r3, #0]
	    rx_payload |= ((uint16_t)rx_buf[1]);
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	001a      	movs	r2, r3
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	4313      	orrs	r3, r2
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 8000878:	801a      	strh	r2, [r3, #0]

	    roof_state = ((rx_payload >> 8) & 0x03);
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b29b      	uxth	r3, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2203      	movs	r2, #3
 8000886:	4013      	ands	r3, r2
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <HAL_UART_RxCpltCallback+0x84>)
 800088c:	701a      	strb	r2, [r3, #0]
	    film_opacity = ((rx_payload) & 0x01);
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_UART_RxCpltCallback+0x88>)
 800089a:	801a      	strh	r2, [r3, #0]

	    // 다시 수신 시작 (반복 수신)
	    HAL_UART_Receive_DMA(&huart4, rx_buf, sizeof(rx_buf));
 800089c:	4906      	ldr	r1, [pc, #24]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_UART_RxCpltCallback+0x8c>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f004 f8f2 	bl	8004a8c <HAL_UART_Receive_DMA>
    }
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004c00 	.word	0x40004c00
 80008b4:	200000aa 	.word	0x200000aa
 80008b8:	200000a8 	.word	0x200000a8
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000098 	.word	0x20000098
 80008c4:	200001f8 	.word	0x200001f8

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f001 f864 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f8ac 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f7ff febc 	bl	8000650 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d8:	f7ff fe94 	bl	8000604 <MX_DMA_Init>
  MX_ADC_Init();
 80008dc:	f7ff fdb6 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 80008e0:	f000 fd8e 	bl	8001400 <MX_TIM7_Init>
  MX_TIM2_Init();
 80008e4:	f000 fc90 	bl	8001208 <MX_TIM2_Init>
  MX_USART4_UART_Init();
 80008e8:	f000 fe92 	bl	8001610 <MX_USART4_UART_Init>
  MX_USART2_UART_Init();
 80008ec:	f000 fe60 	bl	80015b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80008f0:	f000 fd08 	bl	8001304 <MX_TIM3_Init>
  MX_USART5_UART_Init();
 80008f4:	f000 febc 	bl	8001670 <MX_USART5_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008f8:	f000 f8fc 	bl	8000af4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80008fc:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <main+0x118>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f003 f99a 	bl	8003c38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000904:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <main+0x11c>)
 8000906:	2104      	movs	r1, #4
 8000908:	0018      	movs	r0, r3
 800090a:	f003 fa2f 	bl	8003d6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800090e:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <main+0x120>)
 8000910:	2104      	movs	r1, #4
 8000912:	0018      	movs	r0, r3
 8000914:	f003 fa2a 	bl	8003d6c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart4, rx_buf, sizeof(rx_buf));
 8000918:	4934      	ldr	r1, [pc, #208]	@ (80009ec <main+0x124>)
 800091a:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <main+0x128>)
 800091c:	2202      	movs	r2, #2
 800091e:	0018      	movs	r0, r3
 8000920:	f004 f8b4 	bl	8004a8c <HAL_UART_Receive_DMA>


  // Initialize
  roof_encoder = 0;
 8000924:	4b33      	ldr	r3, [pc, #204]	@ (80009f4 <main+0x12c>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
  tilting_encoder = 0;
 800092a:	4b33      	ldr	r3, [pc, #204]	@ (80009f8 <main+0x130>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
  roof_state = STOP;
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <main+0x134>)
 8000932:	2203      	movs	r2, #3
 8000934:	701a      	strb	r2, [r3, #0]
  Sunroof_Set(STOP);
 8000936:	2003      	movs	r0, #3
 8000938:	f000 f9e8 	bl	8000d0c <Sunroof_Set>
  rx_ready = 0;
 800093c:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <main+0x138>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 센서 값 수신 및 UART 송신
	  if(sensor_read)
 8000942:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <main+0x13c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d02b      	beq.n	80009a2 <main+0xda>
	  {
		  read_illum();
 800094a:	f000 fb9b 	bl	8001084 <read_illum>
		  read_rain();
 800094e:	f000 fbb3 	bl	80010b8 <read_rain>

		  sensor_read = 0;
 8000952:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <main+0x13c>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]

		  //UART Send
		  tx_payload = 0;
 8000958:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <main+0x140>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)in_illum & 0x0FFF) << 20;  // In Illum : 12 -> 32 - 12 = 20
 800095e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <main+0x144>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	051a      	lsls	r2, r3, #20
 8000966:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <main+0x140>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <main+0x140>)
 800096e:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)out_illum & 0x0FFF) << 8;   // Out Illum : 12 -> 20 - 12 = 8
 8000970:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <main+0x148>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	4a26      	ldr	r2, [pc, #152]	@ (8000a14 <main+0x14c>)
 800097a:	401a      	ands	r2, r3
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <main+0x140>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	431a      	orrs	r2, r3
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <main+0x140>)
 8000984:	601a      	str	r2, [r3, #0]
		  tx_payload |= (rain_state & 0x01) << 7;               // rain_flag : 1 0 -> 8 - 1 = 7
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <main+0x150>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	01db      	lsls	r3, r3, #7
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	4013      	ands	r3, r2
 8000992:	001a      	movs	r2, r3
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <main+0x140>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	431a      	orrs	r2, r3
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <main+0x140>)
 800099c:	601a      	str	r2, [r3, #0]

		  Send_Sensor_Data();
 800099e:	f000 f8bf 	bl	8000b20 <Send_Sensor_Data>
	  }

	  dbg = huart4.ErrorCode;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <main+0x128>)
 80009a4:	2284      	movs	r2, #132	@ 0x84
 80009a6:	589a      	ldr	r2, [r3, r2]
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <main+0x154>)
 80009aa:	601a      	str	r2, [r3, #0]

		  // 다시 수신 시작 (반복 수신)
		  HAL_UART_Receive_DMA(&huart4, rx_buf, 2);
	  }
		*/
	  Sunroof_Set(roof_state);
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <main+0x134>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f9aa 	bl	8000d0c <Sunroof_Set>

	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, rain_state);
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <main+0x150>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4818      	ldr	r0, [pc, #96]	@ (8000a20 <main+0x158>)
 80009c0:	001a      	movs	r2, r3
 80009c2:	2104      	movs	r1, #4
 80009c4:	f002 f949 	bl	8002c5a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, film_opacity);
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <main+0x15c>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4814      	ldr	r0, [pc, #80]	@ (8000a28 <main+0x160>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	f002 f93f 	bl	8002c5a <HAL_GPIO_WritePin>
	  if(sensor_read)
 80009dc:	e7b1      	b.n	8000942 <main+0x7a>
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	20000130 	.word	0x20000130
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	200000f0 	.word	0x200000f0
 80009ec:	200000a8 	.word	0x200000a8
 80009f0:	200001f8 	.word	0x200001f8
 80009f4:	20000088 	.word	0x20000088
 80009f8:	2000008c 	.word	0x2000008c
 80009fc:	20000000 	.word	0x20000000
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	200000ad 	.word	0x200000ad
 8000a08:	200000a4 	.word	0x200000a4
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	20000092 	.word	0x20000092
 8000a14:	000fff00 	.word	0x000fff00
 8000a18:	20000096 	.word	0x20000096
 8000a1c:	2000009c 	.word	0x2000009c
 8000a20:	50000400 	.word	0x50000400
 8000a24:	20000098 	.word	0x20000098
 8000a28:	50000800 	.word	0x50000800

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b09f      	sub	sp, #124	@ 0x7c
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	2440      	movs	r4, #64	@ 0x40
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	0018      	movs	r0, r3
 8000a38:	2338      	movs	r3, #56	@ 0x38
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f005 fab4 	bl	8005faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a42:	232c      	movs	r3, #44	@ 0x2c
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f005 faac 	bl	8005faa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2328      	movs	r3, #40	@ 0x28
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f005 faa5 	bl	8005faa <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <SystemClock_Config+0xc0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <SystemClock_Config+0xc4>)
 8000a66:	401a      	ands	r2, r3
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <SystemClock_Config+0xc0>)
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0109      	lsls	r1, r1, #4
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	22a0      	movs	r2, #160	@ 0xa0
 8000a7c:	02d2      	lsls	r2, r2, #11
 8000a7e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 f91f 	bl	8002ccc <HAL_RCC_OscConfig>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f871 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	212c      	movs	r1, #44	@ 0x2c
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2100      	movs	r1, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fcda 	bl	8003474 <HAL_RCC_ClockConfig>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ac4:	f000 f858 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2202      	movs	r2, #2
 8000acc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 fed0 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ae0:	f000 f84a 	bl	8000b78 <Error_Handler>
  }
}
 8000ae4:	46c0      	nop			@ (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b01f      	add	sp, #124	@ 0x7c
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	40007000 	.word	0x40007000
 8000af0:	ffffe7ff 	.word	0xffffe7ff

08000af4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2005      	movs	r0, #5
 8000afe:	f001 fc9d 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b02:	2005      	movs	r0, #5
 8000b04:	f001 fcaf 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2012      	movs	r0, #18
 8000b0e:	f001 fc95 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b12:	2012      	movs	r0, #18
 8000b14:	f001 fca7 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <Send_Sensor_Data>:

/* USER CODE BEGIN 4 */
void Send_Sensor_Data(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	tx_buf[0] = (tx_payload >> 24) & 0xFF;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <Send_Sensor_Data+0x4c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	0e1b      	lsrs	r3, r3, #24
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <Send_Sensor_Data+0x50>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (tx_payload >> 16) & 0xFF;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <Send_Sensor_Data+0x4c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <Send_Sensor_Data+0x50>)
 8000b3a:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (tx_payload >> 8) & 0xFF;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Send_Sensor_Data+0x4c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <Send_Sensor_Data+0x50>)
 8000b46:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = tx_payload & 0xFF;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <Send_Sensor_Data+0x4c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <Send_Sensor_Data+0x50>)
 8000b50:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit(&huart4, tx_buf, 4, 100);
 8000b52:	4907      	ldr	r1, [pc, #28]	@ (8000b70 <Send_Sensor_Data+0x50>)
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <Send_Sensor_Data+0x54>)
 8000b56:	2364      	movs	r3, #100	@ 0x64
 8000b58:	2204      	movs	r2, #4
 8000b5a:	f003 fef7 	bl	800494c <HAL_UART_Transmit>
	tx_payload = 0;
 8000b5e:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Send_Sensor_Data+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	200000a4 	.word	0x200000a4
 8000b70:	200000a0 	.word	0x200000a0
 8000b74:	200001f8 	.word	0x200001f8

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <HAL_GPIO_EXTI_Callback>:
#include "roof.h"

#define TWO_MOTOR 1
#define ONE_MOTOR 0

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dbb      	adds	r3, r7, #6
 8000b8e:	801a      	strh	r2, [r3, #0]
	uint8_t ROOF_A_state = 0;
 8000b90:	210f      	movs	r1, #15
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
	uint8_t ROOF_B_state = 0;
 8000b98:	260e      	movs	r6, #14
 8000b9a:	19bb      	adds	r3, r7, r6
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_A_state = 0;
 8000ba0:	230d      	movs	r3, #13
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_B_state = 0;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

	//Roof Motor
	if(GPIO_Pin == ROOF_ENC_A_Pin) {
 8000bb0:	1dbb      	adds	r3, r7, #6
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d120      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x76>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000bb8:	000d      	movs	r5, r1
 8000bba:	187c      	adds	r4, r7, r1
 8000bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x178>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 f82d 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000bca:	19bc      	adds	r4, r7, r6
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x178>)
 8000bce:	2102      	movs	r1, #2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 f825 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? 1 : -1);
 8000bda:	197a      	adds	r2, r7, r5
 8000bdc:	19bb      	adds	r3, r7, r6
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d101      	bne.n	8000bea <HAL_GPIO_EXTI_Callback+0x66>
 8000be6:	2201      	movs	r2, #1
 8000be8:	e001      	b.n	8000bee <HAL_GPIO_EXTI_Callback+0x6a>
 8000bea:	2301      	movs	r3, #1
 8000bec:	425a      	negs	r2, r3
 8000bee:	4b44      	ldr	r3, [pc, #272]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	18d2      	adds	r2, r2, r3
 8000bf4:	4b42      	ldr	r3, [pc, #264]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000bf6:	601a      	str	r2, [r3, #0]
	else if(GPIO_Pin == TILTING_ENC_B_Pin) {
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
	}
}
 8000bf8:	e07c      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == ROOF_ENC_B_Pin) {
 8000bfa:	1dbb      	adds	r3, r7, #6
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d121      	bne.n	8000c46 <HAL_GPIO_EXTI_Callback+0xc2>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000c02:	250f      	movs	r5, #15
 8000c04:	197c      	adds	r4, r7, r5
 8000c06:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x178>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 f808 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000c10:	0003      	movs	r3, r0
 8000c12:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000c14:	260e      	movs	r6, #14
 8000c16:	19bc      	adds	r4, r7, r6
 8000c18:	4b38      	ldr	r3, [pc, #224]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x178>)
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 ffff 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000c22:	0003      	movs	r3, r0
 8000c24:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? -1 : 1);
 8000c26:	197a      	adds	r2, r7, r5
 8000c28:	19bb      	adds	r3, r7, r6
 8000c2a:	7812      	ldrb	r2, [r2, #0]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d102      	bne.n	8000c38 <HAL_GPIO_EXTI_Callback+0xb4>
 8000c32:	2301      	movs	r3, #1
 8000c34:	425a      	negs	r2, r3
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_EXTI_Callback+0xb6>
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4b31      	ldr	r3, [pc, #196]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b2f      	ldr	r3, [pc, #188]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	e056      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == TILTING_ENC_A_Pin) {
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	881a      	ldrh	r2, [r3, #0]
 8000c4a:	2380      	movs	r3, #128	@ 0x80
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d125      	bne.n	8000c9e <HAL_GPIO_EXTI_Callback+0x11a>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000c52:	250d      	movs	r5, #13
 8000c54:	197c      	adds	r4, r7, r5
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x180>)
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0010      	movs	r0, r2
 8000c60:	f001 ffde 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000c64:	0003      	movs	r3, r0
 8000c66:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000c68:	260c      	movs	r6, #12
 8000c6a:	19bc      	adds	r4, r7, r6
 8000c6c:	2380      	movs	r3, #128	@ 0x80
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4a24      	ldr	r2, [pc, #144]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x180>)
 8000c72:	0019      	movs	r1, r3
 8000c74:	0010      	movs	r0, r2
 8000c76:	f001 ffd3 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? 1 : -1);
 8000c7e:	197a      	adds	r2, r7, r5
 8000c80:	19bb      	adds	r3, r7, r6
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d101      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x10a>
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	e001      	b.n	8000c92 <HAL_GPIO_EXTI_Callback+0x10e>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	425a      	negs	r2, r3
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	18d2      	adds	r2, r2, r3
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	e02a      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == TILTING_ENC_B_Pin) {
 8000c9e:	1dbb      	adds	r3, r7, #6
 8000ca0:	881a      	ldrh	r2, [r3, #0]
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d124      	bne.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x170>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000caa:	250d      	movs	r5, #13
 8000cac:	197c      	adds	r4, r7, r5
 8000cae:	2380      	movs	r3, #128	@ 0x80
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x180>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f001 ffb2 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000cc0:	260c      	movs	r6, #12
 8000cc2:	19bc      	adds	r4, r7, r6
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x180>)
 8000cca:	0019      	movs	r1, r3
 8000ccc:	0010      	movs	r0, r2
 8000cce:	f001 ffa7 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
 8000cd6:	197a      	adds	r2, r7, r5
 8000cd8:	19bb      	adds	r3, r7, r6
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d102      	bne.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x164>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	425a      	negs	r2, r3
 8000ce6:	e000      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x166>
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x184>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	18d2      	adds	r2, r2, r3
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x184>)
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b005      	add	sp, #20
 8000cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfc:	50000800 	.word	0x50000800
 8000d00:	20000088 	.word	0x20000088
 8000d04:	50000400 	.word	0x50000400
 8000d08:	2000008c 	.word	0x2000008c

08000d0c <Sunroof_Set>:

#if TWO_MOTOR
void Sunroof_Set(uint8_t mode) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d007      	beq.n	8000d30 <Sunroof_Set+0x24>
 8000d20:	dd00      	ble.n	8000d24 <Sunroof_Set+0x18>
 8000d22:	e118      	b.n	8000f56 <Sunroof_Set+0x24a>
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d100      	bne.n	8000d2a <Sunroof_Set+0x1e>
 8000d28:	e0ba      	b.n	8000ea0 <Sunroof_Set+0x194>
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d05c      	beq.n	8000de8 <Sunroof_Set+0xdc>
 8000d2e:	e112      	b.n	8000f56 <Sunroof_Set+0x24a>
	case OPEN:
		if(tilting_encoder >= 0){
 8000d30:	4b96      	ldr	r3, [pc, #600]	@ (8000f8c <Sunroof_Set+0x280>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db1d      	blt.n	8000d74 <Sunroof_Set+0x68>
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000d38:	4b95      	ldr	r3, [pc, #596]	@ (8000f90 <Sunroof_Set+0x284>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000d40:	4b94      	ldr	r3, [pc, #592]	@ (8000f94 <Sunroof_Set+0x288>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 ff87 	bl	8002c5a <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000d4c:	4b92      	ldr	r3, [pc, #584]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2246      	movs	r2, #70	@ 0x46
 8000d52:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	0099      	lsls	r1, r3, #2
 8000d58:	23a0      	movs	r3, #160	@ 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 ff7b 	bl	8002c5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 8000d64:	23a0      	movs	r3, #160	@ 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 ff74 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000d72:	e107      	b.n	8000f84 <Sunroof_Set+0x278>
		else if(roof_encoder <= ROOF_OPEN_MAX) {
 8000d74:	4b89      	ldr	r3, [pc, #548]	@ (8000f9c <Sunroof_Set+0x290>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a89      	ldr	r2, [pc, #548]	@ (8000fa0 <Sunroof_Set+0x294>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	dc1d      	bgt.n	8000dba <Sunroof_Set+0xae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000d7e:	4b86      	ldr	r3, [pc, #536]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000d86:	2380      	movs	r3, #128	@ 0x80
 8000d88:	0099      	lsls	r1, r3, #2
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	2201      	movs	r2, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 ff62 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000d96:	4b7e      	ldr	r3, [pc, #504]	@ (8000f90 <Sunroof_Set+0x284>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2246      	movs	r2, #70	@ 0x46
 8000d9c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f94 <Sunroof_Set+0x288>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	2180      	movs	r1, #128	@ 0x80
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 ff58 	bl	8002c5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000daa:	23a0      	movs	r3, #160	@ 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	2201      	movs	r2, #1
 8000db0:	2140      	movs	r1, #64	@ 0x40
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 ff51 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000db8:	e0e4      	b.n	8000f84 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000dba:	4b77      	ldr	r3, [pc, #476]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	0099      	lsls	r1, r3, #2
 8000dc6:	23a0      	movs	r3, #160	@ 0xa0
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	2201      	movs	r2, #1
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 ff44 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8000f90 <Sunroof_Set+0x284>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000dda:	4b6e      	ldr	r3, [pc, #440]	@ (8000f94 <Sunroof_Set+0x288>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	0018      	movs	r0, r3
 8000de2:	f001 ff3a 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000de6:	e0cd      	b.n	8000f84 <Sunroof_Set+0x278>
	case TILTING:
		if(roof_encoder >= 0) {
 8000de8:	4b6c      	ldr	r3, [pc, #432]	@ (8000f9c <Sunroof_Set+0x290>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db1d      	blt.n	8000e2c <Sunroof_Set+0x120>
			// STOP Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000df0:	4b69      	ldr	r3, [pc, #420]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	0099      	lsls	r1, r3, #2
 8000dfc:	23a0      	movs	r3, #160	@ 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2201      	movs	r2, #1
 8000e02:	0018      	movs	r0, r3
 8000e04:	f001 ff29 	bl	8002c5a <HAL_GPIO_WritePin>
			// ACW Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000e08:	4b61      	ldr	r3, [pc, #388]	@ (8000f90 <Sunroof_Set+0x284>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2246      	movs	r2, #70	@ 0x46
 8000e0e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000e10:	4b60      	ldr	r3, [pc, #384]	@ (8000f94 <Sunroof_Set+0x288>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 ff1f 	bl	8002c5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000e1c:	23a0      	movs	r3, #160	@ 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	2200      	movs	r2, #0
 8000e22:	2140      	movs	r1, #64	@ 0x40
 8000e24:	0018      	movs	r0, r3
 8000e26:	f001 ff18 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000e2a:	e0ab      	b.n	8000f84 <Sunroof_Set+0x278>
		else if(tilting_encoder <= ROOF_TILTING_MAX) {
 8000e2c:	4b57      	ldr	r3, [pc, #348]	@ (8000f8c <Sunroof_Set+0x280>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa4 <Sunroof_Set+0x298>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	dc1d      	bgt.n	8000e72 <Sunroof_Set+0x166>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000e36:	4b56      	ldr	r3, [pc, #344]	@ (8000f90 <Sunroof_Set+0x284>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000e3e:	4b55      	ldr	r3, [pc, #340]	@ (8000f94 <Sunroof_Set+0x288>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	2180      	movs	r1, #128	@ 0x80
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 ff08 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000e4a:	4b53      	ldr	r3, [pc, #332]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2246      	movs	r2, #70	@ 0x46
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	0099      	lsls	r1, r3, #2
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 fefc 	bl	8002c5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, CW);
 8000e62:	23a0      	movs	r3, #160	@ 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2201      	movs	r2, #1
 8000e68:	2120      	movs	r1, #32
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fef5 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000e70:	e088      	b.n	8000f84 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000e72:	4b49      	ldr	r3, [pc, #292]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000e7a:	2380      	movs	r3, #128	@ 0x80
 8000e7c:	0099      	lsls	r1, r3, #2
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	2201      	movs	r2, #1
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fee8 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000e8a:	4b41      	ldr	r3, [pc, #260]	@ (8000f90 <Sunroof_Set+0x284>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <Sunroof_Set+0x288>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 fede 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000e9e:	e071      	b.n	8000f84 <Sunroof_Set+0x278>
	case CLOSE:
		if(tilting_encoder >= 0)
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8000f8c <Sunroof_Set+0x280>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db1d      	blt.n	8000ee4 <Sunroof_Set+0x1d8>
		{
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ea8:	4b39      	ldr	r3, [pc, #228]	@ (8000f90 <Sunroof_Set+0x284>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000eb0:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <Sunroof_Set+0x288>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fecf 	bl	8002c5a <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000ebc:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2246      	movs	r2, #70	@ 0x46
 8000ec2:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	23a0      	movs	r3, #160	@ 0xa0
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fec3 	bl	8002c5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 8000ed4:	23a0      	movs	r3, #160	@ 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2120      	movs	r1, #32
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 febc 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000ee2:	e04f      	b.n	8000f84 <Sunroof_Set+0x278>
		else if(roof_encoder >= 0) {
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <Sunroof_Set+0x290>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db1d      	blt.n	8000f28 <Sunroof_Set+0x21c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	0099      	lsls	r1, r3, #2
 8000ef8:	23a0      	movs	r3, #160	@ 0xa0
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2201      	movs	r2, #1
 8000efe:	0018      	movs	r0, r3
 8000f00:	f001 feab 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000f04:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <Sunroof_Set+0x284>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2246      	movs	r2, #70	@ 0x46
 8000f0a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <Sunroof_Set+0x288>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fea1 	bl	8002c5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000f18:	23a0      	movs	r3, #160	@ 0xa0
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2140      	movs	r1, #64	@ 0x40
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 fe9a 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000f26:	e02d      	b.n	8000f84 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000f30:	2380      	movs	r3, #128	@ 0x80
 8000f32:	0099      	lsls	r1, r3, #2
 8000f34:	23a0      	movs	r3, #160	@ 0xa0
 8000f36:	05db      	lsls	r3, r3, #23
 8000f38:	2201      	movs	r2, #1
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f001 fe8d 	bl	8002c5a <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <Sunroof_Set+0x284>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <Sunroof_Set+0x288>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fe83 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000f54:	e016      	b.n	8000f84 <Sunroof_Set+0x278>
	case STOP:
	default:
		// STOP Both Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <Sunroof_Set+0x28c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	0099      	lsls	r1, r3, #2
 8000f62:	23a0      	movs	r3, #160	@ 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	2201      	movs	r2, #1
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f001 fe76 	bl	8002c5a <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <Sunroof_Set+0x284>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <Sunroof_Set+0x288>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 fe6c 	bl	8002c5a <HAL_GPIO_WritePin>
		break;
 8000f82:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000008c 	.word	0x2000008c
 8000f90:	200000b0 	.word	0x200000b0
 8000f94:	50000800 	.word	0x50000800
 8000f98:	200000f0 	.word	0x200000f0
 8000f9c:	20000088 	.word	0x20000088
 8000fa0:	00001770 	.word	0x00001770
 8000fa4:	00000bb8 	.word	0x00000bb8

08000fa8 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000fb0:	2316      	movs	r3, #22
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <HW_AdcReadChannel+0xc4>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d1f9      	bne.n	8000fba <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <HW_AdcReadChannel+0xc8>)
 8000fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fca:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <HW_AdcReadChannel+0xc8>)
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	0089      	lsls	r1, r1, #2
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 f8e5 	bl	80021a8 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000fde:	240c      	movs	r4, #12
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <HW_AdcReadChannel+0xd0>)
 8000fe4:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	4a24      	ldr	r2, [pc, #144]	@ (800107c <HW_AdcReadChannel+0xd4>)
 8000fea:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000fec:	193a      	adds	r2, r7, r4
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 ffb0 	bl	8001f58 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8000ff8:	0021      	movs	r1, r4
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2280      	movs	r2, #128	@ 0x80
 8001004:	0152      	lsls	r2, r2, #5
 8001006:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8001008:	187a      	adds	r2, r7, r1
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f000 ffa2 	bl	8001f58 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fea2 	bl	8001d60 <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 800101c:	2301      	movs	r3, #1
 800101e:	425a      	negs	r2, r3
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f000 feef 	bl	8001e08 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 800102c:	0018      	movs	r0, r3
 800102e:	f000 ff87 	bl	8001f40 <HAL_ADC_GetValue>
 8001032:	0002      	movs	r2, r0
 8001034:	2016      	movs	r0, #22
 8001036:	183b      	adds	r3, r7, r0
 8001038:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2102      	movs	r1, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HW_AdcReadChannel+0xcc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2203      	movs	r2, #3
 8001050:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <HW_AdcReadChannel+0xc8>)
 8001054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HW_AdcReadChannel+0xc8>)
 8001058:	4909      	ldr	r1, [pc, #36]	@ (8001080 <HW_AdcReadChannel+0xd8>)
 800105a:	400a      	ands	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 800105e:	183b      	adds	r3, r7, r0
 8001060:	881b      	ldrh	r3, [r3, #0]
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b007      	add	sp, #28
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	40007000 	.word	0x40007000
 8001070:	40021000 	.word	0x40021000
 8001074:	2000002c 	.word	0x2000002c
 8001078:	0007ffff 	.word	0x0007ffff
 800107c:	00001001 	.word	0x00001001
 8001080:	fffffdff 	.word	0xfffffdff

08001084 <read_illum>:

void read_illum(void){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <read_illum+0x28>)
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff ff8c 	bl	8000fa8 <HW_AdcReadChannel>
 8001090:	0003      	movs	r3, r0
 8001092:	001a      	movs	r2, r3
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <read_illum+0x2c>)
 8001096:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff ff85 	bl	8000fa8 <HW_AdcReadChannel>
 800109e:	0003      	movs	r3, r0
 80010a0:	001a      	movs	r2, r3
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <read_illum+0x30>)
 80010a4:	801a      	strh	r2, [r3, #0]
}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	04000002 	.word	0x04000002
 80010b0:	20000090 	.word	0x20000090
 80010b4:	20000092 	.word	0x20000092

080010b8 <read_rain>:

void read_rain(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <read_rain+0x34>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff ff72 	bl	8000fa8 <HW_AdcReadChannel>
 80010c4:	0003      	movs	r3, r0
 80010c6:	001a      	movs	r2, r3
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <read_rain+0x38>)
 80010ca:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <read_rain+0x38>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	22c8      	movs	r2, #200	@ 0xc8
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	429a      	cmp	r2, r3
 80010d8:	419b      	sbcs	r3, r3
 80010da:	425b      	negs	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	001a      	movs	r2, r3
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <read_rain+0x3c>)
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	3c008000 	.word	0x3c008000
 80010f0:	20000094 	.word	0x20000094
 80010f4:	20000096 	.word	0x20000096

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <HAL_MspInit+0x24>)
 80010fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_MspInit+0x24>)
 8001102:	2101      	movs	r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HAL_MspInit+0x24>)
 800110a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_MspInit+0x24>)
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	0549      	lsls	r1, r1, #21
 8001112:	430a      	orrs	r2, r1
 8001114:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 fc7a 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_A_Pin);
 8001156:	2001      	movs	r0, #1
 8001158:	f001 fd9c 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_B_Pin);
 800115c:	2002      	movs	r0, #2
 800115e:	f001 fd99 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TILTING_ENC_A_Pin);
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	0018      	movs	r0, r3
 8001172:	f001 fd8f 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TILTING_ENC_B_Pin);
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	0018      	movs	r0, r3
 800117c:	f001 fd8a 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	019b      	lsls	r3, r3, #6
 8001184:	0018      	movs	r0, r3
 8001186:	f001 fd85 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fae7 	bl	800276a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	20000308 	.word	0x20000308

080011a8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f001 fadb 	bl	800276a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000350 	.word	0x20000350

080011c0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <USART4_5_IRQHandler+0x1c>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f003 fcbe 	bl	8004b48 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <USART4_5_IRQHandler+0x20>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f003 fcba 	bl	8004b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	200001f8 	.word	0x200001f8
 80011e0:	20000280 	.word	0x20000280

080011e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <TIM7_IRQHandler+0x14>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f002 fe50 	bl	8003e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	20000130 	.word	0x20000130

080011fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	2318      	movs	r3, #24
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	0018      	movs	r0, r3
 8001214:	2310      	movs	r3, #16
 8001216:	001a      	movs	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f004 fec6 	bl	8005faa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121e:	2310      	movs	r3, #16
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	0018      	movs	r0, r3
 8001224:	2308      	movs	r3, #8
 8001226:	001a      	movs	r2, r3
 8001228:	2100      	movs	r1, #0
 800122a:	f004 febe 	bl	8005faa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	003b      	movs	r3, r7
 8001230:	0018      	movs	r0, r3
 8001232:	2310      	movs	r3, #16
 8001234:	001a      	movs	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	f004 feb7 	bl	8005faa <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <MX_TIM2_Init+0xf8>)
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	05d2      	lsls	r2, r2, #23
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001244:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <MX_TIM2_Init+0xf8>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <MX_TIM2_Init+0xf8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <MX_TIM2_Init+0xf8>)
 8001252:	2263      	movs	r2, #99	@ 0x63
 8001254:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <MX_TIM2_Init+0xf8>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <MX_TIM2_Init+0xf8>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001262:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <MX_TIM2_Init+0xf8>)
 8001264:	0018      	movs	r0, r3
 8001266:	f002 fca7 	bl	8003bb8 <HAL_TIM_Base_Init>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800126e:	f7ff fc83 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	2118      	movs	r1, #24
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2280      	movs	r2, #128	@ 0x80
 8001278:	0152      	lsls	r2, r2, #5
 800127a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127c:	187a      	adds	r2, r7, r1
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_TIM2_Init+0xf8>)
 8001280:	0011      	movs	r1, r2
 8001282:	0018      	movs	r0, r3
 8001284:	f002 ff96 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800128c:	f7ff fc74 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_TIM2_Init+0xf8>)
 8001292:	0018      	movs	r0, r3
 8001294:	f002 fd22 	bl	8003cdc <HAL_TIM_PWM_Init>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800129c:	f7ff fc6c 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2110      	movs	r1, #16
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	187a      	adds	r2, r7, r1
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_TIM2_Init+0xf8>)
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f003 fa97 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80012be:	f7ff fc5b 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	003b      	movs	r3, r7
 80012c4:	2260      	movs	r2, #96	@ 0x60
 80012c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012c8:	003b      	movs	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	003b      	movs	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d4:	003b      	movs	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012da:	0039      	movs	r1, r7
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <MX_TIM2_Init+0xf8>)
 80012de:	2204      	movs	r2, #4
 80012e0:	0018      	movs	r0, r3
 80012e2:	f002 fea1 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80012ea:	f7ff fc45 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <MX_TIM2_Init+0xf8>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 f8f5 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b00a      	add	sp, #40	@ 0x28
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	200000b0 	.word	0x200000b0

08001304 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	2318      	movs	r3, #24
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	0018      	movs	r0, r3
 8001310:	2310      	movs	r3, #16
 8001312:	001a      	movs	r2, r3
 8001314:	2100      	movs	r1, #0
 8001316:	f004 fe48 	bl	8005faa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131a:	2310      	movs	r3, #16
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	0018      	movs	r0, r3
 8001320:	2308      	movs	r3, #8
 8001322:	001a      	movs	r2, r3
 8001324:	2100      	movs	r1, #0
 8001326:	f004 fe40 	bl	8005faa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	003b      	movs	r3, r7
 800132c:	0018      	movs	r0, r3
 800132e:	2310      	movs	r3, #16
 8001330:	001a      	movs	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f004 fe39 	bl	8005faa <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001338:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 800133a:	4a30      	ldr	r2, [pc, #192]	@ (80013fc <MX_TIM3_Init+0xf8>)
 800133c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800133e:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800134a:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 800134c:	2263      	movs	r2, #99	@ 0x63
 800134e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135c:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 800135e:	0018      	movs	r0, r3
 8001360:	f002 fc2a 	bl	8003bb8 <HAL_TIM_Base_Init>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001368:	f7ff fc06 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	2118      	movs	r1, #24
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	0152      	lsls	r2, r2, #5
 8001374:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001376:	187a      	adds	r2, r7, r1
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f002 ff19 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001386:	f7ff fbf7 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 800138c:	0018      	movs	r0, r3
 800138e:	f002 fca5 	bl	8003cdc <HAL_TIM_PWM_Init>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001396:	f7ff fbef 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139a:	2110      	movs	r1, #16
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a8:	187a      	adds	r2, r7, r1
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f003 fa1a 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80013b8:	f7ff fbde 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	003b      	movs	r3, r7
 80013be:	2260      	movs	r2, #96	@ 0x60
 80013c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80013c2:	003b      	movs	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	003b      	movs	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	003b      	movs	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d4:	0039      	movs	r1, r7
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 80013d8:	2204      	movs	r2, #4
 80013da:	0018      	movs	r0, r3
 80013dc:	f002 fe24 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80013e4:	f7ff fbc8 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <MX_TIM3_Init+0xf4>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 f878 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b00a      	add	sp, #40	@ 0x28
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000f0 	.word	0x200000f0
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	003b      	movs	r3, r7
 8001408:	0018      	movs	r0, r3
 800140a:	2308      	movs	r3, #8
 800140c:	001a      	movs	r2, r3
 800140e:	2100      	movs	r1, #0
 8001410:	f004 fdcb 	bl	8005faa <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_TIM7_Init+0x6c>)
 8001416:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <MX_TIM7_Init+0x70>)
 8001418:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_TIM7_Init+0x6c>)
 800141c:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <MX_TIM7_Init+0x74>)
 800141e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_TIM7_Init+0x6c>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_TIM7_Init+0x6c>)
 8001428:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <MX_TIM7_Init+0x78>)
 800142a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_TIM7_Init+0x6c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_TIM7_Init+0x6c>)
 8001434:	0018      	movs	r0, r3
 8001436:	f002 fbbf 	bl	8003bb8 <HAL_TIM_Base_Init>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800143e:	f7ff fb9b 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	003b      	movs	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	003b      	movs	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800144e:	003a      	movs	r2, r7
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_TIM7_Init+0x6c>)
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f003 f9c7 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800145e:	f7ff fb8b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	20000130 	.word	0x20000130
 8001470:	40001400 	.word	0x40001400
 8001474:	00001f3f 	.word	0x00001f3f
 8001478:	0000270f 	.word	0x0000270f

0800147c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	429a      	cmp	r2, r3
 800148e:	d106      	bne.n	800149e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_TIM_Base_MspInit+0x58>)
 8001492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_TIM_Base_MspInit+0x58>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800149c:	e016      	b.n	80014cc <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <HAL_TIM_Base_MspInit+0x5c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d106      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_TIM_Base_MspInit+0x58>)
 80014aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_TIM_Base_MspInit+0x58>)
 80014ae:	2102      	movs	r1, #2
 80014b0:	430a      	orrs	r2, r1
 80014b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014b4:	e00a      	b.n	80014cc <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM7)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_TIM_Base_MspInit+0x60>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d105      	bne.n	80014cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <HAL_TIM_Base_MspInit+0x58>)
 80014c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_TIM_Base_MspInit+0x58>)
 80014c6:	2120      	movs	r1, #32
 80014c8:	430a      	orrs	r2, r1
 80014ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40001400 	.word	0x40001400

080014e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b08b      	sub	sp, #44	@ 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	2414      	movs	r4, #20
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	0018      	movs	r0, r3
 80014ee:	2314      	movs	r3, #20
 80014f0:	001a      	movs	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	f004 fd59 	bl	8005faa <memset>
  if(timHandle->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	05db      	lsls	r3, r3, #23
 8001500:	429a      	cmp	r2, r3
 8001502:	d122      	bne.n	800154a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <HAL_TIM_MspPostInit+0xc4>)
 8001506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001508:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_TIM_MspPostInit+0xc4>)
 800150a:	2102      	movs	r1, #2
 800150c:	430a      	orrs	r2, r1
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <HAL_TIM_MspPostInit+0xc4>)
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800151c:	0021      	movs	r1, r4
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2208      	movs	r2, #8
 8001522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2202      	movs	r2, #2
 8001528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2202      	movs	r2, #2
 800153a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	187b      	adds	r3, r7, r1
 800153e:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <HAL_TIM_MspPostInit+0xc8>)
 8001540:	0019      	movs	r1, r3
 8001542:	0010      	movs	r0, r2
 8001544:	f001 f9ee 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001548:	e027      	b.n	800159a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM3)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_TIM_MspPostInit+0xcc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d122      	bne.n	800159a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <HAL_TIM_MspPostInit+0xc4>)
 8001556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_TIM_MspPostInit+0xc4>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_TIM_MspPostInit+0xc4>)
 8001562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800156c:	2114      	movs	r1, #20
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2280      	movs	r2, #128	@ 0x80
 8001572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2202      	movs	r2, #2
 8001578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2202      	movs	r2, #2
 800158a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	187a      	adds	r2, r7, r1
 800158e:	23a0      	movs	r3, #160	@ 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f001 f9c5 	bl	8002924 <HAL_GPIO_Init>
}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b00b      	add	sp, #44	@ 0x2c
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	40021000 	.word	0x40021000
 80015a8:	50000400 	.word	0x50000400
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart5_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	@ (800160c <MX_USART2_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015bc:	22e1      	movs	r2, #225	@ 0xe1
 80015be:	0252      	lsls	r2, r2, #9
 80015c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <MX_USART2_UART_Init+0x58>)
 80015f4:	0018      	movs	r0, r3
 80015f6:	f003 f955 	bl	80048a4 <HAL_UART_Init>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015fe:	f7ff fabb 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001602:	46c0      	nop			@ (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000170 	.word	0x20000170
 800160c:	40004400 	.word	0x40004400

08001610 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001616:	4a15      	ldr	r2, [pc, #84]	@ (800166c <MX_USART4_UART_Init+0x5c>)
 8001618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 800161c:	22e1      	movs	r2, #225	@ 0xe1
 800161e:	0252      	lsls	r2, r2, #9
 8001620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <MX_USART4_UART_Init+0x58>)
 8001654:	0018      	movs	r0, r3
 8001656:	f003 f925 	bl	80048a4 <HAL_UART_Init>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800165e:	f7ff fa8b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001f8 	.word	0x200001f8
 800166c:	40004c00 	.word	0x40004c00

08001670 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <MX_USART5_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 800167c:	22e1      	movs	r2, #225	@ 0xe1
 800167e:	0252      	lsls	r2, r2, #9
 8001680:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <MX_USART5_UART_Init+0x58>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f003 f8f5 	bl	80048a4 <HAL_UART_Init>
 80016ba:	1e03      	subs	r3, r0, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f7ff fa5b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000280 	.word	0x20000280
 80016cc:	40005000 	.word	0x40005000

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b08d      	sub	sp, #52	@ 0x34
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	241c      	movs	r4, #28
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	0018      	movs	r0, r3
 80016de:	2314      	movs	r3, #20
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f004 fc61 	bl	8005faa <memset>
  if(uartHandle->Instance==USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a8b      	ldr	r2, [pc, #556]	@ (800191c <HAL_UART_MspInit+0x24c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12a      	bne.n	8001748 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001920 <HAL_UART_MspInit+0x250>)
 80016f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016f6:	4b8a      	ldr	r3, [pc, #552]	@ (8001920 <HAL_UART_MspInit+0x250>)
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	0289      	lsls	r1, r1, #10
 80016fc:	430a      	orrs	r2, r1
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b87      	ldr	r3, [pc, #540]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001704:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001706:	2101      	movs	r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800170c:	4b84      	ldr	r3, [pc, #528]	@ (8001920 <HAL_UART_MspInit+0x250>)
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001718:	0021      	movs	r1, r4
 800171a:	187b      	adds	r3, r7, r1
 800171c:	220c      	movs	r2, #12
 800171e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2202      	movs	r2, #2
 8001724:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2203      	movs	r2, #3
 8001730:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2204      	movs	r2, #4
 8001736:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	187a      	adds	r2, r7, r1
 800173a:	23a0      	movs	r3, #160	@ 0xa0
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f001 f8ef 	bl	8002924 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8001746:	e0e4      	b.n	8001912 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a75      	ldr	r2, [pc, #468]	@ (8001924 <HAL_UART_MspInit+0x254>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d15b      	bne.n	800180a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001752:	4b73      	ldr	r3, [pc, #460]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001756:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	0309      	lsls	r1, r1, #12
 800175c:	430a      	orrs	r2, r1
 800175e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001760:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001764:	4b6e      	ldr	r3, [pc, #440]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001766:	2104      	movs	r1, #4
 8001768:	430a      	orrs	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800176c:	4b6c      	ldr	r3, [pc, #432]	@ (8001920 <HAL_UART_MspInit+0x250>)
 800176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001770:	2204      	movs	r2, #4
 8001772:	4013      	ands	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001778:	211c      	movs	r1, #28
 800177a:	187b      	adds	r3, r7, r1
 800177c:	22c0      	movs	r2, #192	@ 0xc0
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2202      	movs	r2, #2
 8001786:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2203      	movs	r2, #3
 8001792:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2206      	movs	r2, #6
 8001798:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	187b      	adds	r3, r7, r1
 800179c:	4a62      	ldr	r2, [pc, #392]	@ (8001928 <HAL_UART_MspInit+0x258>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f001 f8bf 	bl	8002924 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 80017a6:	4b61      	ldr	r3, [pc, #388]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017a8:	4a61      	ldr	r2, [pc, #388]	@ (8001930 <HAL_UART_MspInit+0x260>)
 80017aa:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80017ac:	4b5f      	ldr	r3, [pc, #380]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b2:	4b5e      	ldr	r3, [pc, #376]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b8:	4b5c      	ldr	r3, [pc, #368]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017be:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017c0:	2280      	movs	r2, #128	@ 0x80
 80017c2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c4:	4b59      	ldr	r3, [pc, #356]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 80017d0:	4b56      	ldr	r3, [pc, #344]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d6:	4b55      	ldr	r3, [pc, #340]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80017dc:	4b53      	ldr	r3, [pc, #332]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fe5e 	bl	80024a0 <HAL_DMA_Init>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0x11c>
      Error_Handler();
 80017e8:	f7ff f9c6 	bl	8000b78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a4f      	ldr	r2, [pc, #316]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <HAL_UART_MspInit+0x25c>)
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	200e      	movs	r0, #14
 80017fe:	f000 fe1d 	bl	800243c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001802:	200e      	movs	r0, #14
 8001804:	f000 fe2f 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8001808:	e083      	b.n	8001912 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART5)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a49      	ldr	r2, [pc, #292]	@ (8001934 <HAL_UART_MspInit+0x264>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d000      	beq.n	8001816 <HAL_UART_MspInit+0x146>
 8001814:	e07d      	b.n	8001912 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001816:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_UART_MspInit+0x250>)
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	0349      	lsls	r1, r1, #13
 8001820:	430a      	orrs	r2, r1
 8001822:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001828:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_UART_MspInit+0x250>)
 800182a:	2104      	movs	r1, #4
 800182c:	430a      	orrs	r2, r1
 800182e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001830:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183c:	4b38      	ldr	r3, [pc, #224]	@ (8001920 <HAL_UART_MspInit+0x250>)
 800183e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001840:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <HAL_UART_MspInit+0x250>)
 8001842:	2108      	movs	r1, #8
 8001844:	430a      	orrs	r2, r1
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001848:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <HAL_UART_MspInit+0x250>)
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	2208      	movs	r2, #8
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001854:	211c      	movs	r1, #28
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	0152      	lsls	r2, r2, #5
 800185c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	000c      	movs	r4, r1
 8001860:	193b      	adds	r3, r7, r4
 8001862:	2202      	movs	r2, #2
 8001864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	193b      	adds	r3, r7, r4
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	193b      	adds	r3, r7, r4
 800186e:	2203      	movs	r2, #3
 8001870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8001872:	193b      	adds	r3, r7, r4
 8001874:	2202      	movs	r2, #2
 8001876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	193b      	adds	r3, r7, r4
 800187a:	4a2b      	ldr	r2, [pc, #172]	@ (8001928 <HAL_UART_MspInit+0x258>)
 800187c:	0019      	movs	r1, r3
 800187e:	0010      	movs	r0, r2
 8001880:	f001 f850 	bl	8002924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001884:	0021      	movs	r1, r4
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2204      	movs	r2, #4
 800188a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2202      	movs	r2, #2
 8001890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2203      	movs	r2, #3
 800189c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2206      	movs	r2, #6
 80018a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	4a24      	ldr	r2, [pc, #144]	@ (8001938 <HAL_UART_MspInit+0x268>)
 80018a8:	0019      	movs	r1, r3
 80018aa:	0010      	movs	r0, r2
 80018ac:	f001 f83a 	bl	8002924 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel6;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <HAL_UART_MspInit+0x270>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018b8:	220d      	movs	r2, #13
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 fdd9 	bl	80024a0 <HAL_DMA_Init>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 80018f2:	f7ff f941 	bl	8000b78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a10      	ldr	r2, [pc, #64]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_UART_MspInit+0x26c>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	200e      	movs	r0, #14
 8001908:	f000 fd98 	bl	800243c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800190c:	200e      	movs	r0, #14
 800190e:	f000 fdaa 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b00d      	add	sp, #52	@ 0x34
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	40004400 	.word	0x40004400
 8001920:	40021000 	.word	0x40021000
 8001924:	40004c00 	.word	0x40004c00
 8001928:	50000800 	.word	0x50000800
 800192c:	20000308 	.word	0x20000308
 8001930:	4002001c 	.word	0x4002001c
 8001934:	40005000 	.word	0x40005000
 8001938:	50000c00 	.word	0x50000c00
 800193c:	20000350 	.word	0x20000350
 8001940:	4002006c 	.word	0x4002006c

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001944:	480d      	ldr	r0, [pc, #52]	@ (800197c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001946:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001948:	f7ff fc58 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopForever+0x6>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopForever+0xe>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopForever+0x16>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001972:	f004 fb23 	bl	8005fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7fe ffa7 	bl	80008c8 <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
   ldr   r0, =_estack
 800197c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001988:	08006098 	.word	0x08006098
  ldr r2, =_sbss
 800198c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001990:	2000039c 	.word	0x2000039c

08001994 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_COMP_IRQHandler>
	...

08001998 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_Init+0x3c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_Init+0x3c>)
 80019aa:	2140      	movs	r1, #64	@ 0x40
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 f811 	bl	80019d8 <HAL_InitTick>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e001      	b.n	80019c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019c2:	f7ff fb99 	bl	80010f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_InitTick+0x5c>)
 80019e2:	681c      	ldr	r4, [r3, #0]
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <HAL_InitTick+0x60>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	0019      	movs	r1, r3
 80019ea:	23fa      	movs	r3, #250	@ 0xfa
 80019ec:	0098      	lsls	r0, r3, #2
 80019ee:	f7fe fb8b 	bl	8000108 <__udivsi3>
 80019f2:	0003      	movs	r3, r0
 80019f4:	0019      	movs	r1, r3
 80019f6:	0020      	movs	r0, r4
 80019f8:	f7fe fb86 	bl	8000108 <__udivsi3>
 80019fc:	0003      	movs	r3, r0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 fd41 	bl	8002486 <HAL_SYSTICK_Config>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e00f      	b.n	8001a2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d80b      	bhi.n	8001a2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	2301      	movs	r3, #1
 8001a16:	425b      	negs	r3, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 fd0e 	bl	800243c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_InitTick+0x64>)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b003      	add	sp, #12
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	20000004 	.word	0x20000004
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	001a      	movs	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	18d2      	adds	r2, r2, r3
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	20000398 	.word	0x20000398

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	@ (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	20000398 	.word	0x20000398

08001a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e159      	b.n	8001d3e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2250      	movs	r2, #80	@ 0x50
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7fe fd54 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aac:	2210      	movs	r2, #16
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	d005      	beq.n	8001ac0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001abe:	d00b      	beq.n	8001ad8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2250      	movs	r2, #80	@ 0x50
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e132      	b.n	8001d3e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001adc:	4a9a      	ldr	r2, [pc, #616]	@ (8001d48 <HAL_ADC_Init+0x2d0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2203      	movs	r2, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_ADC_Init+0x90>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_Init+0x90>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_ADC_Init+0x92>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d149      	bne.n	8001ba2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	23c0      	movs	r3, #192	@ 0xc0
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d00b      	beq.n	8001b32 <HAL_ADC_Init+0xba>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d005      	beq.n	8001b32 <HAL_ADC_Init+0xba>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d111      	bne.n	8001b56 <HAL_ADC_Init+0xde>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	0892      	lsrs	r2, r2, #2
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6919      	ldr	r1, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	e014      	b.n	8001b80 <HAL_ADC_Init+0x108>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	0892      	lsrs	r2, r2, #2
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	4b79      	ldr	r3, [pc, #484]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b78      	ldr	r3, [pc, #480]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001b6c:	4978      	ldr	r1, [pc, #480]	@ (8001d50 <HAL_ADC_Init+0x2d8>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	4b76      	ldr	r3, [pc, #472]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4b74      	ldr	r3, [pc, #464]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2118      	movs	r1, #24
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b69      	ldr	r3, [pc, #420]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001ba8:	496a      	ldr	r1, [pc, #424]	@ (8001d54 <HAL_ADC_Init+0x2dc>)
 8001baa:	400a      	ands	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001bae:	4b67      	ldr	r3, [pc, #412]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb6:	065a      	lsls	r2, r3, #25
 8001bb8:	4b64      	ldr	r3, [pc, #400]	@ (8001d4c <HAL_ADC_Init+0x2d4>)
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	055b      	lsls	r3, r3, #21
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d108      	bne.n	8001bde <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	0549      	lsls	r1, r1, #21
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	495b      	ldr	r1, [pc, #364]	@ (8001d58 <HAL_ADC_Init+0x2e0>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_Init+0x18c>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_Init+0x18e>
 8001c04:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c06:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2020      	movs	r0, #32
 8001c0c:	5c1b      	ldrb	r3, [r3, r0]
 8001c0e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c10:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	202c      	movs	r0, #44	@ 0x2c
 8001c16:	5c1b      	ldrb	r3, [r3, r0]
 8001c18:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c1a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c30:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c3e:	23c2      	movs	r3, #194	@ 0xc2
 8001c40:	33ff      	adds	r3, #255	@ 0xff
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d00b      	beq.n	8001c5e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68d9      	ldr	r1, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2221      	movs	r2, #33	@ 0x21
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11a      	bne.n	8001c9e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	5c9b      	ldrb	r3, [r3, r2]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0249      	lsls	r1, r1, #9
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	e00b      	b.n	8001c9e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	2201      	movs	r2, #1
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d11f      	bne.n	8001ce6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	492a      	ldr	r1, [pc, #168]	@ (8001d5c <HAL_ADC_Init+0x2e4>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6919      	ldr	r1, [r3, #16]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001cc4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001cca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	e00e      	b.n	8001d04 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2107      	movs	r1, #7
 8001d10:	438a      	bics	r2, r1
 8001d12:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6959      	ldr	r1, [r3, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	2203      	movs	r2, #3
 8001d32:	4393      	bics	r3, r2
 8001d34:	2201      	movs	r2, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b002      	add	sp, #8
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	fffffefd 	.word	0xfffffefd
 8001d4c:	40012708 	.word	0x40012708
 8001d50:	ffc3ffff 	.word	0xffc3ffff
 8001d54:	fdffffff 	.word	0xfdffffff
 8001d58:	fffe0219 	.word	0xfffe0219
 8001d5c:	fffffc03 	.word	0xfffffc03

08001d60 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d68:	230f      	movs	r3, #15
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2204      	movs	r2, #4
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d138      	bne.n	8001dee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2250      	movs	r2, #80	@ 0x50
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Start+0x2a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e038      	b.n	8001dfc <HAL_ADC_Start+0x9c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2250      	movs	r2, #80	@ 0x50
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d007      	beq.n	8001daa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	18fc      	adds	r4, r7, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f979 	bl	8002098 <ADC_Enable>
 8001da6:	0003      	movs	r3, r0
 8001da8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001daa:	230f      	movs	r3, #15
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d120      	bne.n	8001df6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_ADC_Start+0xa4>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2280      	movs	r2, #128	@ 0x80
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2250      	movs	r2, #80	@ 0x50
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	221c      	movs	r2, #28
 8001dda:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2104      	movs	r1, #4
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e003      	b.n	8001df6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dee:	230f      	movs	r3, #15
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df6:	230f      	movs	r3, #15
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b005      	add	sp, #20
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	fffff0fe 	.word	0xfffff0fe

08001e08 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d102      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e22:	2308      	movs	r3, #8
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e014      	b.n	8001e52 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10b      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2250      	movs	r2, #80	@ 0x50
 8001e46:	2100      	movs	r1, #0
 8001e48:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e072      	b.n	8001f34 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e4e:	230c      	movs	r3, #12
 8001e50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e52:	f7ff fe07 	bl	8001a64 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e5a:	e01f      	b.n	8001e9c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	d01c      	beq.n	8001e9c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_ADC_PollForConversion+0x70>
 8001e68:	f7ff fdfc 	bl	8001a64 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d211      	bcs.n	8001e9c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	d10b      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	2204      	movs	r2, #4
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2250      	movs	r2, #80	@ 0x50
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e04b      	b.n	8001f34 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d0d9      	beq.n	8001e5c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eac:	2280      	movs	r2, #128	@ 0x80
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	23c0      	movs	r3, #192	@ 0xc0
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d12e      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d129      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d122      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d110      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	210c      	movs	r1, #12
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <HAL_ADC_PollForConversion+0x134>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f08:	e00b      	b.n	8001f22 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	2220      	movs	r2, #32
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	220c      	movs	r2, #12
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	fffffefe 	.word	0xfffffefe

08001f40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2250      	movs	r2, #80	@ 0x50
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x18>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e085      	b.n	800207c <HAL_ADC_ConfigChannel+0x124>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2250      	movs	r2, #80	@ 0x50
 8001f74:	2101      	movs	r1, #1
 8001f76:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	d00b      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	2220      	movs	r2, #32
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2250      	movs	r2, #80	@ 0x50
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e06f      	b.n	800207c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a38      	ldr	r2, [pc, #224]	@ (8002084 <HAL_ADC_ConfigChannel+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d035      	beq.n	8002012 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	035b      	lsls	r3, r3, #13
 8001fb2:	0b5a      	lsrs	r2, r3, #13
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	02db      	lsls	r3, r3, #11
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	0409      	lsls	r1, r1, #16
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001fd6:	200a      	movs	r0, #10
 8001fd8:	f000 f8c6 	bl	8002168 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d006      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001fe8:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	03c9      	lsls	r1, r1, #15
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	025b      	lsls	r3, r3, #9
 8001ffe:	4013      	ands	r3, r2
 8002000:	d037      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002002:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	0449      	lsls	r1, r1, #17
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e02f      	b.n	8002072 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	035b      	lsls	r3, r3, #13
 800201e:	0b5b      	lsrs	r3, r3, #13
 8002020:	43d9      	mvns	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	400a      	ands	r2, r1
 8002028:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	02db      	lsls	r3, r3, #11
 8002032:	4013      	ands	r3, r2
 8002034:	d005      	beq.n	8002042 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002036:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 800203c:	4913      	ldr	r1, [pc, #76]	@ (800208c <HAL_ADC_ConfigChannel+0x134>)
 800203e:	400a      	ands	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d005      	beq.n	800205a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8002054:	490e      	ldr	r1, [pc, #56]	@ (8002090 <HAL_ADC_ConfigChannel+0x138>)
 8002056:	400a      	ands	r2, r1
 8002058:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	025b      	lsls	r3, r3, #9
 8002062:	4013      	ands	r3, r2
 8002064:	d005      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_ADC_ConfigChannel+0x130>)
 800206c:	4909      	ldr	r1, [pc, #36]	@ (8002094 <HAL_ADC_ConfigChannel+0x13c>)
 800206e:	400a      	ands	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2250      	movs	r2, #80	@ 0x50
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}
 8002084:	00001001 	.word	0x00001001
 8002088:	40012708 	.word	0x40012708
 800208c:	ff7fffff 	.word	0xff7fffff
 8002090:	ffbfffff 	.word	0xffbfffff
 8002094:	feffffff 	.word	0xfeffffff

08002098 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2203      	movs	r2, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <ADC_Enable+0x2c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <ADC_Enable+0x2c>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <ADC_Enable+0x2e>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d146      	bne.n	8002158 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a24      	ldr	r2, [pc, #144]	@ (8002164 <ADC_Enable+0xcc>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	2210      	movs	r2, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	2201      	movs	r2, #1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e033      	b.n	800215a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f830 	bl	8002168 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002108:	f7ff fcac 	bl	8001a64 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002110:	e01b      	b.n	800214a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002112:	f7ff fca7 	bl	8001a64 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b0a      	cmp	r3, #10
 800211e:	d914      	bls.n	800214a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	2b01      	cmp	r3, #1
 800212c:	d00d      	beq.n	800214a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	2210      	movs	r2, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	2201      	movs	r2, #1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	2b01      	cmp	r3, #1
 8002156:	d1dc      	bne.n	8002112 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	80000017 	.word	0x80000017

08002168 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <ADC_DelayMicroSecond+0x38>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	490b      	ldr	r1, [pc, #44]	@ (80021a4 <ADC_DelayMicroSecond+0x3c>)
 8002176:	0018      	movs	r0, r3
 8002178:	f7fd ffc6 	bl	8000108 <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	001a      	movs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4353      	muls	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002186:	e002      	b.n	800218e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3b01      	subs	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f9      	bne.n	8002188 <ADC_DelayMicroSecond+0x20>
  }
}
 8002194:	46c0      	nop			@ (mov r8, r8)
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	20000004 	.word	0x20000004
 80021a4:	000f4240 	.word	0x000f4240

080021a8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2250      	movs	r2, #80	@ 0x50
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADCEx_Calibration_Start+0x28>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e083      	b.n	80022d8 <HAL_ADCEx_Calibration_Start+0x130>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2250      	movs	r2, #80	@ 0x50
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2203      	movs	r2, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_ADCEx_Calibration_Start+0x50>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ADCEx_Calibration_Start+0x50>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_ADCEx_Calibration_Start+0x52>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d15b      	bne.n	80022b6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	4a37      	ldr	r2, [pc, #220]	@ (80022e0 <HAL_ADCEx_Calibration_Start+0x138>)
 8002204:	4013      	ands	r3, r2
 8002206:	2202      	movs	r2, #2
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2203      	movs	r2, #3
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2103      	movs	r1, #3
 8002226:	438a      	bics	r2, r1
 8002228:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	0609      	lsls	r1, r1, #24
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800223c:	f7ff fc12 	bl	8001a64 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002244:	e01d      	b.n	8002282 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002246:	f7ff fc0d 	bl	8001a64 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b0a      	cmp	r3, #10
 8002252:	d916      	bls.n	8002282 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0fdb      	lsrs	r3, r3, #31
 800225c:	07da      	lsls	r2, r3, #31
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	429a      	cmp	r2, r3
 8002264:	d10d      	bne.n	8002282 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	2212      	movs	r2, #18
 800226c:	4393      	bics	r3, r2
 800226e:	2210      	movs	r2, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2250      	movs	r2, #80	@ 0x50
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e02a      	b.n	80022d8 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	0fdb      	lsrs	r3, r3, #31
 800228a:	07da      	lsls	r2, r3, #31
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	429a      	cmp	r2, r3
 8002292:	d0d8      	beq.n	8002246 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68d9      	ldr	r1, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a8:	2203      	movs	r2, #3
 80022aa:	4393      	bics	r3, r2
 80022ac:	2201      	movs	r2, #1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80022b4:	e009      	b.n	80022ca <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	2220      	movs	r2, #32
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022c2:	2317      	movs	r3, #23
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2250      	movs	r2, #80	@ 0x50
 80022ce:	2100      	movs	r1, #0
 80022d0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80022d2:	2317      	movs	r3, #23
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	fffffefd 	.word	0xfffffefd

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	0002      	movs	r2, r0
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80022f6:	d809      	bhi.n	800230c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	001a      	movs	r2, r3
 80022fe:	231f      	movs	r3, #31
 8002300:	401a      	ands	r2, r3
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__NVIC_EnableIRQ+0x30>)
 8002304:	2101      	movs	r1, #1
 8002306:	4091      	lsls	r1, r2
 8002308:	000a      	movs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
  }
}
 800230c:	46c0      	nop			@ (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	0002      	movs	r2, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b7f      	cmp	r3, #127	@ 0x7f
 800232c:	d828      	bhi.n	8002380 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800232e:	4a2f      	ldr	r2, [pc, #188]	@ (80023ec <__NVIC_SetPriority+0xd4>)
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b25b      	sxtb	r3, r3
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	33c0      	adds	r3, #192	@ 0xc0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	589b      	ldr	r3, [r3, r2]
 800233e:	1dfa      	adds	r2, r7, #7
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	0011      	movs	r1, r2
 8002344:	2203      	movs	r2, #3
 8002346:	400a      	ands	r2, r1
 8002348:	00d2      	lsls	r2, r2, #3
 800234a:	21ff      	movs	r1, #255	@ 0xff
 800234c:	4091      	lsls	r1, r2
 800234e:	000a      	movs	r2, r1
 8002350:	43d2      	mvns	r2, r2
 8002352:	401a      	ands	r2, r3
 8002354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	22ff      	movs	r2, #255	@ 0xff
 800235c:	401a      	ands	r2, r3
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	2303      	movs	r3, #3
 8002366:	4003      	ands	r3, r0
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800236c:	481f      	ldr	r0, [pc, #124]	@ (80023ec <__NVIC_SetPriority+0xd4>)
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	430a      	orrs	r2, r1
 8002378:	33c0      	adds	r3, #192	@ 0xc0
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800237e:	e031      	b.n	80023e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002380:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <__NVIC_SetPriority+0xd8>)
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	0019      	movs	r1, r3
 8002388:	230f      	movs	r3, #15
 800238a:	400b      	ands	r3, r1
 800238c:	3b08      	subs	r3, #8
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3306      	adds	r3, #6
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	3304      	adds	r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1dfa      	adds	r2, r7, #7
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	0011      	movs	r1, r2
 80023a0:	2203      	movs	r2, #3
 80023a2:	400a      	ands	r2, r1
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	21ff      	movs	r1, #255	@ 0xff
 80023a8:	4091      	lsls	r1, r2
 80023aa:	000a      	movs	r2, r1
 80023ac:	43d2      	mvns	r2, r2
 80023ae:	401a      	ands	r2, r3
 80023b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	22ff      	movs	r2, #255	@ 0xff
 80023b8:	401a      	ands	r2, r3
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	2303      	movs	r3, #3
 80023c2:	4003      	ands	r3, r0
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c8:	4809      	ldr	r0, [pc, #36]	@ (80023f0 <__NVIC_SetPriority+0xd8>)
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	001c      	movs	r4, r3
 80023d0:	230f      	movs	r3, #15
 80023d2:	4023      	ands	r3, r4
 80023d4:	3b08      	subs	r3, #8
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	430a      	orrs	r2, r1
 80023da:	3306      	adds	r3, #6
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	18c3      	adds	r3, r0, r3
 80023e0:	3304      	adds	r3, #4
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b003      	add	sp, #12
 80023ea:	bd90      	pop	{r4, r7, pc}
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	045b      	lsls	r3, r3, #17
 8002404:	429a      	cmp	r2, r3
 8002406:	d301      	bcc.n	800240c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002408:	2301      	movs	r3, #1
 800240a:	e010      	b.n	800242e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <SysTick_Config+0x44>)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	3a01      	subs	r2, #1
 8002412:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002414:	2301      	movs	r3, #1
 8002416:	425b      	negs	r3, r3
 8002418:	2103      	movs	r1, #3
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff ff7c 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <SysTick_Config+0x44>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <SysTick_Config+0x44>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	210f      	movs	r1, #15
 8002448:	187b      	adds	r3, r7, r1
 800244a:	1c02      	adds	r2, r0, #0
 800244c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	187b      	adds	r3, r7, r1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b25b      	sxtb	r3, r3
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b004      	add	sp, #16
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	0002      	movs	r2, r0
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b25b      	sxtb	r3, r3
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff ff33 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff ffaf 	bl	80023f4 <SysTick_Config>
 8002496:	0003      	movs	r3, r0
}
 8002498:	0018      	movs	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e061      	b.n	8002576 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <HAL_DMA_Init+0xe0>)
 80024b8:	4694      	mov	ip, r2
 80024ba:	4463      	add	r3, ip
 80024bc:	2114      	movs	r1, #20
 80024be:	0018      	movs	r0, r3
 80024c0:	f7fd fe22 	bl	8000108 <__udivsi3>
 80024c4:	0003      	movs	r3, r0
 80024c6:	009a      	lsls	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <HAL_DMA_Init+0xe4>)
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2225      	movs	r2, #37	@ 0x25
 80024d6:	2102      	movs	r1, #2
 80024d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <HAL_DMA_Init+0xe8>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	429a      	cmp	r2, r3
 800252a:	d018      	beq.n	800255e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800252c:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_DMA_Init+0xec>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002534:	211c      	movs	r1, #28
 8002536:	400b      	ands	r3, r1
 8002538:	210f      	movs	r1, #15
 800253a:	4099      	lsls	r1, r3
 800253c:	000b      	movs	r3, r1
 800253e:	43d9      	mvns	r1, r3
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_DMA_Init+0xec>)
 8002542:	400a      	ands	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_DMA_Init+0xec>)
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	201c      	movs	r0, #28
 8002554:	4003      	ands	r3, r0
 8002556:	409a      	lsls	r2, r3
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <HAL_DMA_Init+0xec>)
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2225      	movs	r2, #37	@ 0x25
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	@ 0x24
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	bffdfff8 	.word	0xbffdfff8
 8002584:	40020000 	.word	0x40020000
 8002588:	ffff800f 	.word	0xffff800f
 800258c:	400200a8 	.word	0x400200a8

08002590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2317      	movs	r3, #23
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2224      	movs	r2, #36	@ 0x24
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Start_IT+0x24>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e04f      	b.n	8002654 <HAL_DMA_Start_IT+0xc4>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2224      	movs	r2, #36	@ 0x24
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2225      	movs	r2, #37	@ 0x25
 80025c0:	5c9b      	ldrb	r3, [r3, r2]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d13a      	bne.n	800263e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2225      	movs	r2, #37	@ 0x25
 80025cc:	2102      	movs	r1, #2
 80025ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	438a      	bics	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f96a 	bl	80028c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	210e      	movs	r1, #14
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e00f      	b.n	800262c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2104      	movs	r1, #4
 8002618:	438a      	bics	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	210a      	movs	r1, #10
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2101      	movs	r1, #1
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e007      	b.n	800264e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2224      	movs	r2, #36	@ 0x24
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002646:	2317      	movs	r3, #23
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800264e:	2317      	movs	r3, #23
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b006      	add	sp, #24
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	230f      	movs	r3, #15
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2225      	movs	r2, #37	@ 0x25
 8002670:	5c9b      	ldrb	r3, [r3, r2]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d008      	beq.n	800268a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2204      	movs	r2, #4
 800267c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2224      	movs	r2, #36	@ 0x24
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e024      	b.n	80026d4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	210e      	movs	r1, #14
 8002696:	438a      	bics	r2, r1
 8002698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	221c      	movs	r2, #28
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2101      	movs	r1, #1
 80026b8:	4091      	lsls	r1, r2
 80026ba:	000a      	movs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2225      	movs	r2, #37	@ 0x25
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2224      	movs	r2, #36	@ 0x24
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

    return status;
 80026ce:	230f      	movs	r3, #15
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	210f      	movs	r1, #15
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2225      	movs	r2, #37	@ 0x25
 80026f0:	5c9b      	ldrb	r3, [r3, r2]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d006      	beq.n	8002706 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2204      	movs	r2, #4
 80026fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e02a      	b.n	800275c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	210e      	movs	r1, #14
 8002712:	438a      	bics	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	438a      	bics	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	221c      	movs	r2, #28
 800272c:	401a      	ands	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	2101      	movs	r1, #1
 8002734:	4091      	lsls	r1, r2
 8002736:	000a      	movs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2225      	movs	r2, #37	@ 0x25
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2224      	movs	r2, #36	@ 0x24
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	0010      	movs	r0, r2
 800275a:	4798      	blx	r3
    }
  }
  return status;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	221c      	movs	r2, #28
 8002788:	4013      	ands	r3, r2
 800278a:	2204      	movs	r2, #4
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	d026      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x7a>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2204      	movs	r2, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d022      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	4013      	ands	r3, r2
 80027a8:	d107      	bne.n	80027ba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2104      	movs	r1, #4
 80027b6:	438a      	bics	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	221c      	movs	r2, #28
 80027c0:	401a      	ands	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2104      	movs	r1, #4
 80027c8:	4091      	lsls	r1, r2
 80027ca:	000a      	movs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d100      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x6e>
 80027d6:	e071      	b.n	80028bc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	0010      	movs	r0, r2
 80027e0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80027e2:	e06b      	b.n	80028bc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	221c      	movs	r2, #28
 80027ea:	4013      	ands	r3, r2
 80027ec:	2202      	movs	r2, #2
 80027ee:	409a      	lsls	r2, r3
 80027f0:	0013      	movs	r3, r2
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	d02d      	beq.n	8002854 <HAL_DMA_IRQHandler+0xea>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d029      	beq.n	8002854 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	4013      	ands	r3, r2
 800280a:	d10b      	bne.n	8002824 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	210a      	movs	r1, #10
 8002818:	438a      	bics	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2225      	movs	r2, #37	@ 0x25
 8002820:	2101      	movs	r1, #1
 8002822:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	221c      	movs	r2, #28
 800282a:	401a      	ands	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	2102      	movs	r1, #2
 8002832:	4091      	lsls	r1, r2
 8002834:	000a      	movs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2224      	movs	r2, #36	@ 0x24
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d039      	beq.n	80028bc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	0010      	movs	r0, r2
 8002850:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002852:	e033      	b.n	80028bc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	221c      	movs	r2, #28
 800285a:	4013      	ands	r3, r2
 800285c:	2208      	movs	r2, #8
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	d02a      	beq.n	80028be <HAL_DMA_IRQHandler+0x154>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2208      	movs	r2, #8
 800286c:	4013      	ands	r3, r2
 800286e:	d026      	beq.n	80028be <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	210e      	movs	r1, #14
 800287c:	438a      	bics	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002884:	221c      	movs	r2, #28
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	2101      	movs	r1, #1
 800288e:	4091      	lsls	r1, r2
 8002890:	000a      	movs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2225      	movs	r2, #37	@ 0x25
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2224      	movs	r2, #36	@ 0x24
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	0010      	movs	r0, r2
 80028ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028bc:	46c0      	nop			@ (mov r8, r8)
 80028be:	46c0      	nop			@ (mov r8, r8)
}
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d8:	221c      	movs	r2, #28
 80028da:	401a      	ands	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	2101      	movs	r1, #1
 80028e2:	4091      	lsls	r1, r2
 80028e4:	000a      	movs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d108      	bne.n	800290a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002908:	e007      	b.n	800291a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	60da      	str	r2, [r3, #12]
}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800293a:	e155      	b.n	8002be8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4091      	lsls	r1, r2
 8002946:	000a      	movs	r2, r1
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d100      	bne.n	8002954 <HAL_GPIO_Init+0x30>
 8002952:	e146      	b.n	8002be2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	4013      	ands	r3, r2
 800295c:	2b01      	cmp	r3, #1
 800295e:	d005      	beq.n	800296c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002968:	2b02      	cmp	r3, #2
 800296a:	d130      	bne.n	80029ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	409a      	lsls	r2, r3
 800297a:	0013      	movs	r3, r2
 800297c:	43da      	mvns	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	409a      	lsls	r2, r3
 800298e:	0013      	movs	r3, r2
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a2:	2201      	movs	r2, #1
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
 80029a8:	0013      	movs	r3, r2
 80029aa:	43da      	mvns	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	2201      	movs	r2, #1
 80029ba:	401a      	ands	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	409a      	lsls	r2, r3
 80029c0:	0013      	movs	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d017      	beq.n	8002a0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	409a      	lsls	r2, r3
 80029e8:	0013      	movs	r3, r2
 80029ea:	43da      	mvns	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	0013      	movs	r3, r2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2203      	movs	r2, #3
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d123      	bne.n	8002a5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	58d3      	ldr	r3, [r2, r3]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2207      	movs	r2, #7
 8002a28:	4013      	ands	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	0013      	movs	r3, r2
 8002a32:	43da      	mvns	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2107      	movs	r1, #7
 8002a42:	400b      	ands	r3, r1
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	08da      	lsrs	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3208      	adds	r2, #8
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	6939      	ldr	r1, [r7, #16]
 8002a5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	2203      	movs	r2, #3
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	23c0      	movs	r3, #192	@ 0xc0
 8002a98:	029b      	lsls	r3, r3, #10
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d100      	bne.n	8002aa0 <HAL_GPIO_Init+0x17c>
 8002a9e:	e0a0      	b.n	8002be2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa0:	4b57      	ldr	r3, [pc, #348]	@ (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa4:	4b56      	ldr	r3, [pc, #344]	@ (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aac:	4a55      	ldr	r2, [pc, #340]	@ (8002c04 <HAL_GPIO_Init+0x2e0>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	589b      	ldr	r3, [r3, r2]
 8002ab8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2203      	movs	r2, #3
 8002abe:	4013      	ands	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	23a0      	movs	r3, #160	@ 0xa0
 8002ad4:	05db      	lsls	r3, r3, #23
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d01f      	beq.n	8002b1a <HAL_GPIO_Init+0x1f6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4a      	ldr	r2, [pc, #296]	@ (8002c08 <HAL_GPIO_Init+0x2e4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d019      	beq.n	8002b16 <HAL_GPIO_Init+0x1f2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a49      	ldr	r2, [pc, #292]	@ (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a48      	ldr	r2, [pc, #288]	@ (8002c10 <HAL_GPIO_Init+0x2ec>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_GPIO_Init+0x1ea>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a47      	ldr	r2, [pc, #284]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x1e6>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a46      	ldr	r2, [pc, #280]	@ (8002c18 <HAL_GPIO_Init+0x2f4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_GPIO_Init+0x1e2>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002b06:	2306      	movs	r3, #6
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	2103      	movs	r1, #3
 8002b20:	400a      	ands	r2, r1
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	@ (8002c04 <HAL_GPIO_Init+0x2e0>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b38      	ldr	r3, [pc, #224]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43da      	mvns	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	035b      	lsls	r3, r3, #13
 8002b52:	4013      	ands	r3, r2
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	039b      	lsls	r3, r3, #14
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002b8e:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	029b      	lsls	r3, r3, #10
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	1e13      	subs	r3, r2, #0
 8002bf2:	d000      	beq.n	8002bf6 <HAL_GPIO_Init+0x2d2>
 8002bf4:	e6a2      	b.n	800293c <HAL_GPIO_Init+0x18>
  }
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	50000400 	.word	0x50000400
 8002c0c:	50000800 	.word	0x50000800
 8002c10:	50000c00 	.word	0x50000c00
 8002c14:	50001000 	.word	0x50001000
 8002c18:	50001c00 	.word	0x50001c00
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	000a      	movs	r2, r1
 8002c2a:	1cbb      	adds	r3, r7, #2
 8002c2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	1cba      	adds	r2, r7, #2
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	4013      	ands	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c3a:	230f      	movs	r3, #15
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e003      	b.n	8002c4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c44:	230f      	movs	r3, #15
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	781b      	ldrb	r3, [r3, #0]
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	0008      	movs	r0, r1
 8002c64:	0011      	movs	r1, r2
 8002c66:	1cbb      	adds	r3, r7, #2
 8002c68:	1c02      	adds	r2, r0, #0
 8002c6a:	801a      	strh	r2, [r3, #0]
 8002c6c:	1c7b      	adds	r3, r7, #1
 8002c6e:	1c0a      	adds	r2, r1, #0
 8002c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c72:	1c7b      	adds	r3, r7, #1
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	1cbb      	adds	r3, r7, #2
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c82:	e003      	b.n	8002c8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c84:	1cbb      	adds	r3, r7, #2
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c8c:	46c0      	nop			@ (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b002      	add	sp, #8
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	1dba      	adds	r2, r7, #6
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d008      	beq.n	8002cbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002cae:	1dba      	adds	r2, r7, #6
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cb4:	1dbb      	adds	r3, r7, #6
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7fd ff63 	bl	8000b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	40010400 	.word	0x40010400

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b5b0      	push	{r4, r5, r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f000 fbbf 	bl	800345e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce0:	4bc9      	ldr	r3, [pc, #804]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	220c      	movs	r2, #12
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cea:	4bc7      	ldr	r3, [pc, #796]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <HAL_RCC_OscConfig+0x36>
 8002d00:	e07e      	b.n	8002e00 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d007      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d112      	bne.n	8002d34 <HAL_RCC_OscConfig+0x68>
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d10d      	bne.n	8002d34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4bbb      	ldr	r3, [pc, #748]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	029b      	lsls	r3, r3, #10
 8002d20:	4013      	ands	r3, r2
 8002d22:	d100      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5a>
 8002d24:	e06b      	b.n	8002dfe <HAL_RCC_OscConfig+0x132>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d167      	bne.n	8002dfe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f000 fb95 	bl	800345e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x84>
 8002d40:	4bb1      	ldr	r3, [pc, #708]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4bb0      	ldr	r3, [pc, #704]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d46:	2180      	movs	r1, #128	@ 0x80
 8002d48:	0249      	lsls	r1, r1, #9
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e027      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	23a0      	movs	r3, #160	@ 0xa0
 8002d56:	02db      	lsls	r3, r3, #11
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10e      	bne.n	8002d7a <HAL_RCC_OscConfig+0xae>
 8002d5c:	4baa      	ldr	r3, [pc, #680]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4ba9      	ldr	r3, [pc, #676]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d62:	2180      	movs	r1, #128	@ 0x80
 8002d64:	02c9      	lsls	r1, r1, #11
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4ba6      	ldr	r3, [pc, #664]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	0249      	lsls	r1, r1, #9
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e012      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d7a:	4ba3      	ldr	r3, [pc, #652]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4ba2      	ldr	r3, [pc, #648]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d80:	49a2      	ldr	r1, [pc, #648]	@ (800300c <HAL_RCC_OscConfig+0x340>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4ba0      	ldr	r3, [pc, #640]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	025b      	lsls	r3, r3, #9
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4b9c      	ldr	r3, [pc, #624]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b9b      	ldr	r3, [pc, #620]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002d9a:	499d      	ldr	r1, [pc, #628]	@ (8003010 <HAL_RCC_OscConfig+0x344>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe5c 	bl	8001a64 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db0:	e009      	b.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db2:	f7fe fe57 	bl	8001a64 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	@ 0x64
 8002dbe:	d902      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	f000 fb4c 	bl	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc6:	4b90      	ldr	r3, [pc, #576]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d0ef      	beq.n	8002db2 <HAL_RCC_OscConfig+0xe6>
 8002dd2:	e015      	b.n	8002e00 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fe46 	bl	8001a64 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dde:	f7fe fe41 	bl	8001a64 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	@ 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e336      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df0:	4b85      	ldr	r3, [pc, #532]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x112>
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2202      	movs	r2, #2
 8002e06:	4013      	ands	r3, r2
 8002e08:	d100      	bne.n	8002e0c <HAL_RCC_OscConfig+0x140>
 8002e0a:	e099      	b.n	8002f40 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	2220      	movs	r2, #32
 8002e16:	4013      	ands	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e20:	2120      	movs	r1, #32
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	2220      	movs	r2, #32
 8002e2a:	4393      	bics	r3, r2
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d13e      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1ec>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d13b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e40:	4b71      	ldr	r3, [pc, #452]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_RCC_OscConfig+0x188>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e304      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b6c      	ldr	r3, [pc, #432]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a6e      	ldr	r2, [pc, #440]	@ (8003014 <HAL_RCC_OscConfig+0x348>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	021a      	lsls	r2, r3, #8
 8002e64:	4b68      	ldr	r3, [pc, #416]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e6a:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2209      	movs	r2, #9
 8002e70:	4393      	bics	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	4b64      	ldr	r3, [pc, #400]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7c:	f000 fc42 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 8002e80:	0001      	movs	r1, r0
 8002e82:	4b61      	ldr	r3, [pc, #388]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	220f      	movs	r2, #15
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	4a62      	ldr	r2, [pc, #392]	@ (8003018 <HAL_RCC_OscConfig+0x34c>)
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	000a      	movs	r2, r1
 8002e92:	40da      	lsrs	r2, r3
 8002e94:	4b61      	ldr	r3, [pc, #388]	@ (800301c <HAL_RCC_OscConfig+0x350>)
 8002e96:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e98:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <HAL_RCC_OscConfig+0x354>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2513      	movs	r5, #19
 8002e9e:	197c      	adds	r4, r7, r5
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7fe fd99 	bl	80019d8 <HAL_InitTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002eaa:	197b      	adds	r3, r7, r5
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d046      	beq.n	8002f40 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002eb2:	197b      	adds	r3, r7, r5
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	e2d2      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d027      	beq.n	8002f0e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ebe:	4b52      	ldr	r3, [pc, #328]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2209      	movs	r2, #9
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fdc8 	bl	8001a64 <HAL_GetTick>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fdc3 	bl	8001a64 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e2b8      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eec:	4b46      	ldr	r3, [pc, #280]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d0f1      	beq.n	8002eda <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b44      	ldr	r3, [pc, #272]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a46      	ldr	r2, [pc, #280]	@ (8003014 <HAL_RCC_OscConfig+0x348>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	4b40      	ldr	r3, [pc, #256]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	e018      	b.n	8002f40 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	438a      	bics	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fda3 	bl	8001a64 <HAL_GetTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fe fd9e 	bl	8001a64 <HAL_GetTick>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e293      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f36:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d1f1      	bne.n	8002f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d100      	bne.n	8002f4c <HAL_RCC_OscConfig+0x280>
 8002f4a:	e0a2      	b.n	8003092 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d140      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x29e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e279      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6a:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <HAL_RCC_OscConfig+0x358>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f78:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	0a19      	lsrs	r1, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	061a      	lsls	r2, r3, #24
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	3301      	adds	r3, #1
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	0212      	lsls	r2, r2, #8
 8002f9e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fa0:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	400b      	ands	r3, r1
 8002faa:	491b      	ldr	r1, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x34c>)
 8002fac:	5ccb      	ldrb	r3, [r1, r3]
 8002fae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <HAL_RCC_OscConfig+0x350>)
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <HAL_RCC_OscConfig+0x354>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2513      	movs	r5, #19
 8002fba:	197c      	adds	r4, r7, r5
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7fe fd0b 	bl	80019d8 <HAL_InitTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002fc6:	197b      	adds	r3, r7, r5
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d061      	beq.n	8003092 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	e244      	b.n	800345e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d040      	beq.n	800305e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <HAL_RCC_OscConfig+0x33c>)
 8002fe2:	2180      	movs	r1, #128	@ 0x80
 8002fe4:	0049      	lsls	r1, r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe fd3b 	bl	8001a64 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff2:	e019      	b.n	8003028 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fd36 	bl	8001a64 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d912      	bls.n	8003028 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e22b      	b.n	800345e <HAL_RCC_OscConfig+0x792>
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	40021000 	.word	0x40021000
 800300c:	fffeffff 	.word	0xfffeffff
 8003010:	fffbffff 	.word	0xfffbffff
 8003014:	ffffe0ff 	.word	0xffffe0ff
 8003018:	0800601c 	.word	0x0800601c
 800301c:	20000004 	.word	0x20000004
 8003020:	20000008 	.word	0x20000008
 8003024:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003028:	4bca      	ldr	r3, [pc, #808]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4013      	ands	r3, r2
 8003032:	d0df      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003034:	4bc7      	ldr	r3, [pc, #796]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4ac7      	ldr	r2, [pc, #796]	@ (8003358 <HAL_RCC_OscConfig+0x68c>)
 800303a:	4013      	ands	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003042:	4bc4      	ldr	r3, [pc, #784]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003048:	4bc2      	ldr	r3, [pc, #776]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	0a19      	lsrs	r1, r3, #8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	061a      	lsls	r2, r3, #24
 8003056:	4bbf      	ldr	r3, [pc, #764]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	e019      	b.n	8003092 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800305e:	4bbd      	ldr	r3, [pc, #756]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4bbc      	ldr	r3, [pc, #752]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003064:	49bd      	ldr	r1, [pc, #756]	@ (800335c <HAL_RCC_OscConfig+0x690>)
 8003066:	400a      	ands	r2, r1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe fcfb 	bl	8001a64 <HAL_GetTick>
 800306e:	0003      	movs	r3, r0
 8003070:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003074:	f7fe fcf6 	bl	8001a64 <HAL_GetTick>
 8003078:	0002      	movs	r2, r0
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1eb      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003086:	4bb3      	ldr	r3, [pc, #716]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4013      	ands	r3, r2
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2208      	movs	r2, #8
 8003098:	4013      	ands	r3, r2
 800309a:	d036      	beq.n	800310a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d019      	beq.n	80030d8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a4:	4bab      	ldr	r3, [pc, #684]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80030a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030a8:	4baa      	ldr	r3, [pc, #680]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	430a      	orrs	r2, r1
 80030ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fcd8 	bl	8001a64 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ba:	f7fe fcd3 	bl	8001a64 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1c8      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030cc:	4ba1      	ldr	r3, [pc, #644]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d0f1      	beq.n	80030ba <HAL_RCC_OscConfig+0x3ee>
 80030d6:	e018      	b.n	800310a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d8:	4b9e      	ldr	r3, [pc, #632]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80030da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e4:	f7fe fcbe 	bl	8001a64 <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe fcb9 	bl	8001a64 <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1ae      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003100:	4b94      	ldr	r3, [pc, #592]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003104:	2202      	movs	r2, #2
 8003106:	4013      	ands	r3, r2
 8003108:	d1f1      	bne.n	80030ee <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2204      	movs	r2, #4
 8003110:	4013      	ands	r3, r2
 8003112:	d100      	bne.n	8003116 <HAL_RCC_OscConfig+0x44a>
 8003114:	e0ae      	b.n	8003274 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2023      	movs	r0, #35	@ 0x23
 8003118:	183b      	adds	r3, r7, r0
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b8d      	ldr	r3, [pc, #564]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	055b      	lsls	r3, r3, #21
 8003126:	4013      	ands	r3, r2
 8003128:	d109      	bne.n	800313e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b8a      	ldr	r3, [pc, #552]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800312c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312e:	4b89      	ldr	r3, [pc, #548]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	0549      	lsls	r1, r1, #21
 8003134:	430a      	orrs	r2, r1
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003138:	183b      	adds	r3, r7, r0
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b88      	ldr	r3, [pc, #544]	@ (8003360 <HAL_RCC_OscConfig+0x694>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4013      	ands	r3, r2
 8003148:	d11a      	bne.n	8003180 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b85      	ldr	r3, [pc, #532]	@ (8003360 <HAL_RCC_OscConfig+0x694>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b84      	ldr	r3, [pc, #528]	@ (8003360 <HAL_RCC_OscConfig+0x694>)
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	0049      	lsls	r1, r1, #1
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003158:	f7fe fc84 	bl	8001a64 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7fe fc7f 	bl	8001a64 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	@ 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e174      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b7a      	ldr	r3, [pc, #488]	@ (8003360 <HAL_RCC_OscConfig+0x694>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4013      	ands	r3, r2
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	429a      	cmp	r2, r3
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x4d0>
 800318c:	4b71      	ldr	r3, [pc, #452]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800318e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003190:	4b70      	ldr	r3, [pc, #448]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003192:	2180      	movs	r1, #128	@ 0x80
 8003194:	0049      	lsls	r1, r1, #1
 8003196:	430a      	orrs	r2, r1
 8003198:	651a      	str	r2, [r3, #80]	@ 0x50
 800319a:	e031      	b.n	8003200 <HAL_RCC_OscConfig+0x534>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10c      	bne.n	80031be <HAL_RCC_OscConfig+0x4f2>
 80031a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031aa:	496c      	ldr	r1, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x690>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80031b0:	4b68      	ldr	r3, [pc, #416]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031b4:	4b67      	ldr	r3, [pc, #412]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031b6:	496b      	ldr	r1, [pc, #428]	@ (8003364 <HAL_RCC_OscConfig+0x698>)
 80031b8:	400a      	ands	r2, r1
 80031ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80031bc:	e020      	b.n	8003200 <HAL_RCC_OscConfig+0x534>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	23a0      	movs	r3, #160	@ 0xa0
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10e      	bne.n	80031e8 <HAL_RCC_OscConfig+0x51c>
 80031ca:	4b62      	ldr	r3, [pc, #392]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ce:	4b61      	ldr	r3, [pc, #388]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	00c9      	lsls	r1, r1, #3
 80031d4:	430a      	orrs	r2, r1
 80031d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031dc:	4b5d      	ldr	r3, [pc, #372]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0049      	lsls	r1, r1, #1
 80031e2:	430a      	orrs	r2, r1
 80031e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x534>
 80031e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ec:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031ee:	495b      	ldr	r1, [pc, #364]	@ (800335c <HAL_RCC_OscConfig+0x690>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80031f4:	4b57      	ldr	r3, [pc, #348]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031f8:	4b56      	ldr	r3, [pc, #344]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80031fa:	495a      	ldr	r1, [pc, #360]	@ (8003364 <HAL_RCC_OscConfig+0x698>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe fc2c 	bl	8001a64 <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003210:	e009      	b.n	8003226 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe fc27 	bl	8001a64 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_OscConfig+0x69c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e11b      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003226:	4b4b      	ldr	r3, [pc, #300]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	d0ef      	beq.n	8003212 <HAL_RCC_OscConfig+0x546>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fe fc16 	bl	8001a64 <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800323c:	e009      	b.n	8003252 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe fc11 	bl	8001a64 <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	4a47      	ldr	r2, [pc, #284]	@ (8003368 <HAL_RCC_OscConfig+0x69c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e105      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003252:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d1ef      	bne.n	800323e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800325e:	2323      	movs	r3, #35	@ 0x23
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b3a      	ldr	r3, [pc, #232]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800326a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800326e:	493f      	ldr	r1, [pc, #252]	@ (800336c <HAL_RCC_OscConfig+0x6a0>)
 8003270:	400a      	ands	r2, r1
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2220      	movs	r2, #32
 800327a:	4013      	ands	r3, r2
 800327c:	d049      	beq.n	8003312 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d026      	beq.n	80032d4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003286:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	4b30      	ldr	r3, [pc, #192]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003296:	4b2f      	ldr	r3, [pc, #188]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003298:	2101      	movs	r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34
 800329e:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <HAL_RCC_OscConfig+0x6a4>)
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	4b33      	ldr	r3, [pc, #204]	@ (8003370 <HAL_RCC_OscConfig+0x6a4>)
 80032a4:	2180      	movs	r1, #128	@ 0x80
 80032a6:	0189      	lsls	r1, r1, #6
 80032a8:	430a      	orrs	r2, r1
 80032aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fbda 	bl	8001a64 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b6:	f7fe fbd5 	bl	8001a64 <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0ca      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032c8:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d0f1      	beq.n	80032b6 <HAL_RCC_OscConfig+0x5ea>
 80032d2:	e01e      	b.n	8003312 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80032d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <HAL_RCC_OscConfig+0x6a4>)
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <HAL_RCC_OscConfig+0x6a4>)
 80032e6:	4923      	ldr	r1, [pc, #140]	@ (8003374 <HAL_RCC_OscConfig+0x6a8>)
 80032e8:	400a      	ands	r2, r1
 80032ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fbba 	bl	8001a64 <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f6:	f7fe fbb5 	bl	8001a64 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0aa      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003308:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2202      	movs	r2, #2
 800330e:	4013      	ands	r3, r2
 8003310:	d1f1      	bne.n	80032f6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d100      	bne.n	800331c <HAL_RCC_OscConfig+0x650>
 800331a:	e09f      	b.n	800345c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d100      	bne.n	8003324 <HAL_RCC_OscConfig+0x658>
 8003322:	e078      	b.n	8003416 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	2b02      	cmp	r3, #2
 800332a:	d159      	bne.n	80033e0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <HAL_RCC_OscConfig+0x688>)
 8003332:	4911      	ldr	r1, [pc, #68]	@ (8003378 <HAL_RCC_OscConfig+0x6ac>)
 8003334:	400a      	ands	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fb94 	bl	8001a64 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe fb8f 	bl	8001a64 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d915      	bls.n	800337c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e084      	b.n	800345e <HAL_RCC_OscConfig+0x792>
 8003354:	40021000 	.word	0x40021000
 8003358:	ffff1fff 	.word	0xffff1fff
 800335c:	fffffeff 	.word	0xfffffeff
 8003360:	40007000 	.word	0x40007000
 8003364:	fffffbff 	.word	0xfffffbff
 8003368:	00001388 	.word	0x00001388
 800336c:	efffffff 	.word	0xefffffff
 8003370:	40010000 	.word	0x40010000
 8003374:	ffffdfff 	.word	0xffffdfff
 8003378:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800337c:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	049b      	lsls	r3, r3, #18
 8003384:	4013      	ands	r3, r2
 8003386:	d1dc      	bne.n	8003342 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003388:	4b37      	ldr	r3, [pc, #220]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a37      	ldr	r2, [pc, #220]	@ (800346c <HAL_RCC_OscConfig+0x7a0>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a0:	431a      	orrs	r2, r3
 80033a2:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 80033a4:	430a      	orrs	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 80033ae:	2180      	movs	r1, #128	@ 0x80
 80033b0:	0449      	lsls	r1, r1, #17
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fe fb55 	bl	8001a64 <HAL_GetTick>
 80033ba:	0003      	movs	r3, r0
 80033bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe fb50 	bl	8001a64 <HAL_GetTick>
 80033c4:	0002      	movs	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e045      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033d2:	4b25      	ldr	r3, [pc, #148]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	049b      	lsls	r3, r3, #18
 80033da:	4013      	ands	r3, r2
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x6f4>
 80033de:	e03d      	b.n	800345c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b21      	ldr	r3, [pc, #132]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 80033e6:	4922      	ldr	r1, [pc, #136]	@ (8003470 <HAL_RCC_OscConfig+0x7a4>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fe fb3a 	bl	8001a64 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fe fb35 	bl	8001a64 <HAL_GetTick>
 80033fa:	0002      	movs	r2, r0
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e02a      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003408:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	049b      	lsls	r3, r3, #18
 8003410:	4013      	ands	r3, r2
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x72a>
 8003414:	e022      	b.n	800345c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01d      	b.n	800345e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003422:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_RCC_OscConfig+0x79c>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	025b      	lsls	r3, r3, #9
 800342e:	401a      	ands	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d10f      	bne.n	8003458 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	23f0      	movs	r3, #240	@ 0xf0
 800343c:	039b      	lsls	r3, r3, #14
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d107      	bne.n	8003458 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	23c0      	movs	r3, #192	@ 0xc0
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b00a      	add	sp, #40	@ 0x28
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	40021000 	.word	0x40021000
 800346c:	ff02ffff 	.word	0xff02ffff
 8003470:	feffffff 	.word	0xfeffffff

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e128      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b96      	ldr	r3, [pc, #600]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	4013      	ands	r3, r2
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d91e      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b93      	ldr	r3, [pc, #588]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4393      	bics	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	4b90      	ldr	r3, [pc, #576]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034a8:	f7fe fadc 	bl	8001a64 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b0:	e009      	b.n	80034c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b2:	f7fe fad7 	bl	8001a64 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	4a8a      	ldr	r2, [pc, #552]	@ (80036e8 <HAL_RCC_ClockConfig+0x274>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e109      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b87      	ldr	r3, [pc, #540]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1ee      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2202      	movs	r2, #2
 80034da:	4013      	ands	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034de:	4b83      	ldr	r3, [pc, #524]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	22f0      	movs	r2, #240	@ 0xf0
 80034e4:	4393      	bics	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	4013      	ands	r3, r2
 80034fa:	d100      	bne.n	80034fe <HAL_RCC_ClockConfig+0x8a>
 80034fc:	e089      	b.n	8003612 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003506:	4b79      	ldr	r3, [pc, #484]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	4013      	ands	r3, r2
 8003510:	d120      	bne.n	8003554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0e1      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351e:	4b73      	ldr	r3, [pc, #460]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	049b      	lsls	r3, r3, #18
 8003526:	4013      	ands	r3, r2
 8003528:	d114      	bne.n	8003554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0d5      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d106      	bne.n	8003544 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003536:	4b6d      	ldr	r3, [pc, #436]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d109      	bne.n	8003554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0ca      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003544:	4b69      	ldr	r3, [pc, #420]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2380      	movs	r3, #128	@ 0x80
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4013      	ands	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0c2      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003554:	4b65      	ldr	r3, [pc, #404]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2203      	movs	r2, #3
 800355a:	4393      	bics	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4b62      	ldr	r3, [pc, #392]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fe fa7c 	bl	8001a64 <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d111      	bne.n	800359c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003578:	e009      	b.n	800358e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357a:	f7fe fa73 	bl	8001a64 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	4a58      	ldr	r2, [pc, #352]	@ (80036e8 <HAL_RCC_ClockConfig+0x274>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0a5      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800358e:	4b57      	ldr	r3, [pc, #348]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	220c      	movs	r2, #12
 8003594:	4013      	ands	r3, r2
 8003596:	2b08      	cmp	r3, #8
 8003598:	d1ef      	bne.n	800357a <HAL_RCC_ClockConfig+0x106>
 800359a:	e03a      	b.n	8003612 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d111      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a4:	e009      	b.n	80035ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	f7fe fa5d 	bl	8001a64 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	4a4d      	ldr	r2, [pc, #308]	@ (80036e8 <HAL_RCC_ClockConfig+0x274>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e08f      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ba:	4b4c      	ldr	r3, [pc, #304]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	220c      	movs	r2, #12
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d1ef      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x132>
 80035c6:	e024      	b.n	8003612 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d11b      	bne.n	8003608 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d0:	e009      	b.n	80035e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d2:	f7fe fa47 	bl	8001a64 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	4a42      	ldr	r2, [pc, #264]	@ (80036e8 <HAL_RCC_ClockConfig+0x274>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e079      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e6:	4b41      	ldr	r3, [pc, #260]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	220c      	movs	r2, #12
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d1ef      	bne.n	80035d2 <HAL_RCC_ClockConfig+0x15e>
 80035f2:	e00e      	b.n	8003612 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fa36 	bl	8001a64 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	4a3a      	ldr	r2, [pc, #232]	@ (80036e8 <HAL_RCC_ClockConfig+0x274>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e068      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003608:	4b38      	ldr	r3, [pc, #224]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	220c      	movs	r2, #12
 800360e:	4013      	ands	r3, r2
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003612:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	4013      	ands	r3, r2
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d21e      	bcs.n	800365e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003620:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	4393      	bics	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	4b2e      	ldr	r3, [pc, #184]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003632:	f7fe fa17 	bl	8001a64 <HAL_GetTick>
 8003636:	0003      	movs	r3, r0
 8003638:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	e009      	b.n	8003650 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fe fa12 	bl	8001a64 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <HAL_RCC_ClockConfig+0x274>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e044      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003650:	4b24      	ldr	r3, [pc, #144]	@ (80036e4 <HAL_RCC_ClockConfig+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2201      	movs	r2, #1
 8003656:	4013      	ands	r3, r2
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d1ee      	bne.n	800363c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2204      	movs	r2, #4
 8003664:	4013      	ands	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003668:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a20      	ldr	r2, [pc, #128]	@ (80036f0 <HAL_RCC_ClockConfig+0x27c>)
 800366e:	4013      	ands	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2208      	movs	r2, #8
 8003682:	4013      	ands	r3, r2
 8003684:	d00a      	beq.n	800369c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_RCC_ClockConfig+0x280>)
 800368c:	4013      	ands	r3, r2
 800368e:	0019      	movs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00da      	lsls	r2, r3, #3
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 8003698:	430a      	orrs	r2, r1
 800369a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369c:	f000 f832 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036a0:	0001      	movs	r1, r0
 80036a2:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_RCC_ClockConfig+0x278>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	220f      	movs	r2, #15
 80036aa:	4013      	ands	r3, r2
 80036ac:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <HAL_RCC_ClockConfig+0x284>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	000a      	movs	r2, r1
 80036b2:	40da      	lsrs	r2, r3
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_RCC_ClockConfig+0x288>)
 80036b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <HAL_RCC_ClockConfig+0x28c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	250b      	movs	r5, #11
 80036be:	197c      	adds	r4, r7, r5
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fe f989 	bl	80019d8 <HAL_InitTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80036ca:	197b      	adds	r3, r7, r5
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80036d2:	197b      	adds	r3, r7, r5
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	e000      	b.n	80036da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bdb0      	pop	{r4, r5, r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	40022000 	.word	0x40022000
 80036e8:	00001388 	.word	0x00001388
 80036ec:	40021000 	.word	0x40021000
 80036f0:	fffff8ff 	.word	0xfffff8ff
 80036f4:	ffffc7ff 	.word	0xffffc7ff
 80036f8:	0800601c 	.word	0x0800601c
 80036fc:	20000004 	.word	0x20000004
 8003700:	20000008 	.word	0x20000008

08003704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800370a:	4b3c      	ldr	r3, [pc, #240]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	220c      	movs	r2, #12
 8003714:	4013      	ands	r3, r2
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d013      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x3e>
 800371a:	d85c      	bhi.n	80037d6 <HAL_RCC_GetSysClockFreq+0xd2>
 800371c:	2b04      	cmp	r3, #4
 800371e:	d002      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x22>
 8003720:	2b08      	cmp	r3, #8
 8003722:	d00b      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x38>
 8003724:	e057      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003726:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	4013      	ands	r3, r2
 800372e:	d002      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003730:	4b33      	ldr	r3, [pc, #204]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003732:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003734:	e05d      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003736:	4b33      	ldr	r3, [pc, #204]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x100>)
 8003738:	613b      	str	r3, [r7, #16]
      break;
 800373a:	e05a      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800373c:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x104>)
 800373e:	613b      	str	r3, [r7, #16]
      break;
 8003740:	e057      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0c9b      	lsrs	r3, r3, #18
 8003746:	220f      	movs	r2, #15
 8003748:	4013      	ands	r3, r2
 800374a:	4a30      	ldr	r2, [pc, #192]	@ (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	0d9b      	lsrs	r3, r3, #22
 8003754:	2203      	movs	r2, #3
 8003756:	4013      	ands	r3, r2
 8003758:	3301      	adds	r3, #1
 800375a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800375c:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	2380      	movs	r3, #128	@ 0x80
 8003762:	025b      	lsls	r3, r3, #9
 8003764:	4013      	ands	r3, r2
 8003766:	d00f      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	000a      	movs	r2, r1
 800376c:	0152      	lsls	r2, r2, #5
 800376e:	1a52      	subs	r2, r2, r1
 8003770:	0193      	lsls	r3, r2, #6
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	185b      	adds	r3, r3, r1
 8003778:	025b      	lsls	r3, r3, #9
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f7fc fcc3 	bl	8000108 <__udivsi3>
 8003782:	0003      	movs	r3, r0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e023      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003788:	4b1c      	ldr	r3, [pc, #112]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2210      	movs	r2, #16
 800378e:	4013      	ands	r3, r2
 8003790:	d00f      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	000a      	movs	r2, r1
 8003796:	0152      	lsls	r2, r2, #5
 8003798:	1a52      	subs	r2, r2, r1
 800379a:	0193      	lsls	r3, r2, #6
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	185b      	adds	r3, r3, r1
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fc fcae 	bl	8000108 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e00e      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	000a      	movs	r2, r1
 80037b6:	0152      	lsls	r2, r2, #5
 80037b8:	1a52      	subs	r2, r2, r1
 80037ba:	0193      	lsls	r3, r2, #6
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	185b      	adds	r3, r3, r1
 80037c2:	029b      	lsls	r3, r3, #10
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7fc fc9e 	bl	8000108 <__udivsi3>
 80037cc:	0003      	movs	r3, r0
 80037ce:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	613b      	str	r3, [r7, #16]
      break;
 80037d4:	e00d      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	2207      	movs	r2, #7
 80037de:	4013      	ands	r3, r2
 80037e0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	2280      	movs	r2, #128	@ 0x80
 80037e8:	0212      	lsls	r2, r2, #8
 80037ea:	409a      	lsls	r2, r3
 80037ec:	0013      	movs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
      break;
 80037f0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037f2:	693b      	ldr	r3, [r7, #16]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	003d0900 	.word	0x003d0900
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200
 800380c:	08006034 	.word	0x08006034

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff2 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800382c:	0001      	movs	r1, r0
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	2207      	movs	r2, #7
 8003836:	4013      	ands	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_RCC_GetPCLK1Freq+0x28>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	40d9      	lsrs	r1, r3
 800383e:	000b      	movs	r3, r1
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	40021000 	.word	0x40021000
 800384c:	0800602c 	.word	0x0800602c

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	0001      	movs	r1, r0
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	0adb      	lsrs	r3, r3, #11
 8003860:	2207      	movs	r2, #7
 8003862:	4013      	ands	r3, r2
 8003864:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	40d9      	lsrs	r1, r3
 800386a:	000b      	movs	r3, r1
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	40021000 	.word	0x40021000
 8003878:	0800602c 	.word	0x0800602c

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003884:	2317      	movs	r3, #23
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2220      	movs	r2, #32
 8003892:	4013      	ands	r3, r2
 8003894:	d106      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d100      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80038a2:	e104      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a4:	4bb9      	ldr	r3, [pc, #740]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	055b      	lsls	r3, r3, #21
 80038ac:	4013      	ands	r3, r2
 80038ae:	d10a      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4bb6      	ldr	r3, [pc, #728]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b4:	4bb5      	ldr	r3, [pc, #724]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038b6:	2180      	movs	r1, #128	@ 0x80
 80038b8:	0549      	lsls	r1, r1, #21
 80038ba:	430a      	orrs	r2, r1
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80038be:	2317      	movs	r3, #23
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4bb2      	ldr	r3, [pc, #712]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4013      	ands	r3, r2
 80038d0:	d11a      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d2:	4baf      	ldr	r3, [pc, #700]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4bae      	ldr	r3, [pc, #696]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038d8:	2180      	movs	r1, #128	@ 0x80
 80038da:	0049      	lsls	r1, r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e0:	f7fe f8c0 	bl	8001a64 <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fe f8bb 	bl	8001a64 <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	@ 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e143      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	4ba4      	ldr	r3, [pc, #656]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	@ 0x80
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d0f0      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003908:	4ba0      	ldr	r3, [pc, #640]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	23c0      	movs	r3, #192	@ 0xc0
 800390e:	039b      	lsls	r3, r3, #14
 8003910:	4013      	ands	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	23c0      	movs	r3, #192	@ 0xc0
 800391a:	039b      	lsls	r3, r3, #14
 800391c:	4013      	ands	r3, r2
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d107      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	23c0      	movs	r3, #192	@ 0xc0
 800392a:	039b      	lsls	r3, r3, #14
 800392c:	4013      	ands	r3, r2
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d013      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	23c0      	movs	r3, #192	@ 0xc0
 800393a:	029b      	lsls	r3, r3, #10
 800393c:	401a      	ands	r2, r3
 800393e:	23c0      	movs	r3, #192	@ 0xc0
 8003940:	029b      	lsls	r3, r3, #10
 8003942:	429a      	cmp	r2, r3
 8003944:	d10a      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b91      	ldr	r3, [pc, #580]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	@ 0x80
 800394c:	029b      	lsls	r3, r3, #10
 800394e:	401a      	ands	r2, r3
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	429a      	cmp	r2, r3
 8003956:	d101      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e113      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800395c:	4b8b      	ldr	r3, [pc, #556]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800395e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003960:	23c0      	movs	r3, #192	@ 0xc0
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	4013      	ands	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d049      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	23c0      	movs	r3, #192	@ 0xc0
 8003974:	029b      	lsls	r3, r3, #10
 8003976:	4013      	ands	r3, r2
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	429a      	cmp	r2, r3
 800397c:	d004      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	4013      	ands	r3, r2
 8003986:	d10d      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	23c0      	movs	r3, #192	@ 0xc0
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	4013      	ands	r3, r2
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	429a      	cmp	r2, r3
 8003996:	d034      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	@ 0x80
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4013      	ands	r3, r2
 80039a2:	d02e      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039a4:	4b79      	ldr	r3, [pc, #484]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ae:	4b77      	ldr	r3, [pc, #476]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039b2:	4b76      	ldr	r3, [pc, #472]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039b4:	2180      	movs	r1, #128	@ 0x80
 80039b6:	0309      	lsls	r1, r1, #12
 80039b8:	430a      	orrs	r2, r1
 80039ba:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039bc:	4b73      	ldr	r3, [pc, #460]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039c0:	4b72      	ldr	r3, [pc, #456]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039c2:	4975      	ldr	r1, [pc, #468]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80039c8:	4b70      	ldr	r3, [pc, #448]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	2380      	movs	r3, #128	@ 0x80
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4013      	ands	r3, r2
 80039d6:	d014      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe f844 	bl	8001a64 <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039e0:	e009      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe f83f 	bl	8001a64 <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	4a6b      	ldr	r2, [pc, #428]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0c6      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f6:	4b65      	ldr	r3, [pc, #404]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4013      	ands	r3, r2
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	23c0      	movs	r3, #192	@ 0xc0
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	401a      	ands	r2, r3
 8003a18:	23c0      	movs	r3, #192	@ 0xc0
 8003a1a:	029b      	lsls	r3, r3, #10
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003a20:	4b5a      	ldr	r3, [pc, #360]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	23c0      	movs	r3, #192	@ 0xc0
 8003a30:	039b      	lsls	r3, r3, #14
 8003a32:	401a      	ands	r2, r3
 8003a34:	4b55      	ldr	r3, [pc, #340]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	4b54      	ldr	r3, [pc, #336]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a3c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	23c0      	movs	r3, #192	@ 0xc0
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	401a      	ands	r2, r3
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2220      	movs	r2, #32
 8003a54:	4013      	ands	r3, r2
 8003a56:	d01f      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	23c0      	movs	r3, #192	@ 0xc0
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	401a      	ands	r2, r3
 8003a62:	23c0      	movs	r3, #192	@ 0xc0
 8003a64:	029b      	lsls	r3, r3, #10
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003a6a:	4b48      	ldr	r3, [pc, #288]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	23c0      	movs	r3, #192	@ 0xc0
 8003a7a:	039b      	lsls	r3, r3, #14
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	4b43      	ldr	r3, [pc, #268]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a86:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	23c0      	movs	r3, #192	@ 0xc0
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	401a      	ands	r2, r3
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a94:	430a      	orrs	r2, r1
 8003a96:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a98:	2317      	movs	r3, #23
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d105      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aa6:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aa8:	493e      	ldr	r1, [pc, #248]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003aaa:	400a      	ands	r2, r1
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	2203      	movs	r2, #3
 8003abe:	4393      	bics	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	220c      	movs	r2, #12
 8003adc:	4393      	bics	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b12:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	4a25      	ldr	r2, [pc, #148]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b32:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	4a17      	ldr	r2, [pc, #92]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2240      	movs	r2, #64	@ 0x40
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b50:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2280      	movs	r2, #128	@ 0x80
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b6e:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b72:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	4b03      	ldr	r3, [pc, #12]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b006      	add	sp, #24
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40007000 	.word	0x40007000
 8003b94:	fffcffff 	.word	0xfffcffff
 8003b98:	fff7ffff 	.word	0xfff7ffff
 8003b9c:	00001388 	.word	0x00001388
 8003ba0:	ffcfffff 	.word	0xffcfffff
 8003ba4:	efffffff 	.word	0xefffffff
 8003ba8:	fffff3ff 	.word	0xfffff3ff
 8003bac:	ffffcfff 	.word	0xffffcfff
 8003bb0:	fbffffff 	.word	0xfbffffff
 8003bb4:	fff3ffff 	.word	0xfff3ffff

08003bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e032      	b.n	8003c30 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2239      	movs	r2, #57	@ 0x39
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2238      	movs	r2, #56	@ 0x38
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7fd fc4b 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2239      	movs	r2, #57	@ 0x39
 8003bea:	2102      	movs	r1, #2
 8003bec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	0010      	movs	r0, r2
 8003bfa:	f000 fbcf 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	223e      	movs	r2, #62	@ 0x3e
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	223a      	movs	r2, #58	@ 0x3a
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223b      	movs	r2, #59	@ 0x3b
 8003c12:	2101      	movs	r1, #1
 8003c14:	5499      	strb	r1, [r3, r2]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	223c      	movs	r2, #60	@ 0x3c
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	223d      	movs	r2, #61	@ 0x3d
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2239      	movs	r2, #57	@ 0x39
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2239      	movs	r2, #57	@ 0x39
 8003c44:	5c9b      	ldrb	r3, [r3, r2]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e03b      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2239      	movs	r2, #57	@ 0x39
 8003c54:	2102      	movs	r1, #2
 8003c56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIM_Base_Start_IT+0x5a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0x98>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIM_Base_Start_IT+0x5a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIM_Base_Start_IT+0x5a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a12      	ldr	r2, [pc, #72]	@ (8003cd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d111      	bne.n	8003cb6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2207      	movs	r2, #7
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b06      	cmp	r3, #6
 8003ca2:	d010      	beq.n	8003cc6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	e007      	b.n	8003cc6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40010800 	.word	0x40010800
 8003cd8:	40011400 	.word	0x40011400

08003cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e032      	b.n	8003d54 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2239      	movs	r2, #57	@ 0x39
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2238      	movs	r2, #56	@ 0x38
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 f829 	bl	8003d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2239      	movs	r2, #57	@ 0x39
 8003d0e:	2102      	movs	r1, #2
 8003d10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	0010      	movs	r0, r2
 8003d1e:	f000 fb3d 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223e      	movs	r2, #62	@ 0x3e
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	223a      	movs	r2, #58	@ 0x3a
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	223b      	movs	r2, #59	@ 0x3b
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223c      	movs	r2, #60	@ 0x3c
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223d      	movs	r2, #61	@ 0x3d
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2239      	movs	r2, #57	@ 0x39
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d108      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x22>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	223a      	movs	r2, #58	@ 0x3a
 8003d80:	5c9b      	ldrb	r3, [r3, r2]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	4193      	sbcs	r3, r2
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e01f      	b.n	8003dce <HAL_TIM_PWM_Start+0x62>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d108      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x3a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	223b      	movs	r2, #59	@ 0x3b
 8003d98:	5c9b      	ldrb	r3, [r3, r2]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	4193      	sbcs	r3, r2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e013      	b.n	8003dce <HAL_TIM_PWM_Start+0x62>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d108      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x52>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	223c      	movs	r2, #60	@ 0x3c
 8003db0:	5c9b      	ldrb	r3, [r3, r2]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	1e5a      	subs	r2, r3, #1
 8003db8:	4193      	sbcs	r3, r2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e007      	b.n	8003dce <HAL_TIM_PWM_Start+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	223d      	movs	r2, #61	@ 0x3d
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	4193      	sbcs	r3, r2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e052      	b.n	8003e7c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x7a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	223a      	movs	r2, #58	@ 0x3a
 8003de0:	2102      	movs	r1, #2
 8003de2:	5499      	strb	r1, [r3, r2]
 8003de4:	e013      	b.n	8003e0e <HAL_TIM_PWM_Start+0xa2>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x8a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	223b      	movs	r2, #59	@ 0x3b
 8003df0:	2102      	movs	r1, #2
 8003df2:	5499      	strb	r1, [r3, r2]
 8003df4:	e00b      	b.n	8003e0e <HAL_TIM_PWM_Start+0xa2>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x9a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	223c      	movs	r2, #60	@ 0x3c
 8003e00:	2102      	movs	r1, #2
 8003e02:	5499      	strb	r1, [r3, r2]
 8003e04:	e003      	b.n	8003e0e <HAL_TIM_PWM_Start+0xa2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	223d      	movs	r2, #61	@ 0x3d
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fcc2 	bl	80047a0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	05db      	lsls	r3, r3, #23
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d00e      	beq.n	8003e46 <HAL_TIM_PWM_Start+0xda>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <HAL_TIM_PWM_Start+0x118>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIM_PWM_Start+0xda>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a14      	ldr	r2, [pc, #80]	@ (8003e88 <HAL_TIM_PWM_Start+0x11c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_PWM_Start+0xda>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a12      	ldr	r2, [pc, #72]	@ (8003e8c <HAL_TIM_PWM_Start+0x120>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d111      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d010      	beq.n	8003e7a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2101      	movs	r1, #1
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	e007      	b.n	8003e7a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b004      	add	sp, #16
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40010800 	.word	0x40010800
 8003e8c:	40011400 	.word	0x40011400

08003e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	4013      	ands	r3, r2
 8003eae:	d021      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4252      	negs	r2, r2
 8003ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fa48 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8003edc:	e007      	b.n	8003eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 fa3b 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 fa47 	bl	800437c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4013      	ands	r3, r2
 8003f02:	d01e      	beq.n	8003f42 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2205      	movs	r2, #5
 8003f0a:	4252      	negs	r2, r2
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	23c0      	movs	r3, #192	@ 0xc0
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 fa21 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8003f2a:	e007      	b.n	8003f3c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 fa14 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fa20 	bl	800437c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2208      	movs	r2, #8
 8003f46:	4013      	ands	r3, r2
 8003f48:	d021      	beq.n	8003f8e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2209      	movs	r2, #9
 8003f58:	4252      	negs	r2, r2
 8003f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 f9fb 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8003f76:	e007      	b.n	8003f88 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 f9ee 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 f9fa 	bl	800437c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d01e      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2211      	movs	r2, #17
 8003fa4:	4252      	negs	r2, r2
 8003fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2208      	movs	r2, #8
 8003fac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	23c0      	movs	r3, #192	@ 0xc0
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 f9d4 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e007      	b.n	8003fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 f9c7 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 f9d3 	bl	800437c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d00c      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d008      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	4252      	negs	r2, r2
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fc fc09 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2240      	movs	r2, #64	@ 0x40
 8004002:	4013      	ands	r3, r2
 8004004:	d00c      	beq.n	8004020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2240      	movs	r2, #64	@ 0x40
 800400a:	4013      	ands	r3, r2
 800400c:	d008      	beq.n	8004020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2241      	movs	r2, #65	@ 0x41
 8004014:	4252      	negs	r2, r2
 8004016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0018      	movs	r0, r3
 800401c:	f000 f9b6 	bl	800438c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	2317      	movs	r3, #23
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2238      	movs	r2, #56	@ 0x38
 8004040:	5c9b      	ldrb	r3, [r3, r2]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004046:	2302      	movs	r3, #2
 8004048:	e0ad      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2238      	movs	r2, #56	@ 0x38
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d100      	bne.n	800405a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004058:	e076      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x120>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d900      	bls.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004060:	e095      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d04e      	beq.n	8004106 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d900      	bls.n	8004070 <HAL_TIM_PWM_ConfigChannel+0x48>
 800406e:	e08e      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d021      	beq.n	80040c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800407c:	e087      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f000 f9ec 	bl	8004464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2108      	movs	r1, #8
 8004098:	430a      	orrs	r2, r1
 800409a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2104      	movs	r1, #4
 80040a8:	438a      	bics	r2, r1
 80040aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	619a      	str	r2, [r3, #24]
      break;
 80040be:	e06b      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	0011      	movs	r1, r2
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 fa07 	bl	80044dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2180      	movs	r1, #128	@ 0x80
 80040da:	0109      	lsls	r1, r1, #4
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4931      	ldr	r1, [pc, #196]	@ (80041b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6999      	ldr	r1, [r3, #24]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	021a      	lsls	r2, r3, #8
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	619a      	str	r2, [r3, #24]
      break;
 8004104:	e048      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fa26 	bl	8004560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2108      	movs	r1, #8
 8004120:	430a      	orrs	r2, r1
 8004122:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2104      	movs	r1, #4
 8004130:	438a      	bics	r2, r1
 8004132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69d9      	ldr	r1, [r3, #28]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      break;
 8004146:	e027      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f000 fa45 	bl	80045e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2180      	movs	r1, #128	@ 0x80
 8004162:	0109      	lsls	r1, r1, #4
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	490f      	ldr	r1, [pc, #60]	@ (80041b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004174:	400a      	ands	r2, r1
 8004176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69d9      	ldr	r1, [r3, #28]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	61da      	str	r2, [r3, #28]
      break;
 800418c:	e004      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800418e:	2317      	movs	r3, #23
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2238      	movs	r2, #56	@ 0x38
 800419c:	2100      	movs	r1, #0
 800419e:	5499      	strb	r1, [r3, r2]

  return status;
 80041a0:	2317      	movs	r3, #23
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b006      	add	sp, #24
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	fffffbff 	.word	0xfffffbff

080041b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2238      	movs	r2, #56	@ 0x38
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_ConfigClockSource+0x20>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0bc      	b.n	800434e <HAL_TIM_ConfigClockSource+0x19a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2238      	movs	r2, #56	@ 0x38
 80041d8:	2101      	movs	r1, #1
 80041da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2239      	movs	r2, #57	@ 0x39
 80041e0:	2102      	movs	r1, #2
 80041e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2277      	movs	r2, #119	@ 0x77
 80041f0:	4393      	bics	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a58      	ldr	r2, [pc, #352]	@ (8004358 <HAL_TIM_ConfigClockSource+0x1a4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	0192      	lsls	r2, r2, #6
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xde>
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	0192      	lsls	r2, r2, #6
 8004214:	4293      	cmp	r3, r2
 8004216:	d900      	bls.n	800421a <HAL_TIM_ConfigClockSource+0x66>
 8004218:	e088      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	0152      	lsls	r2, r2, #5
 800421e:	4293      	cmp	r3, r2
 8004220:	d100      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x70>
 8004222:	e088      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x182>
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	0152      	lsls	r2, r2, #5
 8004228:	4293      	cmp	r3, r2
 800422a:	d900      	bls.n	800422e <HAL_TIM_ConfigClockSource+0x7a>
 800422c:	e07e      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800422e:	2b70      	cmp	r3, #112	@ 0x70
 8004230:	d018      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xb0>
 8004232:	d900      	bls.n	8004236 <HAL_TIM_ConfigClockSource+0x82>
 8004234:	e07a      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004236:	2b60      	cmp	r3, #96	@ 0x60
 8004238:	d04f      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x126>
 800423a:	d900      	bls.n	800423e <HAL_TIM_ConfigClockSource+0x8a>
 800423c:	e076      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800423e:	2b50      	cmp	r3, #80	@ 0x50
 8004240:	d03b      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x106>
 8004242:	d900      	bls.n	8004246 <HAL_TIM_ConfigClockSource+0x92>
 8004244:	e072      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	d057      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x146>
 800424a:	d900      	bls.n	800424e <HAL_TIM_ConfigClockSource+0x9a>
 800424c:	e06e      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800424e:	2b30      	cmp	r3, #48	@ 0x30
 8004250:	d063      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004252:	d86b      	bhi.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d060      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004258:	d868      	bhi.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d05d      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 800425e:	2b10      	cmp	r3, #16
 8004260:	d05b      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004262:	e063      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004274:	f000 fa74 	bl	8004760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2277      	movs	r2, #119	@ 0x77
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]
      break;
 8004290:	e052      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a2:	f000 fa5d 	bl	8004760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2180      	movs	r1, #128	@ 0x80
 80042b2:	01c9      	lsls	r1, r1, #7
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
      break;
 80042b8:	e03e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c6:	001a      	movs	r2, r3
 80042c8:	f000 f9d0 	bl	800466c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2150      	movs	r1, #80	@ 0x50
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 fa2a 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 80042d8:	e02e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e6:	001a      	movs	r2, r3
 80042e8:	f000 f9ee 	bl	80046c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2160      	movs	r1, #96	@ 0x60
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 fa1a 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 80042f8:	e01e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	001a      	movs	r2, r3
 8004308:	f000 f9b0 	bl	800466c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2140      	movs	r1, #64	@ 0x40
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fa0a 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 8004318:	e00e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0019      	movs	r1, r3
 8004324:	0010      	movs	r0, r2
 8004326:	f000 fa01 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 800432a:	e005      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800432c:	230f      	movs	r3, #15
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
      break;
 8004334:	e000      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004336:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2239      	movs	r2, #57	@ 0x39
 800433c:	2101      	movs	r1, #1
 800433e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2238      	movs	r2, #56	@ 0x38
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

  return status;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	ffff00ff 	.word	0xffff00ff

0800435c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004364:	46c0      	nop			@ (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004384:	46c0      	nop			@ (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004394:	46c0      	nop			@ (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}

0800439c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	2380      	movs	r3, #128	@ 0x80
 80043b0:	05db      	lsls	r3, r3, #23
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d00b      	beq.n	80043ce <TIM_Base_SetConfig+0x32>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a26      	ldr	r2, [pc, #152]	@ (8004454 <TIM_Base_SetConfig+0xb8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d007      	beq.n	80043ce <TIM_Base_SetConfig+0x32>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a25      	ldr	r2, [pc, #148]	@ (8004458 <TIM_Base_SetConfig+0xbc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_Base_SetConfig+0x32>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a24      	ldr	r2, [pc, #144]	@ (800445c <TIM_Base_SetConfig+0xc0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d108      	bne.n	80043e0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2270      	movs	r2, #112	@ 0x70
 80043d2:	4393      	bics	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	05db      	lsls	r3, r3, #23
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d00b      	beq.n	8004402 <TIM_Base_SetConfig+0x66>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a19      	ldr	r2, [pc, #100]	@ (8004454 <TIM_Base_SetConfig+0xb8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0x66>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a18      	ldr	r2, [pc, #96]	@ (8004458 <TIM_Base_SetConfig+0xbc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0x66>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a17      	ldr	r2, [pc, #92]	@ (800445c <TIM_Base_SetConfig+0xc0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a16      	ldr	r2, [pc, #88]	@ (8004460 <TIM_Base_SetConfig+0xc4>)
 8004406:	4013      	ands	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2280      	movs	r2, #128	@ 0x80
 8004418:	4393      	bics	r3, r2
 800441a:	001a      	movs	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2204      	movs	r2, #4
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b004      	add	sp, #16
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40000400 	.word	0x40000400
 8004458:	40010800 	.word	0x40010800
 800445c:	40011400 	.word	0x40011400
 8004460:	fffffcff 	.word	0xfffffcff

08004464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	2201      	movs	r2, #1
 800447a:	4393      	bics	r3, r2
 800447c:	001a      	movs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2270      	movs	r2, #112	@ 0x70
 8004492:	4393      	bics	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2203      	movs	r2, #3
 800449a:	4393      	bics	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2202      	movs	r2, #2
 80044ac:	4393      	bics	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b006      	add	sp, #24
 80044da:	bd80      	pop	{r7, pc}

080044dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	2210      	movs	r2, #16
 80044f2:	4393      	bics	r3, r2
 80044f4:	001a      	movs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a13      	ldr	r2, [pc, #76]	@ (8004558 <TIM_OC2_SetConfig+0x7c>)
 800450a:	4013      	ands	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a12      	ldr	r2, [pc, #72]	@ (800455c <TIM_OC2_SetConfig+0x80>)
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2220      	movs	r2, #32
 8004526:	4393      	bics	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b006      	add	sp, #24
 8004556:	bd80      	pop	{r7, pc}
 8004558:	ffff8fff 	.word	0xffff8fff
 800455c:	fffffcff 	.word	0xfffffcff

08004560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <TIM_OC3_SetConfig+0x78>)
 8004576:	401a      	ands	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2270      	movs	r2, #112	@ 0x70
 800458c:	4393      	bics	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	4393      	bics	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <TIM_OC3_SetConfig+0x7c>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b006      	add	sp, #24
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	fffffeff 	.word	0xfffffeff
 80045dc:	fffffdff 	.word	0xfffffdff

080045e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <TIM_OC4_SetConfig+0x7c>)
 80045f6:	401a      	ands	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <TIM_OC4_SetConfig+0x80>)
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <TIM_OC4_SetConfig+0x84>)
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4a10      	ldr	r2, [pc, #64]	@ (8004668 <TIM_OC4_SetConfig+0x88>)
 8004628:	4013      	ands	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	031b      	lsls	r3, r3, #12
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b006      	add	sp, #24
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	ffffefff 	.word	0xffffefff
 8004660:	ffff8fff 	.word	0xffff8fff
 8004664:	fffffcff 	.word	0xfffffcff
 8004668:	ffffdfff 	.word	0xffffdfff

0800466c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	2201      	movs	r2, #1
 8004684:	4393      	bics	r3, r2
 8004686:	001a      	movs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	22f0      	movs	r2, #240	@ 0xf0
 8004696:	4393      	bics	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	220a      	movs	r2, #10
 80046a8:	4393      	bics	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	46c0      	nop			@ (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b006      	add	sp, #24
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	2210      	movs	r2, #16
 80046e0:	4393      	bics	r3, r2
 80046e2:	001a      	movs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004728 <TIM_TI2_ConfigInputStage+0x60>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	031b      	lsls	r3, r3, #12
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	22a0      	movs	r2, #160	@ 0xa0
 8004704:	4393      	bics	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b006      	add	sp, #24
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	ffff0fff 	.word	0xffff0fff

0800472c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2270      	movs	r2, #112	@ 0x70
 8004740:	4393      	bics	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	2207      	movs	r2, #7
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	609a      	str	r2, [r3, #8]
}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4a09      	ldr	r2, [pc, #36]	@ (800479c <TIM_ETR_SetConfig+0x3c>)
 8004778:	4013      	ands	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	431a      	orrs	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	609a      	str	r2, [r3, #8]
}
 8004794:	46c0      	nop			@ (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b006      	add	sp, #24
 800479a:	bd80      	pop	{r7, pc}
 800479c:	ffff00ff 	.word	0xffff00ff

080047a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	221f      	movs	r2, #31
 80047b0:	4013      	ands	r3, r2
 80047b2:	2201      	movs	r2, #1
 80047b4:	409a      	lsls	r2, r3
 80047b6:	0013      	movs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	43d2      	mvns	r2, r2
 80047c2:	401a      	ands	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a1a      	ldr	r2, [r3, #32]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	211f      	movs	r1, #31
 80047d0:	400b      	ands	r3, r1
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4099      	lsls	r1, r3
 80047d6:	000b      	movs	r3, r1
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b006      	add	sp, #24
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2238      	movs	r2, #56	@ 0x38
 80047f6:	5c9b      	ldrb	r3, [r3, r2]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e047      	b.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2238      	movs	r2, #56	@ 0x38
 8004804:	2101      	movs	r1, #1
 8004806:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2239      	movs	r2, #57	@ 0x39
 800480c:	2102      	movs	r1, #2
 800480e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2270      	movs	r2, #112	@ 0x70
 8004824:	4393      	bics	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	05db      	lsls	r3, r3, #23
 8004842:	429a      	cmp	r2, r3
 8004844:	d00e      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a13      	ldr	r2, [pc, #76]	@ (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a11      	ldr	r2, [pc, #68]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10c      	bne.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2280      	movs	r2, #128	@ 0x80
 8004868:	4393      	bics	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2239      	movs	r2, #57	@ 0x39
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2238      	movs	r2, #56	@ 0x38
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40000400 	.word	0x40000400
 800489c:	40010800 	.word	0x40010800
 80048a0:	40011400 	.word	0x40011400

080048a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e044      	b.n	8004940 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2278      	movs	r2, #120	@ 0x78
 80048c2:	2100      	movs	r1, #0
 80048c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fc ff01 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	@ 0x24
 80048d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	438a      	bics	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 feec 	bl	80056cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fc4a 	bl	8005190 <UART_SetConfig>
 80048fc:	0003      	movs	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e01c      	b.n	8004940 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	490d      	ldr	r1, [pc, #52]	@ (8004948 <HAL_UART_Init+0xa4>)
 8004912:	400a      	ands	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	212a      	movs	r1, #42	@ 0x2a
 8004922:	438a      	bics	r2, r1
 8004924:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	430a      	orrs	r2, r1
 8004934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 ff7b 	bl	8005834 <UART_CheckIdleState>
 800493e:	0003      	movs	r3, r0
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}
 8004948:	ffffb7ff 	.word	0xffffb7ff

0800494c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	1dbb      	adds	r3, r7, #6
 800495a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004960:	2b20      	cmp	r3, #32
 8004962:	d000      	beq.n	8004966 <HAL_UART_Transmit+0x1a>
 8004964:	e08c      	b.n	8004a80 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_UART_Transmit+0x28>
 800496c:	1dbb      	adds	r3, r7, #6
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e084      	b.n	8004a82 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	015b      	lsls	r3, r3, #5
 8004980:	429a      	cmp	r2, r3
 8004982:	d109      	bne.n	8004998 <HAL_UART_Transmit+0x4c>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2201      	movs	r2, #1
 8004990:	4013      	ands	r3, r2
 8004992:	d001      	beq.n	8004998 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e074      	b.n	8004a82 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2284      	movs	r2, #132	@ 0x84
 800499c:	2100      	movs	r1, #0
 800499e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	@ 0x21
 80049a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049a6:	f7fd f85d 	bl	8001a64 <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1dba      	adds	r2, r7, #6
 80049b2:	2150      	movs	r1, #80	@ 0x50
 80049b4:	8812      	ldrh	r2, [r2, #0]
 80049b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1dba      	adds	r2, r7, #6
 80049bc:	2152      	movs	r1, #82	@ 0x52
 80049be:	8812      	ldrh	r2, [r2, #0]
 80049c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	015b      	lsls	r3, r3, #5
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d108      	bne.n	80049e0 <HAL_UART_Transmit+0x94>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049e8:	e02f      	b.n	8004a4a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	0013      	movs	r3, r2
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	f000 ffc4 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e03b      	b.n	8004a82 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	001a      	movs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	05d2      	lsls	r2, r2, #23
 8004a1c:	0dd2      	lsrs	r2, r2, #23
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3302      	adds	r3, #2
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	e007      	b.n	8004a38 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2252      	movs	r2, #82	@ 0x52
 8004a3c:	5a9b      	ldrh	r3, [r3, r2]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b299      	uxth	r1, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2252      	movs	r2, #82	@ 0x52
 8004a48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2252      	movs	r2, #82	@ 0x52
 8004a4e:	5a9b      	ldrh	r3, [r3, r2]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1c9      	bne.n	80049ea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	0013      	movs	r3, r2
 8004a60:	2200      	movs	r2, #0
 8004a62:	2140      	movs	r1, #64	@ 0x40
 8004a64:	f000 ff8e 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e005      	b.n	8004a82 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b008      	add	sp, #32
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	1dbb      	adds	r3, r7, #6
 8004a98:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2280      	movs	r2, #128	@ 0x80
 8004a9e:	589b      	ldr	r3, [r3, r2]
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d14a      	bne.n	8004b3a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_UART_Receive_DMA+0x26>
 8004aaa:	1dbb      	adds	r3, r7, #6
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e042      	b.n	8004b3c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	015b      	lsls	r3, r3, #5
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d109      	bne.n	8004ad6 <HAL_UART_Receive_DMA+0x4a>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d001      	beq.n	8004ad6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e032      	b.n	8004b3c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a18      	ldr	r2, [pc, #96]	@ (8004b44 <HAL_UART_Receive_DMA+0xb8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d020      	beq.n	8004b28 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	2380      	movs	r3, #128	@ 0x80
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	4013      	ands	r3, r2
 8004af2:	d019      	beq.n	8004b28 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af4:	f3ef 8310 	mrs	r3, PRIMASK
 8004af8:	613b      	str	r3, [r7, #16]
  return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	2301      	movs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f383 8810 	msr	PRIMASK, r3
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2180      	movs	r1, #128	@ 0x80
 8004b16:	04c9      	lsls	r1, r1, #19
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b28:	1dbb      	adds	r3, r7, #6
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f000 ff97 	bl	8005a64 <UART_Start_Receive_DMA>
 8004b36:	0003      	movs	r3, r0
 8004b38:	e000      	b.n	8004b3c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b008      	add	sp, #32
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40004800 	.word	0x40004800

08004b48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b0ab      	sub	sp, #172	@ 0xac
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	22a4      	movs	r2, #164	@ 0xa4
 8004b58:	18b9      	adds	r1, r7, r2
 8004b5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	20a0      	movs	r0, #160	@ 0xa0
 8004b64:	1839      	adds	r1, r7, r0
 8004b66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	219c      	movs	r1, #156	@ 0x9c
 8004b70:	1879      	adds	r1, r7, r1
 8004b72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b74:	0011      	movs	r1, r2
 8004b76:	18bb      	adds	r3, r7, r2
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a99      	ldr	r2, [pc, #612]	@ (8004de0 <HAL_UART_IRQHandler+0x298>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2298      	movs	r2, #152	@ 0x98
 8004b80:	18bc      	adds	r4, r7, r2
 8004b82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004b84:	18bb      	adds	r3, r7, r2
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d114      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2220      	movs	r2, #32
 8004b92:	4013      	ands	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d100      	bne.n	8004baa <HAL_UART_IRQHandler+0x62>
 8004ba8:	e2be      	b.n	8005128 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	0010      	movs	r0, r2
 8004bb2:	4798      	blx	r3
      }
      return;
 8004bb4:	e2b8      	b.n	8005128 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bb6:	2398      	movs	r3, #152	@ 0x98
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d100      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x7a>
 8004bc0:	e114      	b.n	8004dec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bc2:	239c      	movs	r3, #156	@ 0x9c
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d106      	bne.n	8004bdc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bce:	23a0      	movs	r3, #160	@ 0xa0
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a83      	ldr	r2, [pc, #524]	@ (8004de4 <HAL_UART_IRQHandler+0x29c>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d100      	bne.n	8004bdc <HAL_UART_IRQHandler+0x94>
 8004bda:	e107      	b.n	8004dec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bdc:	23a4      	movs	r3, #164	@ 0xa4
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2201      	movs	r2, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d012      	beq.n	8004c0e <HAL_UART_IRQHandler+0xc6>
 8004be8:	23a0      	movs	r3, #160	@ 0xa0
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	2380      	movs	r3, #128	@ 0x80
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2284      	movs	r2, #132	@ 0x84
 8004c02:	589b      	ldr	r3, [r3, r2]
 8004c04:	2201      	movs	r2, #1
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2184      	movs	r1, #132	@ 0x84
 8004c0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c0e:	23a4      	movs	r3, #164	@ 0xa4
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2202      	movs	r2, #2
 8004c16:	4013      	ands	r3, r2
 8004c18:	d011      	beq.n	8004c3e <HAL_UART_IRQHandler+0xf6>
 8004c1a:	239c      	movs	r3, #156	@ 0x9c
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2201      	movs	r2, #1
 8004c22:	4013      	ands	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2284      	movs	r2, #132	@ 0x84
 8004c32:	589b      	ldr	r3, [r3, r2]
 8004c34:	2204      	movs	r2, #4
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2184      	movs	r1, #132	@ 0x84
 8004c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c3e:	23a4      	movs	r3, #164	@ 0xa4
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2204      	movs	r2, #4
 8004c46:	4013      	ands	r3, r2
 8004c48:	d011      	beq.n	8004c6e <HAL_UART_IRQHandler+0x126>
 8004c4a:	239c      	movs	r3, #156	@ 0x9c
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2284      	movs	r2, #132	@ 0x84
 8004c62:	589b      	ldr	r3, [r3, r2]
 8004c64:	2202      	movs	r2, #2
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2184      	movs	r1, #132	@ 0x84
 8004c6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c6e:	23a4      	movs	r3, #164	@ 0xa4
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2208      	movs	r2, #8
 8004c76:	4013      	ands	r3, r2
 8004c78:	d017      	beq.n	8004caa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c7a:	23a0      	movs	r3, #160	@ 0xa0
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2220      	movs	r2, #32
 8004c82:	4013      	ands	r3, r2
 8004c84:	d105      	bne.n	8004c92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c86:	239c      	movs	r3, #156	@ 0x9c
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c90:	d00b      	beq.n	8004caa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2208      	movs	r2, #8
 8004c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2284      	movs	r2, #132	@ 0x84
 8004c9e:	589b      	ldr	r3, [r3, r2]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2184      	movs	r1, #132	@ 0x84
 8004ca8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004caa:	23a4      	movs	r3, #164	@ 0xa4
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x198>
 8004cb8:	23a0      	movs	r3, #160	@ 0xa0
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	04db      	lsls	r3, r3, #19
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2280      	movs	r2, #128	@ 0x80
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2284      	movs	r2, #132	@ 0x84
 8004cd4:	589b      	ldr	r3, [r3, r2]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2184      	movs	r1, #132	@ 0x84
 8004cde:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2284      	movs	r2, #132	@ 0x84
 8004ce4:	589b      	ldr	r3, [r3, r2]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d100      	bne.n	8004cec <HAL_UART_IRQHandler+0x1a4>
 8004cea:	e21f      	b.n	800512c <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cec:	23a4      	movs	r3, #164	@ 0xa4
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cf8:	23a0      	movs	r3, #160	@ 0xa0
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	4013      	ands	r3, r2
 8004d02:	d008      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	0010      	movs	r0, r2
 8004d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2284      	movs	r2, #132	@ 0x84
 8004d1a:	589b      	ldr	r3, [r3, r2]
 8004d1c:	2194      	movs	r1, #148	@ 0x94
 8004d1e:	187a      	adds	r2, r7, r1
 8004d20:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2240      	movs	r2, #64	@ 0x40
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d004      	beq.n	8004d3a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2228      	movs	r2, #40	@ 0x28
 8004d36:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d38:	d047      	beq.n	8004dca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 ff55 	bl	8005bec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b40      	cmp	r3, #64	@ 0x40
 8004d4e:	d137      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d50:	f3ef 8310 	mrs	r3, PRIMASK
 8004d54:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d58:	2090      	movs	r0, #144	@ 0x90
 8004d5a:	183a      	adds	r2, r7, r0
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			@ (mov r8, r8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2140      	movs	r1, #64	@ 0x40
 8004d76:	438a      	bics	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
 8004d7a:	183b      	adds	r3, r7, r0
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d82:	f383 8810 	msr	PRIMASK, r3
}
 8004d86:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d012      	beq.n	8004db6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d94:	4a14      	ldr	r2, [pc, #80]	@ (8004de8 <HAL_UART_IRQHandler+0x2a0>)
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fd fc9d 	bl	80026dc <HAL_DMA_Abort_IT>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d01a      	beq.n	8004ddc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db0:	0018      	movs	r0, r3
 8004db2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e012      	b.n	8004ddc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 f9d5 	bl	8005168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbe:	e00d      	b.n	8004ddc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f9d0 	bl	8005168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	e008      	b.n	8004ddc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 f9cb 	bl	8005168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2284      	movs	r2, #132	@ 0x84
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004dda:	e1a7      	b.n	800512c <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	46c0      	nop			@ (mov r8, r8)
    return;
 8004dde:	e1a5      	b.n	800512c <HAL_UART_IRQHandler+0x5e4>
 8004de0:	0000080f 	.word	0x0000080f
 8004de4:	04000120 	.word	0x04000120
 8004de8:	08005f1f 	.word	0x08005f1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d000      	beq.n	8004df6 <HAL_UART_IRQHandler+0x2ae>
 8004df4:	e159      	b.n	80050aa <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004df6:	23a4      	movs	r3, #164	@ 0xa4
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d100      	bne.n	8004e04 <HAL_UART_IRQHandler+0x2bc>
 8004e02:	e152      	b.n	80050aa <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e04:	23a0      	movs	r3, #160	@ 0xa0
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <HAL_UART_IRQHandler+0x2ca>
 8004e10:	e14b      	b.n	80050aa <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2210      	movs	r2, #16
 8004e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2240      	movs	r2, #64	@ 0x40
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b40      	cmp	r3, #64	@ 0x40
 8004e26:	d000      	beq.n	8004e2a <HAL_UART_IRQHandler+0x2e2>
 8004e28:	e0bf      	b.n	8004faa <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	217e      	movs	r1, #126	@ 0x7e
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d100      	bne.n	8004e42 <HAL_UART_IRQHandler+0x2fa>
 8004e40:	e095      	b.n	8004f6e <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2258      	movs	r2, #88	@ 0x58
 8004e46:	5a9b      	ldrh	r3, [r3, r2]
 8004e48:	187a      	adds	r2, r7, r1
 8004e4a:	8812      	ldrh	r2, [r2, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d300      	bcc.n	8004e52 <HAL_UART_IRQHandler+0x30a>
 8004e50:	e08d      	b.n	8004f6e <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	187a      	adds	r2, r7, r1
 8004e56:	215a      	movs	r1, #90	@ 0x5a
 8004e58:	8812      	ldrh	r2, [r2, #0]
 8004e5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2220      	movs	r2, #32
 8004e66:	4013      	ands	r3, r2
 8004e68:	d16f      	bne.n	8004f4a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e74:	2301      	movs	r3, #1
 8004e76:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7a:	f383 8810 	msr	PRIMASK, r3
}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	49ad      	ldr	r1, [pc, #692]	@ (8005140 <HAL_UART_IRQHandler+0x5f8>)
 8004e8c:	400a      	ands	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	438a      	bics	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]
 8004ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ece:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ed8:	2301      	movs	r3, #1
 8004eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2140      	movs	r1, #64	@ 0x40
 8004ef0:	438a      	bics	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ef6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2280      	movs	r2, #128	@ 0x80
 8004f04:	2120      	movs	r1, #32
 8004f06:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f12:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f18:	2301      	movs	r3, #1
 8004f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2110      	movs	r1, #16
 8004f30:	438a      	bics	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7fd fb89 	bl	800265c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2258      	movs	r2, #88	@ 0x58
 8004f54:	5a9a      	ldrh	r2, [r3, r2]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	215a      	movs	r1, #90	@ 0x5a
 8004f5a:	5a5b      	ldrh	r3, [r3, r1]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 f906 	bl	8005178 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004f6c:	e0e0      	b.n	8005130 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2258      	movs	r2, #88	@ 0x58
 8004f72:	5a9b      	ldrh	r3, [r3, r2]
 8004f74:	227e      	movs	r2, #126	@ 0x7e
 8004f76:	18ba      	adds	r2, r7, r2
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d000      	beq.n	8004f80 <HAL_UART_IRQHandler+0x438>
 8004f7e:	e0d7      	b.n	8005130 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d000      	beq.n	8004f92 <HAL_UART_IRQHandler+0x44a>
 8004f90:	e0ce      	b.n	8005130 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2258      	movs	r2, #88	@ 0x58
 8004f9c:	5a9a      	ldrh	r2, [r3, r2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0011      	movs	r1, r2
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 f8e8 	bl	8005178 <HAL_UARTEx_RxEventCallback>
      return;
 8004fa8:	e0c2      	b.n	8005130 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2258      	movs	r2, #88	@ 0x58
 8004fae:	5a99      	ldrh	r1, [r3, r2]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	225a      	movs	r2, #90	@ 0x5a
 8004fb4:	5a9b      	ldrh	r3, [r3, r2]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	208e      	movs	r0, #142	@ 0x8e
 8004fba:	183b      	adds	r3, r7, r0
 8004fbc:	1a8a      	subs	r2, r1, r2
 8004fbe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	225a      	movs	r2, #90	@ 0x5a
 8004fc4:	5a9b      	ldrh	r3, [r3, r2]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d100      	bne.n	8004fce <HAL_UART_IRQHandler+0x486>
 8004fcc:	e0b2      	b.n	8005134 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004fce:	183b      	adds	r3, r7, r0
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d100      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x490>
 8004fd6:	e0ad      	b.n	8005134 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fde:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe0:	2488      	movs	r4, #136	@ 0x88
 8004fe2:	193a      	adds	r2, r7, r4
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f383 8810 	msr	PRIMASK, r3
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4951      	ldr	r1, [pc, #324]	@ (8005144 <HAL_UART_IRQHandler+0x5fc>)
 8004ffe:	400a      	ands	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	193b      	adds	r3, r7, r4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005010:	f3ef 8310 	mrs	r3, PRIMASK
 8005014:	61bb      	str	r3, [r7, #24]
  return(result);
 8005016:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	2484      	movs	r4, #132	@ 0x84
 800501a:	193a      	adds	r2, r7, r4
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	2301      	movs	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			@ (mov r8, r8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	438a      	bics	r2, r1
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	193b      	adds	r3, r7, r4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2280      	movs	r2, #128	@ 0x80
 800504c:	2120      	movs	r1, #32
 800504e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505c:	f3ef 8310 	mrs	r3, PRIMASK
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	2480      	movs	r4, #128	@ 0x80
 8005066:	193a      	adds	r2, r7, r4
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	2301      	movs	r3, #1
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	f383 8810 	msr	PRIMASK, r3
}
 8005074:	46c0      	nop			@ (mov r8, r8)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2110      	movs	r1, #16
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	193b      	adds	r3, r7, r4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508e:	f383 8810 	msr	PRIMASK, r3
}
 8005092:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800509a:	183b      	adds	r3, r7, r0
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	0011      	movs	r1, r2
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f868 	bl	8005178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050a8:	e044      	b.n	8005134 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050aa:	23a4      	movs	r3, #164	@ 0xa4
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	035b      	lsls	r3, r3, #13
 80050b4:	4013      	ands	r3, r2
 80050b6:	d010      	beq.n	80050da <HAL_UART_IRQHandler+0x592>
 80050b8:	239c      	movs	r3, #156	@ 0x9c
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	03db      	lsls	r3, r3, #15
 80050c2:	4013      	ands	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2280      	movs	r2, #128	@ 0x80
 80050cc:	0352      	lsls	r2, r2, #13
 80050ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 ff61 	bl	8005f9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050d8:	e02f      	b.n	800513a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050da:	23a4      	movs	r3, #164	@ 0xa4
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2280      	movs	r2, #128	@ 0x80
 80050e2:	4013      	ands	r3, r2
 80050e4:	d00f      	beq.n	8005106 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050e6:	23a0      	movs	r3, #160	@ 0xa0
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2280      	movs	r2, #128	@ 0x80
 80050ee:	4013      	ands	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01e      	beq.n	8005138 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	0010      	movs	r0, r2
 8005102:	4798      	blx	r3
    }
    return;
 8005104:	e018      	b.n	8005138 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005106:	23a4      	movs	r3, #164	@ 0xa4
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2240      	movs	r2, #64	@ 0x40
 800510e:	4013      	ands	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_UART_IRQHandler+0x5f2>
 8005112:	23a0      	movs	r3, #160	@ 0xa0
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2240      	movs	r2, #64	@ 0x40
 800511a:	4013      	ands	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 ff0f 	bl	8005f44 <UART_EndTransmit_IT>
    return;
 8005126:	e008      	b.n	800513a <HAL_UART_IRQHandler+0x5f2>
      return;
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	e006      	b.n	800513a <HAL_UART_IRQHandler+0x5f2>
    return;
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	e004      	b.n	800513a <HAL_UART_IRQHandler+0x5f2>
      return;
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	e002      	b.n	800513a <HAL_UART_IRQHandler+0x5f2>
      return;
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	e000      	b.n	800513a <HAL_UART_IRQHandler+0x5f2>
    return;
 8005138:	46c0      	nop			@ (mov r8, r8)
  }

}
 800513a:	46bd      	mov	sp, r7
 800513c:	b02b      	add	sp, #172	@ 0xac
 800513e:	bd90      	pop	{r4, r7, pc}
 8005140:	fffffeff 	.word	0xfffffeff
 8005144:	fffffedf 	.word	0xfffffedf

08005148 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005160:	46c0      	nop			@ (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	000a      	movs	r2, r1
 8005182:	1cbb      	adds	r3, r7, #2
 8005184:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b002      	add	sp, #8
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005190:	b5b0      	push	{r4, r5, r7, lr}
 8005192:	b08e      	sub	sp, #56	@ 0x38
 8005194:	af00      	add	r7, sp, #0
 8005196:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005198:	231a      	movs	r3, #26
 800519a:	2218      	movs	r2, #24
 800519c:	189b      	adds	r3, r3, r2
 800519e:	19db      	adds	r3, r3, r7
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4ac3      	ldr	r2, [pc, #780]	@ (80054d0 <UART_SetConfig+0x340>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	0019      	movs	r1, r3
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4abe      	ldr	r2, [pc, #760]	@ (80054d4 <UART_SetConfig+0x344>)
 80051da:	4013      	ands	r3, r2
 80051dc:	0019      	movs	r1, r3
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4ab8      	ldr	r2, [pc, #736]	@ (80054d8 <UART_SetConfig+0x348>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005200:	4313      	orrs	r3, r2
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	4ab4      	ldr	r2, [pc, #720]	@ (80054dc <UART_SetConfig+0x34c>)
 800520c:	4013      	ands	r3, r2
 800520e:	0019      	movs	r1, r3
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4ab0      	ldr	r2, [pc, #704]	@ (80054e0 <UART_SetConfig+0x350>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d131      	bne.n	8005288 <UART_SetConfig+0xf8>
 8005224:	4baf      	ldr	r3, [pc, #700]	@ (80054e4 <UART_SetConfig+0x354>)
 8005226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005228:	2203      	movs	r2, #3
 800522a:	4013      	ands	r3, r2
 800522c:	2b03      	cmp	r3, #3
 800522e:	d01d      	beq.n	800526c <UART_SetConfig+0xdc>
 8005230:	d823      	bhi.n	800527a <UART_SetConfig+0xea>
 8005232:	2b02      	cmp	r3, #2
 8005234:	d00c      	beq.n	8005250 <UART_SetConfig+0xc0>
 8005236:	d820      	bhi.n	800527a <UART_SetConfig+0xea>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <UART_SetConfig+0xb2>
 800523c:	2b01      	cmp	r3, #1
 800523e:	d00e      	beq.n	800525e <UART_SetConfig+0xce>
 8005240:	e01b      	b.n	800527a <UART_SetConfig+0xea>
 8005242:	231b      	movs	r3, #27
 8005244:	2218      	movs	r2, #24
 8005246:	189b      	adds	r3, r3, r2
 8005248:	19db      	adds	r3, r3, r7
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e0b4      	b.n	80053ba <UART_SetConfig+0x22a>
 8005250:	231b      	movs	r3, #27
 8005252:	2218      	movs	r2, #24
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2202      	movs	r2, #2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e0ad      	b.n	80053ba <UART_SetConfig+0x22a>
 800525e:	231b      	movs	r3, #27
 8005260:	2218      	movs	r2, #24
 8005262:	189b      	adds	r3, r3, r2
 8005264:	19db      	adds	r3, r3, r7
 8005266:	2204      	movs	r2, #4
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e0a6      	b.n	80053ba <UART_SetConfig+0x22a>
 800526c:	231b      	movs	r3, #27
 800526e:	2218      	movs	r2, #24
 8005270:	189b      	adds	r3, r3, r2
 8005272:	19db      	adds	r3, r3, r7
 8005274:	2208      	movs	r2, #8
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e09f      	b.n	80053ba <UART_SetConfig+0x22a>
 800527a:	231b      	movs	r3, #27
 800527c:	2218      	movs	r2, #24
 800527e:	189b      	adds	r3, r3, r2
 8005280:	19db      	adds	r3, r3, r7
 8005282:	2210      	movs	r2, #16
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e098      	b.n	80053ba <UART_SetConfig+0x22a>
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a96      	ldr	r2, [pc, #600]	@ (80054e8 <UART_SetConfig+0x358>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d131      	bne.n	80052f6 <UART_SetConfig+0x166>
 8005292:	4b94      	ldr	r3, [pc, #592]	@ (80054e4 <UART_SetConfig+0x354>)
 8005294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005296:	220c      	movs	r2, #12
 8005298:	4013      	ands	r3, r2
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d01d      	beq.n	80052da <UART_SetConfig+0x14a>
 800529e:	d823      	bhi.n	80052e8 <UART_SetConfig+0x158>
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d00c      	beq.n	80052be <UART_SetConfig+0x12e>
 80052a4:	d820      	bhi.n	80052e8 <UART_SetConfig+0x158>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <UART_SetConfig+0x120>
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d00e      	beq.n	80052cc <UART_SetConfig+0x13c>
 80052ae:	e01b      	b.n	80052e8 <UART_SetConfig+0x158>
 80052b0:	231b      	movs	r3, #27
 80052b2:	2218      	movs	r2, #24
 80052b4:	189b      	adds	r3, r3, r2
 80052b6:	19db      	adds	r3, r3, r7
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e07d      	b.n	80053ba <UART_SetConfig+0x22a>
 80052be:	231b      	movs	r3, #27
 80052c0:	2218      	movs	r2, #24
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	19db      	adds	r3, r3, r7
 80052c6:	2202      	movs	r2, #2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e076      	b.n	80053ba <UART_SetConfig+0x22a>
 80052cc:	231b      	movs	r3, #27
 80052ce:	2218      	movs	r2, #24
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	19db      	adds	r3, r3, r7
 80052d4:	2204      	movs	r2, #4
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e06f      	b.n	80053ba <UART_SetConfig+0x22a>
 80052da:	231b      	movs	r3, #27
 80052dc:	2218      	movs	r2, #24
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	19db      	adds	r3, r3, r7
 80052e2:	2208      	movs	r2, #8
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e068      	b.n	80053ba <UART_SetConfig+0x22a>
 80052e8:	231b      	movs	r3, #27
 80052ea:	2218      	movs	r2, #24
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	19db      	adds	r3, r3, r7
 80052f0:	2210      	movs	r2, #16
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e061      	b.n	80053ba <UART_SetConfig+0x22a>
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a7c      	ldr	r2, [pc, #496]	@ (80054ec <UART_SetConfig+0x35c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d106      	bne.n	800530e <UART_SetConfig+0x17e>
 8005300:	231b      	movs	r3, #27
 8005302:	2218      	movs	r2, #24
 8005304:	189b      	adds	r3, r3, r2
 8005306:	19db      	adds	r3, r3, r7
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e055      	b.n	80053ba <UART_SetConfig+0x22a>
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a77      	ldr	r2, [pc, #476]	@ (80054f0 <UART_SetConfig+0x360>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d106      	bne.n	8005326 <UART_SetConfig+0x196>
 8005318:	231b      	movs	r3, #27
 800531a:	2218      	movs	r2, #24
 800531c:	189b      	adds	r3, r3, r2
 800531e:	19db      	adds	r3, r3, r7
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e049      	b.n	80053ba <UART_SetConfig+0x22a>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a6b      	ldr	r2, [pc, #428]	@ (80054d8 <UART_SetConfig+0x348>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d13e      	bne.n	80053ae <UART_SetConfig+0x21e>
 8005330:	4b6c      	ldr	r3, [pc, #432]	@ (80054e4 <UART_SetConfig+0x354>)
 8005332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005334:	23c0      	movs	r3, #192	@ 0xc0
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4013      	ands	r3, r2
 800533a:	22c0      	movs	r2, #192	@ 0xc0
 800533c:	0112      	lsls	r2, r2, #4
 800533e:	4293      	cmp	r3, r2
 8005340:	d027      	beq.n	8005392 <UART_SetConfig+0x202>
 8005342:	22c0      	movs	r2, #192	@ 0xc0
 8005344:	0112      	lsls	r2, r2, #4
 8005346:	4293      	cmp	r3, r2
 8005348:	d82a      	bhi.n	80053a0 <UART_SetConfig+0x210>
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	4293      	cmp	r3, r2
 8005350:	d011      	beq.n	8005376 <UART_SetConfig+0x1e6>
 8005352:	2280      	movs	r2, #128	@ 0x80
 8005354:	0112      	lsls	r2, r2, #4
 8005356:	4293      	cmp	r3, r2
 8005358:	d822      	bhi.n	80053a0 <UART_SetConfig+0x210>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <UART_SetConfig+0x1d8>
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	00d2      	lsls	r2, r2, #3
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <UART_SetConfig+0x1f4>
 8005366:	e01b      	b.n	80053a0 <UART_SetConfig+0x210>
 8005368:	231b      	movs	r3, #27
 800536a:	2218      	movs	r2, #24
 800536c:	189b      	adds	r3, r3, r2
 800536e:	19db      	adds	r3, r3, r7
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e021      	b.n	80053ba <UART_SetConfig+0x22a>
 8005376:	231b      	movs	r3, #27
 8005378:	2218      	movs	r2, #24
 800537a:	189b      	adds	r3, r3, r2
 800537c:	19db      	adds	r3, r3, r7
 800537e:	2202      	movs	r2, #2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e01a      	b.n	80053ba <UART_SetConfig+0x22a>
 8005384:	231b      	movs	r3, #27
 8005386:	2218      	movs	r2, #24
 8005388:	189b      	adds	r3, r3, r2
 800538a:	19db      	adds	r3, r3, r7
 800538c:	2204      	movs	r2, #4
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e013      	b.n	80053ba <UART_SetConfig+0x22a>
 8005392:	231b      	movs	r3, #27
 8005394:	2218      	movs	r2, #24
 8005396:	189b      	adds	r3, r3, r2
 8005398:	19db      	adds	r3, r3, r7
 800539a:	2208      	movs	r2, #8
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e00c      	b.n	80053ba <UART_SetConfig+0x22a>
 80053a0:	231b      	movs	r3, #27
 80053a2:	2218      	movs	r2, #24
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	2210      	movs	r2, #16
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e005      	b.n	80053ba <UART_SetConfig+0x22a>
 80053ae:	231b      	movs	r3, #27
 80053b0:	2218      	movs	r2, #24
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	2210      	movs	r2, #16
 80053b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a46      	ldr	r2, [pc, #280]	@ (80054d8 <UART_SetConfig+0x348>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d000      	beq.n	80053c6 <UART_SetConfig+0x236>
 80053c4:	e09a      	b.n	80054fc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c6:	231b      	movs	r3, #27
 80053c8:	2218      	movs	r2, #24
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	19db      	adds	r3, r3, r7
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d01d      	beq.n	8005410 <UART_SetConfig+0x280>
 80053d4:	dc20      	bgt.n	8005418 <UART_SetConfig+0x288>
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d015      	beq.n	8005406 <UART_SetConfig+0x276>
 80053da:	dc1d      	bgt.n	8005418 <UART_SetConfig+0x288>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <UART_SetConfig+0x256>
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d005      	beq.n	80053f0 <UART_SetConfig+0x260>
 80053e4:	e018      	b.n	8005418 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e6:	f7fe fa1d 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80053ea:	0003      	movs	r3, r0
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ee:	e01c      	b.n	800542a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053f0:	4b3c      	ldr	r3, [pc, #240]	@ (80054e4 <UART_SetConfig+0x354>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	4013      	ands	r3, r2
 80053f8:	d002      	beq.n	8005400 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053fa:	4b3e      	ldr	r3, [pc, #248]	@ (80054f4 <UART_SetConfig+0x364>)
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053fe:	e014      	b.n	800542a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005400:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <UART_SetConfig+0x368>)
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005404:	e011      	b.n	800542a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fe f97d 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 800540a:	0003      	movs	r3, r0
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800540e:	e00c      	b.n	800542a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005416:	e008      	b.n	800542a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800541c:	231a      	movs	r3, #26
 800541e:	2218      	movs	r2, #24
 8005420:	189b      	adds	r3, r3, r2
 8005422:	19db      	adds	r3, r3, r7
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
        break;
 8005428:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d100      	bne.n	8005432 <UART_SetConfig+0x2a2>
 8005430:	e133      	b.n	800569a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	0013      	movs	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	189b      	adds	r3, r3, r2
 800543c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800543e:	429a      	cmp	r2, r3
 8005440:	d305      	bcc.n	800544e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800544a:	429a      	cmp	r2, r3
 800544c:	d906      	bls.n	800545c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800544e:	231a      	movs	r3, #26
 8005450:	2218      	movs	r2, #24
 8005452:	189b      	adds	r3, r3, r2
 8005454:	19db      	adds	r3, r3, r7
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e11e      	b.n	800569a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	6939      	ldr	r1, [r7, #16]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	000b      	movs	r3, r1
 800546a:	0e1b      	lsrs	r3, r3, #24
 800546c:	0010      	movs	r0, r2
 800546e:	0205      	lsls	r5, r0, #8
 8005470:	431d      	orrs	r5, r3
 8005472:	000b      	movs	r3, r1
 8005474:	021c      	lsls	r4, r3, #8
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68b8      	ldr	r0, [r7, #8]
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	1900      	adds	r0, r0, r4
 8005488:	4169      	adcs	r1, r5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f7fa fec2 	bl	8000220 <__aeabi_uldivmod>
 800549c:	0002      	movs	r2, r0
 800549e:	000b      	movs	r3, r1
 80054a0:	0013      	movs	r3, r2
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a6:	23c0      	movs	r3, #192	@ 0xc0
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d309      	bcc.n	80054c2 <UART_SetConfig+0x332>
 80054ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	035b      	lsls	r3, r3, #13
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d204      	bcs.n	80054c2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	e0eb      	b.n	800569a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80054c2:	231a      	movs	r3, #26
 80054c4:	2218      	movs	r2, #24
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	19db      	adds	r3, r3, r7
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e0e4      	b.n	800569a <UART_SetConfig+0x50a>
 80054d0:	efff69f3 	.word	0xefff69f3
 80054d4:	ffffcfff 	.word	0xffffcfff
 80054d8:	40004800 	.word	0x40004800
 80054dc:	fffff4ff 	.word	0xfffff4ff
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40004c00 	.word	0x40004c00
 80054f0:	40005000 	.word	0x40005000
 80054f4:	003d0900 	.word	0x003d0900
 80054f8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	2380      	movs	r3, #128	@ 0x80
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	429a      	cmp	r2, r3
 8005506:	d000      	beq.n	800550a <UART_SetConfig+0x37a>
 8005508:	e070      	b.n	80055ec <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800550a:	231b      	movs	r3, #27
 800550c:	2218      	movs	r2, #24
 800550e:	189b      	adds	r3, r3, r2
 8005510:	19db      	adds	r3, r3, r7
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d822      	bhi.n	800555e <UART_SetConfig+0x3ce>
 8005518:	009a      	lsls	r2, r3, #2
 800551a:	4b67      	ldr	r3, [pc, #412]	@ (80056b8 <UART_SetConfig+0x528>)
 800551c:	18d3      	adds	r3, r2, r3
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005522:	f7fe f97f 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005526:	0003      	movs	r3, r0
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800552a:	e021      	b.n	8005570 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800552c:	f7fe f990 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005530:	0003      	movs	r3, r0
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005534:	e01c      	b.n	8005570 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005536:	4b61      	ldr	r3, [pc, #388]	@ (80056bc <UART_SetConfig+0x52c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	4013      	ands	r3, r2
 800553e:	d002      	beq.n	8005546 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005540:	4b5f      	ldr	r3, [pc, #380]	@ (80056c0 <UART_SetConfig+0x530>)
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005544:	e014      	b.n	8005570 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005546:	4b5f      	ldr	r3, [pc, #380]	@ (80056c4 <UART_SetConfig+0x534>)
 8005548:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800554a:	e011      	b.n	8005570 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554c:	f7fe f8da 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 8005550:	0003      	movs	r3, r0
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005554:	e00c      	b.n	8005570 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005556:	2380      	movs	r3, #128	@ 0x80
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800555c:	e008      	b.n	8005570 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005562:	231a      	movs	r3, #26
 8005564:	2218      	movs	r2, #24
 8005566:	189b      	adds	r3, r3, r2
 8005568:	19db      	adds	r3, r3, r7
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
        break;
 800556e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d100      	bne.n	8005578 <UART_SetConfig+0x3e8>
 8005576:	e090      	b.n	800569a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557a:	005a      	lsls	r2, r3, #1
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	18d2      	adds	r2, r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	0019      	movs	r1, r3
 800558a:	0010      	movs	r0, r2
 800558c:	f7fa fdbc 	bl	8000108 <__udivsi3>
 8005590:	0003      	movs	r3, r0
 8005592:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d921      	bls.n	80055de <UART_SetConfig+0x44e>
 800559a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	025b      	lsls	r3, r3, #9
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d21c      	bcs.n	80055de <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	200e      	movs	r0, #14
 80055aa:	2418      	movs	r4, #24
 80055ac:	1903      	adds	r3, r0, r4
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	210f      	movs	r1, #15
 80055b2:	438a      	bics	r2, r1
 80055b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2207      	movs	r2, #7
 80055be:	4013      	ands	r3, r2
 80055c0:	b299      	uxth	r1, r3
 80055c2:	1903      	adds	r3, r0, r4
 80055c4:	19db      	adds	r3, r3, r7
 80055c6:	1902      	adds	r2, r0, r4
 80055c8:	19d2      	adds	r2, r2, r7
 80055ca:	8812      	ldrh	r2, [r2, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	1902      	adds	r2, r0, r4
 80055d6:	19d2      	adds	r2, r2, r7
 80055d8:	8812      	ldrh	r2, [r2, #0]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	e05d      	b.n	800569a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80055de:	231a      	movs	r3, #26
 80055e0:	2218      	movs	r2, #24
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	19db      	adds	r3, r3, r7
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e056      	b.n	800569a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ec:	231b      	movs	r3, #27
 80055ee:	2218      	movs	r2, #24
 80055f0:	189b      	adds	r3, r3, r2
 80055f2:	19db      	adds	r3, r3, r7
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d822      	bhi.n	8005640 <UART_SetConfig+0x4b0>
 80055fa:	009a      	lsls	r2, r3, #2
 80055fc:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <UART_SetConfig+0x538>)
 80055fe:	18d3      	adds	r3, r2, r3
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005604:	f7fe f90e 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005608:	0003      	movs	r3, r0
 800560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800560c:	e021      	b.n	8005652 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800560e:	f7fe f91f 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005612:	0003      	movs	r3, r0
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005616:	e01c      	b.n	8005652 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005618:	4b28      	ldr	r3, [pc, #160]	@ (80056bc <UART_SetConfig+0x52c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2210      	movs	r2, #16
 800561e:	4013      	ands	r3, r2
 8005620:	d002      	beq.n	8005628 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005622:	4b27      	ldr	r3, [pc, #156]	@ (80056c0 <UART_SetConfig+0x530>)
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005626:	e014      	b.n	8005652 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005628:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <UART_SetConfig+0x534>)
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800562c:	e011      	b.n	8005652 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7fe f869 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 8005632:	0003      	movs	r3, r0
 8005634:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005636:	e00c      	b.n	8005652 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800563e:	e008      	b.n	8005652 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005644:	231a      	movs	r3, #26
 8005646:	2218      	movs	r2, #24
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
        break;
 8005650:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d020      	beq.n	800569a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	085a      	lsrs	r2, r3, #1
 800565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005660:	18d2      	adds	r2, r2, r3
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	0019      	movs	r1, r3
 8005668:	0010      	movs	r0, r2
 800566a:	f7fa fd4d 	bl	8000108 <__udivsi3>
 800566e:	0003      	movs	r3, r0
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	2b0f      	cmp	r3, #15
 8005676:	d90a      	bls.n	800568e <UART_SetConfig+0x4fe>
 8005678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	025b      	lsls	r3, r3, #9
 800567e:	429a      	cmp	r2, r3
 8005680:	d205      	bcs.n	800568e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	b29a      	uxth	r2, r3
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
 800568c:	e005      	b.n	800569a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800568e:	231a      	movs	r3, #26
 8005690:	2218      	movs	r2, #24
 8005692:	189b      	adds	r3, r3, r2
 8005694:	19db      	adds	r3, r3, r7
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2200      	movs	r2, #0
 800569e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2200      	movs	r2, #0
 80056a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056a6:	231a      	movs	r3, #26
 80056a8:	2218      	movs	r2, #24
 80056aa:	189b      	adds	r3, r3, r2
 80056ac:	19db      	adds	r3, r3, r7
 80056ae:	781b      	ldrb	r3, [r3, #0]
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b00e      	add	sp, #56	@ 0x38
 80056b6:	bdb0      	pop	{r4, r5, r7, pc}
 80056b8:	08006040 	.word	0x08006040
 80056bc:	40021000 	.word	0x40021000
 80056c0:	003d0900 	.word	0x003d0900
 80056c4:	00f42400 	.word	0x00f42400
 80056c8:	08006064 	.word	0x08006064

080056cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d8:	2208      	movs	r2, #8
 80056da:	4013      	ands	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005810 <UART_AdvFeatureConfig+0x144>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	0019      	movs	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d00b      	beq.n	8005718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4a43      	ldr	r2, [pc, #268]	@ (8005814 <UART_AdvFeatureConfig+0x148>)
 8005708:	4013      	ands	r3, r2
 800570a:	0019      	movs	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	2202      	movs	r2, #2
 800571e:	4013      	ands	r3, r2
 8005720:	d00b      	beq.n	800573a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a3b      	ldr	r2, [pc, #236]	@ (8005818 <UART_AdvFeatureConfig+0x14c>)
 800572a:	4013      	ands	r3, r2
 800572c:	0019      	movs	r1, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	2204      	movs	r2, #4
 8005740:	4013      	ands	r3, r2
 8005742:	d00b      	beq.n	800575c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4a34      	ldr	r2, [pc, #208]	@ (800581c <UART_AdvFeatureConfig+0x150>)
 800574c:	4013      	ands	r3, r2
 800574e:	0019      	movs	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	2210      	movs	r2, #16
 8005762:	4013      	ands	r3, r2
 8005764:	d00b      	beq.n	800577e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4a2c      	ldr	r2, [pc, #176]	@ (8005820 <UART_AdvFeatureConfig+0x154>)
 800576e:	4013      	ands	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	2220      	movs	r2, #32
 8005784:	4013      	ands	r3, r2
 8005786:	d00b      	beq.n	80057a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4a25      	ldr	r2, [pc, #148]	@ (8005824 <UART_AdvFeatureConfig+0x158>)
 8005790:	4013      	ands	r3, r2
 8005792:	0019      	movs	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	2240      	movs	r2, #64	@ 0x40
 80057a6:	4013      	ands	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005828 <UART_AdvFeatureConfig+0x15c>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057c6:	2380      	movs	r3, #128	@ 0x80
 80057c8:	035b      	lsls	r3, r3, #13
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10b      	bne.n	80057e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	4a15      	ldr	r2, [pc, #84]	@ (800582c <UART_AdvFeatureConfig+0x160>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	2280      	movs	r2, #128	@ 0x80
 80057ec:	4013      	ands	r3, r2
 80057ee:	d00b      	beq.n	8005808 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005830 <UART_AdvFeatureConfig+0x164>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	0019      	movs	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }
}
 8005808:	46c0      	nop			@ (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}
 8005810:	ffff7fff 	.word	0xffff7fff
 8005814:	fffdffff 	.word	0xfffdffff
 8005818:	fffeffff 	.word	0xfffeffff
 800581c:	fffbffff 	.word	0xfffbffff
 8005820:	ffffefff 	.word	0xffffefff
 8005824:	ffffdfff 	.word	0xffffdfff
 8005828:	ffefffff 	.word	0xffefffff
 800582c:	ff9fffff 	.word	0xff9fffff
 8005830:	fff7ffff 	.word	0xfff7ffff

08005834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b092      	sub	sp, #72	@ 0x48
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2284      	movs	r2, #132	@ 0x84
 8005840:	2100      	movs	r1, #0
 8005842:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005844:	f7fc f90e 	bl	8001a64 <HAL_GetTick>
 8005848:	0003      	movs	r3, r0
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2208      	movs	r2, #8
 8005854:	4013      	ands	r3, r2
 8005856:	2b08      	cmp	r3, #8
 8005858:	d12c      	bne.n	80058b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800585a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585c:	2280      	movs	r2, #128	@ 0x80
 800585e:	0391      	lsls	r1, r2, #14
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4a46      	ldr	r2, [pc, #280]	@ (800597c <UART_CheckIdleState+0x148>)
 8005864:	9200      	str	r2, [sp, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	f000 f88c 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 800586c:	1e03      	subs	r3, r0, #0
 800586e:	d021      	beq.n	80058b4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005870:	f3ef 8310 	mrs	r3, PRIMASK
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800587a:	2301      	movs	r3, #1
 800587c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	f383 8810 	msr	PRIMASK, r3
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2180      	movs	r1, #128	@ 0x80
 8005892:	438a      	bics	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2278      	movs	r2, #120	@ 0x78
 80058ac:	2100      	movs	r1, #0
 80058ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05f      	b.n	8005974 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2204      	movs	r2, #4
 80058bc:	4013      	ands	r3, r2
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d146      	bne.n	8005950 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c4:	2280      	movs	r2, #128	@ 0x80
 80058c6:	03d1      	lsls	r1, r2, #15
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4a2c      	ldr	r2, [pc, #176]	@ (800597c <UART_CheckIdleState+0x148>)
 80058cc:	9200      	str	r2, [sp, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f000 f858 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 80058d4:	1e03      	subs	r3, r0, #0
 80058d6:	d03b      	beq.n	8005950 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d8:	f3ef 8310 	mrs	r3, PRIMASK
 80058dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e2:	2301      	movs	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f383 8810 	msr	PRIMASK, r3
}
 80058ec:	46c0      	nop			@ (mov r8, r8)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4921      	ldr	r1, [pc, #132]	@ (8005980 <UART_CheckIdleState+0x14c>)
 80058fa:	400a      	ands	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f383 8810 	msr	PRIMASK, r3
}
 8005908:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005910:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	633b      	str	r3, [r7, #48]	@ 0x30
 8005914:	2301      	movs	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2101      	movs	r1, #1
 800592c:	438a      	bics	r2, r1
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2280      	movs	r2, #128	@ 0x80
 8005940:	2120      	movs	r1, #32
 8005942:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2278      	movs	r2, #120	@ 0x78
 8005948:	2100      	movs	r1, #0
 800594a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e011      	b.n	8005974 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2280      	movs	r2, #128	@ 0x80
 800595a:	2120      	movs	r1, #32
 800595c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2278      	movs	r2, #120	@ 0x78
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b010      	add	sp, #64	@ 0x40
 800597a:	bd80      	pop	{r7, pc}
 800597c:	01ffffff 	.word	0x01ffffff
 8005980:	fffffedf 	.word	0xfffffedf

08005984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	1dfb      	adds	r3, r7, #7
 8005992:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	e051      	b.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3301      	adds	r3, #1
 800599a:	d04e      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599c:	f7fc f862 	bl	8001a64 <HAL_GetTick>
 80059a0:	0002      	movs	r2, r0
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d302      	bcc.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e051      	b.n	8005a5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	4013      	ands	r3, r2
 80059c0:	d03b      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xb6>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b80      	cmp	r3, #128	@ 0x80
 80059c6:	d038      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xb6>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d035      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2208      	movs	r2, #8
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d111      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2208      	movs	r2, #8
 80059e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 f900 	bl	8005bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2284      	movs	r2, #132	@ 0x84
 80059f0:	2108      	movs	r1, #8
 80059f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2278      	movs	r2, #120	@ 0x78
 80059f8:	2100      	movs	r1, #0
 80059fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e02c      	b.n	8005a5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	2380      	movs	r3, #128	@ 0x80
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	2380      	movs	r3, #128	@ 0x80
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d112      	bne.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2280      	movs	r2, #128	@ 0x80
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	0018      	movs	r0, r3
 8005a22:	f000 f8e3 	bl	8005bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2284      	movs	r2, #132	@ 0x84
 8005a2a:	2120      	movs	r1, #32
 8005a2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2278      	movs	r2, #120	@ 0x78
 8005a32:	2100      	movs	r1, #0
 8005a34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e00f      	b.n	8005a5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	425a      	negs	r2, r3
 8005a4a:	4153      	adcs	r3, r2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	001a      	movs	r2, r3
 8005a50:	1dfb      	adds	r3, r7, #7
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d09e      	beq.n	8005996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b090      	sub	sp, #64	@ 0x40
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	1dbb      	adds	r3, r7, #6
 8005a70:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1dba      	adds	r2, r7, #6
 8005a7c:	2158      	movs	r1, #88	@ 0x58
 8005a7e:	8812      	ldrh	r2, [r2, #0]
 8005a80:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2284      	movs	r2, #132	@ 0x84
 8005a86:	2100      	movs	r1, #0
 8005a88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2280      	movs	r2, #128	@ 0x80
 8005a8e:	2122      	movs	r1, #34	@ 0x22
 8005a90:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d028      	beq.n	8005aec <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b98 <UART_Start_Receive_DMA+0x134>)
 8005aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8005b9c <UART_Start_Receive_DMA+0x138>)
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aae:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba0 <UART_Start_Receive_DMA+0x13c>)
 8005ab0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3324      	adds	r3, #36	@ 0x24
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	001a      	movs	r2, r3
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	f7fc fd5e 	bl	8002590 <HAL_DMA_Start_IT>
 8005ad4:	1e03      	subs	r3, r0, #0
 8005ad6:	d009      	beq.n	8005aec <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2284      	movs	r2, #132	@ 0x84
 8005adc:	2110      	movs	r1, #16
 8005ade:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2280      	movs	r2, #128	@ 0x80
 8005ae4:	2120      	movs	r1, #32
 8005ae6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e050      	b.n	8005b8e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d019      	beq.n	8005b28 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af4:	f3ef 8310 	mrs	r3, PRIMASK
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005afe:	2301      	movs	r3, #1
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	46c0      	nop			@ (mov r8, r8)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2180      	movs	r1, #128	@ 0x80
 8005b16:	0049      	lsls	r1, r1, #1
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b2e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b32:	2301      	movs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			@ (mov r8, r8)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b64:	2301      	movs	r3, #1
 8005b66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2140      	movs	r1, #64	@ 0x40
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b010      	add	sp, #64	@ 0x40
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	08005cb5 	.word	0x08005cb5
 8005b9c:	08005e1d 	.word	0x08005e1d
 8005ba0:	08005e9b 	.word	0x08005e9b

08005ba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bac:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	46c0      	nop			@ (mov r8, r8)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	21c0      	movs	r1, #192	@ 0xc0
 8005bce:	438a      	bics	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b006      	add	sp, #24
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08e      	sub	sp, #56	@ 0x38
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f383 8810 	msr	PRIMASK, r3
}
 8005c08:	46c0      	nop			@ (mov r8, r8)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4926      	ldr	r1, [pc, #152]	@ (8005cb0 <UART_EndRxTransfer+0xc4>)
 8005c16:	400a      	ands	r2, r1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c26:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c30:	2301      	movs	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	f383 8810 	msr	PRIMASK, r3
}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2101      	movs	r1, #1
 8005c48:	438a      	bics	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	f383 8810 	msr	PRIMASK, r3
}
 8005c56:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d118      	bne.n	8005c92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f383 8810 	msr	PRIMASK, r3
}
 8005c74:	46c0      	nop			@ (mov r8, r8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2110      	movs	r1, #16
 8005c82:	438a      	bics	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2280      	movs	r2, #128	@ 0x80
 8005c96:	2120      	movs	r1, #32
 8005c98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b00e      	add	sp, #56	@ 0x38
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	fffffedf 	.word	0xfffffedf

08005cb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b094      	sub	sp, #80	@ 0x50
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d16f      	bne.n	8005dae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	225a      	movs	r2, #90	@ 0x5a
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cda:	617b      	str	r3, [r7, #20]
  return(result);
 8005cdc:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f383 8810 	msr	PRIMASK, r3
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4948      	ldr	r1, [pc, #288]	@ (8005e18 <UART_DMAReceiveCplt+0x164>)
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d08:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0c:	623b      	str	r3, [r7, #32]
  return(result);
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d12:	2301      	movs	r3, #1
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	f383 8810 	msr	PRIMASK, r3
}
 8005d1c:	46c0      	nop			@ (mov r8, r8)
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d44:	2301      	movs	r3, #1
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	f383 8810 	msr	PRIMASK, r3
}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2140      	movs	r1, #64	@ 0x40
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d62:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d66:	f383 8810 	msr	PRIMASK, r3
}
 8005d6a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6e:	2280      	movs	r2, #128	@ 0x80
 8005d70:	2120      	movs	r1, #32
 8005d72:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d118      	bne.n	8005dae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d82:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d86:	2301      	movs	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			@ (mov r8, r8)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2110      	movs	r1, #16
 8005d9e:	438a      	bics	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db0:	2200      	movs	r2, #0
 8005db2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d124      	bne.n	8005e06 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dbe:	225a      	movs	r2, #90	@ 0x5a
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	213a      	movs	r1, #58	@ 0x3a
 8005dcc:	187b      	adds	r3, r7, r1
 8005dce:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd2:	2258      	movs	r2, #88	@ 0x58
 8005dd4:	5a9b      	ldrh	r3, [r3, r2]
 8005dd6:	187a      	adds	r2, r7, r1
 8005dd8:	8812      	ldrh	r2, [r2, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d204      	bcs.n	8005de8 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de0:	187a      	adds	r2, r7, r1
 8005de2:	215a      	movs	r1, #90	@ 0x5a
 8005de4:	8812      	ldrh	r2, [r2, #0]
 8005de6:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dea:	2258      	movs	r2, #88	@ 0x58
 8005dec:	5a9a      	ldrh	r2, [r3, r2]
 8005dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df0:	215a      	movs	r1, #90	@ 0x5a
 8005df2:	5a5b      	ldrh	r3, [r3, r1]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dfc:	0011      	movs	r1, r2
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f7ff f9ba 	bl	8005178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e04:	e003      	b.n	8005e0e <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7fa fd15 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b014      	add	sp, #80	@ 0x50
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	fffffeff 	.word	0xfffffeff

08005e1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d128      	bne.n	8005e8a <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2258      	movs	r2, #88	@ 0x58
 8005e3c:	5a9b      	ldrh	r3, [r3, r2]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	b299      	uxth	r1, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	225a      	movs	r2, #90	@ 0x5a
 8005e46:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	210a      	movs	r1, #10
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2258      	movs	r2, #88	@ 0x58
 8005e58:	5a9b      	ldrh	r3, [r3, r2]
 8005e5a:	187a      	adds	r2, r7, r1
 8005e5c:	8812      	ldrh	r2, [r2, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d804      	bhi.n	8005e6c <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	187a      	adds	r2, r7, r1
 8005e66:	215a      	movs	r1, #90	@ 0x5a
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2258      	movs	r2, #88	@ 0x58
 8005e70:	5a9a      	ldrh	r2, [r3, r2]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	215a      	movs	r1, #90	@ 0x5a
 8005e76:	5a5b      	ldrh	r3, [r3, r1]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	0011      	movs	r1, r2
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7ff f978 	bl	8005178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e88:	e003      	b.n	8005e92 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7ff f963 	bl	8005158 <HAL_UART_RxHalfCpltCallback>
}
 8005e92:	46c0      	nop			@ (mov r8, r8)
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b004      	add	sp, #16
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2280      	movs	r2, #128	@ 0x80
 8005eb2:	589b      	ldr	r3, [r3, r2]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2280      	movs	r2, #128	@ 0x80
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d10a      	bne.n	8005eda <UART_DMAError+0x40>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b21      	cmp	r3, #33	@ 0x21
 8005ec8:	d107      	bne.n	8005eda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2252      	movs	r2, #82	@ 0x52
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7ff fe65 	bl	8005ba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2240      	movs	r2, #64	@ 0x40
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	d10a      	bne.n	8005efe <UART_DMAError+0x64>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b22      	cmp	r3, #34	@ 0x22
 8005eec:	d107      	bne.n	8005efe <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	225a      	movs	r2, #90	@ 0x5a
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f7ff fe77 	bl	8005bec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2284      	movs	r2, #132	@ 0x84
 8005f02:	589b      	ldr	r3, [r3, r2]
 8005f04:	2210      	movs	r2, #16
 8005f06:	431a      	orrs	r2, r3
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2184      	movs	r1, #132	@ 0x84
 8005f0c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7ff f929 	bl	8005168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b006      	add	sp, #24
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	225a      	movs	r2, #90	@ 0x5a
 8005f30:	2100      	movs	r1, #0
 8005f32:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7ff f916 	bl	8005168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3c:	46c0      	nop			@ (mov r8, r8)
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b004      	add	sp, #16
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	2301      	movs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f383 8810 	msr	PRIMASK, r3
}
 8005f60:	46c0      	nop			@ (mov r8, r8)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2140      	movs	r1, #64	@ 0x40
 8005f6e:	438a      	bics	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f383 8810 	msr	PRIMASK, r3
}
 8005f7c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7ff f8db 	bl	8005148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b006      	add	sp, #24
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b002      	add	sp, #8
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <memset>:
 8005faa:	0003      	movs	r3, r0
 8005fac:	1882      	adds	r2, r0, r2
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d100      	bne.n	8005fb4 <memset+0xa>
 8005fb2:	4770      	bx	lr
 8005fb4:	7019      	strb	r1, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	e7f9      	b.n	8005fae <memset+0x4>
	...

08005fbc <__libc_init_array>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff4 <__libc_init_array+0x38>)
 8005fc2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ff8 <__libc_init_array+0x3c>)
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	42a6      	cmp	r6, r4
 8005fca:	d109      	bne.n	8005fe0 <__libc_init_array+0x24>
 8005fcc:	2600      	movs	r6, #0
 8005fce:	f000 f819 	bl	8006004 <_init>
 8005fd2:	4c0a      	ldr	r4, [pc, #40]	@ (8005ffc <__libc_init_array+0x40>)
 8005fd4:	4d0a      	ldr	r5, [pc, #40]	@ (8006000 <__libc_init_array+0x44>)
 8005fd6:	1b64      	subs	r4, r4, r5
 8005fd8:	10a4      	asrs	r4, r4, #2
 8005fda:	42a6      	cmp	r6, r4
 8005fdc:	d105      	bne.n	8005fea <__libc_init_array+0x2e>
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	00b3      	lsls	r3, r6, #2
 8005fe2:	58eb      	ldr	r3, [r5, r3]
 8005fe4:	4798      	blx	r3
 8005fe6:	3601      	adds	r6, #1
 8005fe8:	e7ee      	b.n	8005fc8 <__libc_init_array+0xc>
 8005fea:	00b3      	lsls	r3, r6, #2
 8005fec:	58eb      	ldr	r3, [r5, r3]
 8005fee:	4798      	blx	r3
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	e7f2      	b.n	8005fda <__libc_init_array+0x1e>
 8005ff4:	08006090 	.word	0x08006090
 8005ff8:	08006090 	.word	0x08006090
 8005ffc:	08006094 	.word	0x08006094
 8006000:	08006090 	.word	0x08006090

08006004 <_init>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr

08006010 <_fini>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr
