
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c0  080074c0  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080074c0  080074c0  000084c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c8  080074c8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c8  080074c8  000084c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080074d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000006c  0800753c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800753c  000095ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012545  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ce  00000000  00000000  0001b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c65  00000000  00000000  0001f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001807f  00000000  00000000  0002064d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001582e  00000000  00000000  000386cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c81c  00000000  00000000  0004defa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f74  00000000  00000000  000da75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000de6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800738c 	.word	0x0800738c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800738c 	.word	0x0800738c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	d434      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002aa:	469b      	mov	fp, r3
 80002ac:	4653      	mov	r3, sl
 80002ae:	465a      	mov	r2, fp
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83b      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e079      	b.n	80003ba <__udivmoddi4+0x146>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e076      	b.n	80003c0 <__udivmoddi4+0x14c>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e029      	b.n	8000340 <__udivmoddi4+0xcc>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	469b      	mov	fp, r3
 8000318:	2320      	movs	r3, #32
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	4652      	mov	r2, sl
 800031e:	40da      	lsrs	r2, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0013      	movs	r3, r2
 8000324:	464a      	mov	r2, r9
 8000326:	408a      	lsls	r2, r1
 8000328:	0017      	movs	r7, r2
 800032a:	4642      	mov	r2, r8
 800032c:	431f      	orrs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d9c3      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	4643      	mov	r3, r8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0d8      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000346:	07fb      	lsls	r3, r7, #31
 8000348:	0872      	lsrs	r2, r6, #1
 800034a:	431a      	orrs	r2, r3
 800034c:	4646      	mov	r6, r8
 800034e:	087b      	lsrs	r3, r7, #1
 8000350:	e00e      	b.n	8000370 <__udivmoddi4+0xfc>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d101      	bne.n	800035a <__udivmoddi4+0xe6>
 8000356:	42a2      	cmp	r2, r4
 8000358:	d80c      	bhi.n	8000374 <__udivmoddi4+0x100>
 800035a:	1aa4      	subs	r4, r4, r2
 800035c:	419d      	sbcs	r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	1924      	adds	r4, r4, r4
 8000362:	416d      	adcs	r5, r5
 8000364:	2100      	movs	r1, #0
 8000366:	3e01      	subs	r6, #1
 8000368:	1824      	adds	r4, r4, r0
 800036a:	414d      	adcs	r5, r1
 800036c:	2e00      	cmp	r6, #0
 800036e:	d006      	beq.n	800037e <__udivmoddi4+0x10a>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d9ee      	bls.n	8000352 <__udivmoddi4+0xde>
 8000374:	3e01      	subs	r6, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2e00      	cmp	r6, #0
 800037c:	d1f8      	bne.n	8000370 <__udivmoddi4+0xfc>
 800037e:	9800      	ldr	r0, [sp, #0]
 8000380:	9901      	ldr	r1, [sp, #4]
 8000382:	465b      	mov	r3, fp
 8000384:	1900      	adds	r0, r0, r4
 8000386:	4169      	adcs	r1, r5
 8000388:	2b00      	cmp	r3, #0
 800038a:	db24      	blt.n	80003d6 <__udivmoddi4+0x162>
 800038c:	002b      	movs	r3, r5
 800038e:	465a      	mov	r2, fp
 8000390:	4644      	mov	r4, r8
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	40e2      	lsrs	r2, r4
 8000398:	001c      	movs	r4, r3
 800039a:	465b      	mov	r3, fp
 800039c:	0015      	movs	r5, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db2a      	blt.n	80003f8 <__udivmoddi4+0x184>
 80003a2:	0026      	movs	r6, r4
 80003a4:	409e      	lsls	r6, r3
 80003a6:	0033      	movs	r3, r6
 80003a8:	0026      	movs	r6, r4
 80003aa:	4647      	mov	r7, r8
 80003ac:	40be      	lsls	r6, r7
 80003ae:	0032      	movs	r2, r6
 80003b0:	1a80      	subs	r0, r0, r2
 80003b2:	4199      	sbcs	r1, r3
 80003b4:	9000      	str	r0, [sp, #0]
 80003b6:	9101      	str	r1, [sp, #4]
 80003b8:	e79e      	b.n	80002f8 <__udivmoddi4+0x84>
 80003ba:	42a3      	cmp	r3, r4
 80003bc:	d8bc      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80003be:	e782      	b.n	80002c6 <__udivmoddi4+0x52>
 80003c0:	4642      	mov	r2, r8
 80003c2:	2320      	movs	r3, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	2200      	movs	r2, #0
 80003ca:	9100      	str	r1, [sp, #0]
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	2201      	movs	r2, #1
 80003d0:	40da      	lsrs	r2, r3
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	e785      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d6:	4642      	mov	r2, r8
 80003d8:	2320      	movs	r3, #32
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	4646      	mov	r6, r8
 80003e0:	409a      	lsls	r2, r3
 80003e2:	0023      	movs	r3, r4
 80003e4:	40f3      	lsrs	r3, r6
 80003e6:	4644      	mov	r4, r8
 80003e8:	4313      	orrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dad4      	bge.n	80003a2 <__udivmoddi4+0x12e>
 80003f8:	4642      	mov	r2, r8
 80003fa:	002f      	movs	r7, r5
 80003fc:	2320      	movs	r3, #32
 80003fe:	0026      	movs	r6, r4
 8000400:	4097      	lsls	r7, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	40de      	lsrs	r6, r3
 8000406:	003b      	movs	r3, r7
 8000408:	4333      	orrs	r3, r6
 800040a:	e7cd      	b.n	80003a8 <__udivmoddi4+0x134>

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	@ (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000466:	003b      	movs	r3, r7
 8000468:	0018      	movs	r0, r3
 800046a:	2308      	movs	r3, #8
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f006 f9ea 	bl	8006848 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000474:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000476:	4a38      	ldr	r2, [pc, #224]	@ (8000558 <MX_ADC_Init+0xf8>)
 8000478:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800047a:	4b36      	ldr	r3, [pc, #216]	@ (8000554 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000480:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000482:	22c0      	movs	r2, #192	@ 0xc0
 8000484:	0612      	lsls	r2, r2, #24
 8000486:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000488:	4b32      	ldr	r3, [pc, #200]	@ (8000554 <MX_ADC_Init+0xf4>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800048e:	4b31      	ldr	r3, [pc, #196]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000490:	2200      	movs	r2, #0
 8000492:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000494:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <MX_ADC_Init+0xf4>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004aa:	2221      	movs	r2, #33	@ 0x21
 80004ac:	2100      	movs	r1, #0
 80004ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b0:	4b28      	ldr	r3, [pc, #160]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b6:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004b8:	22c2      	movs	r2, #194	@ 0xc2
 80004ba:	32ff      	adds	r2, #255	@ 0xff
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004be:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004c0:	222c      	movs	r2, #44	@ 0x2c
 80004c2:	2100      	movs	r1, #0
 80004c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c6:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004cc:	4b21      	ldr	r3, [pc, #132]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004d2:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC_Init+0xf4>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fd4c 	bl	8001f84 <HAL_ADC_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004f0:	f000 fcbe 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2201      	movs	r2, #1
 80004f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2280      	movs	r2, #128	@ 0x80
 80004fe:	0152      	lsls	r2, r2, #5
 8000500:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000502:	003a      	movs	r2, r7
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f001 ffab 	bl	8002464 <HAL_ADC_ConfigChannel>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000512:	f000 fcad 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000516:	003b      	movs	r3, r7
 8000518:	4a10      	ldr	r2, [pc, #64]	@ (800055c <MX_ADC_Init+0xfc>)
 800051a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800051c:	003a      	movs	r2, r7
 800051e:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <MX_ADC_Init+0xf4>)
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f001 ff9e 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800052c:	f000 fca0 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000530:	003b      	movs	r3, r7
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <MX_ADC_Init+0x100>)
 8000534:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000536:	003a      	movs	r2, r7
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_ADC_Init+0xf4>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f001 ff91 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000546:	f000 fc93 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	20000088 	.word	0x20000088
 8000558:	40012400 	.word	0x40012400
 800055c:	04000002 	.word	0x04000002
 8000560:	3c008000 	.word	0x3c008000

08000564 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	@ 0x2c
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2414      	movs	r4, #20
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	2314      	movs	r3, #20
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f006 f966 	bl	8006848 <memset>
  if(adcHandle->Instance==ADC1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a22      	ldr	r2, [pc, #136]	@ (800060c <HAL_ADC_MspInit+0xa8>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d13d      	bne.n	8000602 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058a:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0089      	lsls	r1, r1, #2
 8000590:	430a      	orrs	r2, r1
 8000592:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 8000596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 800059a:	2101      	movs	r1, #1
 800059c:	430a      	orrs	r2, r1
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a4:	2201      	movs	r2, #1
 80005a6:	4013      	ands	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005b2:	2104      	movs	r1, #4
 80005b4:	430a      	orrs	r2, r1
 80005b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <HAL_ADC_MspInit+0xac>)
 80005ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005bc:	2204      	movs	r2, #4
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2203      	movs	r2, #3
 80005c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2203      	movs	r2, #3
 80005ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	23a0      	movs	r3, #160	@ 0xa0
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fc26 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2220      	movs	r2, #32
 80005e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2203      	movs	r2, #3
 80005ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <HAL_ADC_MspInit+0xb0>)
 80005fa:	0019      	movs	r1, r3
 80005fc:	0010      	movs	r0, r2
 80005fe:	f002 fc17 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b00b      	add	sp, #44	@ 0x2c
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	40012400 	.word	0x40012400
 8000610:	40021000 	.word	0x40021000
 8000614:	50000800 	.word	0x50000800

08000618 <DFPlayerMini_InitPlayer>:
static uint8_t _received[10];
static uint8_t _isSending = 0;
static uint32_t _timeOutTimer = 0;

// Initialize the DFPlayer Mini with the provided UART handle
void DFPlayerMini_InitPlayer(UART_HandleTypeDef *huart) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    _huart = huart;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <DFPlayerMini_InitPlayer+0x34>)
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]

    // Initialize the sending buffer with default values
    _sending[0] = 0x7E;	 // start
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <DFPlayerMini_InitPlayer+0x38>)
 8000628:	227e      	movs	r2, #126	@ 0x7e
 800062a:	701a      	strb	r2, [r3, #0]
    _sending[1] = 0xFF;	 // version
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <DFPlayerMini_InitPlayer+0x38>)
 800062e:	22ff      	movs	r2, #255	@ 0xff
 8000630:	705a      	strb	r2, [r3, #1]
    _sending[2] = 0x06;  // Data length
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <DFPlayerMini_InitPlayer+0x38>)
 8000634:	2206      	movs	r2, #6
 8000636:	709a      	strb	r2, [r3, #2]
    _sending[9] = 0xEF;	 // End
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <DFPlayerMini_InitPlayer+0x38>)
 800063a:	22ef      	movs	r2, #239	@ 0xef
 800063c:	725a      	strb	r2, [r3, #9]
    DFPlayerMini_SetVolume(30);
 800063e:	201e      	movs	r0, #30
 8000640:	f000 f876 	bl	8000730 <DFPlayerMini_SetVolume>
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000e4 	.word	0x200000e4
 8000650:	200000e8 	.word	0x200000e8

08000654 <DFPlayerMini_SendData>:
	DFPlayerMini_SetVolume(volume); // initialize volume
//	Printf("Send Cmd that change volume \r\n");
	HAL_Delay(500);
}

void DFPlayerMini_SendData(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    if (_sending[4]) {  // ACK 모드가 활성화 되어 있으면 마지막 전송이 끝날 때까지 대기
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <DFPlayerMini_SendData+0x58>)
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d009      	beq.n	8000674 <DFPlayerMini_SendData+0x20>
        while (_isSending) {
 8000660:	e004      	b.n	800066c <DFPlayerMini_SendData+0x18>
            HAL_Delay(0);  // STM32에서는 delay(0) 대신 HAL_Delay(0)을 사용하지만, 사실 0은 아무 작업도 하지 않음
 8000662:	2000      	movs	r0, #0
 8000664:	f001 fc6a 	bl	8001f3c <HAL_Delay>
            DFPlayerMini_WaitForData();  // 데이터가 올 때까지 대기
 8000668:	f000 f874 	bl	8000754 <DFPlayerMini_WaitForData>
        while (_isSending) {
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <DFPlayerMini_SendData+0x5c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f6      	bne.n	8000662 <DFPlayerMini_SendData+0xe>
        }
    }

    // USART를 통해 데이터를 전송
    if (HAL_UART_Transmit(_huart, _sending, 10, 500) != HAL_OK) {
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <DFPlayerMini_SendData+0x60>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	23fa      	movs	r3, #250	@ 0xfa
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	490b      	ldr	r1, [pc, #44]	@ (80006ac <DFPlayerMini_SendData+0x58>)
 800067e:	220a      	movs	r2, #10
 8000680:	f004 faac 	bl	8004bdc <HAL_UART_Transmit>
        // 전송 오류 처리 (필요시 추가)
    }

    _timeOutTimer = HAL_GetTick();  // 현재 시간 기록 (타임아웃 측정)
 8000684:	f001 fc50 	bl	8001f28 <HAL_GetTick>
 8000688:	0002      	movs	r2, r0
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <DFPlayerMini_SendData+0x64>)
 800068c:	601a      	str	r2, [r3, #0]
    _isSending = _sending[4];  // ACK 상태에 따라 _isSending을 설정
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <DFPlayerMini_SendData+0x58>)
 8000690:	791a      	ldrb	r2, [r3, #4]
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <DFPlayerMini_SendData+0x5c>)
 8000694:	701a      	strb	r2, [r3, #0]

    if (!_sending[4]) {  // ACK 모드가 비활성화 되어 있으면 10ms 대기
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <DFPlayerMini_SendData+0x58>)
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <DFPlayerMini_SendData+0x50>
        HAL_Delay(10);
 800069e:	200a      	movs	r0, #10
 80006a0:	f001 fc4c 	bl	8001f3c <HAL_Delay>
    }
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	200000e8 	.word	0x200000e8
 80006b0:	200000fe 	.word	0x200000fe
 80006b4:	200000e4 	.word	0x200000e4
 80006b8:	20000100 	.word	0x20000100

080006bc <DFPlayerMini_SendDataWithOneArg>:
void DFPlayerMini_SendDataWithNoArg(uint8_t command) {
	DFPlayerMini_SendDataWithOneArg(command, 0);
}

// Send the data stack to the DFPlayer Mini (with command and one argument)
void DFPlayerMini_SendDataWithOneArg(uint8_t command, uint16_t argument) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	1c0a      	adds	r2, r1, #0
 80006cc:	801a      	strh	r2, [r3, #0]
    _sending[3] = command;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <DFPlayerMini_SendDataWithOneArg+0x4c>)
 80006d0:	1dfa      	adds	r2, r7, #7
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	70da      	strb	r2, [r3, #3]
    DFPlayerMini_Uint16ToArray(argument, _sending+5);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <DFPlayerMini_SendDataWithOneArg+0x50>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 f85e 	bl	80007a0 <DFPlayerMini_Uint16ToArray>
    DFPlayerMini_Uint16ToArray(DFPlayerMini_CalculateCheckSum(_sending), _sending+7);
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <DFPlayerMini_SendDataWithOneArg+0x4c>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f872 	bl	80007d0 <DFPlayerMini_CalculateCheckSum>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <DFPlayerMini_SendDataWithOneArg+0x54>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f000 f853 	bl	80007a0 <DFPlayerMini_Uint16ToArray>
    DFPlayerMini_SendData();
 80006fa:	f7ff ffab 	bl	8000654 <DFPlayerMini_SendData>
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	200000e8 	.word	0x200000e8
 800070c:	200000ed 	.word	0x200000ed
 8000710:	200000ef 	.word	0x200000ef

08000714 <DFPlayerMini_PlayFile>:
//    DFPlayerMini_Uint16ToArray(DFPlayerMini_CalculateCheckSum(_sending), &_sending[7]);
//
//    HAL_UART_Transmit(_huart, _sending, 10, 500);
//}

void DFPlayerMini_PlayFile(int fileNumber) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    DFPlayerMini_SendDataWithOneArg(0x03, fileNumber);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	b29b      	uxth	r3, r3
 8000720:	0019      	movs	r1, r3
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff ffca 	bl	80006bc <DFPlayerMini_SendDataWithOneArg>
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b002      	add	sp, #8
 800072e:	bd80      	pop	{r7, pc}

08000730 <DFPlayerMini_SetVolume>:

void DFPlayerMini_PlayPrevious(void) {
    DFPlayerMini_SendDataWithNoArg(0x02);  // No argument, just the command
}

void DFPlayerMini_SetVolume(uint8_t volume) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	701a      	strb	r2, [r3, #0]
    DFPlayerMini_SendDataWithOneArg(0x06, volume);
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	0019      	movs	r1, r3
 8000744:	2006      	movs	r0, #6
 8000746:	f7ff ffb9 	bl	80006bc <DFPlayerMini_SendDataWithOneArg>
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <DFPlayerMini_WaitForData>:
void DFPlayerMini_DisableLoopPlayback(void) {
    DFPlayerMini_SendDataWithNoArg(0x19);  // No argument, just the command
}

// Wait for data from DFPlayer Mini to become available
_Bool DFPlayerMini_WaitForData(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	uint32_t startTick = HAL_GetTick();  // 타임아웃 시작 시간
 800075a:	f001 fbe5 	bl	8001f28 <HAL_GetTick>
 800075e:	0003      	movs	r3, r0
 8000760:	607b      	str	r3, [r7, #4]
	while (!HAL_UART_Receive(_huart, _received, 10, 500)) {
 8000762:	e00a      	b.n	800077a <DFPlayerMini_WaitForData+0x26>
		if (HAL_GetTick() - startTick > 500) {  // 500ms 타임아웃
 8000764:	f001 fbe0 	bl	8001f28 <HAL_GetTick>
 8000768:	0002      	movs	r2, r0
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	23fa      	movs	r3, #250	@ 0xfa
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	429a      	cmp	r2, r3
 8000774:	d901      	bls.n	800077a <DFPlayerMini_WaitForData+0x26>
			return 0;  // 타임아웃 발생
 8000776:	2300      	movs	r3, #0
 8000778:	e00a      	b.n	8000790 <DFPlayerMini_WaitForData+0x3c>
	while (!HAL_UART_Receive(_huart, _received, 10, 500)) {
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <DFPlayerMini_WaitForData+0x44>)
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	23fa      	movs	r3, #250	@ 0xfa
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4906      	ldr	r1, [pc, #24]	@ (800079c <DFPlayerMini_WaitForData+0x48>)
 8000784:	220a      	movs	r2, #10
 8000786:	f004 fac9 	bl	8004d1c <HAL_UART_Receive>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d0ea      	beq.n	8000764 <DFPlayerMini_WaitForData+0x10>
		}
	}
	return 1;  // 데이터가 정상적으로 수신됨
 800078e:	2301      	movs	r3, #1
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b002      	add	sp, #8
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000e4 	.word	0x200000e4
 800079c:	200000f4 	.word	0x200000f4

080007a0 <DFPlayerMini_Uint16ToArray>:
bool DFPlayerMini_ValidateReceivedData(void) {
    return DFPlayerMini_CalculateCheckSum(_received) == uint16ToUint16(&_received[7]);
}

// Convert a 16-bit value into two bytes
void DFPlayerMini_Uint16ToArray(uint16_t value, uint8_t *array) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	0002      	movs	r2, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	801a      	strh	r2, [r3, #0]
    *array = (uint8_t)(value >> 8);
 80007ae:	1dbb      	adds	r3, r7, #6
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	701a      	strb	r2, [r3, #0]
    *(array + 1) = (uint8_t)(value);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	1dba      	adds	r2, r7, #6
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	701a      	strb	r2, [r3, #0]
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b002      	add	sp, #8
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <DFPlayerMini_CalculateCheckSum>:

// Calculate the checksum for the data
uint16_t DFPlayerMini_CalculateCheckSum(uint8_t *buffer) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    uint16_t sum = 0;
 80007d8:	230e      	movs	r3, #14
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	801a      	strh	r2, [r3, #0]
    for (int i = 1; i < 7; i++) {
 80007e0:	2301      	movs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	e00d      	b.n	8000802 <DFPlayerMini_CalculateCheckSum+0x32>
        sum += buffer[i];
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0019      	movs	r1, r3
 80007f0:	220e      	movs	r2, #14
 80007f2:	18bb      	adds	r3, r7, r2
 80007f4:	18ba      	adds	r2, r7, r2
 80007f6:	8812      	ldrh	r2, [r2, #0]
 80007f8:	188a      	adds	r2, r1, r2
 80007fa:	801a      	strh	r2, [r3, #0]
    for (int i = 1; i < 7; i++) {
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	3301      	adds	r3, #1
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	2b06      	cmp	r3, #6
 8000806:	ddee      	ble.n	80007e6 <DFPlayerMini_CalculateCheckSum+0x16>
    }
    return -sum;
 8000808:	230e      	movs	r3, #14
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	425b      	negs	r3, r3
 8000810:	b29b      	uxth	r3, r3
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b004      	add	sp, #16
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_DMA_Init+0x48>)
 8000824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_DMA_Init+0x48>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <MX_DMA_Init+0x48>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200a      	movs	r0, #10
 8000840:	f002 f882 	bl	8002948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f894 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200b      	movs	r0, #11
 8000850:	f002 f87a 	bl	8002948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000854:	200b      	movs	r0, #11
 8000856:	f002 f88c 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	@ 0x2c
 800086c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	2414      	movs	r4, #20
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	2314      	movs	r3, #20
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f005 ffe5 	bl	8006848 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b5b      	ldr	r3, [pc, #364]	@ (80009ec <MX_GPIO_Init+0x184>)
 8000880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <MX_GPIO_Init+0x184>)
 8000884:	2104      	movs	r1, #4
 8000886:	430a      	orrs	r2, r1
 8000888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800088a:	4b58      	ldr	r3, [pc, #352]	@ (80009ec <MX_GPIO_Init+0x184>)
 800088c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088e:	2204      	movs	r2, #4
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b55      	ldr	r3, [pc, #340]	@ (80009ec <MX_GPIO_Init+0x184>)
 8000898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800089a:	4b54      	ldr	r3, [pc, #336]	@ (80009ec <MX_GPIO_Init+0x184>)
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	430a      	orrs	r2, r1
 80008a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a2:	4b52      	ldr	r3, [pc, #328]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008b2:	4b4e      	ldr	r3, [pc, #312]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ba:	4b4c      	ldr	r3, [pc, #304]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b49      	ldr	r3, [pc, #292]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008ca:	4b48      	ldr	r3, [pc, #288]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008d2:	4b46      	ldr	r3, [pc, #280]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	4b43      	ldr	r3, [pc, #268]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008e4:	2108      	movs	r1, #8
 80008e6:	430a      	orrs	r2, r1
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ea:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <MX_GPIO_Init+0x184>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ee:	2208      	movs	r2, #8
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin, GPIO_PIN_RESET);
 80008f6:	2398      	movs	r3, #152	@ 0x98
 80008f8:	0099      	lsls	r1, r3, #2
 80008fa:	23a0      	movs	r3, #160	@ 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2200      	movs	r2, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fc30 	bl	8003166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000906:	23c0      	movs	r3, #192	@ 0xc0
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4839      	ldr	r0, [pc, #228]	@ (80009f0 <MX_GPIO_Init+0x188>)
 800090c:	2200      	movs	r2, #0
 800090e:	0019      	movs	r1, r3
 8000910:	f002 fc29 	bl	8003166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0192      	lsls	r2, r2, #6
 800091a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2284      	movs	r2, #132	@ 0x84
 8000920:	0392      	lsls	r2, r2, #14
 8000922:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	193b      	adds	r3, r7, r4
 800092c:	4a30      	ldr	r2, [pc, #192]	@ (80009f0 <MX_GPIO_Init+0x188>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f002 fa7d 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_ENC_A_Pin ROOF_ENC_B_Pin */
  GPIO_InitStruct.Pin = ROOF_ENC_A_Pin|ROOF_ENC_B_Pin;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2203      	movs	r2, #3
 800093c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	22c4      	movs	r2, #196	@ 0xc4
 8000942:	0392      	lsls	r2, r2, #14
 8000944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	000c      	movs	r4, r1
 800094e:	187b      	adds	r3, r7, r1
 8000950:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <MX_GPIO_Init+0x188>)
 8000952:	0019      	movs	r1, r3
 8000954:	0010      	movs	r0, r2
 8000956:	f002 fa6b 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_DIR_Pin ROOF_DIR_Pin TILTING_BRAKE_Pin */
  GPIO_InitStruct.Pin = TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin;
 800095a:	0021      	movs	r1, r4
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2298      	movs	r2, #152	@ 0x98
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	000c      	movs	r4, r1
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	193a      	adds	r2, r7, r4
 800097a:	23a0      	movs	r3, #160	@ 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f002 fa55 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_ENC_A_Pin TILTING_ENC_B_Pin */
  GPIO_InitStruct.Pin = TILTING_ENC_A_Pin|TILTING_ENC_B_Pin;
 8000986:	0021      	movs	r1, r4
 8000988:	187b      	adds	r3, r7, r1
 800098a:	22c0      	movs	r2, #192	@ 0xc0
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2288      	movs	r2, #136	@ 0x88
 8000994:	0352      	lsls	r2, r2, #13
 8000996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	000c      	movs	r4, r1
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <MX_GPIO_Init+0x18c>)
 80009a4:	0019      	movs	r1, r3
 80009a6:	0010      	movs	r0, r2
 80009a8:	f002 fa42 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin PC8 */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|GPIO_PIN_8;
 80009ac:	0021      	movs	r1, r4
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	22c0      	movs	r2, #192	@ 0xc0
 80009b2:	0052      	lsls	r2, r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2201      	movs	r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <MX_GPIO_Init+0x188>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f002 fa2e 	bl	8002e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2007      	movs	r0, #7
 80009da:	f001 ffb5 	bl	8002948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009de:	2007      	movs	r0, #7
 80009e0:	f001 ffc7 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b00b      	add	sp, #44	@ 0x2c
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	50000800 	.word	0x50000800
 80009f4:	50000400 	.word	0x50000400

080009f8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000a00:	2301      	movs	r3, #1
 8000a02:	425b      	negs	r3, r3
 8000a04:	1d39      	adds	r1, r7, #4
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <__io_putchar+0x20>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f004 f8e7 	bl	8004bdc <HAL_UART_Transmit>
    return ch;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200002bc 	.word	0x200002bc

08000a1c <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_UART_RxCpltCallback+0x2c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d108      	bne.n	8000a40 <HAL_UART_RxCpltCallback+0x24>
    	CGW_rx_ready = 1;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <HAL_UART_RxCpltCallback+0x30>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Receive_DMA(&huart1, CGW_rx_buf, sizeof(CGW_rx_buf));
 8000a34:	4906      	ldr	r1, [pc, #24]	@ (8000a50 <HAL_UART_RxCpltCallback+0x34>)
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <HAL_UART_RxCpltCallback+0x38>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f004 fa54 	bl	8004ee8 <HAL_UART_Receive_DMA>
    }
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	20000124 	.word	0x20000124
 8000a50:	20000120 	.word	0x20000120
 8000a54:	20000234 	.word	0x20000234

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f001 f9fd 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f907 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f7ff feff 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6a:	f7ff fed7 	bl	800081c <MX_DMA_Init>
  MX_ADC_Init();
 8000a6e:	f7ff fcf7 	bl	8000460 <MX_ADC_Init>
  MX_TIM2_Init();
 8000a72:	f000 fddb 	bl	800162c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a76:	f000 ffbf 	bl	80019f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a7a:	f000 fe55 	bl	8001728 <MX_TIM3_Init>
  MX_USART5_UART_Init();
 8000a7e:	f000 ffeb 	bl	8001a58 <MX_USART5_UART_Init>
  MX_USART1_UART_Init();
 8000a82:	f000 ff89 	bl	8001998 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000a86:	f000 ff59 	bl	800193c <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a8a:	f000 f95d 	bl	8000d48 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a8e:	4b64      	ldr	r3, [pc, #400]	@ (8000c20 <main+0x1c8>)
 8000a90:	2104      	movs	r1, #4
 8000a92:	0018      	movs	r0, r3
 8000a94:	f003 fb9e 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a98:	4b62      	ldr	r3, [pc, #392]	@ (8000c24 <main+0x1cc>)
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 fb99 	bl	80041d4 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, CGW_rx_buf, sizeof(CGW_rx_buf));
 8000aa2:	4961      	ldr	r1, [pc, #388]	@ (8000c28 <main+0x1d0>)
 8000aa4:	4b61      	ldr	r3, [pc, #388]	@ (8000c2c <main+0x1d4>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f004 fa1d 	bl	8004ee8 <HAL_UART_Receive_DMA>

  // Initialize
  roof_encoder = 0;
 8000aae:	4b60      	ldr	r3, [pc, #384]	@ (8000c30 <main+0x1d8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
  tilting_encoder = 0;
 8000ab4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c34 <main+0x1dc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
  roof_state = STOP;
 8000aba:	4b5f      	ldr	r3, [pc, #380]	@ (8000c38 <main+0x1e0>)
 8000abc:	2203      	movs	r2, #3
 8000abe:	701a      	strb	r2, [r3, #0]
  film_opacity = 0;
 8000ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8000c3c <main+0x1e4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
  CGW_rx_ready = 0;
 8000ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8000c40 <main+0x1e8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  sensor_read = 0;
 8000acc:	4b5d      	ldr	r3, [pc, #372]	@ (8000c44 <main+0x1ec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]

  printf("#BOOT\r\n");
 8000ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8000c48 <main+0x1f0>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f005 fdc1 	bl	800665c <puts>

  // DFPlayer Mini 초기화
  DFPlayerMini_InitPlayer(&hlpuart1);
 8000ada:	4b5c      	ldr	r3, [pc, #368]	@ (8000c4c <main+0x1f4>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fd9b 	bl	8000618 <DFPlayerMini_InitPlayer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 센서 값 수신 및 UART 송신
	  if(sensor_read)
 8000ae2:	4b58      	ldr	r3, [pc, #352]	@ (8000c44 <main+0x1ec>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d022      	beq.n	8000b30 <main+0xd8>
	  {
		  sensor_read = 0;
 8000aea:	4b56      	ldr	r3, [pc, #344]	@ (8000c44 <main+0x1ec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]

		  read_illum();
 8000af0:	f000 fc44 	bl	800137c <read_illum>
		  read_rain();
 8000af4:	f000 fc5c 	bl	80013b0 <read_rain>
		  Send_Data_CGW();
 8000af8:	f000 f934 	bl	8000d64 <Send_Data_CGW>

		  printf("#SEND\r\n in : %d, out : %d, rain : %d, roof : %d, opacity : %d\r\n", \
 8000afc:	4b54      	ldr	r3, [pc, #336]	@ (8000c50 <main+0x1f8>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	0019      	movs	r1, r3
 8000b04:	4b53      	ldr	r3, [pc, #332]	@ (8000c54 <main+0x1fc>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	001c      	movs	r4, r3
 8000b0c:	4b52      	ldr	r3, [pc, #328]	@ (8000c58 <main+0x200>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	001d      	movs	r5, r3
 8000b14:	4b48      	ldr	r3, [pc, #288]	@ (8000c38 <main+0x1e0>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	4b47      	ldr	r3, [pc, #284]	@ (8000c3c <main+0x1e4>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	484e      	ldr	r0, [pc, #312]	@ (8000c5c <main+0x204>)
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	002b      	movs	r3, r5
 8000b2a:	0022      	movs	r2, r4
 8000b2c:	f005 fd30 	bl	8006590 <iprintf>
				  (int)in_illum, (int)out_illum, (int)rain_state, (int)roof_state, (int)film_opacity);
	  }

	  if(CGW_rx_ready)
 8000b30:	4b43      	ldr	r3, [pc, #268]	@ (8000c40 <main+0x1e8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d047      	beq.n	8000bc8 <main+0x170>
	  {
		  CGW_rx_ready = 0;
 8000b38:	4b41      	ldr	r3, [pc, #260]	@ (8000c40 <main+0x1e8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]

		  CGW_rx_payload = 0;
 8000b3e:	4b48      	ldr	r3, [pc, #288]	@ (8000c60 <main+0x208>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
		  CGW_rx_payload |= ((uint16_t)CGW_rx_buf[0] << 8);
 8000b44:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <main+0x1d0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	4b44      	ldr	r3, [pc, #272]	@ (8000c60 <main+0x208>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b41      	ldr	r3, [pc, #260]	@ (8000c60 <main+0x208>)
 8000b5a:	801a      	strh	r2, [r3, #0]
		  CGW_rx_payload |= ((uint16_t)CGW_rx_buf[1]);
 8000b5c:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <main+0x1d0>)
 8000b5e:	785b      	ldrb	r3, [r3, #1]
 8000b60:	001a      	movs	r2, r3
 8000b62:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <main+0x208>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c60 <main+0x208>)
 8000b6c:	801a      	strh	r2, [r3, #0]

		  if(CGW_rx_payload == 0xFFFF) {
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c60 <main+0x208>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	4a3c      	ldr	r2, [pc, #240]	@ (8000c64 <main+0x20c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d107      	bne.n	8000b88 <main+0x130>
			  sensor_read = 1;
 8000b78:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <main+0x1ec>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]

			  printf("#REQUEST\r\n");
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c68 <main+0x210>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f005 fd6b 	bl	800665c <puts>
 8000b86:	e01f      	b.n	8000bc8 <main+0x170>
		  }
		  else {
			  roof_state = ((CGW_rx_payload >> 8) & 0x03);
 8000b88:	4b35      	ldr	r3, [pc, #212]	@ (8000c60 <main+0x208>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2203      	movs	r2, #3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <main+0x1e0>)
 8000b9a:	701a      	strb	r2, [r3, #0]
			  film_opacity = ((CGW_rx_payload) & 0x1F);
 8000b9c:	4b30      	ldr	r3, [pc, #192]	@ (8000c60 <main+0x208>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	221f      	movs	r2, #31
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <main+0x1e4>)
 8000baa:	701a      	strb	r2, [r3, #0]
			  Send_Data_SPD();
 8000bac:	f000 f946 	bl	8000e3c <Send_Data_SPD>

			  printf("#RECEIVE\r\n roof : %d, opacity : %d\r\n", (int)roof_state, (int)film_opacity);
 8000bb0:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <main+0x1e0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <main+0x1e4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <main+0x214>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f005 fce4 	bl	8006590 <iprintf>
		  }
	  }

	  if (roof_state != prev_roof_state) {
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <main+0x1e0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <main+0x218>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d01c      	beq.n	8000c10 <main+0x1b8>
	      prev_roof_state = roof_state;  // 상태 변경 기록
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <main+0x1e0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <main+0x218>)
 8000bde:	701a      	strb	r2, [r3, #0]

	      switch (roof_state) {
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <main+0x1e0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d005      	beq.n	8000bf6 <main+0x19e>
 8000bea:	dc10      	bgt.n	8000c0e <main+0x1b6>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00a      	beq.n	8000c06 <main+0x1ae>
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d004      	beq.n	8000bfe <main+0x1a6>
	        	  // 선루프 자동 닫힘 mp3 재생
				  DFPlayerMini_PlayFile(3);
	              break;
			  case STOP:
	          default:
	              break;
 8000bf4:	e00b      	b.n	8000c0e <main+0x1b6>
	      		  DFPlayerMini_PlayFile(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fd8c 	bl	8000714 <DFPlayerMini_PlayFile>
	              break;
 8000bfc:	e008      	b.n	8000c10 <main+0x1b8>
				  DFPlayerMini_PlayFile(2);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f7ff fd88 	bl	8000714 <DFPlayerMini_PlayFile>
	        	  break;
 8000c04:	e004      	b.n	8000c10 <main+0x1b8>
				  DFPlayerMini_PlayFile(3);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff fd84 	bl	8000714 <DFPlayerMini_PlayFile>
	              break;
 8000c0c:	e000      	b.n	8000c10 <main+0x1b8>
	              break;
 8000c0e:	46c0      	nop			@ (mov r8, r8)
	      }
	  }

	  Sunroof_Set(roof_state);
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <main+0x1e0>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 f9f4 	bl	8001004 <Sunroof_Set>
	  if(sensor_read)
 8000c1c:	e761      	b.n	8000ae2 <main+0x8a>
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	2000012c 	.word	0x2000012c
 8000c24:	2000016c 	.word	0x2000016c
 8000c28:	20000120 	.word	0x20000120
 8000c2c:	20000234 	.word	0x20000234
 8000c30:	20000104 	.word	0x20000104
 8000c34:	20000108 	.word	0x20000108
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000113 	.word	0x20000113
 8000c40:	20000124 	.word	0x20000124
 8000c44:	20000125 	.word	0x20000125
 8000c48:	080073a4 	.word	0x080073a4
 8000c4c:	200001ac 	.word	0x200001ac
 8000c50:	2000010c 	.word	0x2000010c
 8000c54:	2000010e 	.word	0x2000010e
 8000c58:	20000112 	.word	0x20000112
 8000c5c:	080073ac 	.word	0x080073ac
 8000c60:	20000122 	.word	0x20000122
 8000c64:	0000ffff 	.word	0x0000ffff
 8000c68:	080073ec 	.word	0x080073ec
 8000c6c:	080073f8 	.word	0x080073f8
 8000c70:	20000001 	.word	0x20000001

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b09f      	sub	sp, #124	@ 0x7c
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	2440      	movs	r4, #64	@ 0x40
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2338      	movs	r3, #56	@ 0x38
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f005 fddf 	bl	8006848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8a:	232c      	movs	r3, #44	@ 0x2c
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2314      	movs	r3, #20
 8000c92:	001a      	movs	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	f005 fdd7 	bl	8006848 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2328      	movs	r3, #40	@ 0x28
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f005 fdd0 	bl	8006848 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <SystemClock_Config+0xcc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <SystemClock_Config+0xd0>)
 8000cae:	401a      	ands	r2, r3
 8000cb0:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <SystemClock_Config+0xcc>)
 8000cb2:	2180      	movs	r1, #128	@ 0x80
 8000cb4:	0109      	lsls	r1, r1, #4
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	22a0      	movs	r2, #160	@ 0xa0
 8000cc4:	02d2      	lsls	r2, r2, #11
 8000cc6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f002 fa81 	bl	80031d8 <HAL_RCC_OscConfig>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cda:	f000 f8c9 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	212c      	movs	r1, #44	@ 0x2c
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2202      	movs	r2, #2
 8000cea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2100      	movs	r1, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 fe3c 	bl	8003980 <HAL_RCC_ClockConfig>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d0c:	f000 f8b0 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2207      	movs	r2, #7
 8000d14:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 f82c 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d34:	f000 f89c 	bl	8000e70 <Error_Handler>
  }
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b01f      	add	sp, #124	@ 0x7c
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40007000 	.word	0x40007000
 8000d44:	ffffe7ff 	.word	0xffffe7ff

08000d48 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2005      	movs	r0, #5
 8000d52:	f001 fdf9 	bl	8002948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000d56:	2005      	movs	r0, #5
 8000d58:	f001 fe0b 	bl	8002972 <HAL_NVIC_EnableIRQ>
}
 8000d5c:	46c0      	nop			@ (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <Send_Data_CGW>:

/* USER CODE BEGIN 4 */
void Send_Data_CGW(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	//UART Send
	CGW_tx_payload = 0;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(in_illum & IN_ILLUM_MASK)) << IN_ILLUM_SHIFT;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <Send_Data_CGW+0xb8>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	051a      	lsls	r2, r3, #20
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000d7e:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(out_illum & OUT_ILLUM_MASK)) << OUT_ILLUM_SHIFT;
 8000d80:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <Send_Data_CGW+0xbc>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	4a26      	ldr	r2, [pc, #152]	@ (8000e24 <Send_Data_CGW+0xc0>)
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000d94:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(rain_state & RAIN_STATE_MASK)) << RAIN_STATE_SHIFT;
 8000d96:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <Send_Data_CGW+0xc4>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	2280      	movs	r2, #128	@ 0x80
 8000da0:	401a      	ands	r2, r3
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000daa:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(roof_state & ROOF_STATE_MASK)) << ROOF_STATE_SHIFT;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <Send_Data_CGW+0xc8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	015b      	lsls	r3, r3, #5
 8000db4:	2260      	movs	r2, #96	@ 0x60
 8000db6:	401a      	ands	r2, r3
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000dc0:	601a      	str	r2, [r3, #0]
	CGW_tx_payload |= ((uint32_t)(film_opacity & FILM_OPACITY_MASK)) << FILM_OPACITY_SHIFT;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <Send_Data_CGW+0xcc>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	001a      	movs	r2, r3
 8000dca:	231f      	movs	r3, #31
 8000dcc:	401a      	ands	r2, r3
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000dd6:	601a      	str	r2, [r3, #0]

	CGW_tx_buf[0] = (CGW_tx_payload >> 24) & 0xFF;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	0e1b      	lsrs	r3, r3, #24
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <Send_Data_CGW+0xd0>)
 8000de2:	701a      	strb	r2, [r3, #0]
	CGW_tx_buf[1] = (CGW_tx_payload >> 16) & 0xFF;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	0c1b      	lsrs	r3, r3, #16
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <Send_Data_CGW+0xd0>)
 8000dee:	705a      	strb	r2, [r3, #1]
	CGW_tx_buf[2] = (CGW_tx_payload >> 8) & 0xFF;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <Send_Data_CGW+0xd0>)
 8000dfa:	709a      	strb	r2, [r3, #2]
	CGW_tx_buf[3] = CGW_tx_payload & 0xFF;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <Send_Data_CGW+0xb4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <Send_Data_CGW+0xd0>)
 8000e04:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit(&huart1, CGW_tx_buf, sizeof(CGW_tx_buf), 100);
 8000e06:	490b      	ldr	r1, [pc, #44]	@ (8000e34 <Send_Data_CGW+0xd0>)
 8000e08:	480b      	ldr	r0, [pc, #44]	@ (8000e38 <Send_Data_CGW+0xd4>)
 8000e0a:	2364      	movs	r3, #100	@ 0x64
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	f003 fee5 	bl	8004bdc <HAL_UART_Transmit>
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000011c 	.word	0x2000011c
 8000e1c:	2000010c 	.word	0x2000010c
 8000e20:	2000010e 	.word	0x2000010e
 8000e24:	000fff00 	.word	0x000fff00
 8000e28:	20000112 	.word	0x20000112
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000113 	.word	0x20000113
 8000e34:	20000118 	.word	0x20000118
 8000e38:	20000234 	.word	0x20000234

08000e3c <Send_Data_SPD>:

void Send_Data_SPD(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	SPD_tx_payload = (uint8_t)(film_opacity * 5);
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <Send_Data_SPD+0x28>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	1c1a      	adds	r2, r3, #0
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <Send_Data_SPD+0x2c>)
 8000e50:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart5, &SPD_tx_payload, 1, 100);
 8000e52:	4905      	ldr	r1, [pc, #20]	@ (8000e68 <Send_Data_SPD+0x2c>)
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <Send_Data_SPD+0x30>)
 8000e56:	2364      	movs	r3, #100	@ 0x64
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f003 febf 	bl	8004bdc <HAL_UART_Transmit>
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000113 	.word	0x20000113
 8000e68:	20000114 	.word	0x20000114
 8000e6c:	20000344 	.word	0x20000344

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_GPIO_EXTI_Callback>:
#include "roof.h"

#define TWO_MOTOR 1
#define ONE_MOTOR 0

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	801a      	strh	r2, [r3, #0]
	uint8_t ROOF_A_state = 0;
 8000e88:	210f      	movs	r1, #15
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
	uint8_t ROOF_B_state = 0;
 8000e90:	260e      	movs	r6, #14
 8000e92:	19bb      	adds	r3, r7, r6
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_A_state = 0;
 8000e98:	230d      	movs	r3, #13
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_B_state = 0;
 8000ea0:	230c      	movs	r3, #12
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

	//Roof Motor
	if(GPIO_Pin == ROOF_ENC_A_Pin) {
 8000ea8:	1dbb      	adds	r3, r7, #6
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d120      	bne.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x76>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000eb0:	000d      	movs	r5, r1
 8000eb2:	187c      	adds	r4, r7, r1
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f002 f937 	bl	800312c <HAL_GPIO_ReadPin>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000ec2:	19bc      	adds	r4, r7, r6
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f002 f92f 	bl	800312c <HAL_GPIO_ReadPin>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? 1 : -1);
 8000ed2:	197a      	adds	r2, r7, r5
 8000ed4:	19bb      	adds	r3, r7, r6
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_EXTI_Callback+0x66>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	e001      	b.n	8000ee6 <HAL_GPIO_EXTI_Callback+0x6a>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	425a      	negs	r2, r3
 8000ee6:	4b44      	ldr	r3, [pc, #272]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	18d2      	adds	r2, r2, r3
 8000eec:	4b42      	ldr	r3, [pc, #264]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000eee:	601a      	str	r2, [r3, #0]
	else if(GPIO_Pin == TILTING_ENC_B_Pin) {
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
	}
}
 8000ef0:	e07c      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == ROOF_ENC_B_Pin) {
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d121      	bne.n	8000f3e <HAL_GPIO_EXTI_Callback+0xc2>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000efa:	250f      	movs	r5, #15
 8000efc:	197c      	adds	r4, r7, r5
 8000efe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	0018      	movs	r0, r3
 8000f04:	f002 f912 	bl	800312c <HAL_GPIO_ReadPin>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000f0c:	260e      	movs	r6, #14
 8000f0e:	19bc      	adds	r4, r7, r6
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000f12:	2102      	movs	r1, #2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f002 f909 	bl	800312c <HAL_GPIO_ReadPin>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? -1 : 1);
 8000f1e:	197a      	adds	r2, r7, r5
 8000f20:	19bb      	adds	r3, r7, r6
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_EXTI_Callback+0xb4>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	425a      	negs	r2, r3
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_EXTI_Callback+0xb6>
 8000f30:	2201      	movs	r2, #1
 8000f32:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	18d2      	adds	r2, r2, r3
 8000f38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	e056      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == TILTING_ENC_A_Pin) {
 8000f3e:	1dbb      	adds	r3, r7, #6
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d125      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x11a>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000f4a:	250d      	movs	r5, #13
 8000f4c:	197c      	adds	r4, r7, r5
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4a2a      	ldr	r2, [pc, #168]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x180>)
 8000f54:	0019      	movs	r1, r3
 8000f56:	0010      	movs	r0, r2
 8000f58:	f002 f8e8 	bl	800312c <HAL_GPIO_ReadPin>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000f60:	260c      	movs	r6, #12
 8000f62:	19bc      	adds	r4, r7, r6
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x180>)
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	0010      	movs	r0, r2
 8000f6e:	f002 f8dd 	bl	800312c <HAL_GPIO_ReadPin>
 8000f72:	0003      	movs	r3, r0
 8000f74:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? 1 : -1);
 8000f76:	197a      	adds	r2, r7, r5
 8000f78:	19bb      	adds	r3, r7, r6
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x10a>
 8000f82:	2201      	movs	r2, #1
 8000f84:	e001      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0x10e>
 8000f86:	2301      	movs	r3, #1
 8000f88:	425a      	negs	r2, r3
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x184>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	18d2      	adds	r2, r2, r3
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x184>)
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	e02a      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == TILTING_ENC_B_Pin) {
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	881a      	ldrh	r2, [r3, #0]
 8000f9a:	2380      	movs	r3, #128	@ 0x80
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d124      	bne.n	8000fec <HAL_GPIO_EXTI_Callback+0x170>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000fa2:	250d      	movs	r5, #13
 8000fa4:	197c      	adds	r4, r7, r5
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x180>)
 8000fac:	0019      	movs	r1, r3
 8000fae:	0010      	movs	r0, r2
 8000fb0:	f002 f8bc 	bl	800312c <HAL_GPIO_ReadPin>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000fb8:	260c      	movs	r6, #12
 8000fba:	19bc      	adds	r4, r7, r6
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x180>)
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	0010      	movs	r0, r2
 8000fc6:	f002 f8b1 	bl	800312c <HAL_GPIO_ReadPin>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
 8000fce:	197a      	adds	r2, r7, r5
 8000fd0:	19bb      	adds	r3, r7, r6
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d102      	bne.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x164>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	425a      	negs	r2, r3
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_EXTI_Callback+0x166>
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x184>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	18d2      	adds	r2, r2, r3
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x184>)
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b005      	add	sp, #20
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff4:	50000800 	.word	0x50000800
 8000ff8:	20000104 	.word	0x20000104
 8000ffc:	50000400 	.word	0x50000400
 8001000:	20000108 	.word	0x20000108

08001004 <Sunroof_Set>:

#if TWO_MOTOR
void Sunroof_Set(uint8_t mode) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d007      	beq.n	8001028 <Sunroof_Set+0x24>
 8001018:	dd00      	ble.n	800101c <Sunroof_Set+0x18>
 800101a:	e118      	b.n	800124e <Sunroof_Set+0x24a>
 800101c:	2b00      	cmp	r3, #0
 800101e:	d100      	bne.n	8001022 <Sunroof_Set+0x1e>
 8001020:	e0ba      	b.n	8001198 <Sunroof_Set+0x194>
 8001022:	2b01      	cmp	r3, #1
 8001024:	d05c      	beq.n	80010e0 <Sunroof_Set+0xdc>
 8001026:	e112      	b.n	800124e <Sunroof_Set+0x24a>
	case OPEN:
		if(tilting_encoder >= 0){
 8001028:	4b96      	ldr	r3, [pc, #600]	@ (8001284 <Sunroof_Set+0x280>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db1d      	blt.n	800106c <Sunroof_Set+0x68>
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001030:	4b95      	ldr	r3, [pc, #596]	@ (8001288 <Sunroof_Set+0x284>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8001038:	4b94      	ldr	r3, [pc, #592]	@ (800128c <Sunroof_Set+0x288>)
 800103a:	2201      	movs	r2, #1
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0018      	movs	r0, r3
 8001040:	f002 f891 	bl	8003166 <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8001044:	4b92      	ldr	r3, [pc, #584]	@ (8001290 <Sunroof_Set+0x28c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2246      	movs	r2, #70	@ 0x46
 800104a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	0099      	lsls	r1, r3, #2
 8001050:	23a0      	movs	r3, #160	@ 0xa0
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	2200      	movs	r2, #0
 8001056:	0018      	movs	r0, r3
 8001058:	f002 f885 	bl	8003166 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 800105c:	23a0      	movs	r3, #160	@ 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	2200      	movs	r2, #0
 8001062:	2120      	movs	r1, #32
 8001064:	0018      	movs	r0, r3
 8001066:	f002 f87e 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 800106a:	e107      	b.n	800127c <Sunroof_Set+0x278>
		else if(roof_encoder <= ROOF_OPEN_MAX) {
 800106c:	4b89      	ldr	r3, [pc, #548]	@ (8001294 <Sunroof_Set+0x290>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a89      	ldr	r2, [pc, #548]	@ (8001298 <Sunroof_Set+0x294>)
 8001072:	4293      	cmp	r3, r2
 8001074:	dc1d      	bgt.n	80010b2 <Sunroof_Set+0xae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001076:	4b86      	ldr	r3, [pc, #536]	@ (8001290 <Sunroof_Set+0x28c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	0099      	lsls	r1, r3, #2
 8001082:	23a0      	movs	r3, #160	@ 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	2201      	movs	r2, #1
 8001088:	0018      	movs	r0, r3
 800108a:	f002 f86c 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 800108e:	4b7e      	ldr	r3, [pc, #504]	@ (8001288 <Sunroof_Set+0x284>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2246      	movs	r2, #70	@ 0x46
 8001094:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8001096:	4b7d      	ldr	r3, [pc, #500]	@ (800128c <Sunroof_Set+0x288>)
 8001098:	2200      	movs	r2, #0
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	0018      	movs	r0, r3
 800109e:	f002 f862 	bl	8003166 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 80010a2:	23a0      	movs	r3, #160	@ 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2201      	movs	r2, #1
 80010a8:	2140      	movs	r1, #64	@ 0x40
 80010aa:	0018      	movs	r0, r3
 80010ac:	f002 f85b 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 80010b0:	e0e4      	b.n	800127c <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80010b2:	4b77      	ldr	r3, [pc, #476]	@ (8001290 <Sunroof_Set+0x28c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	0099      	lsls	r1, r3, #2
 80010be:	23a0      	movs	r3, #160	@ 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	2201      	movs	r2, #1
 80010c4:	0018      	movs	r0, r3
 80010c6:	f002 f84e 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80010ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001288 <Sunroof_Set+0x284>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 80010d2:	4b6e      	ldr	r3, [pc, #440]	@ (800128c <Sunroof_Set+0x288>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	0018      	movs	r0, r3
 80010da:	f002 f844 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 80010de:	e0cd      	b.n	800127c <Sunroof_Set+0x278>
	case TILTING:
		if(roof_encoder >= 0) {
 80010e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001294 <Sunroof_Set+0x290>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db1d      	blt.n	8001124 <Sunroof_Set+0x120>
			// STOP Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80010e8:	4b69      	ldr	r3, [pc, #420]	@ (8001290 <Sunroof_Set+0x28c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	0099      	lsls	r1, r3, #2
 80010f4:	23a0      	movs	r3, #160	@ 0xa0
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2201      	movs	r2, #1
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 f833 	bl	8003166 <HAL_GPIO_WritePin>
			// ACW Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8001100:	4b61      	ldr	r3, [pc, #388]	@ (8001288 <Sunroof_Set+0x284>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2246      	movs	r2, #70	@ 0x46
 8001106:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8001108:	4b60      	ldr	r3, [pc, #384]	@ (800128c <Sunroof_Set+0x288>)
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	0018      	movs	r0, r3
 8001110:	f002 f829 	bl	8003166 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8001114:	23a0      	movs	r3, #160	@ 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	@ 0x40
 800111c:	0018      	movs	r0, r3
 800111e:	f002 f822 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8001122:	e0ab      	b.n	800127c <Sunroof_Set+0x278>
		else if(tilting_encoder <= ROOF_TILTING_MAX) {
 8001124:	4b57      	ldr	r3, [pc, #348]	@ (8001284 <Sunroof_Set+0x280>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a5c      	ldr	r2, [pc, #368]	@ (800129c <Sunroof_Set+0x298>)
 800112a:	4293      	cmp	r3, r2
 800112c:	dc1d      	bgt.n	800116a <Sunroof_Set+0x166>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800112e:	4b56      	ldr	r3, [pc, #344]	@ (8001288 <Sunroof_Set+0x284>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8001136:	4b55      	ldr	r3, [pc, #340]	@ (800128c <Sunroof_Set+0x288>)
 8001138:	2201      	movs	r2, #1
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0018      	movs	r0, r3
 800113e:	f002 f812 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8001142:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <Sunroof_Set+0x28c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2246      	movs	r2, #70	@ 0x46
 8001148:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	0099      	lsls	r1, r3, #2
 800114e:	23a0      	movs	r3, #160	@ 0xa0
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2200      	movs	r2, #0
 8001154:	0018      	movs	r0, r3
 8001156:	f002 f806 	bl	8003166 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, CW);
 800115a:	23a0      	movs	r3, #160	@ 0xa0
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	2201      	movs	r2, #1
 8001160:	2120      	movs	r1, #32
 8001162:	0018      	movs	r0, r3
 8001164:	f001 ffff 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 8001168:	e088      	b.n	800127c <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800116a:	4b49      	ldr	r3, [pc, #292]	@ (8001290 <Sunroof_Set+0x28c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	0099      	lsls	r1, r3, #2
 8001176:	23a0      	movs	r3, #160	@ 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	2201      	movs	r2, #1
 800117c:	0018      	movs	r0, r3
 800117e:	f001 fff2 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001182:	4b41      	ldr	r3, [pc, #260]	@ (8001288 <Sunroof_Set+0x284>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 800118a:	4b40      	ldr	r3, [pc, #256]	@ (800128c <Sunroof_Set+0x288>)
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	@ 0x80
 8001190:	0018      	movs	r0, r3
 8001192:	f001 ffe8 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 8001196:	e071      	b.n	800127c <Sunroof_Set+0x278>
	case CLOSE:
		if(tilting_encoder >= 0)
 8001198:	4b3a      	ldr	r3, [pc, #232]	@ (8001284 <Sunroof_Set+0x280>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db1d      	blt.n	80011dc <Sunroof_Set+0x1d8>
		{
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80011a0:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <Sunroof_Set+0x284>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 80011a8:	4b38      	ldr	r3, [pc, #224]	@ (800128c <Sunroof_Set+0x288>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0018      	movs	r0, r3
 80011b0:	f001 ffd9 	bl	8003166 <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 80011b4:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <Sunroof_Set+0x28c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2246      	movs	r2, #70	@ 0x46
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	0099      	lsls	r1, r3, #2
 80011c0:	23a0      	movs	r3, #160	@ 0xa0
 80011c2:	05db      	lsls	r3, r3, #23
 80011c4:	2200      	movs	r2, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 ffcd 	bl	8003166 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 80011cc:	23a0      	movs	r3, #160	@ 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	2200      	movs	r2, #0
 80011d2:	2120      	movs	r1, #32
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 ffc6 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 80011da:	e04f      	b.n	800127c <Sunroof_Set+0x278>
		else if(roof_encoder >= 0) {
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <Sunroof_Set+0x290>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db1d      	blt.n	8001220 <Sunroof_Set+0x21c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <Sunroof_Set+0x28c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	0099      	lsls	r1, r3, #2
 80011f0:	23a0      	movs	r3, #160	@ 0xa0
 80011f2:	05db      	lsls	r3, r3, #23
 80011f4:	2201      	movs	r2, #1
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 ffb5 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <Sunroof_Set+0x284>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2246      	movs	r2, #70	@ 0x46
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <Sunroof_Set+0x288>)
 8001206:	2200      	movs	r2, #0
 8001208:	2180      	movs	r1, #128	@ 0x80
 800120a:	0018      	movs	r0, r3
 800120c:	f001 ffab 	bl	8003166 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8001210:	23a0      	movs	r3, #160	@ 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	2200      	movs	r2, #0
 8001216:	2140      	movs	r1, #64	@ 0x40
 8001218:	0018      	movs	r0, r3
 800121a:	f001 ffa4 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 800121e:	e02d      	b.n	800127c <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <Sunroof_Set+0x28c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	0099      	lsls	r1, r3, #2
 800122c:	23a0      	movs	r3, #160	@ 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	2201      	movs	r2, #1
 8001232:	0018      	movs	r0, r3
 8001234:	f001 ff97 	bl	8003166 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <Sunroof_Set+0x284>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <Sunroof_Set+0x288>)
 8001242:	2201      	movs	r2, #1
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	0018      	movs	r0, r3
 8001248:	f001 ff8d 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 800124c:	e016      	b.n	800127c <Sunroof_Set+0x278>
	case STOP:
	default:
		// STOP Both Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <Sunroof_Set+0x28c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	0099      	lsls	r1, r3, #2
 800125a:	23a0      	movs	r3, #160	@ 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	2201      	movs	r2, #1
 8001260:	0018      	movs	r0, r3
 8001262:	f001 ff80 	bl	8003166 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <Sunroof_Set+0x284>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <Sunroof_Set+0x288>)
 8001270:	2201      	movs	r2, #1
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	0018      	movs	r0, r3
 8001276:	f001 ff76 	bl	8003166 <HAL_GPIO_WritePin>
		break;
 800127a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000108 	.word	0x20000108
 8001288:	2000012c 	.word	0x2000012c
 800128c:	50000800 	.word	0x50000800
 8001290:	2000016c 	.word	0x2000016c
 8001294:	20000104 	.word	0x20000104
 8001298:	00001770 	.word	0x00001770
 800129c:	00000bb8 	.word	0x00000bb8

080012a0 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 80012a8:	2316      	movs	r3, #22
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <HW_AdcReadChannel+0xc4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2208      	movs	r2, #8
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d1f9      	bne.n	80012b2 <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 80012be:	4b2a      	ldr	r3, [pc, #168]	@ (8001368 <HW_AdcReadChannel+0xc8>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c2:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <HW_AdcReadChannel+0xc8>)
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	0089      	lsls	r1, r1, #2
 80012c8:	430a      	orrs	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <HW_AdcReadChannel+0xcc>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	0018      	movs	r0, r3
 80012d2:	f001 f9ef 	bl	80026b4 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 80012d6:	240c      	movs	r4, #12
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	4a25      	ldr	r2, [pc, #148]	@ (8001370 <HW_AdcReadChannel+0xd0>)
 80012dc:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	4a24      	ldr	r2, [pc, #144]	@ (8001374 <HW_AdcReadChannel+0xd4>)
 80012e2:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 80012e4:	193a      	adds	r2, r7, r4
 80012e6:	4b21      	ldr	r3, [pc, #132]	@ (800136c <HW_AdcReadChannel+0xcc>)
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 f8ba 	bl	8002464 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 80012f0:	0021      	movs	r1, r4
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	0152      	lsls	r2, r2, #5
 80012fe:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8001300:	187a      	adds	r2, r7, r1
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <HW_AdcReadChannel+0xcc>)
 8001304:	0011      	movs	r1, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f001 f8ac 	bl	8002464 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <HW_AdcReadChannel+0xcc>)
 800130e:	0018      	movs	r0, r3
 8001310:	f000 ffac 	bl	800226c <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8001314:	2301      	movs	r3, #1
 8001316:	425a      	negs	r2, r3
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HW_AdcReadChannel+0xcc>)
 800131a:	0011      	movs	r1, r2
 800131c:	0018      	movs	r0, r3
 800131e:	f000 fff9 	bl	8002314 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HW_AdcReadChannel+0xcc>)
 8001324:	0018      	movs	r0, r3
 8001326:	f001 f891 	bl	800244c <HAL_ADC_GetValue>
 800132a:	0002      	movs	r2, r0
 800132c:	2016      	movs	r0, #22
 800132e:	183b      	adds	r3, r7, r0
 8001330:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HW_AdcReadChannel+0xcc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <HW_AdcReadChannel+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2102      	movs	r1, #2
 800133e:	430a      	orrs	r2, r1
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HW_AdcReadChannel+0xcc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2203      	movs	r2, #3
 8001348:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HW_AdcReadChannel+0xc8>)
 800134c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HW_AdcReadChannel+0xc8>)
 8001350:	4909      	ldr	r1, [pc, #36]	@ (8001378 <HW_AdcReadChannel+0xd8>)
 8001352:	400a      	ands	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8001356:	183b      	adds	r3, r7, r0
 8001358:	881b      	ldrh	r3, [r3, #0]
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b007      	add	sp, #28
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	40007000 	.word	0x40007000
 8001368:	40021000 	.word	0x40021000
 800136c:	20000088 	.word	0x20000088
 8001370:	0007ffff 	.word	0x0007ffff
 8001374:	00001001 	.word	0x00001001
 8001378:	fffffdff 	.word	0xfffffdff

0800137c <read_illum>:

void read_illum(void){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <read_illum+0x28>)
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff ff8c 	bl	80012a0 <HW_AdcReadChannel>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <read_illum+0x2c>)
 800138e:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff85 	bl	80012a0 <HW_AdcReadChannel>
 8001396:	0003      	movs	r3, r0
 8001398:	001a      	movs	r2, r3
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <read_illum+0x30>)
 800139c:	801a      	strh	r2, [r3, #0]
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	04000002 	.word	0x04000002
 80013a8:	2000010c 	.word	0x2000010c
 80013ac:	2000010e 	.word	0x2000010e

080013b0 <read_rain>:

void read_rain(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <read_rain+0x34>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff ff72 	bl	80012a0 <HW_AdcReadChannel>
 80013bc:	0003      	movs	r3, r0
 80013be:	001a      	movs	r2, r3
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <read_rain+0x38>)
 80013c2:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <read_rain+0x38>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	22c8      	movs	r2, #200	@ 0xc8
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	429a      	cmp	r2, r3
 80013d0:	419b      	sbcs	r3, r3
 80013d2:	425b      	negs	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	001a      	movs	r2, r3
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <read_rain+0x3c>)
 80013da:	701a      	strb	r2, [r3, #0]
}
 80013dc:	46c0      	nop			@ (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	3c008000 	.word	0x3c008000
 80013e8:	20000110 	.word	0x20000110
 80013ec:	20000112 	.word	0x20000112

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_MspInit+0x24>)
 80013f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_MspInit+0x24>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	430a      	orrs	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_MspInit+0x24>)
 8001402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_MspInit+0x24>)
 8001406:	2180      	movs	r1, #128	@ 0x80
 8001408:	0549      	lsls	r1, r1, #21
 800140a:	430a      	orrs	r2, r1
 800140c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	46c0      	nop			@ (mov r8, r8)
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 fd60 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_A_Pin);
 800144e:	2001      	movs	r0, #1
 8001450:	f001 fea6 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_B_Pin);
 8001454:	2002      	movs	r0, #2
 8001456:	f001 fea3 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TILTING_ENC_A_Pin);
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	0018      	movs	r0, r3
 800146a:	f001 fe99 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TILTING_ENC_B_Pin);
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	0018      	movs	r0, r3
 8001474:	f001 fe94 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	019b      	lsls	r3, r3, #6
 800147c:	0018      	movs	r0, r3
 800147e:	f001 fe8f 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <DMA1_Channel2_3_IRQHandler+0x14>)
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fbf1 	bl	8002c76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	200003cc 	.word	0x200003cc

080014a0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 fbe5 	bl	8002c76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	20000414 	.word	0x20000414

080014b8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <USART4_5_IRQHandler+0x14>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f003 fd70 	bl	8004fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	20000344 	.word	0x20000344

080014d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <USART1_IRQHandler+0x14>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f003 fd64 	bl	8004fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	20000234 	.word	0x20000234

080014e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fa:	e000      	b.n	80014fe <_read+0x16>
 80014fc:	bf00      	nop
 80014fe:	0001      	movs	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
  }

  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bd80      	pop	{r7, pc}

08001522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e009      	b.n	8001548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff fa5b 	bl	80009f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf1      	blt.n	8001534 <_write+0x12>
  }
  return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b006      	add	sp, #24
 8001558:	bd80      	pop	{r7, pc}

0800155a <_close>:

int _close(int file)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001562:	2301      	movs	r3, #1
 8001564:	425b      	negs	r3, r3
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	0192      	lsls	r2, r2, #6
 800157e:	605a      	str	r2, [r3, #4]
  return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}

0800158a <_isatty>:

int _isatty(int file)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b004      	add	sp, #16
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	@ (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f005 f986 	bl	80068f4 <__errno>
 80015e8:	0003      	movs	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	425b      	negs	r3, r3
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	18d2      	adds	r2, r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <_sbrk+0x64>)
 8001604:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b006      	add	sp, #24
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20005000 	.word	0x20005000
 8001614:	00000400 	.word	0x00000400
 8001618:	20000128 	.word	0x20000128
 800161c:	200005b0 	.word	0x200005b0

08001620 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	2318      	movs	r3, #24
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	0018      	movs	r0, r3
 8001638:	2310      	movs	r3, #16
 800163a:	001a      	movs	r2, r3
 800163c:	2100      	movs	r1, #0
 800163e:	f005 f903 	bl	8006848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	2310      	movs	r3, #16
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	0018      	movs	r0, r3
 8001648:	2308      	movs	r3, #8
 800164a:	001a      	movs	r2, r3
 800164c:	2100      	movs	r1, #0
 800164e:	f005 f8fb 	bl	8006848 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	003b      	movs	r3, r7
 8001654:	0018      	movs	r0, r3
 8001656:	2310      	movs	r3, #16
 8001658:	001a      	movs	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	f005 f8f4 	bl	8006848 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001660:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	05d2      	lsls	r2, r2, #23
 8001666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <MX_TIM2_Init+0xf8>)
 800166a:	224f      	movs	r2, #79	@ 0x4f
 800166c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001676:	2263      	movs	r2, #99	@ 0x63
 8001678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <MX_TIM2_Init+0xf8>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001688:	0018      	movs	r0, r3
 800168a:	f002 fd1b 	bl	80040c4 <HAL_TIM_Base_Init>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001692:	f7ff fbed 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	2118      	movs	r1, #24
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	0152      	lsls	r2, r2, #5
 800169e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a0:	187a      	adds	r2, r7, r1
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <MX_TIM2_Init+0xf8>)
 80016a4:	0011      	movs	r1, r2
 80016a6:	0018      	movs	r0, r3
 80016a8:	f002 feec 	bl	8004484 <HAL_TIM_ConfigClockSource>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80016b0:	f7ff fbde 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <MX_TIM2_Init+0xf8>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f002 fd44 	bl	8004144 <HAL_TIM_PWM_Init>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80016c0:	f7ff fbd6 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2110      	movs	r1, #16
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d2:	187a      	adds	r2, r7, r1
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_TIM2_Init+0xf8>)
 80016d6:	0011      	movs	r1, r2
 80016d8:	0018      	movs	r0, r3
 80016da:	f003 f9cd 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80016e2:	f7ff fbc5 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	003b      	movs	r3, r7
 80016e8:	2260      	movs	r2, #96	@ 0x60
 80016ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016ec:	003b      	movs	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f2:	003b      	movs	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	003b      	movs	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016fe:	0039      	movs	r1, r7
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001702:	2204      	movs	r2, #4
 8001704:	0018      	movs	r0, r3
 8001706:	f002 fdf7 	bl	80042f8 <HAL_TIM_PWM_ConfigChannel>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800170e:	f7ff fbaf 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <MX_TIM2_Init+0xf8>)
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f8a9 	bl	800186c <HAL_TIM_MspPostInit>

}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b00a      	add	sp, #40	@ 0x28
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	2000012c 	.word	0x2000012c

08001728 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	2318      	movs	r3, #24
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	0018      	movs	r0, r3
 8001734:	2310      	movs	r3, #16
 8001736:	001a      	movs	r2, r3
 8001738:	2100      	movs	r1, #0
 800173a:	f005 f885 	bl	8006848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	2310      	movs	r3, #16
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	0018      	movs	r0, r3
 8001744:	2308      	movs	r3, #8
 8001746:	001a      	movs	r2, r3
 8001748:	2100      	movs	r1, #0
 800174a:	f005 f87d 	bl	8006848 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	003b      	movs	r3, r7
 8001750:	0018      	movs	r0, r3
 8001752:	2310      	movs	r3, #16
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f005 f876 	bl	8006848 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800175c:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <MX_TIM3_Init+0xf4>)
 800175e:	4a30      	ldr	r2, [pc, #192]	@ (8001820 <MX_TIM3_Init+0xf8>)
 8001760:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <MX_TIM3_Init+0xf4>)
 8001764:	224f      	movs	r2, #79	@ 0x4f
 8001766:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <MX_TIM3_Init+0xf4>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <MX_TIM3_Init+0xf4>)
 8001770:	2263      	movs	r2, #99	@ 0x63
 8001772:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <MX_TIM3_Init+0xf4>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b28      	ldr	r3, [pc, #160]	@ (800181c <MX_TIM3_Init+0xf4>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <MX_TIM3_Init+0xf4>)
 8001782:	0018      	movs	r0, r3
 8001784:	f002 fc9e 	bl	80040c4 <HAL_TIM_Base_Init>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800178c:	f7ff fb70 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001790:	2118      	movs	r1, #24
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	0152      	lsls	r2, r2, #5
 8001798:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800179a:	187a      	adds	r2, r7, r1
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_TIM3_Init+0xf4>)
 800179e:	0011      	movs	r1, r2
 80017a0:	0018      	movs	r0, r3
 80017a2:	f002 fe6f 	bl	8004484 <HAL_TIM_ConfigClockSource>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80017aa:	f7ff fb61 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <MX_TIM3_Init+0xf4>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f002 fcc7 	bl	8004144 <HAL_TIM_PWM_Init>
 80017b6:	1e03      	subs	r3, r0, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80017ba:	f7ff fb59 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2110      	movs	r1, #16
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017cc:	187a      	adds	r2, r7, r1
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <MX_TIM3_Init+0xf4>)
 80017d0:	0011      	movs	r1, r2
 80017d2:	0018      	movs	r0, r3
 80017d4:	f003 f950 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80017dc:	f7ff fb48 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	003b      	movs	r3, r7
 80017e2:	2260      	movs	r2, #96	@ 0x60
 80017e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017e6:	003b      	movs	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ec:	003b      	movs	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f2:	003b      	movs	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f8:	0039      	movs	r1, r7
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_TIM3_Init+0xf4>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	0018      	movs	r0, r3
 8001800:	f002 fd7a 	bl	80042f8 <HAL_TIM_PWM_ConfigChannel>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001808:	f7ff fb32 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <MX_TIM3_Init+0xf4>)
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f82c 	bl	800186c <HAL_TIM_MspPostInit>

}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b00a      	add	sp, #40	@ 0x28
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000016c 	.word	0x2000016c
 8001820:	40000400 	.word	0x40000400

08001824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	05db      	lsls	r3, r3, #23
 8001834:	429a      	cmp	r2, r3
 8001836:	d106      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001838:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_TIM_Base_MspInit+0x40>)
 800183a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_TIM_Base_MspInit+0x40>)
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001844:	e00a      	b.n	800185c <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_TIM_Base_MspInit+0x44>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d105      	bne.n	800185c <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_TIM_Base_MspInit+0x40>)
 8001852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_TIM_Base_MspInit+0x40>)
 8001856:	2102      	movs	r1, #2
 8001858:	430a      	orrs	r2, r1
 800185a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40000400 	.word	0x40000400

0800186c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b08b      	sub	sp, #44	@ 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	2414      	movs	r4, #20
 8001876:	193b      	adds	r3, r7, r4
 8001878:	0018      	movs	r0, r3
 800187a:	2314      	movs	r3, #20
 800187c:	001a      	movs	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	f004 ffe2 	bl	8006848 <memset>
  if(timHandle->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	429a      	cmp	r2, r3
 800188e:	d122      	bne.n	80018d6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_TIM_MspPostInit+0xc4>)
 8001892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001894:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <HAL_TIM_MspPostInit+0xc4>)
 8001896:	2102      	movs	r1, #2
 8001898:	430a      	orrs	r2, r1
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_TIM_MspPostInit+0xc4>)
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a8:	0021      	movs	r1, r4
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	2208      	movs	r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	2202      	movs	r2, #2
 80018b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2202      	movs	r2, #2
 80018c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_TIM_MspPostInit+0xc8>)
 80018cc:	0019      	movs	r1, r3
 80018ce:	0010      	movs	r0, r2
 80018d0:	f001 faae 	bl	8002e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018d4:	e027      	b.n	8001926 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM3)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a17      	ldr	r2, [pc, #92]	@ (8001938 <HAL_TIM_MspPostInit+0xcc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d122      	bne.n	8001926 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_TIM_MspPostInit+0xc4>)
 80018e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_TIM_MspPostInit+0xc4>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_TIM_MspPostInit+0xc4>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018f8:	2114      	movs	r1, #20
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2280      	movs	r2, #128	@ 0x80
 80018fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2202      	movs	r2, #2
 8001904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2202      	movs	r2, #2
 8001916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	187a      	adds	r2, r7, r1
 800191a:	23a0      	movs	r3, #160	@ 0xa0
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f001 fa85 	bl	8002e30 <HAL_GPIO_Init>
}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b00b      	add	sp, #44	@ 0x2c
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	40021000 	.word	0x40021000
 8001934:	50000400 	.word	0x50000400
 8001938:	40000400 	.word	0x40000400

0800193c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart5_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001942:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <MX_LPUART1_UART_Init+0x58>)
 8001944:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001948:	2296      	movs	r2, #150	@ 0x96
 800194a:	0192      	lsls	r2, r2, #6
 800194c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 800196e:	2200      	movs	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <MX_LPUART1_UART_Init+0x54>)
 800197a:	0018      	movs	r0, r3
 800197c:	f003 f8da 	bl	8004b34 <HAL_UART_Init>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001984:	f7ff fa74 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	200001ac 	.word	0x200001ac
 8001994:	40004800 	.word	0x40004800

08001998 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <MX_USART1_UART_Init+0x5c>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019a4:	2296      	movs	r2, #150	@ 0x96
 80019a6:	0192      	lsls	r2, r2, #6
 80019a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <MX_USART1_UART_Init+0x58>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f003 f8a9 	bl	8004b34 <HAL_UART_Init>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019e6:	f7ff fa43 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000234 	.word	0x20000234
 80019f4:	40013800 	.word	0x40013800

080019f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 80019fe:	4a15      	ldr	r2, [pc, #84]	@ (8001a54 <MX_USART2_UART_Init+0x5c>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a04:	2296      	movs	r2, #150	@ 0x96
 8001a06:	0192      	lsls	r2, r2, #6
 8001a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f003 f879 	bl	8004b34 <HAL_UART_Init>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a46:	f7ff fa13 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200002bc 	.word	0x200002bc
 8001a54:	40004400 	.word	0x40004400

08001a58 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	@ (8001ab4 <MX_USART5_UART_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a64:	2296      	movs	r2, #150	@ 0x96
 8001a66:	0192      	lsls	r2, r2, #6
 8001a68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <MX_USART5_UART_Init+0x58>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f003 f849 	bl	8004b34 <HAL_UART_Init>
 8001aa2:	1e03      	subs	r3, r0, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f7ff f9e3 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000344 	.word	0x20000344
 8001ab4:	40005000 	.word	0x40005000

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b08f      	sub	sp, #60	@ 0x3c
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	2424      	movs	r4, #36	@ 0x24
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	2314      	movs	r3, #20
 8001ac8:	001a      	movs	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	f004 febc 	bl	8006848 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4ac0      	ldr	r2, [pc, #768]	@ (8001dd8 <HAL_UART_MspInit+0x320>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d13f      	bne.n	8001b5a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ada:	4bc0      	ldr	r3, [pc, #768]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ade:	4bbf      	ldr	r3, [pc, #764]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	02c9      	lsls	r1, r1, #11
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4bbc      	ldr	r3, [pc, #752]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aec:	4bbb      	ldr	r3, [pc, #748]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001aee:	2104      	movs	r1, #4
 8001af0:	430a      	orrs	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001af4:	4bb9      	ldr	r3, [pc, #740]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	2210      	movs	r2, #16
 8001b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	2202      	movs	r2, #2
 8001b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	2203      	movs	r2, #3
 8001b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	4aaf      	ldr	r2, [pc, #700]	@ (8001de0 <HAL_UART_MspInit+0x328>)
 8001b22:	0019      	movs	r1, r3
 8001b24:	0010      	movs	r0, r2
 8001b26:	f001 f983 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b2a:	0021      	movs	r1, r4
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2202      	movs	r2, #2
 8001b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2203      	movs	r2, #3
 8001b44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPUART1;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	4aa4      	ldr	r2, [pc, #656]	@ (8001de0 <HAL_UART_MspInit+0x328>)
 8001b50:	0019      	movs	r1, r3
 8001b52:	0010      	movs	r0, r2
 8001b54:	f001 f96c 	bl	8002e30 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8001b58:	e139      	b.n	8001dce <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4aa1      	ldr	r2, [pc, #644]	@ (8001de4 <HAL_UART_MspInit+0x32c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d000      	beq.n	8001b66 <HAL_UART_MspInit+0xae>
 8001b64:	e07f      	b.n	8001c66 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b66:	4b9d      	ldr	r3, [pc, #628]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b6a:	4b9c      	ldr	r3, [pc, #624]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b6c:	2180      	movs	r1, #128	@ 0x80
 8001b6e:	01c9      	lsls	r1, r1, #7
 8001b70:	430a      	orrs	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b99      	ldr	r3, [pc, #612]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b78:	4b98      	ldr	r3, [pc, #608]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b80:	4b96      	ldr	r3, [pc, #600]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b93      	ldr	r3, [pc, #588]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b90:	4b92      	ldr	r3, [pc, #584]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b92:	2102      	movs	r1, #2
 8001b94:	430a      	orrs	r2, r1
 8001b96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b98:	4b90      	ldr	r3, [pc, #576]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ba4:	2124      	movs	r1, #36	@ 0x24
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	00d2      	lsls	r2, r2, #3
 8001bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	000c      	movs	r4, r1
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	2201      	movs	r2, #1
 8001bba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	193a      	adds	r2, r7, r4
 8001bca:	23a0      	movs	r3, #160	@ 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 f92d 	bl	8002e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bd6:	0021      	movs	r1, r4
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2240      	movs	r2, #64	@ 0x40
 8001bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2202      	movs	r2, #2
 8001be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2201      	movs	r2, #1
 8001be8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2203      	movs	r2, #3
 8001bee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	4a7b      	ldr	r2, [pc, #492]	@ (8001de8 <HAL_UART_MspInit+0x330>)
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f001 f917 	bl	8002e30 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001c02:	4b7a      	ldr	r3, [pc, #488]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c04:	4a7a      	ldr	r2, [pc, #488]	@ (8001df0 <HAL_UART_MspInit+0x338>)
 8001c06:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8001c08:	4b78      	ldr	r3, [pc, #480]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b77      	ldr	r3, [pc, #476]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b75      	ldr	r3, [pc, #468]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b74      	ldr	r3, [pc, #464]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c20:	4b72      	ldr	r3, [pc, #456]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c26:	4b71      	ldr	r3, [pc, #452]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c32:	4b6e      	ldr	r3, [pc, #440]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c38:	4b6c      	ldr	r3, [pc, #432]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 feb6 	bl	80029ac <HAL_DMA_Init>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001c44:	f7ff f914 	bl	8000e70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a68      	ldr	r2, [pc, #416]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c4e:	4b67      	ldr	r3, [pc, #412]	@ (8001dec <HAL_UART_MspInit+0x334>)
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	201b      	movs	r0, #27
 8001c5a:	f000 fe75 	bl	8002948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c5e:	201b      	movs	r0, #27
 8001c60:	f000 fe87 	bl	8002972 <HAL_NVIC_EnableIRQ>
}
 8001c64:	e0b3      	b.n	8001dce <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a62      	ldr	r2, [pc, #392]	@ (8001df4 <HAL_UART_MspInit+0x33c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d12a      	bne.n	8001cc6 <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c70:	4b5a      	ldr	r3, [pc, #360]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c74:	4b59      	ldr	r3, [pc, #356]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001c76:	2180      	movs	r1, #128	@ 0x80
 8001c78:	0289      	lsls	r1, r1, #10
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c82:	4b56      	ldr	r3, [pc, #344]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c96:	2124      	movs	r1, #36	@ 0x24
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2203      	movs	r2, #3
 8001cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	187a      	adds	r2, r7, r1
 8001cb8:	23a0      	movs	r3, #160	@ 0xa0
 8001cba:	05db      	lsls	r3, r3, #23
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f001 f8b6 	bl	8002e30 <HAL_GPIO_Init>
}
 8001cc4:	e083      	b.n	8001dce <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART5)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4b      	ldr	r2, [pc, #300]	@ (8001df8 <HAL_UART_MspInit+0x340>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d000      	beq.n	8001cd2 <HAL_UART_MspInit+0x21a>
 8001cd0:	e07d      	b.n	8001dce <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001cd2:	4b42      	ldr	r3, [pc, #264]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cd6:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0349      	lsls	r1, r1, #13
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf8:	4b38      	ldr	r3, [pc, #224]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cfc:	4b37      	ldr	r3, [pc, #220]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001cfe:	2108      	movs	r1, #8
 8001d00:	430a      	orrs	r2, r1
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d04:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <HAL_UART_MspInit+0x324>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d10:	2124      	movs	r1, #36	@ 0x24
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	0152      	lsls	r2, r2, #5
 8001d18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	000c      	movs	r4, r1
 8001d1c:	193b      	adds	r3, r7, r4
 8001d1e:	2202      	movs	r2, #2
 8001d20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d22:	193b      	adds	r3, r7, r4
 8001d24:	2201      	movs	r2, #1
 8001d26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	2202      	movs	r2, #2
 8001d32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <HAL_UART_MspInit+0x328>)
 8001d38:	0019      	movs	r1, r3
 8001d3a:	0010      	movs	r0, r2
 8001d3c:	f001 f878 	bl	8002e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d40:	0021      	movs	r1, r4
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2204      	movs	r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2201      	movs	r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2203      	movs	r2, #3
 8001d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2206      	movs	r2, #6
 8001d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	4a26      	ldr	r2, [pc, #152]	@ (8001dfc <HAL_UART_MspInit+0x344>)
 8001d64:	0019      	movs	r1, r3
 8001d66:	0010      	movs	r0, r2
 8001d68:	f001 f862 	bl	8002e30 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel6;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d6e:	4a25      	ldr	r2, [pc, #148]	@ (8001e04 <HAL_UART_MspInit+0x34c>)
 8001d70:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 8001d72:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d74:	220d      	movs	r2, #13
 8001d76:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d78:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fe01 	bl	80029ac <HAL_DMA_Init>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8001dae:	f7ff f85f 	bl	8000e70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001db6:	675a      	str	r2, [r3, #116]	@ 0x74
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_UART_MspInit+0x348>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	200e      	movs	r0, #14
 8001dc4:	f000 fdc0 	bl	8002948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001dc8:	200e      	movs	r0, #14
 8001dca:	f000 fdd2 	bl	8002972 <HAL_NVIC_EnableIRQ>
}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b00f      	add	sp, #60	@ 0x3c
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	40004800 	.word	0x40004800
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	50000800 	.word	0x50000800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	50000400 	.word	0x50000400
 8001dec:	200003cc 	.word	0x200003cc
 8001df0:	40020030 	.word	0x40020030
 8001df4:	40004400 	.word	0x40004400
 8001df8:	40005000 	.word	0x40005000
 8001dfc:	50000c00 	.word	0x50000c00
 8001e00:	20000414 	.word	0x20000414
 8001e04:	4002006c 	.word	0x4002006c

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001e08:	480d      	ldr	r0, [pc, #52]	@ (8001e40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001e0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e0c:	f7ff fc08 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e12:	490d      	ldr	r1, [pc, #52]	@ (8001e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <LoopForever+0xe>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e28:	4c0a      	ldr	r4, [pc, #40]	@ (8001e54 <LoopForever+0x16>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001e36:	f004 fd63 	bl	8006900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7fe fe0d 	bl	8000a58 <main>

08001e3e <LoopForever>:

LoopForever:
    b LoopForever
 8001e3e:	e7fe      	b.n	8001e3e <LoopForever>
   ldr   r0, =_estack
 8001e40:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e4c:	080074d0 	.word	0x080074d0
  ldr r2, =_sbss
 8001e50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e54:	200005ac 	.word	0x200005ac

08001e58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC1_COMP_IRQHandler>
	...

08001e5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_Init+0x3c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_Init+0x3c>)
 8001e6e:	2140      	movs	r1, #64	@ 0x40
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 f811 	bl	8001e9c <HAL_InitTick>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e001      	b.n	8001e8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e86:	f7ff fab3 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_InitTick+0x5c>)
 8001ea6:	681c      	ldr	r4, [r3, #0]
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <HAL_InitTick+0x60>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	0019      	movs	r1, r3
 8001eae:	23fa      	movs	r3, #250	@ 0xfa
 8001eb0:	0098      	lsls	r0, r3, #2
 8001eb2:	f7fe f933 	bl	800011c <__udivsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	0019      	movs	r1, r3
 8001eba:	0020      	movs	r0, r4
 8001ebc:	f7fe f92e 	bl	800011c <__udivsi3>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fd65 	bl	8002992 <HAL_SYSTICK_Config>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e00f      	b.n	8001ef0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d80b      	bhi.n	8001eee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	425b      	negs	r3, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 fd32 	bl	8002948 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_InitTick+0x64>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b003      	add	sp, #12
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20000008 	.word	0x20000008

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_IncTick+0x1c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_IncTick+0x20>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	18d2      	adds	r2, r2, r3
 8001f14:	4b03      	ldr	r3, [pc, #12]	@ (8001f24 <HAL_IncTick+0x20>)
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	2000045c 	.word	0x2000045c

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	@ (8001f38 <HAL_GetTick+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	2000045c 	.word	0x2000045c

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	189b      	adds	r3, r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	f7ff ffe0 	bl	8001f28 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b004      	add	sp, #16
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	2000000c 	.word	0x2000000c

08001f84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e159      	b.n	800224a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2250      	movs	r2, #80	@ 0x50
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe fad8 	bl	8000564 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	2210      	movs	r2, #16
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d005      	beq.n	8001fcc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001fca:	d00b      	beq.n	8001fe4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2250      	movs	r2, #80	@ 0x50
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e132      	b.n	800224a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	4a9a      	ldr	r2, [pc, #616]	@ (8002254 <HAL_ADC_Init+0x2d0>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	2202      	movs	r2, #2
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <HAL_ADC_Init+0x90>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_Init+0x90>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_ADC_Init+0x92>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d149      	bne.n	80020ae <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	23c0      	movs	r3, #192	@ 0xc0
 8002020:	061b      	lsls	r3, r3, #24
 8002022:	429a      	cmp	r2, r3
 8002024:	d00b      	beq.n	800203e <HAL_ADC_Init+0xba>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	429a      	cmp	r2, r3
 8002030:	d005      	beq.n	800203e <HAL_ADC_Init+0xba>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	429a      	cmp	r2, r3
 800203c:	d111      	bne.n	8002062 <HAL_ADC_Init+0xde>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	0892      	lsrs	r2, r2, #2
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6919      	ldr	r1, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	e014      	b.n	800208c <HAL_ADC_Init+0x108>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	0892      	lsrs	r2, r2, #2
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	4b79      	ldr	r3, [pc, #484]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b78      	ldr	r3, [pc, #480]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 8002078:	4978      	ldr	r1, [pc, #480]	@ (800225c <HAL_ADC_Init+0x2d8>)
 800207a:	400a      	ands	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4b74      	ldr	r3, [pc, #464]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2118      	movs	r1, #24
 8002098:	438a      	bics	r2, r1
 800209a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68d9      	ldr	r1, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80020ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b69      	ldr	r3, [pc, #420]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 80020b4:	496a      	ldr	r1, [pc, #424]	@ (8002260 <HAL_ADC_Init+0x2dc>)
 80020b6:	400a      	ands	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80020ba:	4b67      	ldr	r3, [pc, #412]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	065a      	lsls	r2, r3, #25
 80020c4:	4b64      	ldr	r3, [pc, #400]	@ (8002258 <HAL_ADC_Init+0x2d4>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	4013      	ands	r3, r2
 80020d6:	d108      	bne.n	80020ea <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2180      	movs	r1, #128	@ 0x80
 80020e4:	0549      	lsls	r1, r1, #21
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	495b      	ldr	r1, [pc, #364]	@ (8002264 <HAL_ADC_Init+0x2e0>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68d9      	ldr	r1, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d101      	bne.n	8002110 <HAL_ADC_Init+0x18c>
 800210c:	2304      	movs	r3, #4
 800210e:	e000      	b.n	8002112 <HAL_ADC_Init+0x18e>
 8002110:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002112:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2020      	movs	r0, #32
 8002118:	5c1b      	ldrb	r3, [r3, r0]
 800211a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800211c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	202c      	movs	r0, #44	@ 0x2c
 8002122:	5c1b      	ldrb	r3, [r3, r0]
 8002124:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002126:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800212c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002134:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800213c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214a:	23c2      	movs	r3, #194	@ 0xc2
 800214c:	33ff      	adds	r3, #255	@ 0xff
 800214e:	429a      	cmp	r2, r3
 8002150:	d00b      	beq.n	800216a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68d9      	ldr	r1, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2221      	movs	r2, #33	@ 0x21
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d11a      	bne.n	80021aa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	5c9b      	ldrb	r3, [r3, r2]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2180      	movs	r1, #128	@ 0x80
 800218a:	0249      	lsls	r1, r1, #9
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	e00b      	b.n	80021aa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002196:	2220      	movs	r2, #32
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	2201      	movs	r2, #1
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d11f      	bne.n	80021f2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	492a      	ldr	r1, [pc, #168]	@ (8002268 <HAL_ADC_Init+0x2e4>)
 80021be:	400a      	ands	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80021d0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80021d6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	e00e      	b.n	8002210 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2107      	movs	r1, #7
 800221c:	438a      	bics	r2, r1
 800221e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	2203      	movs	r2, #3
 800223e:	4393      	bics	r3, r2
 8002240:	2201      	movs	r2, #1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	fffffefd 	.word	0xfffffefd
 8002258:	40012708 	.word	0x40012708
 800225c:	ffc3ffff 	.word	0xffc3ffff
 8002260:	fdffffff 	.word	0xfdffffff
 8002264:	fffe0219 	.word	0xfffe0219
 8002268:	fffffc03 	.word	0xfffffc03

0800226c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2204      	movs	r2, #4
 8002284:	4013      	ands	r3, r2
 8002286:	d138      	bne.n	80022fa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2250      	movs	r2, #80	@ 0x50
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Start+0x2a>
 8002292:	2302      	movs	r3, #2
 8002294:	e038      	b.n	8002308 <HAL_ADC_Start+0x9c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2250      	movs	r2, #80	@ 0x50
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d007      	beq.n	80022b6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80022a6:	230f      	movs	r3, #15
 80022a8:	18fc      	adds	r4, r7, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f979 	bl	80025a4 <ADC_Enable>
 80022b2:	0003      	movs	r3, r0
 80022b4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022b6:	230f      	movs	r3, #15
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d120      	bne.n	8002302 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <HAL_ADC_Start+0xa4>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	0052      	lsls	r2, r2, #1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2250      	movs	r2, #80	@ 0x50
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	221c      	movs	r2, #28
 80022e6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2104      	movs	r1, #4
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e003      	b.n	8002302 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022fa:	230f      	movs	r3, #15
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2202      	movs	r2, #2
 8002300:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002302:	230f      	movs	r3, #15
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	781b      	ldrb	r3, [r3, #0]
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b005      	add	sp, #20
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	fffff0fe 	.word	0xfffff0fe

08002314 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d102      	bne.n	8002334 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800232e:	2308      	movs	r3, #8
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e014      	b.n	800235e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10b      	bne.n	800235a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	2220      	movs	r2, #32
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2250      	movs	r2, #80	@ 0x50
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e072      	b.n	8002440 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800235a:	230c      	movs	r3, #12
 800235c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800235e:	f7ff fde3 	bl	8001f28 <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002366:	e01f      	b.n	80023a8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	d01c      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <HAL_ADC_PollForConversion+0x70>
 8002374:	f7ff fdd8 	bl	8001f28 <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d211      	bcs.n	80023a8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	d10b      	bne.n	80023a8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	2204      	movs	r2, #4
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2250      	movs	r2, #80	@ 0x50
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e04b      	b.n	8002440 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	d0d9      	beq.n	8002368 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	2280      	movs	r2, #128	@ 0x80
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	23c0      	movs	r3, #192	@ 0xc0
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4013      	ands	r3, r2
 80023ce:	d12e      	bne.n	800242e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d129      	bne.n	800242e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d122      	bne.n	800242e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2204      	movs	r2, #4
 80023f0:	4013      	ands	r3, r2
 80023f2:	d110      	bne.n	8002416 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	210c      	movs	r1, #12
 8002400:	438a      	bics	r2, r1
 8002402:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <HAL_ADC_PollForConversion+0x134>)
 800240a:	4013      	ands	r3, r2
 800240c:	2201      	movs	r2, #1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
 8002414:	e00b      	b.n	800242e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	2220      	movs	r2, #32
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	2201      	movs	r2, #1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}
 8002448:	fffffefe 	.word	0xfffffefe

0800244c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2250      	movs	r2, #80	@ 0x50
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x18>
 8002478:	2302      	movs	r3, #2
 800247a:	e085      	b.n	8002588 <HAL_ADC_ConfigChannel+0x124>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2250      	movs	r2, #80	@ 0x50
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	d00b      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	2220      	movs	r2, #32
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2250      	movs	r2, #80	@ 0x50
 80024a0:	2100      	movs	r1, #0
 80024a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e06f      	b.n	8002588 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a38      	ldr	r2, [pc, #224]	@ (8002590 <HAL_ADC_ConfigChannel+0x12c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d035      	beq.n	800251e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	035b      	lsls	r3, r3, #13
 80024be:	0b5a      	lsrs	r2, r3, #13
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	02db      	lsls	r3, r3, #11
 80024d0:	4013      	ands	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80024d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 80024da:	2180      	movs	r1, #128	@ 0x80
 80024dc:	0409      	lsls	r1, r1, #16
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80024e2:	200a      	movs	r0, #10
 80024e4:	f000 f8c6 	bl	8002674 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4013      	ands	r3, r2
 80024f2:	d006      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	03c9      	lsls	r1, r1, #15
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	025b      	lsls	r3, r3, #9
 800250a:	4013      	ands	r3, r2
 800250c:	d037      	beq.n	800257e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	0449      	lsls	r1, r1, #17
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e02f      	b.n	800257e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	035b      	lsls	r3, r3, #13
 800252a:	0b5b      	lsrs	r3, r3, #13
 800252c:	43d9      	mvns	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	02db      	lsls	r3, r3, #11
 800253e:	4013      	ands	r3, r2
 8002540:	d005      	beq.n	800254e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002542:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002548:	4913      	ldr	r1, [pc, #76]	@ (8002598 <HAL_ADC_ConfigChannel+0x134>)
 800254a:	400a      	ands	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	029b      	lsls	r3, r3, #10
 8002556:	4013      	ands	r3, r2
 8002558:	d005      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002560:	490e      	ldr	r1, [pc, #56]	@ (800259c <HAL_ADC_ConfigChannel+0x138>)
 8002562:	400a      	ands	r2, r1
 8002564:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	025b      	lsls	r3, r3, #9
 800256e:	4013      	ands	r3, r2
 8002570:	d005      	beq.n	800257e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002572:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <HAL_ADC_ConfigChannel+0x130>)
 8002578:	4909      	ldr	r1, [pc, #36]	@ (80025a0 <HAL_ADC_ConfigChannel+0x13c>)
 800257a:	400a      	ands	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2250      	movs	r2, #80	@ 0x50
 8002582:	2100      	movs	r1, #0
 8002584:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	00001001 	.word	0x00001001
 8002594:	40012708 	.word	0x40012708
 8002598:	ff7fffff 	.word	0xff7fffff
 800259c:	ffbfffff 	.word	0xffbfffff
 80025a0:	feffffff 	.word	0xfeffffff

080025a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2203      	movs	r2, #3
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <ADC_Enable+0x2c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <ADC_Enable+0x2c>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <ADC_Enable+0x2e>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d146      	bne.n	8002664 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <ADC_Enable+0xcc>)
 80025de:	4013      	ands	r3, r2
 80025e0:	d00d      	beq.n	80025fe <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e6:	2210      	movs	r2, #16
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	2201      	movs	r2, #1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e033      	b.n	8002666 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800260e:	2001      	movs	r0, #1
 8002610:	f000 f830 	bl	8002674 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002614:	f7ff fc88 	bl	8001f28 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800261c:	e01b      	b.n	8002656 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261e:	f7ff fc83 	bl	8001f28 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d914      	bls.n	8002656 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	4013      	ands	r3, r2
 8002636:	2b01      	cmp	r3, #1
 8002638:	d00d      	beq.n	8002656 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	2210      	movs	r2, #16
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	2201      	movs	r2, #1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	2b01      	cmp	r3, #1
 8002662:	d1dc      	bne.n	800261e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b004      	add	sp, #16
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	80000017 	.word	0x80000017

08002674 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <ADC_DelayMicroSecond+0x38>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	490b      	ldr	r1, [pc, #44]	@ (80026b0 <ADC_DelayMicroSecond+0x3c>)
 8002682:	0018      	movs	r0, r3
 8002684:	f7fd fd4a 	bl	800011c <__udivsi3>
 8002688:	0003      	movs	r3, r0
 800268a:	001a      	movs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4353      	muls	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002692:	e002      	b.n	800269a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3b01      	subs	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <ADC_DelayMicroSecond+0x20>
  }
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	20000004 	.word	0x20000004
 80026b0:	000f4240 	.word	0x000f4240

080026b4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026be:	2317      	movs	r3, #23
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2250      	movs	r2, #80	@ 0x50
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ADCEx_Calibration_Start+0x28>
 80026d8:	2302      	movs	r3, #2
 80026da:	e083      	b.n	80027e4 <HAL_ADCEx_Calibration_Start+0x130>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2250      	movs	r2, #80	@ 0x50
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2203      	movs	r2, #3
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <HAL_ADCEx_Calibration_Start+0x50>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_ADCEx_Calibration_Start+0x50>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_ADCEx_Calibration_Start+0x52>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d15b      	bne.n	80027c2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	4a37      	ldr	r2, [pc, #220]	@ (80027ec <HAL_ADCEx_Calibration_Start+0x138>)
 8002710:	4013      	ands	r3, r2
 8002712:	2202      	movs	r2, #2
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2203      	movs	r2, #3
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2103      	movs	r1, #3
 8002732:	438a      	bics	r2, r1
 8002734:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2180      	movs	r1, #128	@ 0x80
 8002742:	0609      	lsls	r1, r1, #24
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002748:	f7ff fbee 	bl	8001f28 <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002750:	e01d      	b.n	800278e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002752:	f7ff fbe9 	bl	8001f28 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d916      	bls.n	800278e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0fdb      	lsrs	r3, r3, #31
 8002768:	07da      	lsls	r2, r3, #31
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	429a      	cmp	r2, r3
 8002770:	d10d      	bne.n	800278e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	2212      	movs	r2, #18
 8002778:	4393      	bics	r3, r2
 800277a:	2210      	movs	r2, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2250      	movs	r2, #80	@ 0x50
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e02a      	b.n	80027e4 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	0fdb      	lsrs	r3, r3, #31
 8002796:	07da      	lsls	r2, r3, #31
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	061b      	lsls	r3, r3, #24
 800279c:	429a      	cmp	r2, r3
 800279e:	d0d8      	beq.n	8002752 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68d9      	ldr	r1, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	2203      	movs	r2, #3
 80027b6:	4393      	bics	r3, r2
 80027b8:	2201      	movs	r2, #1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	@ 0x54
 80027c0:	e009      	b.n	80027d6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	2220      	movs	r2, #32
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027ce:	2317      	movs	r3, #23
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2250      	movs	r2, #80	@ 0x50
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80027de:	2317      	movs	r3, #23
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	781b      	ldrb	r3, [r3, #0]
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b006      	add	sp, #24
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	fffffefd 	.word	0xfffffefd

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b7f      	cmp	r3, #127	@ 0x7f
 8002802:	d809      	bhi.n	8002818 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002804:	1dfb      	adds	r3, r7, #7
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	001a      	movs	r2, r3
 800280a:	231f      	movs	r3, #31
 800280c:	401a      	ands	r2, r3
 800280e:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <__NVIC_EnableIRQ+0x30>)
 8002810:	2101      	movs	r1, #1
 8002812:	4091      	lsls	r1, r2
 8002814:	000a      	movs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
  }
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	0002      	movs	r2, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002832:	1dfb      	adds	r3, r7, #7
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b7f      	cmp	r3, #127	@ 0x7f
 8002838:	d828      	bhi.n	800288c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283a:	4a2f      	ldr	r2, [pc, #188]	@ (80028f8 <__NVIC_SetPriority+0xd4>)
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b25b      	sxtb	r3, r3
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	33c0      	adds	r3, #192	@ 0xc0
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	589b      	ldr	r3, [r3, r2]
 800284a:	1dfa      	adds	r2, r7, #7
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	0011      	movs	r1, r2
 8002850:	2203      	movs	r2, #3
 8002852:	400a      	ands	r2, r1
 8002854:	00d2      	lsls	r2, r2, #3
 8002856:	21ff      	movs	r1, #255	@ 0xff
 8002858:	4091      	lsls	r1, r2
 800285a:	000a      	movs	r2, r1
 800285c:	43d2      	mvns	r2, r2
 800285e:	401a      	ands	r2, r3
 8002860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	22ff      	movs	r2, #255	@ 0xff
 8002868:	401a      	ands	r2, r3
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	0018      	movs	r0, r3
 8002870:	2303      	movs	r3, #3
 8002872:	4003      	ands	r3, r0
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002878:	481f      	ldr	r0, [pc, #124]	@ (80028f8 <__NVIC_SetPriority+0xd4>)
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b25b      	sxtb	r3, r3
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	430a      	orrs	r2, r1
 8002884:	33c0      	adds	r3, #192	@ 0xc0
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800288a:	e031      	b.n	80028f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288c:	4a1b      	ldr	r2, [pc, #108]	@ (80028fc <__NVIC_SetPriority+0xd8>)
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	0019      	movs	r1, r3
 8002894:	230f      	movs	r3, #15
 8002896:	400b      	ands	r3, r1
 8002898:	3b08      	subs	r3, #8
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3306      	adds	r3, #6
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	18d3      	adds	r3, r2, r3
 80028a2:	3304      	adds	r3, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1dfa      	adds	r2, r7, #7
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	0011      	movs	r1, r2
 80028ac:	2203      	movs	r2, #3
 80028ae:	400a      	ands	r2, r1
 80028b0:	00d2      	lsls	r2, r2, #3
 80028b2:	21ff      	movs	r1, #255	@ 0xff
 80028b4:	4091      	lsls	r1, r2
 80028b6:	000a      	movs	r2, r1
 80028b8:	43d2      	mvns	r2, r2
 80028ba:	401a      	ands	r2, r3
 80028bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	22ff      	movs	r2, #255	@ 0xff
 80028c4:	401a      	ands	r2, r3
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	0018      	movs	r0, r3
 80028cc:	2303      	movs	r3, #3
 80028ce:	4003      	ands	r3, r0
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d4:	4809      	ldr	r0, [pc, #36]	@ (80028fc <__NVIC_SetPriority+0xd8>)
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	001c      	movs	r4, r3
 80028dc:	230f      	movs	r3, #15
 80028de:	4023      	ands	r3, r4
 80028e0:	3b08      	subs	r3, #8
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	430a      	orrs	r2, r1
 80028e6:	3306      	adds	r3, #6
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	18c3      	adds	r3, r0, r3
 80028ec:	3304      	adds	r3, #4
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b003      	add	sp, #12
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	045b      	lsls	r3, r3, #17
 8002910:	429a      	cmp	r2, r3
 8002912:	d301      	bcc.n	8002918 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002914:	2301      	movs	r3, #1
 8002916:	e010      	b.n	800293a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <SysTick_Config+0x44>)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	3a01      	subs	r2, #1
 800291e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002920:	2301      	movs	r3, #1
 8002922:	425b      	negs	r3, r3
 8002924:	2103      	movs	r1, #3
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff ff7c 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <SysTick_Config+0x44>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <SysTick_Config+0x44>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	210f      	movs	r1, #15
 8002954:	187b      	adds	r3, r7, r1
 8002956:	1c02      	adds	r2, r0, #0
 8002958:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	187b      	adds	r3, r7, r1
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	0002      	movs	r2, r0
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25b      	sxtb	r3, r3
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff ff33 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff ffaf 	bl	8002900 <SysTick_Config>
 80029a2:	0003      	movs	r3, r0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e061      	b.n	8002a82 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <HAL_DMA_Init+0xe0>)
 80029c4:	4694      	mov	ip, r2
 80029c6:	4463      	add	r3, ip
 80029c8:	2114      	movs	r1, #20
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fd fba6 	bl	800011c <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a2d      	ldr	r2, [pc, #180]	@ (8002a90 <HAL_DMA_Init+0xe4>)
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2225      	movs	r2, #37	@ 0x25
 80029e2:	2102      	movs	r1, #2
 80029e4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a28      	ldr	r2, [pc, #160]	@ (8002a94 <HAL_DMA_Init+0xe8>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	01db      	lsls	r3, r3, #7
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <HAL_DMA_Init+0xec>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	211c      	movs	r1, #28
 8002a42:	400b      	ands	r3, r1
 8002a44:	210f      	movs	r1, #15
 8002a46:	4099      	lsls	r1, r3
 8002a48:	000b      	movs	r3, r1
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_DMA_Init+0xec>)
 8002a4e:	400a      	ands	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_DMA_Init+0xec>)
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	201c      	movs	r0, #28
 8002a60:	4003      	ands	r3, r0
 8002a62:	409a      	lsls	r2, r3
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <HAL_DMA_Init+0xec>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2225      	movs	r2, #37	@ 0x25
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	@ 0x24
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	bffdfff8 	.word	0xbffdfff8
 8002a90:	40020000 	.word	0x40020000
 8002a94:	ffff800f 	.word	0xffff800f
 8002a98:	400200a8 	.word	0x400200a8

08002a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2317      	movs	r3, #23
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2224      	movs	r2, #36	@ 0x24
 8002ab6:	5c9b      	ldrb	r3, [r3, r2]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA_Start_IT+0x24>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e04f      	b.n	8002b60 <HAL_DMA_Start_IT+0xc4>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2225      	movs	r2, #37	@ 0x25
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d13a      	bne.n	8002b4a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2225      	movs	r2, #37	@ 0x25
 8002ad8:	2102      	movs	r1, #2
 8002ada:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	438a      	bics	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f96a 	bl	8002dd2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	210e      	movs	r1, #14
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00f      	b.n	8002b38 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2104      	movs	r1, #4
 8002b24:	438a      	bics	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	210a      	movs	r1, #10
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e007      	b.n	8002b5a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2224      	movs	r2, #36	@ 0x24
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b52:	2317      	movs	r3, #23
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002b5a:	2317      	movs	r3, #23
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b006      	add	sp, #24
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	230f      	movs	r3, #15
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2225      	movs	r2, #37	@ 0x25
 8002b7c:	5c9b      	ldrb	r3, [r3, r2]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d008      	beq.n	8002b96 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2204      	movs	r2, #4
 8002b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2224      	movs	r2, #36	@ 0x24
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e024      	b.n	8002be0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	210e      	movs	r1, #14
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	438a      	bics	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	221c      	movs	r2, #28
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4091      	lsls	r1, r2
 8002bc6:	000a      	movs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2225      	movs	r2, #37	@ 0x25
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2224      	movs	r2, #36	@ 0x24
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5499      	strb	r1, [r3, r2]

    return status;
 8002bda:	230f      	movs	r3, #15
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2225      	movs	r2, #37	@ 0x25
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d006      	beq.n	8002c12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2204      	movs	r2, #4
 8002c08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e02a      	b.n	8002c68 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	210e      	movs	r1, #14
 8002c1e:	438a      	bics	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	438a      	bics	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	221c      	movs	r2, #28
 8002c38:	401a      	ands	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4091      	lsls	r1, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2225      	movs	r2, #37	@ 0x25
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2224      	movs	r2, #36	@ 0x24
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	0010      	movs	r0, r2
 8002c66:	4798      	blx	r3
    }
  }
  return status;
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b004      	add	sp, #16
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	221c      	movs	r2, #28
 8002c94:	4013      	ands	r3, r2
 8002c96:	2204      	movs	r2, #4
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d026      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x7a>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d107      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	221c      	movs	r2, #28
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	4091      	lsls	r1, r2
 8002cd6:	000a      	movs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d100      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x6e>
 8002ce2:	e071      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	0010      	movs	r0, r2
 8002cec:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002cee:	e06b      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	221c      	movs	r2, #28
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	d02d      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xea>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d029      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	4013      	ands	r3, r2
 8002d16:	d10b      	bne.n	8002d30 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	210a      	movs	r1, #10
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2225      	movs	r2, #37	@ 0x25
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	221c      	movs	r2, #28
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4091      	lsls	r1, r2
 8002d40:	000a      	movs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	@ 0x24
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d039      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	0010      	movs	r0, r2
 8002d5c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d5e:	e033      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	221c      	movs	r2, #28
 8002d66:	4013      	ands	r3, r2
 8002d68:	2208      	movs	r2, #8
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	d02a      	beq.n	8002dca <HAL_DMA_IRQHandler+0x154>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2208      	movs	r2, #8
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d026      	beq.n	8002dca <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	210e      	movs	r1, #14
 8002d88:	438a      	bics	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	221c      	movs	r2, #28
 8002d92:	401a      	ands	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4091      	lsls	r1, r2
 8002d9c:	000a      	movs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2225      	movs	r2, #37	@ 0x25
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2224      	movs	r2, #36	@ 0x24
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46c0      	nop			@ (mov r8, r8)
}
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	221c      	movs	r2, #28
 8002de6:	401a      	ands	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	2101      	movs	r1, #1
 8002dee:	4091      	lsls	r1, r2
 8002df0:	000a      	movs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d108      	bne.n	8002e16 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e14:	e007      	b.n	8002e26 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	60da      	str	r2, [r3, #12]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e46:	e155      	b.n	80030f4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4091      	lsls	r1, r2
 8002e52:	000a      	movs	r2, r1
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d100      	bne.n	8002e60 <HAL_GPIO_Init+0x30>
 8002e5e:	e146      	b.n	80030ee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d005      	beq.n	8002e78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d130      	bne.n	8002eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	409a      	lsls	r2, r3
 8002e86:	0013      	movs	r3, r2
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eae:	2201      	movs	r2, #1
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d017      	beq.n	8002f16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	0013      	movs	r3, r2
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	0013      	movs	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d123      	bne.n	8002f6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3208      	adds	r2, #8
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	58d3      	ldr	r3, [r2, r3]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2207      	movs	r2, #7
 8002f34:	4013      	ands	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2107      	movs	r1, #7
 8002f4e:	400b      	ands	r3, r1
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	08da      	lsrs	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3208      	adds	r2, #8
 8002f64:	0092      	lsls	r2, r2, #2
 8002f66:	6939      	ldr	r1, [r7, #16]
 8002f68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	409a      	lsls	r2, r3
 8002f78:	0013      	movs	r3, r2
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2203      	movs	r2, #3
 8002f88:	401a      	ands	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	0013      	movs	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	23c0      	movs	r3, #192	@ 0xc0
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d100      	bne.n	8002fac <HAL_GPIO_Init+0x17c>
 8002faa:	e0a0      	b.n	80030ee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fac:	4b57      	ldr	r3, [pc, #348]	@ (800310c <HAL_GPIO_Init+0x2dc>)
 8002fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb0:	4b56      	ldr	r3, [pc, #344]	@ (800310c <HAL_GPIO_Init+0x2dc>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb8:	4a55      	ldr	r2, [pc, #340]	@ (8003110 <HAL_GPIO_Init+0x2e0>)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	589b      	ldr	r3, [r3, r2]
 8002fc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	4013      	ands	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	220f      	movs	r2, #15
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	23a0      	movs	r3, #160	@ 0xa0
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x1f6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8003114 <HAL_GPIO_Init+0x2e4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x1f2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a49      	ldr	r2, [pc, #292]	@ (8003118 <HAL_GPIO_Init+0x2e8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x1ee>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a48      	ldr	r2, [pc, #288]	@ (800311c <HAL_GPIO_Init+0x2ec>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x1ea>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a47      	ldr	r2, [pc, #284]	@ (8003120 <HAL_GPIO_Init+0x2f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x1e6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a46      	ldr	r2, [pc, #280]	@ (8003124 <HAL_GPIO_Init+0x2f4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x1e2>
 800300e:	2305      	movs	r3, #5
 8003010:	e00a      	b.n	8003028 <HAL_GPIO_Init+0x1f8>
 8003012:	2306      	movs	r3, #6
 8003014:	e008      	b.n	8003028 <HAL_GPIO_Init+0x1f8>
 8003016:	2304      	movs	r3, #4
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x1f8>
 800301a:	2303      	movs	r3, #3
 800301c:	e004      	b.n	8003028 <HAL_GPIO_Init+0x1f8>
 800301e:	2302      	movs	r3, #2
 8003020:	e002      	b.n	8003028 <HAL_GPIO_Init+0x1f8>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x1f8>
 8003026:	2300      	movs	r3, #0
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	2103      	movs	r1, #3
 800302c:	400a      	ands	r2, r1
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4093      	lsls	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003038:	4935      	ldr	r1, [pc, #212]	@ (8003110 <HAL_GPIO_Init+0x2e0>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003046:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43da      	mvns	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	035b      	lsls	r3, r3, #13
 800305e:	4013      	ands	r3, r2
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800306a:	4b2f      	ldr	r3, [pc, #188]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003070:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43da      	mvns	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	039b      	lsls	r3, r3, #14
 8003088:	4013      	ands	r3, r2
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003094:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800309a:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43da      	mvns	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	029b      	lsls	r3, r3, #10
 80030b2:	4013      	ands	r3, r2
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030be:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	4013      	ands	r3, r2
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <HAL_GPIO_Init+0x2f8>)
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3301      	adds	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	40da      	lsrs	r2, r3
 80030fc:	1e13      	subs	r3, r2, #0
 80030fe:	d000      	beq.n	8003102 <HAL_GPIO_Init+0x2d2>
 8003100:	e6a2      	b.n	8002e48 <HAL_GPIO_Init+0x18>
  }
}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b006      	add	sp, #24
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	40010000 	.word	0x40010000
 8003114:	50000400 	.word	0x50000400
 8003118:	50000800 	.word	0x50000800
 800311c:	50000c00 	.word	0x50000c00
 8003120:	50001000 	.word	0x50001000
 8003124:	50001c00 	.word	0x50001c00
 8003128:	40010400 	.word	0x40010400

0800312c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	000a      	movs	r2, r1
 8003136:	1cbb      	adds	r3, r7, #2
 8003138:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	1cba      	adds	r2, r7, #2
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	4013      	ands	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e003      	b.n	8003158 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003158:	230f      	movs	r3, #15
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	0008      	movs	r0, r1
 8003170:	0011      	movs	r1, r2
 8003172:	1cbb      	adds	r3, r7, #2
 8003174:	1c02      	adds	r2, r0, #0
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	1c7b      	adds	r3, r7, #1
 800317a:	1c0a      	adds	r2, r1, #0
 800317c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317e:	1c7b      	adds	r3, r7, #1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003186:	1cbb      	adds	r3, r7, #2
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800318e:	e003      	b.n	8003198 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003190:	1cbb      	adds	r3, r7, #2
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	0002      	movs	r2, r0
 80031a8:	1dbb      	adds	r3, r7, #6
 80031aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	1dba      	adds	r2, r7, #6
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	4013      	ands	r3, r2
 80031b6:	d008      	beq.n	80031ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80031ba:	1dba      	adds	r2, r7, #6
 80031bc:	8812      	ldrh	r2, [r2, #0]
 80031be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c0:	1dbb      	adds	r3, r7, #6
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fe59 	bl	8000e7c <HAL_GPIO_EXTI_Callback>
  }
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b08a      	sub	sp, #40	@ 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f000 fbbf 	bl	800396a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ec:	4bc9      	ldr	r3, [pc, #804]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	220c      	movs	r2, #12
 80031f2:	4013      	ands	r3, r2
 80031f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f6:	4bc7      	ldr	r3, [pc, #796]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	025b      	lsls	r3, r3, #9
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4013      	ands	r3, r2
 800320a:	d100      	bne.n	800320e <HAL_RCC_OscConfig+0x36>
 800320c:	e07e      	b.n	800330c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d007      	beq.n	8003224 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d112      	bne.n	8003240 <HAL_RCC_OscConfig+0x68>
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	429a      	cmp	r2, r3
 8003222:	d10d      	bne.n	8003240 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4bbb      	ldr	r3, [pc, #748]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	4013      	ands	r3, r2
 800322e:	d100      	bne.n	8003232 <HAL_RCC_OscConfig+0x5a>
 8003230:	e06b      	b.n	800330a <HAL_RCC_OscConfig+0x132>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d167      	bne.n	800330a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f000 fb95 	bl	800396a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	2380      	movs	r3, #128	@ 0x80
 8003246:	025b      	lsls	r3, r3, #9
 8003248:	429a      	cmp	r2, r3
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x84>
 800324c:	4bb1      	ldr	r3, [pc, #708]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4bb0      	ldr	r3, [pc, #704]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003252:	2180      	movs	r1, #128	@ 0x80
 8003254:	0249      	lsls	r1, r1, #9
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e027      	b.n	80032ac <HAL_RCC_OscConfig+0xd4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	23a0      	movs	r3, #160	@ 0xa0
 8003262:	02db      	lsls	r3, r3, #11
 8003264:	429a      	cmp	r2, r3
 8003266:	d10e      	bne.n	8003286 <HAL_RCC_OscConfig+0xae>
 8003268:	4baa      	ldr	r3, [pc, #680]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4ba9      	ldr	r3, [pc, #676]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800326e:	2180      	movs	r1, #128	@ 0x80
 8003270:	02c9      	lsls	r1, r1, #11
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	4ba7      	ldr	r3, [pc, #668]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4ba6      	ldr	r3, [pc, #664]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800327c:	2180      	movs	r1, #128	@ 0x80
 800327e:	0249      	lsls	r1, r1, #9
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e012      	b.n	80032ac <HAL_RCC_OscConfig+0xd4>
 8003286:	4ba3      	ldr	r3, [pc, #652]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4ba2      	ldr	r3, [pc, #648]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800328c:	49a2      	ldr	r1, [pc, #648]	@ (8003518 <HAL_RCC_OscConfig+0x340>)
 800328e:	400a      	ands	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	4ba0      	ldr	r3, [pc, #640]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	025b      	lsls	r3, r3, #9
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4b9c      	ldr	r3, [pc, #624]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80032a6:	499d      	ldr	r1, [pc, #628]	@ (800351c <HAL_RCC_OscConfig+0x344>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d015      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fe38 	bl	8001f28 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032bc:	e009      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032be:	f7fe fe33 	bl	8001f28 <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	@ 0x64
 80032ca:	d902      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	f000 fb4c 	bl	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032d2:	4b90      	ldr	r3, [pc, #576]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	4013      	ands	r3, r2
 80032dc:	d0ef      	beq.n	80032be <HAL_RCC_OscConfig+0xe6>
 80032de:	e015      	b.n	800330c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fe22 	bl	8001f28 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ea:	f7fe fe1d 	bl	8001f28 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	@ 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e336      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032fc:	4b85      	ldr	r3, [pc, #532]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	029b      	lsls	r3, r3, #10
 8003304:	4013      	ands	r3, r2
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x112>
 8003308:	e000      	b.n	800330c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2202      	movs	r2, #2
 8003312:	4013      	ands	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_RCC_OscConfig+0x140>
 8003316:	e099      	b.n	800344c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	2220      	movs	r2, #32
 8003322:	4013      	ands	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003326:	4b7b      	ldr	r3, [pc, #492]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800332c:	2120      	movs	r1, #32
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	2220      	movs	r2, #32
 8003336:	4393      	bics	r3, r2
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d13e      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1ec>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d13b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800334c:	4b71      	ldr	r3, [pc, #452]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2204      	movs	r2, #4
 8003352:	4013      	ands	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_RCC_OscConfig+0x188>
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e304      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6e      	ldr	r2, [pc, #440]	@ (8003520 <HAL_RCC_OscConfig+0x348>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	021a      	lsls	r2, r3, #8
 8003370:	4b68      	ldr	r3, [pc, #416]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003376:	4b67      	ldr	r3, [pc, #412]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2209      	movs	r2, #9
 800337c:	4393      	bics	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	4b64      	ldr	r3, [pc, #400]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003388:	f000 fc42 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 800338c:	0001      	movs	r1, r0
 800338e:	4b61      	ldr	r3, [pc, #388]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	220f      	movs	r2, #15
 8003396:	4013      	ands	r3, r2
 8003398:	4a62      	ldr	r2, [pc, #392]	@ (8003524 <HAL_RCC_OscConfig+0x34c>)
 800339a:	5cd3      	ldrb	r3, [r2, r3]
 800339c:	000a      	movs	r2, r1
 800339e:	40da      	lsrs	r2, r3
 80033a0:	4b61      	ldr	r3, [pc, #388]	@ (8003528 <HAL_RCC_OscConfig+0x350>)
 80033a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80033a4:	4b61      	ldr	r3, [pc, #388]	@ (800352c <HAL_RCC_OscConfig+0x354>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2513      	movs	r5, #19
 80033aa:	197c      	adds	r4, r7, r5
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fe fd75 	bl	8001e9c <HAL_InitTick>
 80033b2:	0003      	movs	r3, r0
 80033b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80033b6:	197b      	adds	r3, r7, r5
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d046      	beq.n	800344c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80033be:	197b      	adds	r3, r7, r5
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	e2d2      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d027      	beq.n	800341a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80033ca:	4b52      	ldr	r3, [pc, #328]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2209      	movs	r2, #9
 80033d0:	4393      	bics	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80033d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fda4 	bl	8001f28 <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fe fd9f 	bl	8001f28 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e2b8      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f8:	4b46      	ldr	r3, [pc, #280]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2204      	movs	r2, #4
 80033fe:	4013      	ands	r3, r2
 8003400:	d0f1      	beq.n	80033e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b44      	ldr	r3, [pc, #272]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a46      	ldr	r2, [pc, #280]	@ (8003520 <HAL_RCC_OscConfig+0x348>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	021a      	lsls	r2, r3, #8
 8003412:	4b40      	ldr	r3, [pc, #256]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	e018      	b.n	800344c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b3e      	ldr	r3, [pc, #248]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003420:	2101      	movs	r1, #1
 8003422:	438a      	bics	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fd7f 	bl	8001f28 <HAL_GetTick>
 800342a:	0003      	movs	r3, r0
 800342c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003430:	f7fe fd7a 	bl	8001f28 <HAL_GetTick>
 8003434:	0002      	movs	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e293      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003442:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2204      	movs	r2, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d1f1      	bne.n	8003430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2210      	movs	r2, #16
 8003452:	4013      	ands	r3, r2
 8003454:	d100      	bne.n	8003458 <HAL_RCC_OscConfig+0x280>
 8003456:	e0a2      	b.n	800359e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d140      	bne.n	80034e0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800345e:	4b2d      	ldr	r3, [pc, #180]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x29e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e279      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003476:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a2d      	ldr	r2, [pc, #180]	@ (8003530 <HAL_RCC_OscConfig+0x358>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003484:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	0a19      	lsrs	r1, r3, #8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	061a      	lsls	r2, r3, #24
 8003498:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	0b5b      	lsrs	r3, r3, #13
 80034a4:	3301      	adds	r3, #1
 80034a6:	2280      	movs	r2, #128	@ 0x80
 80034a8:	0212      	lsls	r2, r2, #8
 80034aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	210f      	movs	r1, #15
 80034b4:	400b      	ands	r3, r1
 80034b6:	491b      	ldr	r1, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x34c>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <HAL_RCC_OscConfig+0x350>)
 80034be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80034c0:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <HAL_RCC_OscConfig+0x354>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2513      	movs	r5, #19
 80034c6:	197c      	adds	r4, r7, r5
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fe fce7 	bl	8001e9c <HAL_InitTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80034d2:	197b      	adds	r3, r7, r5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d061      	beq.n	800359e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80034da:	197b      	adds	r3, r7, r5
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	e244      	b.n	800396a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d040      	beq.n	800356a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <HAL_RCC_OscConfig+0x33c>)
 80034ee:	2180      	movs	r1, #128	@ 0x80
 80034f0:	0049      	lsls	r1, r1, #1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fe fd17 	bl	8001f28 <HAL_GetTick>
 80034fa:	0003      	movs	r3, r0
 80034fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034fe:	e019      	b.n	8003534 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003500:	f7fe fd12 	bl	8001f28 <HAL_GetTick>
 8003504:	0002      	movs	r2, r0
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d912      	bls.n	8003534 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e22b      	b.n	800396a <HAL_RCC_OscConfig+0x792>
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	40021000 	.word	0x40021000
 8003518:	fffeffff 	.word	0xfffeffff
 800351c:	fffbffff 	.word	0xfffbffff
 8003520:	ffffe0ff 	.word	0xffffe0ff
 8003524:	08007420 	.word	0x08007420
 8003528:	20000004 	.word	0x20000004
 800352c:	20000008 	.word	0x20000008
 8003530:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003534:	4bca      	ldr	r3, [pc, #808]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4013      	ands	r3, r2
 800353e:	d0df      	beq.n	8003500 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003540:	4bc7      	ldr	r3, [pc, #796]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4ac7      	ldr	r2, [pc, #796]	@ (8003864 <HAL_RCC_OscConfig+0x68c>)
 8003546:	4013      	ands	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800354e:	4bc4      	ldr	r3, [pc, #784]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003554:	4bc2      	ldr	r3, [pc, #776]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	0a19      	lsrs	r1, r3, #8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	061a      	lsls	r2, r3, #24
 8003562:	4bbf      	ldr	r3, [pc, #764]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	e019      	b.n	800359e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800356a:	4bbd      	ldr	r3, [pc, #756]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4bbc      	ldr	r3, [pc, #752]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003570:	49bd      	ldr	r1, [pc, #756]	@ (8003868 <HAL_RCC_OscConfig+0x690>)
 8003572:	400a      	ands	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fe fcd7 	bl	8001f28 <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003580:	f7fe fcd2 	bl	8001f28 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1eb      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003592:	4bb3      	ldr	r3, [pc, #716]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4013      	ands	r3, r2
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2208      	movs	r2, #8
 80035a4:	4013      	ands	r3, r2
 80035a6:	d036      	beq.n	8003616 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d019      	beq.n	80035e4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b0:	4bab      	ldr	r3, [pc, #684]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80035b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035b4:	4baa      	ldr	r3, [pc, #680]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	430a      	orrs	r2, r1
 80035ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe fcb4 	bl	8001f28 <HAL_GetTick>
 80035c0:	0003      	movs	r3, r0
 80035c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe fcaf 	bl	8001f28 <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1c8      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035dc:	2202      	movs	r2, #2
 80035de:	4013      	ands	r3, r2
 80035e0:	d0f1      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3ee>
 80035e2:	e018      	b.n	8003616 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80035e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80035ea:	2101      	movs	r1, #1
 80035ec:	438a      	bics	r2, r1
 80035ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7fe fc9a 	bl	8001f28 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe fc95 	bl	8001f28 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1ae      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800360c:	4b94      	ldr	r3, [pc, #592]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d1f1      	bne.n	80035fa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2204      	movs	r2, #4
 800361c:	4013      	ands	r3, r2
 800361e:	d100      	bne.n	8003622 <HAL_RCC_OscConfig+0x44a>
 8003620:	e0ae      	b.n	8003780 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2023      	movs	r0, #35	@ 0x23
 8003624:	183b      	adds	r3, r7, r0
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b8d      	ldr	r3, [pc, #564]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800362c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	055b      	lsls	r3, r3, #21
 8003632:	4013      	ands	r3, r2
 8003634:	d109      	bne.n	800364a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b8a      	ldr	r3, [pc, #552]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800363a:	4b89      	ldr	r3, [pc, #548]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	0549      	lsls	r1, r1, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003644:	183b      	adds	r3, r7, r0
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b88      	ldr	r3, [pc, #544]	@ (800386c <HAL_RCC_OscConfig+0x694>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d11a      	bne.n	800368c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b85      	ldr	r3, [pc, #532]	@ (800386c <HAL_RCC_OscConfig+0x694>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b84      	ldr	r3, [pc, #528]	@ (800386c <HAL_RCC_OscConfig+0x694>)
 800365c:	2180      	movs	r1, #128	@ 0x80
 800365e:	0049      	lsls	r1, r1, #1
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003664:	f7fe fc60 	bl	8001f28 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fe fc5b 	bl	8001f28 <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	@ 0x64
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e174      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b7a      	ldr	r3, [pc, #488]	@ (800386c <HAL_RCC_OscConfig+0x694>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	@ 0x80
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4013      	ands	r3, r2
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4d0>
 8003698:	4b71      	ldr	r3, [pc, #452]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800369a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800369c:	4b70      	ldr	r3, [pc, #448]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800369e:	2180      	movs	r1, #128	@ 0x80
 80036a0:	0049      	lsls	r1, r1, #1
 80036a2:	430a      	orrs	r2, r1
 80036a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80036a6:	e031      	b.n	800370c <HAL_RCC_OscConfig+0x534>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10c      	bne.n	80036ca <HAL_RCC_OscConfig+0x4f2>
 80036b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036b6:	496c      	ldr	r1, [pc, #432]	@ (8003868 <HAL_RCC_OscConfig+0x690>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80036bc:	4b68      	ldr	r3, [pc, #416]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036c0:	4b67      	ldr	r3, [pc, #412]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036c2:	496b      	ldr	r1, [pc, #428]	@ (8003870 <HAL_RCC_OscConfig+0x698>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80036c8:	e020      	b.n	800370c <HAL_RCC_OscConfig+0x534>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	23a0      	movs	r3, #160	@ 0xa0
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d10e      	bne.n	80036f4 <HAL_RCC_OscConfig+0x51c>
 80036d6:	4b62      	ldr	r3, [pc, #392]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036da:	4b61      	ldr	r3, [pc, #388]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	00c9      	lsls	r1, r1, #3
 80036e0:	430a      	orrs	r2, r1
 80036e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80036e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036ea:	2180      	movs	r1, #128	@ 0x80
 80036ec:	0049      	lsls	r1, r1, #1
 80036ee:	430a      	orrs	r2, r1
 80036f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x534>
 80036f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036f8:	4b59      	ldr	r3, [pc, #356]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80036fa:	495b      	ldr	r1, [pc, #364]	@ (8003868 <HAL_RCC_OscConfig+0x690>)
 80036fc:	400a      	ands	r2, r1
 80036fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003700:	4b57      	ldr	r3, [pc, #348]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003702:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003704:	4b56      	ldr	r3, [pc, #344]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003706:	495a      	ldr	r1, [pc, #360]	@ (8003870 <HAL_RCC_OscConfig+0x698>)
 8003708:	400a      	ands	r2, r1
 800370a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fe fc08 	bl	8001f28 <HAL_GetTick>
 8003718:	0003      	movs	r3, r0
 800371a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800371c:	e009      	b.n	8003732 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fc03 	bl	8001f28 <HAL_GetTick>
 8003722:	0002      	movs	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	4a52      	ldr	r2, [pc, #328]	@ (8003874 <HAL_RCC_OscConfig+0x69c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e11b      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003732:	4b4b      	ldr	r3, [pc, #300]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d0ef      	beq.n	800371e <HAL_RCC_OscConfig+0x546>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fe fbf2 	bl	8001f28 <HAL_GetTick>
 8003744:	0003      	movs	r3, r0
 8003746:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003748:	e009      	b.n	800375e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe fbed 	bl	8001f28 <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	4a47      	ldr	r2, [pc, #284]	@ (8003874 <HAL_RCC_OscConfig+0x69c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e105      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800375e:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003760:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4013      	ands	r3, r2
 8003768:	d1ef      	bne.n	800374a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800376a:	2323      	movs	r3, #35	@ 0x23
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4b3a      	ldr	r3, [pc, #232]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003778:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800377a:	493f      	ldr	r1, [pc, #252]	@ (8003878 <HAL_RCC_OscConfig+0x6a0>)
 800377c:	400a      	ands	r2, r1
 800377e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2220      	movs	r2, #32
 8003786:	4013      	ands	r3, r2
 8003788:	d049      	beq.n	800381e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d026      	beq.n	80037e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003792:	4b33      	ldr	r3, [pc, #204]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	4b32      	ldr	r3, [pc, #200]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	4b30      	ldr	r3, [pc, #192]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80037a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80037a4:	2101      	movs	r1, #1
 80037a6:	430a      	orrs	r2, r1
 80037a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80037aa:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_RCC_OscConfig+0x6a4>)
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	4b33      	ldr	r3, [pc, #204]	@ (800387c <HAL_RCC_OscConfig+0x6a4>)
 80037b0:	2180      	movs	r1, #128	@ 0x80
 80037b2:	0189      	lsls	r1, r1, #6
 80037b4:	430a      	orrs	r2, r1
 80037b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fbb6 	bl	8001f28 <HAL_GetTick>
 80037bc:	0003      	movs	r3, r0
 80037be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c2:	f7fe fbb1 	bl	8001f28 <HAL_GetTick>
 80037c6:	0002      	movs	r2, r0
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0ca      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037d4:	4b22      	ldr	r3, [pc, #136]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2202      	movs	r2, #2
 80037da:	4013      	ands	r3, r2
 80037dc:	d0f1      	beq.n	80037c2 <HAL_RCC_OscConfig+0x5ea>
 80037de:	e01e      	b.n	800381e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80037e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	438a      	bics	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_RCC_OscConfig+0x6a4>)
 80037ee:	6a1a      	ldr	r2, [r3, #32]
 80037f0:	4b22      	ldr	r3, [pc, #136]	@ (800387c <HAL_RCC_OscConfig+0x6a4>)
 80037f2:	4923      	ldr	r1, [pc, #140]	@ (8003880 <HAL_RCC_OscConfig+0x6a8>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe fb96 	bl	8001f28 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003802:	f7fe fb91 	bl	8001f28 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0aa      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2202      	movs	r2, #2
 800381a:	4013      	ands	r3, r2
 800381c:	d1f1      	bne.n	8003802 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d100      	bne.n	8003828 <HAL_RCC_OscConfig+0x650>
 8003826:	e09f      	b.n	8003968 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d100      	bne.n	8003830 <HAL_RCC_OscConfig+0x658>
 800382e:	e078      	b.n	8003922 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	2b02      	cmp	r3, #2
 8003836:	d159      	bne.n	80038ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <HAL_RCC_OscConfig+0x688>)
 800383e:	4911      	ldr	r1, [pc, #68]	@ (8003884 <HAL_RCC_OscConfig+0x6ac>)
 8003840:	400a      	ands	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fb70 	bl	8001f28 <HAL_GetTick>
 8003848:	0003      	movs	r3, r0
 800384a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800384c:	e01c      	b.n	8003888 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe fb6b 	bl	8001f28 <HAL_GetTick>
 8003852:	0002      	movs	r2, r0
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d915      	bls.n	8003888 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e084      	b.n	800396a <HAL_RCC_OscConfig+0x792>
 8003860:	40021000 	.word	0x40021000
 8003864:	ffff1fff 	.word	0xffff1fff
 8003868:	fffffeff 	.word	0xfffffeff
 800386c:	40007000 	.word	0x40007000
 8003870:	fffffbff 	.word	0xfffffbff
 8003874:	00001388 	.word	0x00001388
 8003878:	efffffff 	.word	0xefffffff
 800387c:	40010000 	.word	0x40010000
 8003880:	ffffdfff 	.word	0xffffdfff
 8003884:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003888:	4b3a      	ldr	r3, [pc, #232]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	@ 0x80
 800388e:	049b      	lsls	r3, r3, #18
 8003890:	4013      	ands	r3, r2
 8003892:	d1dc      	bne.n	800384e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003894:	4b37      	ldr	r3, [pc, #220]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a37      	ldr	r2, [pc, #220]	@ (8003978 <HAL_RCC_OscConfig+0x7a0>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	431a      	orrs	r2, r3
 80038ae:	4b31      	ldr	r3, [pc, #196]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 80038ba:	2180      	movs	r1, #128	@ 0x80
 80038bc:	0449      	lsls	r1, r1, #17
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe fb31 	bl	8001f28 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fb2c 	bl	8001f28 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e045      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038de:	4b25      	ldr	r3, [pc, #148]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	049b      	lsls	r3, r3, #18
 80038e6:	4013      	ands	r3, r2
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x6f4>
 80038ea:	e03d      	b.n	8003968 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 80038f2:	4922      	ldr	r1, [pc, #136]	@ (800397c <HAL_RCC_OscConfig+0x7a4>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fb16 	bl	8001f28 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fb11 	bl	8001f28 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e02a      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003914:	4b17      	ldr	r3, [pc, #92]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	049b      	lsls	r3, r3, #18
 800391c:	4013      	ands	r3, r2
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x72a>
 8003920:	e022      	b.n	8003968 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e01d      	b.n	800396a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_RCC_OscConfig+0x79c>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	025b      	lsls	r3, r3, #9
 800393a:	401a      	ands	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	429a      	cmp	r2, r3
 8003942:	d10f      	bne.n	8003964 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	23f0      	movs	r3, #240	@ 0xf0
 8003948:	039b      	lsls	r3, r3, #14
 800394a:	401a      	ands	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	23c0      	movs	r3, #192	@ 0xc0
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	401a      	ands	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b00a      	add	sp, #40	@ 0x28
 8003970:	bdb0      	pop	{r4, r5, r7, pc}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	40021000 	.word	0x40021000
 8003978:	ff02ffff 	.word	0xff02ffff
 800397c:	feffffff 	.word	0xfeffffff

08003980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e128      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b96      	ldr	r3, [pc, #600]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	4013      	ands	r3, r2
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d91e      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b93      	ldr	r3, [pc, #588]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	4393      	bics	r3, r2
 80039aa:	0019      	movs	r1, r3
 80039ac:	4b90      	ldr	r3, [pc, #576]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039b4:	f7fe fab8 	bl	8001f28 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039bc:	e009      	b.n	80039d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039be:	f7fe fab3 	bl	8001f28 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	4a8a      	ldr	r2, [pc, #552]	@ (8003bf4 <HAL_RCC_ClockConfig+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e109      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b87      	ldr	r3, [pc, #540]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1ee      	bne.n	80039be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ea:	4b83      	ldr	r3, [pc, #524]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	22f0      	movs	r2, #240	@ 0xf0
 80039f0:	4393      	bics	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 80039fa:	430a      	orrs	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_ClockConfig+0x8a>
 8003a08:	e089      	b.n	8003b1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a12:	4b79      	ldr	r3, [pc, #484]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d120      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0e1      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2a:	4b73      	ldr	r3, [pc, #460]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	049b      	lsls	r3, r3, #18
 8003a32:	4013      	ands	r3, r2
 8003a34:	d114      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0d5      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a42:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2204      	movs	r2, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0ca      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a50:	4b69      	ldr	r3, [pc, #420]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0c2      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a60:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2203      	movs	r2, #3
 8003a66:	4393      	bics	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4b62      	ldr	r3, [pc, #392]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a70:	430a      	orrs	r2, r1
 8003a72:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fe fa58 	bl	8001f28 <HAL_GetTick>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fe fa4f 	bl	8001f28 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a58      	ldr	r2, [pc, #352]	@ (8003bf4 <HAL_RCC_ClockConfig+0x274>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0a5      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a9a:	4b57      	ldr	r3, [pc, #348]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d1ef      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x106>
 8003aa6:	e03a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab0:	e009      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab2:	f7fe fa39 	bl	8001f28 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf4 <HAL_RCC_ClockConfig+0x274>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e08f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	220c      	movs	r2, #12
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d1ef      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x132>
 8003ad2:	e024      	b.n	8003b1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d11b      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003adc:	e009      	b.n	8003af2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ade:	f7fe fa23 	bl	8001f28 <HAL_GetTick>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	4a42      	ldr	r2, [pc, #264]	@ (8003bf4 <HAL_RCC_ClockConfig+0x274>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e079      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af2:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	220c      	movs	r2, #12
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d1ef      	bne.n	8003ade <HAL_RCC_ClockConfig+0x15e>
 8003afe:	e00e      	b.n	8003b1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fe fa12 	bl	8001f28 <HAL_GetTick>
 8003b04:	0002      	movs	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf4 <HAL_RCC_ClockConfig+0x274>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e068      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b14:	4b38      	ldr	r3, [pc, #224]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	220c      	movs	r2, #12
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1e:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d21e      	bcs.n	8003b6a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2c:	4b30      	ldr	r3, [pc, #192]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	4393      	bics	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe f9f3 	bl	8001f28 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	e009      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7fe f9ee 	bl	8001f28 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <HAL_RCC_ClockConfig+0x274>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e044      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5c:	4b24      	ldr	r3, [pc, #144]	@ (8003bf0 <HAL_RCC_ClockConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2201      	movs	r2, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d1ee      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	4013      	ands	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a20      	ldr	r2, [pc, #128]	@ (8003bfc <HAL_RCC_ClockConfig+0x27c>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b92:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4a1a      	ldr	r2, [pc, #104]	@ (8003c00 <HAL_RCC_ClockConfig+0x280>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	00da      	lsls	r2, r3, #3
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba8:	f000 f832 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bac:	0001      	movs	r1, r0
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCC_ClockConfig+0x278>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	4a12      	ldr	r2, [pc, #72]	@ (8003c04 <HAL_RCC_ClockConfig+0x284>)
 8003bba:	5cd3      	ldrb	r3, [r2, r3]
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	40da      	lsrs	r2, r3
 8003bc0:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <HAL_RCC_ClockConfig+0x288>)
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bc4:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_RCC_ClockConfig+0x28c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	250b      	movs	r5, #11
 8003bca:	197c      	adds	r4, r7, r5
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f7fe f965 	bl	8001e9c <HAL_InitTick>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003bde:	197b      	adds	r3, r7, r5
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bdb0      	pop	{r4, r5, r7, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	00001388 	.word	0x00001388
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	fffff8ff 	.word	0xfffff8ff
 8003c00:	ffffc7ff 	.word	0xffffc7ff
 8003c04:	08007420 	.word	0x08007420
 8003c08:	20000004 	.word	0x20000004
 8003c0c:	20000008 	.word	0x20000008

08003c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c16:	4b3c      	ldr	r3, [pc, #240]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	220c      	movs	r2, #12
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d013      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x3e>
 8003c26:	d85c      	bhi.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xd2>
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d002      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x22>
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d00b      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x38>
 8003c30:	e057      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c32:	4b35      	ldr	r3, [pc, #212]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2210      	movs	r2, #16
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d002      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003c3c:	4b33      	ldr	r3, [pc, #204]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c3e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003c40:	e05d      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003c42:	4b33      	ldr	r3, [pc, #204]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c44:	613b      	str	r3, [r7, #16]
      break;
 8003c46:	e05a      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c48:	4b32      	ldr	r3, [pc, #200]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c4a:	613b      	str	r3, [r7, #16]
      break;
 8003c4c:	e057      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	220f      	movs	r2, #15
 8003c54:	4013      	ands	r3, r2
 8003c56:	4a30      	ldr	r2, [pc, #192]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0d9b      	lsrs	r3, r3, #22
 8003c60:	2203      	movs	r2, #3
 8003c62:	4013      	ands	r3, r2
 8003c64:	3301      	adds	r3, #1
 8003c66:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c68:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	025b      	lsls	r3, r3, #9
 8003c70:	4013      	ands	r3, r2
 8003c72:	d00f      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	000a      	movs	r2, r1
 8003c78:	0152      	lsls	r2, r2, #5
 8003c7a:	1a52      	subs	r2, r2, r1
 8003c7c:	0193      	lsls	r3, r2, #6
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	185b      	adds	r3, r3, r1
 8003c84:	025b      	lsls	r3, r3, #9
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7fc fa47 	bl	800011c <__udivsi3>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e023      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c94:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	000a      	movs	r2, r1
 8003ca2:	0152      	lsls	r2, r2, #5
 8003ca4:	1a52      	subs	r2, r2, r1
 8003ca6:	0193      	lsls	r3, r2, #6
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	185b      	adds	r3, r3, r1
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7fc fa32 	bl	800011c <__udivsi3>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e00e      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	0152      	lsls	r2, r2, #5
 8003cc4:	1a52      	subs	r2, r2, r1
 8003cc6:	0193      	lsls	r3, r2, #6
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	185b      	adds	r3, r3, r1
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f7fc fa22 	bl	800011c <__udivsi3>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	613b      	str	r3, [r7, #16]
      break;
 8003ce0:	e00d      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	0b5b      	lsrs	r3, r3, #13
 8003ce8:	2207      	movs	r2, #7
 8003cea:	4013      	ands	r3, r2
 8003cec:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	2280      	movs	r2, #128	@ 0x80
 8003cf4:	0212      	lsls	r2, r2, #8
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	0013      	movs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
      break;
 8003cfc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003cfe:	693b      	ldr	r3, [r7, #16]
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b006      	add	sp, #24
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	003d0900 	.word	0x003d0900
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200
 8003d18:	08007438 	.word	0x08007438

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b02      	ldr	r3, [pc, #8]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff2 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d38:	0001      	movs	r1, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	2207      	movs	r2, #7
 8003d42:	4013      	ands	r3, r2
 8003d44:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	40d9      	lsrs	r1, r3
 8003d4a:	000b      	movs	r3, r1
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08007430 	.word	0x08007430

08003d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d60:	f7ff ffdc 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d64:	0001      	movs	r1, r0
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	0adb      	lsrs	r3, r3, #11
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	4013      	ands	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	40d9      	lsrs	r1, r3
 8003d76:	000b      	movs	r3, r1
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08007430 	.word	0x08007430

08003d88 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003d90:	2317      	movs	r3, #23
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d106      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	4013      	ands	r3, r2
 8003dac:	d100      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003dae:	e104      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	4bb9      	ldr	r3, [pc, #740]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	055b      	lsls	r3, r3, #21
 8003db8:	4013      	ands	r3, r2
 8003dba:	d10a      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4bb6      	ldr	r3, [pc, #728]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc0:	4bb5      	ldr	r3, [pc, #724]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dc2:	2180      	movs	r1, #128	@ 0x80
 8003dc4:	0549      	lsls	r1, r1, #21
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003dca:	2317      	movs	r3, #23
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4bb2      	ldr	r3, [pc, #712]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2380      	movs	r3, #128	@ 0x80
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d11a      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4baf      	ldr	r3, [pc, #700]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4bae      	ldr	r3, [pc, #696]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003de4:	2180      	movs	r1, #128	@ 0x80
 8003de6:	0049      	lsls	r1, r1, #1
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dec:	f7fe f89c 	bl	8001f28 <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df6:	f7fe f897 	bl	8001f28 <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b64      	cmp	r3, #100	@ 0x64
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e143      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	4ba4      	ldr	r3, [pc, #656]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2380      	movs	r3, #128	@ 0x80
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003e14:	4ba0      	ldr	r3, [pc, #640]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	23c0      	movs	r3, #192	@ 0xc0
 8003e1a:	039b      	lsls	r3, r3, #14
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	23c0      	movs	r3, #192	@ 0xc0
 8003e26:	039b      	lsls	r3, r3, #14
 8003e28:	4013      	ands	r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	23c0      	movs	r3, #192	@ 0xc0
 8003e36:	039b      	lsls	r3, r3, #14
 8003e38:	4013      	ands	r3, r2
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	23c0      	movs	r3, #192	@ 0xc0
 8003e46:	029b      	lsls	r3, r3, #10
 8003e48:	401a      	ands	r2, r3
 8003e4a:	23c0      	movs	r3, #192	@ 0xc0
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10a      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e52:	4b91      	ldr	r3, [pc, #580]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	029b      	lsls	r3, r3, #10
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d101      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e113      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003e68:	4b8b      	ldr	r3, [pc, #556]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e6c:	23c0      	movs	r3, #192	@ 0xc0
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d049      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	23c0      	movs	r3, #192	@ 0xc0
 8003e80:	029b      	lsls	r3, r3, #10
 8003e82:	4013      	ands	r3, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d004      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	4013      	ands	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	23c0      	movs	r3, #192	@ 0xc0
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d034      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d02e      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003eb0:	4b79      	ldr	r3, [pc, #484]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb4:	4a7a      	ldr	r2, [pc, #488]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eba:	4b77      	ldr	r3, [pc, #476]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ebe:	4b76      	ldr	r3, [pc, #472]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ec0:	2180      	movs	r1, #128	@ 0x80
 8003ec2:	0309      	lsls	r1, r1, #12
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec8:	4b73      	ldr	r3, [pc, #460]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003eca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ecc:	4b72      	ldr	r3, [pc, #456]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ece:	4975      	ldr	r1, [pc, #468]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003ed4:	4b70      	ldr	r3, [pc, #448]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d014      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f820 	bl	8001f28 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eec:	e009      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fe f81b 	bl	8001f28 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0c6      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f02:	4b65      	ldr	r3, [pc, #404]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d0ef      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	4013      	ands	r3, r2
 8003f18:	d01f      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	23c0      	movs	r3, #192	@ 0xc0
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	401a      	ands	r2, r3
 8003f24:	23c0      	movs	r3, #192	@ 0xc0
 8003f26:	029b      	lsls	r3, r3, #10
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5e      	ldr	r2, [pc, #376]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	0019      	movs	r1, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	23c0      	movs	r3, #192	@ 0xc0
 8003f3c:	039b      	lsls	r3, r3, #14
 8003f3e:	401a      	ands	r2, r3
 8003f40:	4b55      	ldr	r3, [pc, #340]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4b54      	ldr	r3, [pc, #336]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	23c0      	movs	r3, #192	@ 0xc0
 8003f50:	029b      	lsls	r3, r3, #10
 8003f52:	401a      	ands	r2, r3
 8003f54:	4b50      	ldr	r3, [pc, #320]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	4013      	ands	r3, r2
 8003f62:	d01f      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	23c0      	movs	r3, #192	@ 0xc0
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	23c0      	movs	r3, #192	@ 0xc0
 8003f70:	029b      	lsls	r3, r3, #10
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003f76:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	23c0      	movs	r3, #192	@ 0xc0
 8003f86:	039b      	lsls	r3, r3, #14
 8003f88:	401a      	ands	r2, r3
 8003f8a:	4b43      	ldr	r3, [pc, #268]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f92:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	23c0      	movs	r3, #192	@ 0xc0
 8003f9a:	029b      	lsls	r3, r3, #10
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fa4:	2317      	movs	r3, #23
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fae:	4b3a      	ldr	r3, [pc, #232]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb2:	4b39      	ldr	r3, [pc, #228]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fb4:	493e      	ldr	r1, [pc, #248]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc4:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4393      	bics	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	4393      	bics	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	4b29      	ldr	r3, [pc, #164]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004000:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004004:	4a2b      	ldr	r2, [pc, #172]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004006:	4013      	ands	r3, r2
 8004008:	0019      	movs	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	4b22      	ldr	r3, [pc, #136]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004010:	430a      	orrs	r2, r1
 8004012:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2208      	movs	r2, #8
 800401a:	4013      	ands	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800401e:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	4a25      	ldr	r2, [pc, #148]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800402e:	430a      	orrs	r2, r1
 8004030:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4013      	ands	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800403e:	4b16      	ldr	r3, [pc, #88]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004042:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800404e:	430a      	orrs	r2, r1
 8004050:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2240      	movs	r2, #64	@ 0x40
 8004058:	4013      	ands	r3, r2
 800405a:	d009      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405c:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800405e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004060:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004062:	4013      	ands	r3, r2
 8004064:	0019      	movs	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800406a:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800406c:	430a      	orrs	r2, r1
 800406e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2280      	movs	r2, #128	@ 0x80
 8004076:	4013      	ands	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407e:	4a10      	ldr	r2, [pc, #64]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004080:	4013      	ands	r3, r2
 8004082:	0019      	movs	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800408a:	430a      	orrs	r2, r1
 800408c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b006      	add	sp, #24
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
 80040a0:	fffcffff 	.word	0xfffcffff
 80040a4:	fff7ffff 	.word	0xfff7ffff
 80040a8:	00001388 	.word	0x00001388
 80040ac:	ffcfffff 	.word	0xffcfffff
 80040b0:	efffffff 	.word	0xefffffff
 80040b4:	fffff3ff 	.word	0xfffff3ff
 80040b8:	ffffcfff 	.word	0xffffcfff
 80040bc:	fbffffff 	.word	0xfbffffff
 80040c0:	fff3ffff 	.word	0xfff3ffff

080040c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e032      	b.n	800413c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2239      	movs	r2, #57	@ 0x39
 80040da:	5c9b      	ldrb	r3, [r3, r2]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2238      	movs	r2, #56	@ 0x38
 80040e6:	2100      	movs	r1, #0
 80040e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fd fb99 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2239      	movs	r2, #57	@ 0x39
 80040f6:	2102      	movs	r1, #2
 80040f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	0019      	movs	r1, r3
 8004104:	0010      	movs	r0, r2
 8004106:	f000 fa91 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	223e      	movs	r2, #62	@ 0x3e
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	223a      	movs	r2, #58	@ 0x3a
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	223b      	movs	r2, #59	@ 0x3b
 800411e:	2101      	movs	r1, #1
 8004120:	5499      	strb	r1, [r3, r2]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	223c      	movs	r2, #60	@ 0x3c
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223d      	movs	r2, #61	@ 0x3d
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2239      	movs	r2, #57	@ 0x39
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e032      	b.n	80041bc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2239      	movs	r2, #57	@ 0x39
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2238      	movs	r2, #56	@ 0x38
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	0018      	movs	r0, r3
 800416e:	f000 f829 	bl	80041c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2239      	movs	r2, #57	@ 0x39
 8004176:	2102      	movs	r1, #2
 8004178:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	0019      	movs	r1, r3
 8004184:	0010      	movs	r0, r2
 8004186:	f000 fa51 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	223e      	movs	r2, #62	@ 0x3e
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	223a      	movs	r2, #58	@ 0x3a
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223b      	movs	r2, #59	@ 0x3b
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223c      	movs	r2, #60	@ 0x3c
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	223d      	movs	r2, #61	@ 0x3d
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2239      	movs	r2, #57	@ 0x39
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041cc:	46c0      	nop			@ (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b002      	add	sp, #8
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x22>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	223a      	movs	r2, #58	@ 0x3a
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	1e5a      	subs	r2, r3, #1
 80041f0:	4193      	sbcs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e01f      	b.n	8004236 <HAL_TIM_PWM_Start+0x62>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d108      	bne.n	800420e <HAL_TIM_PWM_Start+0x3a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	223b      	movs	r2, #59	@ 0x3b
 8004200:	5c9b      	ldrb	r3, [r3, r2]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	1e5a      	subs	r2, r3, #1
 8004208:	4193      	sbcs	r3, r2
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e013      	b.n	8004236 <HAL_TIM_PWM_Start+0x62>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d108      	bne.n	8004226 <HAL_TIM_PWM_Start+0x52>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	223c      	movs	r2, #60	@ 0x3c
 8004218:	5c9b      	ldrb	r3, [r3, r2]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	4193      	sbcs	r3, r2
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e007      	b.n	8004236 <HAL_TIM_PWM_Start+0x62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	223d      	movs	r2, #61	@ 0x3d
 800422a:	5c9b      	ldrb	r3, [r3, r2]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	4193      	sbcs	r3, r2
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e052      	b.n	80042e4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start+0x7a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223a      	movs	r2, #58	@ 0x3a
 8004248:	2102      	movs	r1, #2
 800424a:	5499      	strb	r1, [r3, r2]
 800424c:	e013      	b.n	8004276 <HAL_TIM_PWM_Start+0xa2>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start+0x8a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	223b      	movs	r2, #59	@ 0x3b
 8004258:	2102      	movs	r1, #2
 800425a:	5499      	strb	r1, [r3, r2]
 800425c:	e00b      	b.n	8004276 <HAL_TIM_PWM_Start+0xa2>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0x9a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	223c      	movs	r2, #60	@ 0x3c
 8004268:	2102      	movs	r1, #2
 800426a:	5499      	strb	r1, [r3, r2]
 800426c:	e003      	b.n	8004276 <HAL_TIM_PWM_Start+0xa2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	223d      	movs	r2, #61	@ 0x3d
 8004272:	2102      	movs	r1, #2
 8004274:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	0018      	movs	r0, r3
 8004280:	f000 fbd6 	bl	8004a30 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	@ 0x80
 800428a:	05db      	lsls	r3, r3, #23
 800428c:	429a      	cmp	r2, r3
 800428e:	d00e      	beq.n	80042ae <HAL_TIM_PWM_Start+0xda>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a15      	ldr	r2, [pc, #84]	@ (80042ec <HAL_TIM_PWM_Start+0x118>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_TIM_PWM_Start+0xda>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a14      	ldr	r2, [pc, #80]	@ (80042f0 <HAL_TIM_PWM_Start+0x11c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIM_PWM_Start+0xda>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <HAL_TIM_PWM_Start+0x120>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d111      	bne.n	80042d2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2207      	movs	r2, #7
 80042b6:	4013      	ands	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d010      	beq.n	80042e2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2101      	movs	r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	e007      	b.n	80042e2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40010800 	.word	0x40010800
 80042f4:	40011400 	.word	0x40011400

080042f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2317      	movs	r3, #23
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2238      	movs	r2, #56	@ 0x38
 8004310:	5c9b      	ldrb	r3, [r3, r2]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004316:	2302      	movs	r3, #2
 8004318:	e0ad      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2238      	movs	r2, #56	@ 0x38
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d100      	bne.n	800432a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004328:	e076      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x120>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d900      	bls.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004330:	e095      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d04e      	beq.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d900      	bls.n	8004340 <HAL_TIM_PWM_ConfigChannel+0x48>
 800433e:	e08e      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d021      	beq.n	8004390 <HAL_TIM_PWM_ConfigChannel+0x98>
 800434c:	e087      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f000 f9cc 	bl	80046f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2108      	movs	r1, #8
 8004368:	430a      	orrs	r2, r1
 800436a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2104      	movs	r1, #4
 8004378:	438a      	bics	r2, r1
 800437a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	619a      	str	r2, [r3, #24]
      break;
 800438e:	e06b      	b.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	0011      	movs	r1, r2
 8004398:	0018      	movs	r0, r3
 800439a:	f000 f9e7 	bl	800476c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2180      	movs	r1, #128	@ 0x80
 80043aa:	0109      	lsls	r1, r1, #4
 80043ac:	430a      	orrs	r2, r1
 80043ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4931      	ldr	r1, [pc, #196]	@ (8004480 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80043bc:	400a      	ands	r2, r1
 80043be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
      break;
 80043d4:	e048      	b.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 fa06 	bl	80047f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2108      	movs	r1, #8
 80043f0:	430a      	orrs	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2104      	movs	r1, #4
 8004400:	438a      	bics	r2, r1
 8004402:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69d9      	ldr	r1, [r3, #28]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	61da      	str	r2, [r3, #28]
      break;
 8004416:	e027      	b.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	0011      	movs	r1, r2
 8004420:	0018      	movs	r0, r3
 8004422:	f000 fa25 	bl	8004870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2180      	movs	r1, #128	@ 0x80
 8004432:	0109      	lsls	r1, r1, #4
 8004434:	430a      	orrs	r2, r1
 8004436:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	490f      	ldr	r1, [pc, #60]	@ (8004480 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004444:	400a      	ands	r2, r1
 8004446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69d9      	ldr	r1, [r3, #28]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	61da      	str	r2, [r3, #28]
      break;
 800445c:	e004      	b.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800445e:	2317      	movs	r3, #23
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
      break;
 8004466:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2238      	movs	r2, #56	@ 0x38
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]

  return status;
 8004470:	2317      	movs	r3, #23
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	781b      	ldrb	r3, [r3, #0]
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b006      	add	sp, #24
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	fffffbff 	.word	0xfffffbff

08004484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800448e:	230f      	movs	r3, #15
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2238      	movs	r2, #56	@ 0x38
 800449a:	5c9b      	ldrb	r3, [r3, r2]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_ConfigClockSource+0x20>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0bc      	b.n	800461e <HAL_TIM_ConfigClockSource+0x19a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2238      	movs	r2, #56	@ 0x38
 80044a8:	2101      	movs	r1, #1
 80044aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2239      	movs	r2, #57	@ 0x39
 80044b0:	2102      	movs	r1, #2
 80044b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2277      	movs	r2, #119	@ 0x77
 80044c0:	4393      	bics	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4a58      	ldr	r2, [pc, #352]	@ (8004628 <HAL_TIM_ConfigClockSource+0x1a4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2280      	movs	r2, #128	@ 0x80
 80044da:	0192      	lsls	r2, r2, #6
 80044dc:	4293      	cmp	r3, r2
 80044de:	d040      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0xde>
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	0192      	lsls	r2, r2, #6
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d900      	bls.n	80044ea <HAL_TIM_ConfigClockSource+0x66>
 80044e8:	e088      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 80044ea:	2280      	movs	r2, #128	@ 0x80
 80044ec:	0152      	lsls	r2, r2, #5
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d100      	bne.n	80044f4 <HAL_TIM_ConfigClockSource+0x70>
 80044f2:	e088      	b.n	8004606 <HAL_TIM_ConfigClockSource+0x182>
 80044f4:	2280      	movs	r2, #128	@ 0x80
 80044f6:	0152      	lsls	r2, r2, #5
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d900      	bls.n	80044fe <HAL_TIM_ConfigClockSource+0x7a>
 80044fc:	e07e      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 80044fe:	2b70      	cmp	r3, #112	@ 0x70
 8004500:	d018      	beq.n	8004534 <HAL_TIM_ConfigClockSource+0xb0>
 8004502:	d900      	bls.n	8004506 <HAL_TIM_ConfigClockSource+0x82>
 8004504:	e07a      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 8004506:	2b60      	cmp	r3, #96	@ 0x60
 8004508:	d04f      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x126>
 800450a:	d900      	bls.n	800450e <HAL_TIM_ConfigClockSource+0x8a>
 800450c:	e076      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 800450e:	2b50      	cmp	r3, #80	@ 0x50
 8004510:	d03b      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x106>
 8004512:	d900      	bls.n	8004516 <HAL_TIM_ConfigClockSource+0x92>
 8004514:	e072      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 8004516:	2b40      	cmp	r3, #64	@ 0x40
 8004518:	d057      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x146>
 800451a:	d900      	bls.n	800451e <HAL_TIM_ConfigClockSource+0x9a>
 800451c:	e06e      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 800451e:	2b30      	cmp	r3, #48	@ 0x30
 8004520:	d063      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 8004522:	d86b      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 8004524:	2b20      	cmp	r3, #32
 8004526:	d060      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 8004528:	d868      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d05d      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 800452e:	2b10      	cmp	r3, #16
 8004530:	d05b      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 8004532:	e063      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	f000 fa54 	bl	80049f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2277      	movs	r2, #119	@ 0x77
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
      break;
 8004560:	e052      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004572:	f000 fa3d 	bl	80049f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	01c9      	lsls	r1, r1, #7
 8004584:	430a      	orrs	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
      break;
 8004588:	e03e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004596:	001a      	movs	r2, r3
 8004598:	f000 f9b0 	bl	80048fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2150      	movs	r1, #80	@ 0x50
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 fa0a 	bl	80049bc <TIM_ITRx_SetConfig>
      break;
 80045a8:	e02e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b6:	001a      	movs	r2, r3
 80045b8:	f000 f9ce 	bl	8004958 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2160      	movs	r1, #96	@ 0x60
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f9fa 	bl	80049bc <TIM_ITRx_SetConfig>
      break;
 80045c8:	e01e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	001a      	movs	r2, r3
 80045d8:	f000 f990 	bl	80048fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2140      	movs	r1, #64	@ 0x40
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 f9ea 	bl	80049bc <TIM_ITRx_SetConfig>
      break;
 80045e8:	e00e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f000 f9e1 	bl	80049bc <TIM_ITRx_SetConfig>
      break;
 80045fa:	e005      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80045fc:	230f      	movs	r3, #15
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
      break;
 8004604:	e000      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004606:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2239      	movs	r2, #57	@ 0x39
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2238      	movs	r2, #56	@ 0x38
 8004614:	2100      	movs	r1, #0
 8004616:	5499      	strb	r1, [r3, r2]

  return status;
 8004618:	230f      	movs	r3, #15
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	781b      	ldrb	r3, [r3, #0]
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	ffff00ff 	.word	0xffff00ff

0800462c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	429a      	cmp	r2, r3
 8004644:	d00b      	beq.n	800465e <TIM_Base_SetConfig+0x32>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <TIM_Base_SetConfig+0xb8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_Base_SetConfig+0x32>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a25      	ldr	r2, [pc, #148]	@ (80046e8 <TIM_Base_SetConfig+0xbc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_Base_SetConfig+0x32>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a24      	ldr	r2, [pc, #144]	@ (80046ec <TIM_Base_SetConfig+0xc0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2270      	movs	r2, #112	@ 0x70
 8004662:	4393      	bics	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	2380      	movs	r3, #128	@ 0x80
 8004674:	05db      	lsls	r3, r3, #23
 8004676:	429a      	cmp	r2, r3
 8004678:	d00b      	beq.n	8004692 <TIM_Base_SetConfig+0x66>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <TIM_Base_SetConfig+0xb8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_Base_SetConfig+0x66>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <TIM_Base_SetConfig+0xbc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_Base_SetConfig+0x66>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a17      	ldr	r2, [pc, #92]	@ (80046ec <TIM_Base_SetConfig+0xc0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d108      	bne.n	80046a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <TIM_Base_SetConfig+0xc4>)
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2280      	movs	r2, #128	@ 0x80
 80046a8:	4393      	bics	r3, r2
 80046aa:	001a      	movs	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2204      	movs	r2, #4
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b004      	add	sp, #16
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40010800 	.word	0x40010800
 80046ec:	40011400 	.word	0x40011400
 80046f0:	fffffcff 	.word	0xfffffcff

080046f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	2201      	movs	r2, #1
 800470a:	4393      	bics	r3, r2
 800470c:	001a      	movs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2270      	movs	r2, #112	@ 0x70
 8004722:	4393      	bics	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2203      	movs	r2, #3
 800472a:	4393      	bics	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2202      	movs	r2, #2
 800473c:	4393      	bics	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	621a      	str	r2, [r3, #32]
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b006      	add	sp, #24
 800476a:	bd80      	pop	{r7, pc}

0800476c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	2210      	movs	r2, #16
 8004782:	4393      	bics	r3, r2
 8004784:	001a      	movs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a13      	ldr	r2, [pc, #76]	@ (80047e8 <TIM_OC2_SetConfig+0x7c>)
 800479a:	4013      	ands	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <TIM_OC2_SetConfig+0x80>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2220      	movs	r2, #32
 80047b6:	4393      	bics	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	46c0      	nop			@ (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b006      	add	sp, #24
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	ffff8fff 	.word	0xffff8fff
 80047ec:	fffffcff 	.word	0xfffffcff

080047f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <TIM_OC3_SetConfig+0x78>)
 8004806:	401a      	ands	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2270      	movs	r2, #112	@ 0x70
 800481c:	4393      	bics	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2203      	movs	r2, #3
 8004824:	4393      	bics	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4a0d      	ldr	r2, [pc, #52]	@ (800486c <TIM_OC3_SetConfig+0x7c>)
 8004836:	4013      	ands	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b006      	add	sp, #24
 8004866:	bd80      	pop	{r7, pc}
 8004868:	fffffeff 	.word	0xfffffeff
 800486c:	fffffdff 	.word	0xfffffdff

08004870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <TIM_OC4_SetConfig+0x7c>)
 8004886:	401a      	ands	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <TIM_OC4_SetConfig+0x80>)
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a14      	ldr	r2, [pc, #80]	@ (80048f4 <TIM_OC4_SetConfig+0x84>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4a10      	ldr	r2, [pc, #64]	@ (80048f8 <TIM_OC4_SetConfig+0x88>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	031b      	lsls	r3, r3, #12
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b006      	add	sp, #24
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	ffffefff 	.word	0xffffefff
 80048f0:	ffff8fff 	.word	0xffff8fff
 80048f4:	fffffcff 	.word	0xfffffcff
 80048f8:	ffffdfff 	.word	0xffffdfff

080048fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	2201      	movs	r2, #1
 8004914:	4393      	bics	r3, r2
 8004916:	001a      	movs	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	22f0      	movs	r2, #240	@ 0xf0
 8004926:	4393      	bics	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	220a      	movs	r2, #10
 8004938:	4393      	bics	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b006      	add	sp, #24
 8004956:	bd80      	pop	{r7, pc}

08004958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	2210      	movs	r2, #16
 8004970:	4393      	bics	r3, r2
 8004972:	001a      	movs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a0d      	ldr	r2, [pc, #52]	@ (80049b8 <TIM_TI2_ConfigInputStage+0x60>)
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	22a0      	movs	r2, #160	@ 0xa0
 8004994:	4393      	bics	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b006      	add	sp, #24
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	ffff0fff 	.word	0xffff0fff

080049bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2270      	movs	r2, #112	@ 0x70
 80049d0:	4393      	bics	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	2207      	movs	r2, #7
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b004      	add	sp, #16
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4a09      	ldr	r2, [pc, #36]	@ (8004a2c <TIM_ETR_SetConfig+0x3c>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b006      	add	sp, #24
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	ffff00ff 	.word	0xffff00ff

08004a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	221f      	movs	r2, #31
 8004a40:	4013      	ands	r3, r2
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
 8004a46:	0013      	movs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	43d2      	mvns	r2, r2
 8004a52:	401a      	ands	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	211f      	movs	r1, #31
 8004a60:	400b      	ands	r3, r1
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4099      	lsls	r1, r3
 8004a66:	000b      	movs	r3, r1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b006      	add	sp, #24
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2238      	movs	r2, #56	@ 0x38
 8004a86:	5c9b      	ldrb	r3, [r3, r2]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e047      	b.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2238      	movs	r2, #56	@ 0x38
 8004a94:	2101      	movs	r1, #1
 8004a96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2239      	movs	r2, #57	@ 0x39
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2270      	movs	r2, #112	@ 0x70
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	05db      	lsls	r3, r3, #23
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a10      	ldr	r2, [pc, #64]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10c      	bne.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2280      	movs	r2, #128	@ 0x80
 8004af8:	4393      	bics	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2239      	movs	r2, #57	@ 0x39
 8004b12:	2101      	movs	r1, #1
 8004b14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2238      	movs	r2, #56	@ 0x38
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b004      	add	sp, #16
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40010800 	.word	0x40010800
 8004b30:	40011400 	.word	0x40011400

08004b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e044      	b.n	8004bd0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2278      	movs	r2, #120	@ 0x78
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7fc ffad 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2224      	movs	r2, #36	@ 0x24
 8004b62:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2101      	movs	r1, #1
 8004b70:	438a      	bics	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 ffd2 	bl	8005b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 fd30 	bl	80055ec <UART_SetConfig>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e01c      	b.n	8004bd0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	490d      	ldr	r1, [pc, #52]	@ (8004bd8 <HAL_UART_Init+0xa4>)
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	212a      	movs	r1, #42	@ 0x2a
 8004bb2:	438a      	bics	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f001 f861 	bl	8005c90 <UART_CheckIdleState>
 8004bce:	0003      	movs	r3, r0
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	ffffb7ff 	.word	0xffffb7ff

08004bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	@ 0x28
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	1dbb      	adds	r3, r7, #6
 8004bea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d000      	beq.n	8004bf6 <HAL_UART_Transmit+0x1a>
 8004bf4:	e08c      	b.n	8004d10 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_UART_Transmit+0x28>
 8004bfc:	1dbb      	adds	r3, r7, #6
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e084      	b.n	8004d12 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	015b      	lsls	r3, r3, #5
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d109      	bne.n	8004c28 <HAL_UART_Transmit+0x4c>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4013      	ands	r3, r2
 8004c22:	d001      	beq.n	8004c28 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e074      	b.n	8004d12 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2284      	movs	r2, #132	@ 0x84
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2221      	movs	r2, #33	@ 0x21
 8004c34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fd f977 	bl	8001f28 <HAL_GetTick>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1dba      	adds	r2, r7, #6
 8004c42:	2150      	movs	r1, #80	@ 0x50
 8004c44:	8812      	ldrh	r2, [r2, #0]
 8004c46:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1dba      	adds	r2, r7, #6
 8004c4c:	2152      	movs	r1, #82	@ 0x52
 8004c4e:	8812      	ldrh	r2, [r2, #0]
 8004c50:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	2380      	movs	r3, #128	@ 0x80
 8004c58:	015b      	lsls	r3, r3, #5
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d108      	bne.n	8004c70 <HAL_UART_Transmit+0x94>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e003      	b.n	8004c78 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c78:	e02f      	b.n	8004cda <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	0013      	movs	r3, r2
 8004c84:	2200      	movs	r2, #0
 8004c86:	2180      	movs	r1, #128	@ 0x80
 8004c88:	f001 f8aa 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d004      	beq.n	8004c9a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e03b      	b.n	8004d12 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	05d2      	lsls	r2, r2, #23
 8004cac:	0dd2      	lsrs	r2, r2, #23
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e007      	b.n	8004cc8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	781a      	ldrb	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2252      	movs	r2, #82	@ 0x52
 8004ccc:	5a9b      	ldrh	r3, [r3, r2]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b299      	uxth	r1, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2252      	movs	r2, #82	@ 0x52
 8004cd8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2252      	movs	r2, #82	@ 0x52
 8004cde:	5a9b      	ldrh	r3, [r3, r2]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1c9      	bne.n	8004c7a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	0013      	movs	r3, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2140      	movs	r1, #64	@ 0x40
 8004cf4:	f001 f874 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e005      	b.n	8004d12 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b008      	add	sp, #32
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2280      	movs	r2, #128	@ 0x80
 8004d30:	589b      	ldr	r3, [r3, r2]
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d000      	beq.n	8004d38 <HAL_UART_Receive+0x1c>
 8004d36:	e0d0      	b.n	8004eda <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_UART_Receive+0x2a>
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0c8      	b.n	8004edc <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	2380      	movs	r3, #128	@ 0x80
 8004d50:	015b      	lsls	r3, r3, #5
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d109      	bne.n	8004d6a <HAL_UART_Receive+0x4e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0b8      	b.n	8004edc <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2284      	movs	r2, #132	@ 0x84
 8004d6e:	2100      	movs	r1, #0
 8004d70:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	2122      	movs	r1, #34	@ 0x22
 8004d78:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d80:	f7fd f8d2 	bl	8001f28 <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1dba      	adds	r2, r7, #6
 8004d8c:	2158      	movs	r1, #88	@ 0x58
 8004d8e:	8812      	ldrh	r2, [r2, #0]
 8004d90:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1dba      	adds	r2, r7, #6
 8004d96:	215a      	movs	r1, #90	@ 0x5a
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10d      	bne.n	8004dc4 <HAL_UART_Receive+0xa8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_UART_Receive+0x9e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	225c      	movs	r2, #92	@ 0x5c
 8004db4:	494b      	ldr	r1, [pc, #300]	@ (8004ee4 <HAL_UART_Receive+0x1c8>)
 8004db6:	5299      	strh	r1, [r3, r2]
 8004db8:	e02e      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	225c      	movs	r2, #92	@ 0x5c
 8004dbe:	21ff      	movs	r1, #255	@ 0xff
 8004dc0:	5299      	strh	r1, [r3, r2]
 8004dc2:	e029      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_UART_Receive+0xcc>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_UART_Receive+0xc2>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	225c      	movs	r2, #92	@ 0x5c
 8004dd8:	21ff      	movs	r1, #255	@ 0xff
 8004dda:	5299      	strh	r1, [r3, r2]
 8004ddc:	e01c      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	225c      	movs	r2, #92	@ 0x5c
 8004de2:	217f      	movs	r1, #127	@ 0x7f
 8004de4:	5299      	strh	r1, [r3, r2]
 8004de6:	e017      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	055b      	lsls	r3, r3, #21
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d10d      	bne.n	8004e10 <HAL_UART_Receive+0xf4>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_UART_Receive+0xea>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	225c      	movs	r2, #92	@ 0x5c
 8004e00:	217f      	movs	r1, #127	@ 0x7f
 8004e02:	5299      	strh	r1, [r3, r2]
 8004e04:	e008      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	225c      	movs	r2, #92	@ 0x5c
 8004e0a:	213f      	movs	r1, #63	@ 0x3f
 8004e0c:	5299      	strh	r1, [r3, r2]
 8004e0e:	e003      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	225c      	movs	r2, #92	@ 0x5c
 8004e14:	2100      	movs	r1, #0
 8004e16:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004e18:	2312      	movs	r3, #18
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	215c      	movs	r1, #92	@ 0x5c
 8004e20:	5a52      	ldrh	r2, [r2, r1]
 8004e22:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	015b      	lsls	r3, r3, #5
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d108      	bne.n	8004e42 <HAL_UART_Receive+0x126>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e003      	b.n	8004e4a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e4a:	e03a      	b.n	8004ec2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	0013      	movs	r3, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	2120      	movs	r1, #32
 8004e5a:	f000 ffc1 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8004e5e:	1e03      	subs	r3, r0, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2280      	movs	r2, #128	@ 0x80
 8004e66:	2120      	movs	r1, #32
 8004e68:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e036      	b.n	8004edc <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2212      	movs	r2, #18
 8004e7e:	18ba      	adds	r2, r7, r2
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	4013      	ands	r3, r2
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e00e      	b.n	8004eb0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2212      	movs	r2, #18
 8004e9c:	18ba      	adds	r2, r7, r2
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	225a      	movs	r2, #90	@ 0x5a
 8004eb4:	5a9b      	ldrh	r3, [r3, r2]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b299      	uxth	r1, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	225a      	movs	r2, #90	@ 0x5a
 8004ec0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	225a      	movs	r2, #90	@ 0x5a
 8004ec6:	5a9b      	ldrh	r3, [r3, r2]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1be      	bne.n	8004e4c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2280      	movs	r2, #128	@ 0x80
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b008      	add	sp, #32
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	000001ff 	.word	0x000001ff

08004ee8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	1dbb      	adds	r3, r7, #6
 8004ef4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2280      	movs	r2, #128	@ 0x80
 8004efa:	589b      	ldr	r3, [r3, r2]
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d14a      	bne.n	8004f96 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_Receive_DMA+0x26>
 8004f06:	1dbb      	adds	r3, r7, #6
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e042      	b.n	8004f98 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	015b      	lsls	r3, r3, #5
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d109      	bne.n	8004f32 <HAL_UART_Receive_DMA+0x4a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d001      	beq.n	8004f32 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e032      	b.n	8004f98 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	@ (8004fa0 <HAL_UART_Receive_DMA+0xb8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d020      	beq.n	8004f84 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	2380      	movs	r3, #128	@ 0x80
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d019      	beq.n	8004f84 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f50:	f3ef 8310 	mrs	r3, PRIMASK
 8004f54:	613b      	str	r3, [r7, #16]
  return(result);
 8004f56:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			@ (mov r8, r8)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2180      	movs	r1, #128	@ 0x80
 8004f72:	04c9      	lsls	r1, r1, #19
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f84:	1dbb      	adds	r3, r7, #6
 8004f86:	881a      	ldrh	r2, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f000 ff97 	bl	8005ec0 <UART_Start_Receive_DMA>
 8004f92:	0003      	movs	r3, r0
 8004f94:	e000      	b.n	8004f98 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b008      	add	sp, #32
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40004800 	.word	0x40004800

08004fa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b0ab      	sub	sp, #172	@ 0xac
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	22a4      	movs	r2, #164	@ 0xa4
 8004fb4:	18b9      	adds	r1, r7, r2
 8004fb6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	20a0      	movs	r0, #160	@ 0xa0
 8004fc0:	1839      	adds	r1, r7, r0
 8004fc2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	219c      	movs	r1, #156	@ 0x9c
 8004fcc:	1879      	adds	r1, r7, r1
 8004fce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	18bb      	adds	r3, r7, r2
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a99      	ldr	r2, [pc, #612]	@ (800523c <HAL_UART_IRQHandler+0x298>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2298      	movs	r2, #152	@ 0x98
 8004fdc:	18bc      	adds	r4, r7, r2
 8004fde:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004fe0:	18bb      	adds	r3, r7, r2
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d114      	bne.n	8005012 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe8:	187b      	adds	r3, r7, r1
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2220      	movs	r2, #32
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d00f      	beq.n	8005012 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff2:	183b      	adds	r3, r7, r0
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d00a      	beq.n	8005012 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005000:	2b00      	cmp	r3, #0
 8005002:	d100      	bne.n	8005006 <HAL_UART_IRQHandler+0x62>
 8005004:	e2be      	b.n	8005584 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	0010      	movs	r0, r2
 800500e:	4798      	blx	r3
      }
      return;
 8005010:	e2b8      	b.n	8005584 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005012:	2398      	movs	r3, #152	@ 0x98
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d100      	bne.n	800501e <HAL_UART_IRQHandler+0x7a>
 800501c:	e114      	b.n	8005248 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800501e:	239c      	movs	r3, #156	@ 0x9c
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2201      	movs	r2, #1
 8005026:	4013      	ands	r3, r2
 8005028:	d106      	bne.n	8005038 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800502a:	23a0      	movs	r3, #160	@ 0xa0
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a83      	ldr	r2, [pc, #524]	@ (8005240 <HAL_UART_IRQHandler+0x29c>)
 8005032:	4013      	ands	r3, r2
 8005034:	d100      	bne.n	8005038 <HAL_UART_IRQHandler+0x94>
 8005036:	e107      	b.n	8005248 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005038:	23a4      	movs	r3, #164	@ 0xa4
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	d012      	beq.n	800506a <HAL_UART_IRQHandler+0xc6>
 8005044:	23a0      	movs	r3, #160	@ 0xa0
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4013      	ands	r3, r2
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2284      	movs	r2, #132	@ 0x84
 800505e:	589b      	ldr	r3, [r3, r2]
 8005060:	2201      	movs	r2, #1
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2184      	movs	r1, #132	@ 0x84
 8005068:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800506a:	23a4      	movs	r3, #164	@ 0xa4
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2202      	movs	r2, #2
 8005072:	4013      	ands	r3, r2
 8005074:	d011      	beq.n	800509a <HAL_UART_IRQHandler+0xf6>
 8005076:	239c      	movs	r3, #156	@ 0x9c
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2201      	movs	r2, #1
 800507e:	4013      	ands	r3, r2
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2284      	movs	r2, #132	@ 0x84
 800508e:	589b      	ldr	r3, [r3, r2]
 8005090:	2204      	movs	r2, #4
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2184      	movs	r1, #132	@ 0x84
 8005098:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800509a:	23a4      	movs	r3, #164	@ 0xa4
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2204      	movs	r2, #4
 80050a2:	4013      	ands	r3, r2
 80050a4:	d011      	beq.n	80050ca <HAL_UART_IRQHandler+0x126>
 80050a6:	239c      	movs	r3, #156	@ 0x9c
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	d00b      	beq.n	80050ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2204      	movs	r2, #4
 80050b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2284      	movs	r2, #132	@ 0x84
 80050be:	589b      	ldr	r3, [r3, r2]
 80050c0:	2202      	movs	r2, #2
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2184      	movs	r1, #132	@ 0x84
 80050c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050ca:	23a4      	movs	r3, #164	@ 0xa4
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2208      	movs	r2, #8
 80050d2:	4013      	ands	r3, r2
 80050d4:	d017      	beq.n	8005106 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050d6:	23a0      	movs	r3, #160	@ 0xa0
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2220      	movs	r2, #32
 80050de:	4013      	ands	r3, r2
 80050e0:	d105      	bne.n	80050ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050e2:	239c      	movs	r3, #156	@ 0x9c
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050ec:	d00b      	beq.n	8005106 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2208      	movs	r2, #8
 80050f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2284      	movs	r2, #132	@ 0x84
 80050fa:	589b      	ldr	r3, [r3, r2]
 80050fc:	2208      	movs	r2, #8
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2184      	movs	r1, #132	@ 0x84
 8005104:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005106:	23a4      	movs	r3, #164	@ 0xa4
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	4013      	ands	r3, r2
 8005112:	d013      	beq.n	800513c <HAL_UART_IRQHandler+0x198>
 8005114:	23a0      	movs	r3, #160	@ 0xa0
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	@ 0x80
 800511c:	04db      	lsls	r3, r3, #19
 800511e:	4013      	ands	r3, r2
 8005120:	d00c      	beq.n	800513c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2280      	movs	r2, #128	@ 0x80
 8005128:	0112      	lsls	r2, r2, #4
 800512a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2284      	movs	r2, #132	@ 0x84
 8005130:	589b      	ldr	r3, [r3, r2]
 8005132:	2220      	movs	r2, #32
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2184      	movs	r1, #132	@ 0x84
 800513a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2284      	movs	r2, #132	@ 0x84
 8005140:	589b      	ldr	r3, [r3, r2]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d100      	bne.n	8005148 <HAL_UART_IRQHandler+0x1a4>
 8005146:	e21f      	b.n	8005588 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005148:	23a4      	movs	r3, #164	@ 0xa4
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2220      	movs	r2, #32
 8005150:	4013      	ands	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005154:	23a0      	movs	r3, #160	@ 0xa0
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2220      	movs	r2, #32
 800515c:	4013      	ands	r3, r2
 800515e:	d008      	beq.n	8005172 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	0010      	movs	r0, r2
 8005170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2284      	movs	r2, #132	@ 0x84
 8005176:	589b      	ldr	r3, [r3, r2]
 8005178:	2194      	movs	r1, #148	@ 0x94
 800517a:	187a      	adds	r2, r7, r1
 800517c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2240      	movs	r2, #64	@ 0x40
 8005186:	4013      	ands	r3, r2
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	d004      	beq.n	8005196 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800518c:	187b      	adds	r3, r7, r1
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2228      	movs	r2, #40	@ 0x28
 8005192:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005194:	d047      	beq.n	8005226 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 ff55 	bl	8006048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2240      	movs	r2, #64	@ 0x40
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d137      	bne.n	800521c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ac:	f3ef 8310 	mrs	r3, PRIMASK
 80051b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80051b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b4:	2090      	movs	r0, #144	@ 0x90
 80051b6:	183a      	adds	r2, r7, r0
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	2301      	movs	r3, #1
 80051bc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2140      	movs	r1, #64	@ 0x40
 80051d2:	438a      	bics	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	183b      	adds	r3, r7, r0
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051de:	f383 8810 	msr	PRIMASK, r3
}
 80051e2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d012      	beq.n	8005212 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f0:	4a14      	ldr	r2, [pc, #80]	@ (8005244 <HAL_UART_IRQHandler+0x2a0>)
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fd fcf5 	bl	8002be8 <HAL_DMA_Abort_IT>
 80051fe:	1e03      	subs	r3, r0, #0
 8005200:	d01a      	beq.n	8005238 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520c:	0018      	movs	r0, r3
 800520e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e012      	b.n	8005238 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 f9d5 	bl	80055c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521a:	e00d      	b.n	8005238 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 f9d0 	bl	80055c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	e008      	b.n	8005238 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 f9cb 	bl	80055c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2284      	movs	r2, #132	@ 0x84
 8005232:	2100      	movs	r1, #0
 8005234:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005236:	e1a7      	b.n	8005588 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	46c0      	nop			@ (mov r8, r8)
    return;
 800523a:	e1a5      	b.n	8005588 <HAL_UART_IRQHandler+0x5e4>
 800523c:	0000080f 	.word	0x0000080f
 8005240:	04000120 	.word	0x04000120
 8005244:	0800637b 	.word	0x0800637b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	d000      	beq.n	8005252 <HAL_UART_IRQHandler+0x2ae>
 8005250:	e159      	b.n	8005506 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005252:	23a4      	movs	r3, #164	@ 0xa4
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2210      	movs	r2, #16
 800525a:	4013      	ands	r3, r2
 800525c:	d100      	bne.n	8005260 <HAL_UART_IRQHandler+0x2bc>
 800525e:	e152      	b.n	8005506 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005260:	23a0      	movs	r3, #160	@ 0xa0
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2210      	movs	r2, #16
 8005268:	4013      	ands	r3, r2
 800526a:	d100      	bne.n	800526e <HAL_UART_IRQHandler+0x2ca>
 800526c:	e14b      	b.n	8005506 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2210      	movs	r2, #16
 8005274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2240      	movs	r2, #64	@ 0x40
 800527e:	4013      	ands	r3, r2
 8005280:	2b40      	cmp	r3, #64	@ 0x40
 8005282:	d000      	beq.n	8005286 <HAL_UART_IRQHandler+0x2e2>
 8005284:	e0bf      	b.n	8005406 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	217e      	movs	r1, #126	@ 0x7e
 8005290:	187b      	adds	r3, r7, r1
 8005292:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005294:	187b      	adds	r3, r7, r1
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d100      	bne.n	800529e <HAL_UART_IRQHandler+0x2fa>
 800529c:	e095      	b.n	80053ca <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2258      	movs	r2, #88	@ 0x58
 80052a2:	5a9b      	ldrh	r3, [r3, r2]
 80052a4:	187a      	adds	r2, r7, r1
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d300      	bcc.n	80052ae <HAL_UART_IRQHandler+0x30a>
 80052ac:	e08d      	b.n	80053ca <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	187a      	adds	r2, r7, r1
 80052b2:	215a      	movs	r1, #90	@ 0x5a
 80052b4:	8812      	ldrh	r2, [r2, #0]
 80052b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2220      	movs	r2, #32
 80052c2:	4013      	ands	r3, r2
 80052c4:	d16f      	bne.n	80053a6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052d0:	2301      	movs	r3, #1
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	f383 8810 	msr	PRIMASK, r3
}
 80052da:	46c0      	nop			@ (mov r8, r8)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	49ad      	ldr	r1, [pc, #692]	@ (800559c <HAL_UART_IRQHandler+0x5f8>)
 80052e8:	400a      	ands	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f8:	f3ef 8310 	mrs	r3, PRIMASK
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80052fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	677b      	str	r3, [r7, #116]	@ 0x74
 8005302:	2301      	movs	r3, #1
 8005304:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			@ (mov r8, r8)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2101      	movs	r1, #1
 800531a:	438a      	bics	r2, r1
 800531c:	609a      	str	r2, [r3, #8]
 800531e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005320:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800532a:	f3ef 8310 	mrs	r3, PRIMASK
 800532e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005332:	673b      	str	r3, [r7, #112]	@ 0x70
 8005334:	2301      	movs	r3, #1
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800533a:	f383 8810 	msr	PRIMASK, r3
}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2140      	movs	r1, #64	@ 0x40
 800534c:	438a      	bics	r2, r1
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005352:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005356:	f383 8810 	msr	PRIMASK, r3
}
 800535a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	2120      	movs	r1, #32
 8005362:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536a:	f3ef 8310 	mrs	r3, PRIMASK
 800536e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005372:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005374:	2301      	movs	r3, #1
 8005376:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800537a:	f383 8810 	msr	PRIMASK, r3
}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2110      	movs	r1, #16
 800538c:	438a      	bics	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005392:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7fd fbe1 	bl	8002b68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2258      	movs	r2, #88	@ 0x58
 80053b0:	5a9a      	ldrh	r2, [r3, r2]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	215a      	movs	r1, #90	@ 0x5a
 80053b6:	5a5b      	ldrh	r3, [r3, r1]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0011      	movs	r1, r2
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f906 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80053c8:	e0e0      	b.n	800558c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2258      	movs	r2, #88	@ 0x58
 80053ce:	5a9b      	ldrh	r3, [r3, r2]
 80053d0:	227e      	movs	r2, #126	@ 0x7e
 80053d2:	18ba      	adds	r2, r7, r2
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d000      	beq.n	80053dc <HAL_UART_IRQHandler+0x438>
 80053da:	e0d7      	b.n	800558c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2220      	movs	r2, #32
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d000      	beq.n	80053ee <HAL_UART_IRQHandler+0x44a>
 80053ec:	e0ce      	b.n	800558c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2258      	movs	r2, #88	@ 0x58
 80053f8:	5a9a      	ldrh	r2, [r3, r2]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0011      	movs	r1, r2
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 f8e8 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
      return;
 8005404:	e0c2      	b.n	800558c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2258      	movs	r2, #88	@ 0x58
 800540a:	5a99      	ldrh	r1, [r3, r2]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	225a      	movs	r2, #90	@ 0x5a
 8005410:	5a9b      	ldrh	r3, [r3, r2]
 8005412:	b29a      	uxth	r2, r3
 8005414:	208e      	movs	r0, #142	@ 0x8e
 8005416:	183b      	adds	r3, r7, r0
 8005418:	1a8a      	subs	r2, r1, r2
 800541a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	225a      	movs	r2, #90	@ 0x5a
 8005420:	5a9b      	ldrh	r3, [r3, r2]
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d100      	bne.n	800542a <HAL_UART_IRQHandler+0x486>
 8005428:	e0b2      	b.n	8005590 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800542a:	183b      	adds	r3, r7, r0
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d100      	bne.n	8005434 <HAL_UART_IRQHandler+0x490>
 8005432:	e0ad      	b.n	8005590 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005434:	f3ef 8310 	mrs	r3, PRIMASK
 8005438:	60fb      	str	r3, [r7, #12]
  return(result);
 800543a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543c:	2488      	movs	r4, #136	@ 0x88
 800543e:	193a      	adds	r2, r7, r4
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	2301      	movs	r3, #1
 8005444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4951      	ldr	r1, [pc, #324]	@ (80055a0 <HAL_UART_IRQHandler+0x5fc>)
 800545a:	400a      	ands	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	193b      	adds	r3, r7, r4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546c:	f3ef 8310 	mrs	r3, PRIMASK
 8005470:	61bb      	str	r3, [r7, #24]
  return(result);
 8005472:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	2484      	movs	r4, #132	@ 0x84
 8005476:	193a      	adds	r2, r7, r4
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	2301      	movs	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f383 8810 	msr	PRIMASK, r3
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	438a      	bics	r2, r1
 8005494:	609a      	str	r2, [r3, #8]
 8005496:	193b      	adds	r3, r7, r4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	f383 8810 	msr	PRIMASK, r3
}
 80054a2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2280      	movs	r2, #128	@ 0x80
 80054a8:	2120      	movs	r1, #32
 80054aa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b8:	f3ef 8310 	mrs	r3, PRIMASK
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c0:	2480      	movs	r4, #128	@ 0x80
 80054c2:	193a      	adds	r2, r7, r4
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	2301      	movs	r3, #1
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2110      	movs	r1, #16
 80054de:	438a      	bics	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	193b      	adds	r3, r7, r4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f6:	183b      	adds	r3, r7, r0
 80054f8:	881a      	ldrh	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0011      	movs	r1, r2
 80054fe:	0018      	movs	r0, r3
 8005500:	f000 f868 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005504:	e044      	b.n	8005590 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005506:	23a4      	movs	r3, #164	@ 0xa4
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	035b      	lsls	r3, r3, #13
 8005510:	4013      	ands	r3, r2
 8005512:	d010      	beq.n	8005536 <HAL_UART_IRQHandler+0x592>
 8005514:	239c      	movs	r3, #156	@ 0x9c
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	03db      	lsls	r3, r3, #15
 800551e:	4013      	ands	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2280      	movs	r2, #128	@ 0x80
 8005528:	0352      	lsls	r2, r2, #13
 800552a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	0018      	movs	r0, r3
 8005530:	f000 ff61 	bl	80063f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005534:	e02f      	b.n	8005596 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005536:	23a4      	movs	r3, #164	@ 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2280      	movs	r2, #128	@ 0x80
 800553e:	4013      	ands	r3, r2
 8005540:	d00f      	beq.n	8005562 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005542:	23a0      	movs	r3, #160	@ 0xa0
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2280      	movs	r2, #128	@ 0x80
 800554a:	4013      	ands	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01e      	beq.n	8005594 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	0010      	movs	r0, r2
 800555e:	4798      	blx	r3
    }
    return;
 8005560:	e018      	b.n	8005594 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005562:	23a4      	movs	r3, #164	@ 0xa4
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2240      	movs	r2, #64	@ 0x40
 800556a:	4013      	ands	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_UART_IRQHandler+0x5f2>
 800556e:	23a0      	movs	r3, #160	@ 0xa0
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2240      	movs	r2, #64	@ 0x40
 8005576:	4013      	ands	r3, r2
 8005578:	d00d      	beq.n	8005596 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 ff0f 	bl	80063a0 <UART_EndTransmit_IT>
    return;
 8005582:	e008      	b.n	8005596 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005584:	46c0      	nop			@ (mov r8, r8)
 8005586:	e006      	b.n	8005596 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	e004      	b.n	8005596 <HAL_UART_IRQHandler+0x5f2>
      return;
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	e002      	b.n	8005596 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005590:	46c0      	nop			@ (mov r8, r8)
 8005592:	e000      	b.n	8005596 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005594:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005596:	46bd      	mov	sp, r7
 8005598:	b02b      	add	sp, #172	@ 0xac
 800559a:	bd90      	pop	{r4, r7, pc}
 800559c:	fffffeff 	.word	0xfffffeff
 80055a0:	fffffedf 	.word	0xfffffedf

080055a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	000a      	movs	r2, r1
 80055de:	1cbb      	adds	r3, r7, #2
 80055e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ec:	b5b0      	push	{r4, r5, r7, lr}
 80055ee:	b08e      	sub	sp, #56	@ 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f4:	231a      	movs	r3, #26
 80055f6:	2218      	movs	r2, #24
 80055f8:	189b      	adds	r3, r3, r2
 80055fa:	19db      	adds	r3, r3, r7
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	431a      	orrs	r2, r3
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	431a      	orrs	r2, r3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	4313      	orrs	r3, r2
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4ac3      	ldr	r2, [pc, #780]	@ (800592c <UART_SetConfig+0x340>)
 8005620:	4013      	ands	r3, r2
 8005622:	0019      	movs	r1, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4abe      	ldr	r2, [pc, #760]	@ (8005930 <UART_SetConfig+0x344>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4ab8      	ldr	r2, [pc, #736]	@ (8005934 <UART_SetConfig+0x348>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800565c:	4313      	orrs	r3, r2
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4ab4      	ldr	r2, [pc, #720]	@ (8005938 <UART_SetConfig+0x34c>)
 8005668:	4013      	ands	r3, r2
 800566a:	0019      	movs	r1, r3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005672:	430a      	orrs	r2, r1
 8005674:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4ab0      	ldr	r2, [pc, #704]	@ (800593c <UART_SetConfig+0x350>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d131      	bne.n	80056e4 <UART_SetConfig+0xf8>
 8005680:	4baf      	ldr	r3, [pc, #700]	@ (8005940 <UART_SetConfig+0x354>)
 8005682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005684:	2203      	movs	r2, #3
 8005686:	4013      	ands	r3, r2
 8005688:	2b03      	cmp	r3, #3
 800568a:	d01d      	beq.n	80056c8 <UART_SetConfig+0xdc>
 800568c:	d823      	bhi.n	80056d6 <UART_SetConfig+0xea>
 800568e:	2b02      	cmp	r3, #2
 8005690:	d00c      	beq.n	80056ac <UART_SetConfig+0xc0>
 8005692:	d820      	bhi.n	80056d6 <UART_SetConfig+0xea>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <UART_SetConfig+0xb2>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d00e      	beq.n	80056ba <UART_SetConfig+0xce>
 800569c:	e01b      	b.n	80056d6 <UART_SetConfig+0xea>
 800569e:	231b      	movs	r3, #27
 80056a0:	2218      	movs	r2, #24
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	19db      	adds	r3, r3, r7
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e0b4      	b.n	8005816 <UART_SetConfig+0x22a>
 80056ac:	231b      	movs	r3, #27
 80056ae:	2218      	movs	r2, #24
 80056b0:	189b      	adds	r3, r3, r2
 80056b2:	19db      	adds	r3, r3, r7
 80056b4:	2202      	movs	r2, #2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e0ad      	b.n	8005816 <UART_SetConfig+0x22a>
 80056ba:	231b      	movs	r3, #27
 80056bc:	2218      	movs	r2, #24
 80056be:	189b      	adds	r3, r3, r2
 80056c0:	19db      	adds	r3, r3, r7
 80056c2:	2204      	movs	r2, #4
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e0a6      	b.n	8005816 <UART_SetConfig+0x22a>
 80056c8:	231b      	movs	r3, #27
 80056ca:	2218      	movs	r2, #24
 80056cc:	189b      	adds	r3, r3, r2
 80056ce:	19db      	adds	r3, r3, r7
 80056d0:	2208      	movs	r2, #8
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e09f      	b.n	8005816 <UART_SetConfig+0x22a>
 80056d6:	231b      	movs	r3, #27
 80056d8:	2218      	movs	r2, #24
 80056da:	189b      	adds	r3, r3, r2
 80056dc:	19db      	adds	r3, r3, r7
 80056de:	2210      	movs	r2, #16
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e098      	b.n	8005816 <UART_SetConfig+0x22a>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a96      	ldr	r2, [pc, #600]	@ (8005944 <UART_SetConfig+0x358>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d131      	bne.n	8005752 <UART_SetConfig+0x166>
 80056ee:	4b94      	ldr	r3, [pc, #592]	@ (8005940 <UART_SetConfig+0x354>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f2:	220c      	movs	r2, #12
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b0c      	cmp	r3, #12
 80056f8:	d01d      	beq.n	8005736 <UART_SetConfig+0x14a>
 80056fa:	d823      	bhi.n	8005744 <UART_SetConfig+0x158>
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d00c      	beq.n	800571a <UART_SetConfig+0x12e>
 8005700:	d820      	bhi.n	8005744 <UART_SetConfig+0x158>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <UART_SetConfig+0x120>
 8005706:	2b04      	cmp	r3, #4
 8005708:	d00e      	beq.n	8005728 <UART_SetConfig+0x13c>
 800570a:	e01b      	b.n	8005744 <UART_SetConfig+0x158>
 800570c:	231b      	movs	r3, #27
 800570e:	2218      	movs	r2, #24
 8005710:	189b      	adds	r3, r3, r2
 8005712:	19db      	adds	r3, r3, r7
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e07d      	b.n	8005816 <UART_SetConfig+0x22a>
 800571a:	231b      	movs	r3, #27
 800571c:	2218      	movs	r2, #24
 800571e:	189b      	adds	r3, r3, r2
 8005720:	19db      	adds	r3, r3, r7
 8005722:	2202      	movs	r2, #2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e076      	b.n	8005816 <UART_SetConfig+0x22a>
 8005728:	231b      	movs	r3, #27
 800572a:	2218      	movs	r2, #24
 800572c:	189b      	adds	r3, r3, r2
 800572e:	19db      	adds	r3, r3, r7
 8005730:	2204      	movs	r2, #4
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e06f      	b.n	8005816 <UART_SetConfig+0x22a>
 8005736:	231b      	movs	r3, #27
 8005738:	2218      	movs	r2, #24
 800573a:	189b      	adds	r3, r3, r2
 800573c:	19db      	adds	r3, r3, r7
 800573e:	2208      	movs	r2, #8
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e068      	b.n	8005816 <UART_SetConfig+0x22a>
 8005744:	231b      	movs	r3, #27
 8005746:	2218      	movs	r2, #24
 8005748:	189b      	adds	r3, r3, r2
 800574a:	19db      	adds	r3, r3, r7
 800574c:	2210      	movs	r2, #16
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e061      	b.n	8005816 <UART_SetConfig+0x22a>
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7c      	ldr	r2, [pc, #496]	@ (8005948 <UART_SetConfig+0x35c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d106      	bne.n	800576a <UART_SetConfig+0x17e>
 800575c:	231b      	movs	r3, #27
 800575e:	2218      	movs	r2, #24
 8005760:	189b      	adds	r3, r3, r2
 8005762:	19db      	adds	r3, r3, r7
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e055      	b.n	8005816 <UART_SetConfig+0x22a>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a77      	ldr	r2, [pc, #476]	@ (800594c <UART_SetConfig+0x360>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d106      	bne.n	8005782 <UART_SetConfig+0x196>
 8005774:	231b      	movs	r3, #27
 8005776:	2218      	movs	r2, #24
 8005778:	189b      	adds	r3, r3, r2
 800577a:	19db      	adds	r3, r3, r7
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e049      	b.n	8005816 <UART_SetConfig+0x22a>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a6b      	ldr	r2, [pc, #428]	@ (8005934 <UART_SetConfig+0x348>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d13e      	bne.n	800580a <UART_SetConfig+0x21e>
 800578c:	4b6c      	ldr	r3, [pc, #432]	@ (8005940 <UART_SetConfig+0x354>)
 800578e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005790:	23c0      	movs	r3, #192	@ 0xc0
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	4013      	ands	r3, r2
 8005796:	22c0      	movs	r2, #192	@ 0xc0
 8005798:	0112      	lsls	r2, r2, #4
 800579a:	4293      	cmp	r3, r2
 800579c:	d027      	beq.n	80057ee <UART_SetConfig+0x202>
 800579e:	22c0      	movs	r2, #192	@ 0xc0
 80057a0:	0112      	lsls	r2, r2, #4
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d82a      	bhi.n	80057fc <UART_SetConfig+0x210>
 80057a6:	2280      	movs	r2, #128	@ 0x80
 80057a8:	0112      	lsls	r2, r2, #4
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d011      	beq.n	80057d2 <UART_SetConfig+0x1e6>
 80057ae:	2280      	movs	r2, #128	@ 0x80
 80057b0:	0112      	lsls	r2, r2, #4
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d822      	bhi.n	80057fc <UART_SetConfig+0x210>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <UART_SetConfig+0x1d8>
 80057ba:	2280      	movs	r2, #128	@ 0x80
 80057bc:	00d2      	lsls	r2, r2, #3
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <UART_SetConfig+0x1f4>
 80057c2:	e01b      	b.n	80057fc <UART_SetConfig+0x210>
 80057c4:	231b      	movs	r3, #27
 80057c6:	2218      	movs	r2, #24
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	19db      	adds	r3, r3, r7
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e021      	b.n	8005816 <UART_SetConfig+0x22a>
 80057d2:	231b      	movs	r3, #27
 80057d4:	2218      	movs	r2, #24
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	19db      	adds	r3, r3, r7
 80057da:	2202      	movs	r2, #2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e01a      	b.n	8005816 <UART_SetConfig+0x22a>
 80057e0:	231b      	movs	r3, #27
 80057e2:	2218      	movs	r2, #24
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	19db      	adds	r3, r3, r7
 80057e8:	2204      	movs	r2, #4
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e013      	b.n	8005816 <UART_SetConfig+0x22a>
 80057ee:	231b      	movs	r3, #27
 80057f0:	2218      	movs	r2, #24
 80057f2:	189b      	adds	r3, r3, r2
 80057f4:	19db      	adds	r3, r3, r7
 80057f6:	2208      	movs	r2, #8
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e00c      	b.n	8005816 <UART_SetConfig+0x22a>
 80057fc:	231b      	movs	r3, #27
 80057fe:	2218      	movs	r2, #24
 8005800:	189b      	adds	r3, r3, r2
 8005802:	19db      	adds	r3, r3, r7
 8005804:	2210      	movs	r2, #16
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e005      	b.n	8005816 <UART_SetConfig+0x22a>
 800580a:	231b      	movs	r3, #27
 800580c:	2218      	movs	r2, #24
 800580e:	189b      	adds	r3, r3, r2
 8005810:	19db      	adds	r3, r3, r7
 8005812:	2210      	movs	r2, #16
 8005814:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a46      	ldr	r2, [pc, #280]	@ (8005934 <UART_SetConfig+0x348>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d000      	beq.n	8005822 <UART_SetConfig+0x236>
 8005820:	e09a      	b.n	8005958 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005822:	231b      	movs	r3, #27
 8005824:	2218      	movs	r2, #24
 8005826:	189b      	adds	r3, r3, r2
 8005828:	19db      	adds	r3, r3, r7
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d01d      	beq.n	800586c <UART_SetConfig+0x280>
 8005830:	dc20      	bgt.n	8005874 <UART_SetConfig+0x288>
 8005832:	2b04      	cmp	r3, #4
 8005834:	d015      	beq.n	8005862 <UART_SetConfig+0x276>
 8005836:	dc1d      	bgt.n	8005874 <UART_SetConfig+0x288>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <UART_SetConfig+0x256>
 800583c:	2b02      	cmp	r3, #2
 800583e:	d005      	beq.n	800584c <UART_SetConfig+0x260>
 8005840:	e018      	b.n	8005874 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fe fa75 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005846:	0003      	movs	r3, r0
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800584a:	e01c      	b.n	8005886 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800584c:	4b3c      	ldr	r3, [pc, #240]	@ (8005940 <UART_SetConfig+0x354>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2210      	movs	r2, #16
 8005852:	4013      	ands	r3, r2
 8005854:	d002      	beq.n	800585c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005856:	4b3e      	ldr	r3, [pc, #248]	@ (8005950 <UART_SetConfig+0x364>)
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800585a:	e014      	b.n	8005886 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800585c:	4b3d      	ldr	r3, [pc, #244]	@ (8005954 <UART_SetConfig+0x368>)
 800585e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005860:	e011      	b.n	8005886 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005862:	f7fe f9d5 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8005866:	0003      	movs	r3, r0
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800586a:	e00c      	b.n	8005886 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586c:	2380      	movs	r3, #128	@ 0x80
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005872:	e008      	b.n	8005886 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005878:	231a      	movs	r3, #26
 800587a:	2218      	movs	r2, #24
 800587c:	189b      	adds	r3, r3, r2
 800587e:	19db      	adds	r3, r3, r7
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
        break;
 8005884:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d100      	bne.n	800588e <UART_SetConfig+0x2a2>
 800588c:	e133      	b.n	8005af6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	0013      	movs	r3, r2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	189b      	adds	r3, r3, r2
 8005898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800589a:	429a      	cmp	r2, r3
 800589c:	d305      	bcc.n	80058aa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d906      	bls.n	80058b8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80058aa:	231a      	movs	r3, #26
 80058ac:	2218      	movs	r2, #24
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	19db      	adds	r3, r3, r7
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e11e      	b.n	8005af6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	6939      	ldr	r1, [r7, #16]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	000b      	movs	r3, r1
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	0010      	movs	r0, r2
 80058ca:	0205      	lsls	r5, r0, #8
 80058cc:	431d      	orrs	r5, r3
 80058ce:	000b      	movs	r3, r1
 80058d0:	021c      	lsls	r4, r3, #8
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	68b8      	ldr	r0, [r7, #8]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	1900      	adds	r0, r0, r4
 80058e4:	4169      	adcs	r1, r5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	2300      	movs	r3, #0
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f7fa fc9e 	bl	8000234 <__aeabi_uldivmod>
 80058f8:	0002      	movs	r2, r0
 80058fa:	000b      	movs	r3, r1
 80058fc:	0013      	movs	r3, r2
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005902:	23c0      	movs	r3, #192	@ 0xc0
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	429a      	cmp	r2, r3
 8005908:	d309      	bcc.n	800591e <UART_SetConfig+0x332>
 800590a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	035b      	lsls	r3, r3, #13
 8005910:	429a      	cmp	r2, r3
 8005912:	d204      	bcs.n	800591e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800591a:	60da      	str	r2, [r3, #12]
 800591c:	e0eb      	b.n	8005af6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800591e:	231a      	movs	r3, #26
 8005920:	2218      	movs	r2, #24
 8005922:	189b      	adds	r3, r3, r2
 8005924:	19db      	adds	r3, r3, r7
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e0e4      	b.n	8005af6 <UART_SetConfig+0x50a>
 800592c:	efff69f3 	.word	0xefff69f3
 8005930:	ffffcfff 	.word	0xffffcfff
 8005934:	40004800 	.word	0x40004800
 8005938:	fffff4ff 	.word	0xfffff4ff
 800593c:	40013800 	.word	0x40013800
 8005940:	40021000 	.word	0x40021000
 8005944:	40004400 	.word	0x40004400
 8005948:	40004c00 	.word	0x40004c00
 800594c:	40005000 	.word	0x40005000
 8005950:	003d0900 	.word	0x003d0900
 8005954:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	429a      	cmp	r2, r3
 8005962:	d000      	beq.n	8005966 <UART_SetConfig+0x37a>
 8005964:	e070      	b.n	8005a48 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005966:	231b      	movs	r3, #27
 8005968:	2218      	movs	r2, #24
 800596a:	189b      	adds	r3, r3, r2
 800596c:	19db      	adds	r3, r3, r7
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d822      	bhi.n	80059ba <UART_SetConfig+0x3ce>
 8005974:	009a      	lsls	r2, r3, #2
 8005976:	4b67      	ldr	r3, [pc, #412]	@ (8005b14 <UART_SetConfig+0x528>)
 8005978:	18d3      	adds	r3, r2, r3
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597e:	f7fe f9d7 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005982:	0003      	movs	r3, r0
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005986:	e021      	b.n	80059cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005988:	f7fe f9e8 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 800598c:	0003      	movs	r3, r0
 800598e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005990:	e01c      	b.n	80059cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005992:	4b61      	ldr	r3, [pc, #388]	@ (8005b18 <UART_SetConfig+0x52c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2210      	movs	r2, #16
 8005998:	4013      	ands	r3, r2
 800599a:	d002      	beq.n	80059a2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800599c:	4b5f      	ldr	r3, [pc, #380]	@ (8005b1c <UART_SetConfig+0x530>)
 800599e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059a0:	e014      	b.n	80059cc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80059a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b20 <UART_SetConfig+0x534>)
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059a6:	e011      	b.n	80059cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a8:	f7fe f932 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 80059ac:	0003      	movs	r3, r0
 80059ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059b0:	e00c      	b.n	80059cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b2:	2380      	movs	r3, #128	@ 0x80
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059b8:	e008      	b.n	80059cc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80059be:	231a      	movs	r3, #26
 80059c0:	2218      	movs	r2, #24
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
        break;
 80059ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d100      	bne.n	80059d4 <UART_SetConfig+0x3e8>
 80059d2:	e090      	b.n	8005af6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	005a      	lsls	r2, r3, #1
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	18d2      	adds	r2, r2, r3
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0019      	movs	r1, r3
 80059e6:	0010      	movs	r0, r2
 80059e8:	f7fa fb98 	bl	800011c <__udivsi3>
 80059ec:	0003      	movs	r3, r0
 80059ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	d921      	bls.n	8005a3a <UART_SetConfig+0x44e>
 80059f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	025b      	lsls	r3, r3, #9
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d21c      	bcs.n	8005a3a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	200e      	movs	r0, #14
 8005a06:	2418      	movs	r4, #24
 8005a08:	1903      	adds	r3, r0, r4
 8005a0a:	19db      	adds	r3, r3, r7
 8005a0c:	210f      	movs	r1, #15
 8005a0e:	438a      	bics	r2, r1
 8005a10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2207      	movs	r2, #7
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	b299      	uxth	r1, r3
 8005a1e:	1903      	adds	r3, r0, r4
 8005a20:	19db      	adds	r3, r3, r7
 8005a22:	1902      	adds	r2, r0, r4
 8005a24:	19d2      	adds	r2, r2, r7
 8005a26:	8812      	ldrh	r2, [r2, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	1902      	adds	r2, r0, r4
 8005a32:	19d2      	adds	r2, r2, r7
 8005a34:	8812      	ldrh	r2, [r2, #0]
 8005a36:	60da      	str	r2, [r3, #12]
 8005a38:	e05d      	b.n	8005af6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3a:	231a      	movs	r3, #26
 8005a3c:	2218      	movs	r2, #24
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	19db      	adds	r3, r3, r7
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e056      	b.n	8005af6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a48:	231b      	movs	r3, #27
 8005a4a:	2218      	movs	r2, #24
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	19db      	adds	r3, r3, r7
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d822      	bhi.n	8005a9c <UART_SetConfig+0x4b0>
 8005a56:	009a      	lsls	r2, r3, #2
 8005a58:	4b32      	ldr	r3, [pc, #200]	@ (8005b24 <UART_SetConfig+0x538>)
 8005a5a:	18d3      	adds	r3, r2, r3
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a60:	f7fe f966 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005a64:	0003      	movs	r3, r0
 8005a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a68:	e021      	b.n	8005aae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a6a:	f7fe f977 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 8005a6e:	0003      	movs	r3, r0
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a72:	e01c      	b.n	8005aae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a74:	4b28      	ldr	r3, [pc, #160]	@ (8005b18 <UART_SetConfig+0x52c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d002      	beq.n	8005a84 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a7e:	4b27      	ldr	r3, [pc, #156]	@ (8005b1c <UART_SetConfig+0x530>)
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a82:	e014      	b.n	8005aae <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b26      	ldr	r3, [pc, #152]	@ (8005b20 <UART_SetConfig+0x534>)
 8005a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a88:	e011      	b.n	8005aae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8a:	f7fe f8c1 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a92:	e00c      	b.n	8005aae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a94:	2380      	movs	r3, #128	@ 0x80
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a9a:	e008      	b.n	8005aae <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005aa0:	231a      	movs	r3, #26
 8005aa2:	2218      	movs	r2, #24
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
        break;
 8005aac:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d020      	beq.n	8005af6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	085a      	lsrs	r2, r3, #1
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	18d2      	adds	r2, r2, r3
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	0019      	movs	r1, r3
 8005ac4:	0010      	movs	r0, r2
 8005ac6:	f7fa fb29 	bl	800011c <__udivsi3>
 8005aca:	0003      	movs	r3, r0
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	2b0f      	cmp	r3, #15
 8005ad2:	d90a      	bls.n	8005aea <UART_SetConfig+0x4fe>
 8005ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad6:	2380      	movs	r3, #128	@ 0x80
 8005ad8:	025b      	lsls	r3, r3, #9
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d205      	bcs.n	8005aea <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005aea:	231a      	movs	r3, #26
 8005aec:	2218      	movs	r2, #24
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	19db      	adds	r3, r3, r7
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2200      	movs	r2, #0
 8005afa:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2200      	movs	r2, #0
 8005b00:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b02:	231a      	movs	r3, #26
 8005b04:	2218      	movs	r2, #24
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	19db      	adds	r3, r3, r7
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b00e      	add	sp, #56	@ 0x38
 8005b12:	bdb0      	pop	{r4, r5, r7, pc}
 8005b14:	08007444 	.word	0x08007444
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	003d0900 	.word	0x003d0900
 8005b20:	00f42400 	.word	0x00f42400
 8005b24:	08007468 	.word	0x08007468

08005b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	2208      	movs	r2, #8
 8005b36:	4013      	ands	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a4a      	ldr	r2, [pc, #296]	@ (8005c6c <UART_AdvFeatureConfig+0x144>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	0019      	movs	r1, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	2201      	movs	r2, #1
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4a43      	ldr	r2, [pc, #268]	@ (8005c70 <UART_AdvFeatureConfig+0x148>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	0019      	movs	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	2202      	movs	r2, #2
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d00b      	beq.n	8005b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a3b      	ldr	r2, [pc, #236]	@ (8005c74 <UART_AdvFeatureConfig+0x14c>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	0019      	movs	r1, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4a34      	ldr	r2, [pc, #208]	@ (8005c78 <UART_AdvFeatureConfig+0x150>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	2210      	movs	r2, #16
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c7c <UART_AdvFeatureConfig+0x154>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	2220      	movs	r2, #32
 8005be0:	4013      	ands	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	4a25      	ldr	r2, [pc, #148]	@ (8005c80 <UART_AdvFeatureConfig+0x158>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	0019      	movs	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	2240      	movs	r2, #64	@ 0x40
 8005c02:	4013      	ands	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <UART_AdvFeatureConfig+0x15c>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	0019      	movs	r1, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c22:	2380      	movs	r3, #128	@ 0x80
 8005c24:	035b      	lsls	r3, r3, #13
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d10b      	bne.n	8005c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <UART_AdvFeatureConfig+0x160>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	0019      	movs	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	2280      	movs	r2, #128	@ 0x80
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4a0e      	ldr	r2, [pc, #56]	@ (8005c8c <UART_AdvFeatureConfig+0x164>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	0019      	movs	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }
}
 8005c64:	46c0      	nop			@ (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	ffff7fff 	.word	0xffff7fff
 8005c70:	fffdffff 	.word	0xfffdffff
 8005c74:	fffeffff 	.word	0xfffeffff
 8005c78:	fffbffff 	.word	0xfffbffff
 8005c7c:	ffffefff 	.word	0xffffefff
 8005c80:	ffffdfff 	.word	0xffffdfff
 8005c84:	ffefffff 	.word	0xffefffff
 8005c88:	ff9fffff 	.word	0xff9fffff
 8005c8c:	fff7ffff 	.word	0xfff7ffff

08005c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b092      	sub	sp, #72	@ 0x48
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2284      	movs	r2, #132	@ 0x84
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca0:	f7fc f942 	bl	8001f28 <HAL_GetTick>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2208      	movs	r2, #8
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d12c      	bne.n	8005d10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb8:	2280      	movs	r2, #128	@ 0x80
 8005cba:	0391      	lsls	r1, r2, #14
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4a46      	ldr	r2, [pc, #280]	@ (8005dd8 <UART_CheckIdleState+0x148>)
 8005cc0:	9200      	str	r2, [sp, #0]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f000 f88c 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8005cc8:	1e03      	subs	r3, r0, #0
 8005cca:	d021      	beq.n	8005d10 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	f383 8810 	msr	PRIMASK, r3
}
 8005ce0:	46c0      	nop			@ (mov r8, r8)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2180      	movs	r1, #128	@ 0x80
 8005cee:	438a      	bics	r2, r1
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	f383 8810 	msr	PRIMASK, r3
}
 8005cfc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2278      	movs	r2, #120	@ 0x78
 8005d08:	2100      	movs	r1, #0
 8005d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e05f      	b.n	8005dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2204      	movs	r2, #4
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d146      	bne.n	8005dac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d20:	2280      	movs	r2, #128	@ 0x80
 8005d22:	03d1      	lsls	r1, r2, #15
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd8 <UART_CheckIdleState+0x148>)
 8005d28:	9200      	str	r2, [sp, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f000 f858 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8005d30:	1e03      	subs	r3, r0, #0
 8005d32:	d03b      	beq.n	8005dac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d34:	f3ef 8310 	mrs	r3, PRIMASK
 8005d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3e:	2301      	movs	r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4921      	ldr	r1, [pc, #132]	@ (8005ddc <UART_CheckIdleState+0x14c>)
 8005d56:	400a      	ands	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f383 8810 	msr	PRIMASK, r3
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d66:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d70:	2301      	movs	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2101      	movs	r1, #1
 8005d88:	438a      	bics	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	f383 8810 	msr	PRIMASK, r3
}
 8005d96:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2280      	movs	r2, #128	@ 0x80
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2278      	movs	r2, #120	@ 0x78
 8005da4:	2100      	movs	r1, #0
 8005da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e011      	b.n	8005dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2280      	movs	r2, #128	@ 0x80
 8005db6:	2120      	movs	r1, #32
 8005db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2278      	movs	r2, #120	@ 0x78
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b010      	add	sp, #64	@ 0x40
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	01ffffff 	.word	0x01ffffff
 8005ddc:	fffffedf 	.word	0xfffffedf

08005de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	1dfb      	adds	r3, r7, #7
 8005dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df0:	e051      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3301      	adds	r3, #1
 8005df6:	d04e      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df8:	f7fc f896 	bl	8001f28 <HAL_GetTick>
 8005dfc:	0002      	movs	r2, r0
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e051      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b80      	cmp	r3, #128	@ 0x80
 8005e22:	d038      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b40      	cmp	r3, #64	@ 0x40
 8005e28:	d035      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2208      	movs	r2, #8
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d111      	bne.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 f900 	bl	8006048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2284      	movs	r2, #132	@ 0x84
 8005e4c:	2108      	movs	r1, #8
 8005e4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2278      	movs	r2, #120	@ 0x78
 8005e54:	2100      	movs	r1, #0
 8005e56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e02c      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	2380      	movs	r3, #128	@ 0x80
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	401a      	ands	r2, r3
 8005e68:	2380      	movs	r3, #128	@ 0x80
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d112      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2280      	movs	r2, #128	@ 0x80
 8005e76:	0112      	lsls	r2, r2, #4
 8005e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f8e3 	bl	8006048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2284      	movs	r2, #132	@ 0x84
 8005e86:	2120      	movs	r1, #32
 8005e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2278      	movs	r2, #120	@ 0x78
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	425a      	negs	r2, r3
 8005ea6:	4153      	adcs	r3, r2
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	001a      	movs	r2, r3
 8005eac:	1dfb      	adds	r3, r7, #7
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d09e      	beq.n	8005df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	b004      	add	sp, #16
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b090      	sub	sp, #64	@ 0x40
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	1dbb      	adds	r3, r7, #6
 8005ecc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1dba      	adds	r2, r7, #6
 8005ed8:	2158      	movs	r1, #88	@ 0x58
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2284      	movs	r2, #132	@ 0x84
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2280      	movs	r2, #128	@ 0x80
 8005eea:	2122      	movs	r1, #34	@ 0x22
 8005eec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d028      	beq.n	8005f48 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ff4 <UART_Start_Receive_DMA+0x134>)
 8005efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f02:	4a3d      	ldr	r2, [pc, #244]	@ (8005ff8 <UART_Start_Receive_DMA+0x138>)
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8005ffc <UART_Start_Receive_DMA+0x13c>)
 8005f0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f12:	2200      	movs	r2, #0
 8005f14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3324      	adds	r3, #36	@ 0x24
 8005f20:	0019      	movs	r1, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f26:	001a      	movs	r2, r3
 8005f28:	1dbb      	adds	r3, r7, #6
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	f7fc fdb6 	bl	8002a9c <HAL_DMA_Start_IT>
 8005f30:	1e03      	subs	r3, r0, #0
 8005f32:	d009      	beq.n	8005f48 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2284      	movs	r2, #132	@ 0x84
 8005f38:	2110      	movs	r1, #16
 8005f3a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2280      	movs	r2, #128	@ 0x80
 8005f40:	2120      	movs	r1, #32
 8005f42:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e050      	b.n	8005fea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d019      	beq.n	8005f84 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f50:	f3ef 8310 	mrs	r3, PRIMASK
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	f383 8810 	msr	PRIMASK, r3
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2180      	movs	r1, #128	@ 0x80
 8005f72:	0049      	lsls	r1, r1, #1
 8005f74:	430a      	orrs	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7e:	f383 8810 	msr	PRIMASK, r3
}
 8005f82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f84:	f3ef 8310 	mrs	r3, PRIMASK
 8005f88:	613b      	str	r3, [r7, #16]
  return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f8e:	2301      	movs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f383 8810 	msr	PRIMASK, r3
}
 8005f98:	46c0      	nop			@ (mov r8, r8)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f383 8810 	msr	PRIMASK, r3
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fba:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fbc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f383 8810 	msr	PRIMASK, r3
}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2140      	movs	r1, #64	@ 0x40
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	f383 8810 	msr	PRIMASK, r3
}
 8005fe6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b010      	add	sp, #64	@ 0x40
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	08006111 	.word	0x08006111
 8005ff8:	08006279 	.word	0x08006279
 8005ffc:	080062f7 	.word	0x080062f7

08006000 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006008:	f3ef 8310 	mrs	r3, PRIMASK
 800600c:	60bb      	str	r3, [r7, #8]
  return(result);
 800600e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	2301      	movs	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f383 8810 	msr	PRIMASK, r3
}
 800601c:	46c0      	nop			@ (mov r8, r8)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	21c0      	movs	r1, #192	@ 0xc0
 800602a:	438a      	bics	r2, r1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f383 8810 	msr	PRIMASK, r3
}
 8006038:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006040:	46c0      	nop			@ (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	b006      	add	sp, #24
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	@ 0x38
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006050:	f3ef 8310 	mrs	r3, PRIMASK
 8006054:	617b      	str	r3, [r7, #20]
  return(result);
 8006056:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	2301      	movs	r3, #1
 800605c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f383 8810 	msr	PRIMASK, r3
}
 8006064:	46c0      	nop			@ (mov r8, r8)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4926      	ldr	r1, [pc, #152]	@ (800610c <UART_EndRxTransfer+0xc4>)
 8006072:	400a      	ands	r2, r1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f383 8810 	msr	PRIMASK, r3
}
 8006080:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006082:	f3ef 8310 	mrs	r3, PRIMASK
 8006086:	623b      	str	r3, [r7, #32]
  return(result);
 8006088:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608a:	633b      	str	r3, [r7, #48]	@ 0x30
 800608c:	2301      	movs	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	f383 8810 	msr	PRIMASK, r3
}
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2101      	movs	r1, #1
 80060a4:	438a      	bics	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	f383 8810 	msr	PRIMASK, r3
}
 80060b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d118      	bne.n	80060ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060bc:	f3ef 8310 	mrs	r3, PRIMASK
 80060c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80060c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060c6:	2301      	movs	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f383 8810 	msr	PRIMASK, r3
}
 80060d0:	46c0      	nop			@ (mov r8, r8)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2110      	movs	r1, #16
 80060de:	438a      	bics	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f383 8810 	msr	PRIMASK, r3
}
 80060ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2280      	movs	r2, #128	@ 0x80
 80060f2:	2120      	movs	r1, #32
 80060f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b00e      	add	sp, #56	@ 0x38
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	fffffedf 	.word	0xfffffedf

08006110 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b094      	sub	sp, #80	@ 0x50
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2220      	movs	r2, #32
 8006126:	4013      	ands	r3, r2
 8006128:	d16f      	bne.n	800620a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800612a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800612c:	225a      	movs	r2, #90	@ 0x5a
 800612e:	2100      	movs	r1, #0
 8006130:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	617b      	str	r3, [r7, #20]
  return(result);
 8006138:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800613c:	2301      	movs	r3, #1
 800613e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f383 8810 	msr	PRIMASK, r3
}
 8006146:	46c0      	nop			@ (mov r8, r8)
 8006148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4948      	ldr	r1, [pc, #288]	@ (8006274 <UART_DMAReceiveCplt+0x164>)
 8006154:	400a      	ands	r2, r1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800615a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f383 8810 	msr	PRIMASK, r3
}
 8006162:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006164:	f3ef 8310 	mrs	r3, PRIMASK
 8006168:	623b      	str	r3, [r7, #32]
  return(result);
 800616a:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616c:	647b      	str	r3, [r7, #68]	@ 0x44
 800616e:	2301      	movs	r3, #1
 8006170:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	f383 8810 	msr	PRIMASK, r3
}
 8006178:	46c0      	nop			@ (mov r8, r8)
 800617a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2101      	movs	r1, #1
 8006186:	438a      	bics	r2, r1
 8006188:	609a      	str	r2, [r3, #8]
 800618a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	f383 8810 	msr	PRIMASK, r3
}
 8006194:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006196:	f3ef 8310 	mrs	r3, PRIMASK
 800619a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	643b      	str	r3, [r7, #64]	@ 0x40
 80061a0:	2301      	movs	r3, #1
 80061a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	f383 8810 	msr	PRIMASK, r3
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2140      	movs	r1, #64	@ 0x40
 80061b8:	438a      	bics	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	f383 8810 	msr	PRIMASK, r3
}
 80061c6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ca:	2280      	movs	r2, #128	@ 0x80
 80061cc:	2120      	movs	r1, #32
 80061ce:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d118      	bne.n	800620a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d8:	f3ef 8310 	mrs	r3, PRIMASK
 80061dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80061de:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e2:	2301      	movs	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f383 8810 	msr	PRIMASK, r3
}
 80061ec:	46c0      	nop			@ (mov r8, r8)
 80061ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2110      	movs	r1, #16
 80061fa:	438a      	bics	r2, r1
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f383 8810 	msr	PRIMASK, r3
}
 8006208:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800620a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620c:	2200      	movs	r2, #0
 800620e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006214:	2b01      	cmp	r3, #1
 8006216:	d124      	bne.n	8006262 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8006218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800621a:	225a      	movs	r2, #90	@ 0x5a
 800621c:	2100      	movs	r1, #0
 800621e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	213a      	movs	r1, #58	@ 0x3a
 8006228:	187b      	adds	r3, r7, r1
 800622a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 800622c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800622e:	2258      	movs	r2, #88	@ 0x58
 8006230:	5a9b      	ldrh	r3, [r3, r2]
 8006232:	187a      	adds	r2, r7, r1
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d204      	bcs.n	8006244 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800623a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623c:	187a      	adds	r2, r7, r1
 800623e:	215a      	movs	r1, #90	@ 0x5a
 8006240:	8812      	ldrh	r2, [r2, #0]
 8006242:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006246:	2258      	movs	r2, #88	@ 0x58
 8006248:	5a9a      	ldrh	r2, [r3, r2]
 800624a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800624c:	215a      	movs	r1, #90	@ 0x5a
 800624e:	5a5b      	ldrh	r3, [r3, r1]
 8006250:	b29b      	uxth	r3, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	b29a      	uxth	r2, r3
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	0011      	movs	r1, r2
 800625a:	0018      	movs	r0, r3
 800625c:	f7ff f9ba 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006260:	e003      	b.n	800626a <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8006262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006264:	0018      	movs	r0, r3
 8006266:	f7fa fbd9 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	46bd      	mov	sp, r7
 800626e:	b014      	add	sp, #80	@ 0x50
 8006270:	bd80      	pop	{r7, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	fffffeff 	.word	0xfffffeff

08006278 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006290:	2b01      	cmp	r3, #1
 8006292:	d128      	bne.n	80062e6 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2258      	movs	r2, #88	@ 0x58
 8006298:	5a9b      	ldrh	r3, [r3, r2]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	b299      	uxth	r1, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	225a      	movs	r2, #90	@ 0x5a
 80062a2:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	210a      	movs	r1, #10
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2258      	movs	r2, #88	@ 0x58
 80062b4:	5a9b      	ldrh	r3, [r3, r2]
 80062b6:	187a      	adds	r2, r7, r1
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d804      	bhi.n	80062c8 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	187a      	adds	r2, r7, r1
 80062c2:	215a      	movs	r1, #90	@ 0x5a
 80062c4:	8812      	ldrh	r2, [r2, #0]
 80062c6:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2258      	movs	r2, #88	@ 0x58
 80062cc:	5a9a      	ldrh	r2, [r3, r2]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	215a      	movs	r1, #90	@ 0x5a
 80062d2:	5a5b      	ldrh	r3, [r3, r1]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f7ff f978 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062e4:	e003      	b.n	80062ee <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f7ff f963 	bl	80055b4 <HAL_UART_RxHalfCpltCallback>
}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b004      	add	sp, #16
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006308:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2280      	movs	r2, #128	@ 0x80
 800630e:	589b      	ldr	r3, [r3, r2]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2280      	movs	r2, #128	@ 0x80
 800631a:	4013      	ands	r3, r2
 800631c:	2b80      	cmp	r3, #128	@ 0x80
 800631e:	d10a      	bne.n	8006336 <UART_DMAError+0x40>
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b21      	cmp	r3, #33	@ 0x21
 8006324:	d107      	bne.n	8006336 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2252      	movs	r2, #82	@ 0x52
 800632a:	2100      	movs	r1, #0
 800632c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	0018      	movs	r0, r3
 8006332:	f7ff fe65 	bl	8006000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2240      	movs	r2, #64	@ 0x40
 800633e:	4013      	ands	r3, r2
 8006340:	2b40      	cmp	r3, #64	@ 0x40
 8006342:	d10a      	bne.n	800635a <UART_DMAError+0x64>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b22      	cmp	r3, #34	@ 0x22
 8006348:	d107      	bne.n	800635a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	225a      	movs	r2, #90	@ 0x5a
 800634e:	2100      	movs	r1, #0
 8006350:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	0018      	movs	r0, r3
 8006356:	f7ff fe77 	bl	8006048 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2284      	movs	r2, #132	@ 0x84
 800635e:	589b      	ldr	r3, [r3, r2]
 8006360:	2210      	movs	r2, #16
 8006362:	431a      	orrs	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2184      	movs	r1, #132	@ 0x84
 8006368:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	0018      	movs	r0, r3
 800636e:	f7ff f929 	bl	80055c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	46bd      	mov	sp, r7
 8006376:	b006      	add	sp, #24
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	225a      	movs	r2, #90	@ 0x5a
 800638c:	2100      	movs	r1, #0
 800638e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	0018      	movs	r0, r3
 8006394:	f7ff f916 	bl	80055c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006398:	46c0      	nop			@ (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a8:	f3ef 8310 	mrs	r3, PRIMASK
 80063ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	2301      	movs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f383 8810 	msr	PRIMASK, r3
}
 80063bc:	46c0      	nop			@ (mov r8, r8)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2140      	movs	r1, #64	@ 0x40
 80063ca:	438a      	bics	r2, r1
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f383 8810 	msr	PRIMASK, r3
}
 80063d8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff f8db 	bl	80055a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b006      	add	sp, #24
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b002      	add	sp, #8
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <std>:
 8006408:	2300      	movs	r3, #0
 800640a:	b510      	push	{r4, lr}
 800640c:	0004      	movs	r4, r0
 800640e:	6003      	str	r3, [r0, #0]
 8006410:	6043      	str	r3, [r0, #4]
 8006412:	6083      	str	r3, [r0, #8]
 8006414:	8181      	strh	r1, [r0, #12]
 8006416:	6643      	str	r3, [r0, #100]	@ 0x64
 8006418:	81c2      	strh	r2, [r0, #14]
 800641a:	6103      	str	r3, [r0, #16]
 800641c:	6143      	str	r3, [r0, #20]
 800641e:	6183      	str	r3, [r0, #24]
 8006420:	0019      	movs	r1, r3
 8006422:	2208      	movs	r2, #8
 8006424:	305c      	adds	r0, #92	@ 0x5c
 8006426:	f000 fa0f 	bl	8006848 <memset>
 800642a:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <std+0x50>)
 800642c:	6224      	str	r4, [r4, #32]
 800642e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <std+0x54>)
 8006432:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <std+0x58>)
 8006436:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <std+0x5c>)
 800643a:	6323      	str	r3, [r4, #48]	@ 0x30
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <std+0x60>)
 800643e:	429c      	cmp	r4, r3
 8006440:	d005      	beq.n	800644e <std+0x46>
 8006442:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <std+0x64>)
 8006444:	429c      	cmp	r4, r3
 8006446:	d002      	beq.n	800644e <std+0x46>
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <std+0x68>)
 800644a:	429c      	cmp	r4, r3
 800644c:	d103      	bne.n	8006456 <std+0x4e>
 800644e:	0020      	movs	r0, r4
 8006450:	3058      	adds	r0, #88	@ 0x58
 8006452:	f000 fa79 	bl	8006948 <__retarget_lock_init_recursive>
 8006456:	bd10      	pop	{r4, pc}
 8006458:	08006671 	.word	0x08006671
 800645c:	08006699 	.word	0x08006699
 8006460:	080066d1 	.word	0x080066d1
 8006464:	080066fd 	.word	0x080066fd
 8006468:	20000460 	.word	0x20000460
 800646c:	200004c8 	.word	0x200004c8
 8006470:	20000530 	.word	0x20000530

08006474 <stdio_exit_handler>:
 8006474:	b510      	push	{r4, lr}
 8006476:	4a03      	ldr	r2, [pc, #12]	@ (8006484 <stdio_exit_handler+0x10>)
 8006478:	4903      	ldr	r1, [pc, #12]	@ (8006488 <stdio_exit_handler+0x14>)
 800647a:	4804      	ldr	r0, [pc, #16]	@ (800648c <stdio_exit_handler+0x18>)
 800647c:	f000 f86c 	bl	8006558 <_fwalk_sglue>
 8006480:	bd10      	pop	{r4, pc}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	20000010 	.word	0x20000010
 8006488:	080071d9 	.word	0x080071d9
 800648c:	20000020 	.word	0x20000020

08006490 <cleanup_stdio>:
 8006490:	6841      	ldr	r1, [r0, #4]
 8006492:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <cleanup_stdio+0x30>)
 8006494:	b510      	push	{r4, lr}
 8006496:	0004      	movs	r4, r0
 8006498:	4299      	cmp	r1, r3
 800649a:	d001      	beq.n	80064a0 <cleanup_stdio+0x10>
 800649c:	f000 fe9c 	bl	80071d8 <_fflush_r>
 80064a0:	68a1      	ldr	r1, [r4, #8]
 80064a2:	4b08      	ldr	r3, [pc, #32]	@ (80064c4 <cleanup_stdio+0x34>)
 80064a4:	4299      	cmp	r1, r3
 80064a6:	d002      	beq.n	80064ae <cleanup_stdio+0x1e>
 80064a8:	0020      	movs	r0, r4
 80064aa:	f000 fe95 	bl	80071d8 <_fflush_r>
 80064ae:	68e1      	ldr	r1, [r4, #12]
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <cleanup_stdio+0x38>)
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d002      	beq.n	80064bc <cleanup_stdio+0x2c>
 80064b6:	0020      	movs	r0, r4
 80064b8:	f000 fe8e 	bl	80071d8 <_fflush_r>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	20000460 	.word	0x20000460
 80064c4:	200004c8 	.word	0x200004c8
 80064c8:	20000530 	.word	0x20000530

080064cc <global_stdio_init.part.0>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	4b09      	ldr	r3, [pc, #36]	@ (80064f4 <global_stdio_init.part.0+0x28>)
 80064d0:	4a09      	ldr	r2, [pc, #36]	@ (80064f8 <global_stdio_init.part.0+0x2c>)
 80064d2:	2104      	movs	r1, #4
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	4809      	ldr	r0, [pc, #36]	@ (80064fc <global_stdio_init.part.0+0x30>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f7ff ff95 	bl	8006408 <std>
 80064de:	2201      	movs	r2, #1
 80064e0:	2109      	movs	r1, #9
 80064e2:	4807      	ldr	r0, [pc, #28]	@ (8006500 <global_stdio_init.part.0+0x34>)
 80064e4:	f7ff ff90 	bl	8006408 <std>
 80064e8:	2202      	movs	r2, #2
 80064ea:	2112      	movs	r1, #18
 80064ec:	4805      	ldr	r0, [pc, #20]	@ (8006504 <global_stdio_init.part.0+0x38>)
 80064ee:	f7ff ff8b 	bl	8006408 <std>
 80064f2:	bd10      	pop	{r4, pc}
 80064f4:	20000598 	.word	0x20000598
 80064f8:	08006475 	.word	0x08006475
 80064fc:	20000460 	.word	0x20000460
 8006500:	200004c8 	.word	0x200004c8
 8006504:	20000530 	.word	0x20000530

08006508 <__sfp_lock_acquire>:
 8006508:	b510      	push	{r4, lr}
 800650a:	4802      	ldr	r0, [pc, #8]	@ (8006514 <__sfp_lock_acquire+0xc>)
 800650c:	f000 fa1d 	bl	800694a <__retarget_lock_acquire_recursive>
 8006510:	bd10      	pop	{r4, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	200005a1 	.word	0x200005a1

08006518 <__sfp_lock_release>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4802      	ldr	r0, [pc, #8]	@ (8006524 <__sfp_lock_release+0xc>)
 800651c:	f000 fa16 	bl	800694c <__retarget_lock_release_recursive>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	200005a1 	.word	0x200005a1

08006528 <__sinit>:
 8006528:	b510      	push	{r4, lr}
 800652a:	0004      	movs	r4, r0
 800652c:	f7ff ffec 	bl	8006508 <__sfp_lock_acquire>
 8006530:	6a23      	ldr	r3, [r4, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <__sinit+0x14>
 8006536:	f7ff ffef 	bl	8006518 <__sfp_lock_release>
 800653a:	bd10      	pop	{r4, pc}
 800653c:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <__sinit+0x28>)
 800653e:	6223      	str	r3, [r4, #32]
 8006540:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <__sinit+0x2c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f6      	bne.n	8006536 <__sinit+0xe>
 8006548:	f7ff ffc0 	bl	80064cc <global_stdio_init.part.0>
 800654c:	e7f3      	b.n	8006536 <__sinit+0xe>
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	08006491 	.word	0x08006491
 8006554:	20000598 	.word	0x20000598

08006558 <_fwalk_sglue>:
 8006558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800655a:	0014      	movs	r4, r2
 800655c:	2600      	movs	r6, #0
 800655e:	9000      	str	r0, [sp, #0]
 8006560:	9101      	str	r1, [sp, #4]
 8006562:	68a5      	ldr	r5, [r4, #8]
 8006564:	6867      	ldr	r7, [r4, #4]
 8006566:	3f01      	subs	r7, #1
 8006568:	d504      	bpl.n	8006574 <_fwalk_sglue+0x1c>
 800656a:	6824      	ldr	r4, [r4, #0]
 800656c:	2c00      	cmp	r4, #0
 800656e:	d1f8      	bne.n	8006562 <_fwalk_sglue+0xa>
 8006570:	0030      	movs	r0, r6
 8006572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006574:	89ab      	ldrh	r3, [r5, #12]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d908      	bls.n	800658c <_fwalk_sglue+0x34>
 800657a:	220e      	movs	r2, #14
 800657c:	5eab      	ldrsh	r3, [r5, r2]
 800657e:	3301      	adds	r3, #1
 8006580:	d004      	beq.n	800658c <_fwalk_sglue+0x34>
 8006582:	0029      	movs	r1, r5
 8006584:	9800      	ldr	r0, [sp, #0]
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	4798      	blx	r3
 800658a:	4306      	orrs	r6, r0
 800658c:	3568      	adds	r5, #104	@ 0x68
 800658e:	e7ea      	b.n	8006566 <_fwalk_sglue+0xe>

08006590 <iprintf>:
 8006590:	b40f      	push	{r0, r1, r2, r3}
 8006592:	b507      	push	{r0, r1, r2, lr}
 8006594:	4905      	ldr	r1, [pc, #20]	@ (80065ac <iprintf+0x1c>)
 8006596:	ab04      	add	r3, sp, #16
 8006598:	6808      	ldr	r0, [r1, #0]
 800659a:	cb04      	ldmia	r3!, {r2}
 800659c:	6881      	ldr	r1, [r0, #8]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	f000 fafa 	bl	8006b98 <_vfiprintf_r>
 80065a4:	b003      	add	sp, #12
 80065a6:	bc08      	pop	{r3}
 80065a8:	b004      	add	sp, #16
 80065aa:	4718      	bx	r3
 80065ac:	2000001c 	.word	0x2000001c

080065b0 <_puts_r>:
 80065b0:	6a03      	ldr	r3, [r0, #32]
 80065b2:	b570      	push	{r4, r5, r6, lr}
 80065b4:	0005      	movs	r5, r0
 80065b6:	000e      	movs	r6, r1
 80065b8:	6884      	ldr	r4, [r0, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <_puts_r+0x12>
 80065be:	f7ff ffb3 	bl	8006528 <__sinit>
 80065c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065c4:	07db      	lsls	r3, r3, #31
 80065c6:	d405      	bmi.n	80065d4 <_puts_r+0x24>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	059b      	lsls	r3, r3, #22
 80065cc:	d402      	bmi.n	80065d4 <_puts_r+0x24>
 80065ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d0:	f000 f9bb 	bl	800694a <__retarget_lock_acquire_recursive>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	071b      	lsls	r3, r3, #28
 80065d8:	d502      	bpl.n	80065e0 <_puts_r+0x30>
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11f      	bne.n	8006620 <_puts_r+0x70>
 80065e0:	0021      	movs	r1, r4
 80065e2:	0028      	movs	r0, r5
 80065e4:	f000 f8d2 	bl	800678c <__swsetup_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d019      	beq.n	8006620 <_puts_r+0x70>
 80065ec:	2501      	movs	r5, #1
 80065ee:	426d      	negs	r5, r5
 80065f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065f2:	07db      	lsls	r3, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_puts_r+0x52>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	059b      	lsls	r3, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_puts_r+0x52>
 80065fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065fe:	f000 f9a5 	bl	800694c <__retarget_lock_release_recursive>
 8006602:	0028      	movs	r0, r5
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	3601      	adds	r6, #1
 8006608:	60a3      	str	r3, [r4, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	da04      	bge.n	8006618 <_puts_r+0x68>
 800660e:	69a2      	ldr	r2, [r4, #24]
 8006610:	429a      	cmp	r2, r3
 8006612:	dc16      	bgt.n	8006642 <_puts_r+0x92>
 8006614:	290a      	cmp	r1, #10
 8006616:	d014      	beq.n	8006642 <_puts_r+0x92>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	6022      	str	r2, [r4, #0]
 800661e:	7019      	strb	r1, [r3, #0]
 8006620:	68a3      	ldr	r3, [r4, #8]
 8006622:	7831      	ldrb	r1, [r6, #0]
 8006624:	3b01      	subs	r3, #1
 8006626:	2900      	cmp	r1, #0
 8006628:	d1ed      	bne.n	8006606 <_puts_r+0x56>
 800662a:	60a3      	str	r3, [r4, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	da0f      	bge.n	8006650 <_puts_r+0xa0>
 8006630:	0022      	movs	r2, r4
 8006632:	0028      	movs	r0, r5
 8006634:	310a      	adds	r1, #10
 8006636:	f000 f867 	bl	8006708 <__swbuf_r>
 800663a:	3001      	adds	r0, #1
 800663c:	d0d6      	beq.n	80065ec <_puts_r+0x3c>
 800663e:	250a      	movs	r5, #10
 8006640:	e7d6      	b.n	80065f0 <_puts_r+0x40>
 8006642:	0022      	movs	r2, r4
 8006644:	0028      	movs	r0, r5
 8006646:	f000 f85f 	bl	8006708 <__swbuf_r>
 800664a:	3001      	adds	r0, #1
 800664c:	d1e8      	bne.n	8006620 <_puts_r+0x70>
 800664e:	e7cd      	b.n	80065ec <_puts_r+0x3c>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	220a      	movs	r2, #10
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e7f0      	b.n	800663e <_puts_r+0x8e>

0800665c <puts>:
 800665c:	b510      	push	{r4, lr}
 800665e:	4b03      	ldr	r3, [pc, #12]	@ (800666c <puts+0x10>)
 8006660:	0001      	movs	r1, r0
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	f7ff ffa4 	bl	80065b0 <_puts_r>
 8006668:	bd10      	pop	{r4, pc}
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	2000001c 	.word	0x2000001c

08006670 <__sread>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	000c      	movs	r4, r1
 8006674:	250e      	movs	r5, #14
 8006676:	5f49      	ldrsh	r1, [r1, r5]
 8006678:	f000 f914 	bl	80068a4 <_read_r>
 800667c:	2800      	cmp	r0, #0
 800667e:	db03      	blt.n	8006688 <__sread+0x18>
 8006680:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006682:	181b      	adds	r3, r3, r0
 8006684:	6563      	str	r3, [r4, #84]	@ 0x54
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	4a02      	ldr	r2, [pc, #8]	@ (8006694 <__sread+0x24>)
 800668c:	4013      	ands	r3, r2
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	e7f9      	b.n	8006686 <__sread+0x16>
 8006692:	46c0      	nop			@ (mov r8, r8)
 8006694:	ffffefff 	.word	0xffffefff

08006698 <__swrite>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	001f      	movs	r7, r3
 800669c:	898b      	ldrh	r3, [r1, #12]
 800669e:	0005      	movs	r5, r0
 80066a0:	000c      	movs	r4, r1
 80066a2:	0016      	movs	r6, r2
 80066a4:	05db      	lsls	r3, r3, #23
 80066a6:	d505      	bpl.n	80066b4 <__swrite+0x1c>
 80066a8:	230e      	movs	r3, #14
 80066aa:	5ec9      	ldrsh	r1, [r1, r3]
 80066ac:	2200      	movs	r2, #0
 80066ae:	2302      	movs	r3, #2
 80066b0:	f000 f8e4 	bl	800687c <_lseek_r>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	4a05      	ldr	r2, [pc, #20]	@ (80066cc <__swrite+0x34>)
 80066b8:	0028      	movs	r0, r5
 80066ba:	4013      	ands	r3, r2
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	0032      	movs	r2, r6
 80066c0:	230e      	movs	r3, #14
 80066c2:	5ee1      	ldrsh	r1, [r4, r3]
 80066c4:	003b      	movs	r3, r7
 80066c6:	f000 f901 	bl	80068cc <_write_r>
 80066ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066cc:	ffffefff 	.word	0xffffefff

080066d0 <__sseek>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	000c      	movs	r4, r1
 80066d4:	250e      	movs	r5, #14
 80066d6:	5f49      	ldrsh	r1, [r1, r5]
 80066d8:	f000 f8d0 	bl	800687c <_lseek_r>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	1c42      	adds	r2, r0, #1
 80066e0:	d103      	bne.n	80066ea <__sseek+0x1a>
 80066e2:	4a05      	ldr	r2, [pc, #20]	@ (80066f8 <__sseek+0x28>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	2280      	movs	r2, #128	@ 0x80
 80066ec:	0152      	lsls	r2, r2, #5
 80066ee:	4313      	orrs	r3, r2
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066f4:	e7f8      	b.n	80066e8 <__sseek+0x18>
 80066f6:	46c0      	nop			@ (mov r8, r8)
 80066f8:	ffffefff 	.word	0xffffefff

080066fc <__sclose>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	230e      	movs	r3, #14
 8006700:	5ec9      	ldrsh	r1, [r1, r3]
 8006702:	f000 f8a9 	bl	8006858 <_close_r>
 8006706:	bd10      	pop	{r4, pc}

08006708 <__swbuf_r>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	0006      	movs	r6, r0
 800670c:	000d      	movs	r5, r1
 800670e:	0014      	movs	r4, r2
 8006710:	2800      	cmp	r0, #0
 8006712:	d004      	beq.n	800671e <__swbuf_r+0x16>
 8006714:	6a03      	ldr	r3, [r0, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <__swbuf_r+0x16>
 800671a:	f7ff ff05 	bl	8006528 <__sinit>
 800671e:	69a3      	ldr	r3, [r4, #24]
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	071b      	lsls	r3, r3, #28
 8006726:	d502      	bpl.n	800672e <__swbuf_r+0x26>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <__swbuf_r+0x3a>
 800672e:	0021      	movs	r1, r4
 8006730:	0030      	movs	r0, r6
 8006732:	f000 f82b 	bl	800678c <__swsetup_r>
 8006736:	2800      	cmp	r0, #0
 8006738:	d003      	beq.n	8006742 <__swbuf_r+0x3a>
 800673a:	2501      	movs	r5, #1
 800673c:	426d      	negs	r5, r5
 800673e:	0028      	movs	r0, r5
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	b2ef      	uxtb	r7, r5
 8006748:	1ac0      	subs	r0, r0, r3
 800674a:	6963      	ldr	r3, [r4, #20]
 800674c:	b2ed      	uxtb	r5, r5
 800674e:	4283      	cmp	r3, r0
 8006750:	dc05      	bgt.n	800675e <__swbuf_r+0x56>
 8006752:	0021      	movs	r1, r4
 8006754:	0030      	movs	r0, r6
 8006756:	f000 fd3f 	bl	80071d8 <_fflush_r>
 800675a:	2800      	cmp	r0, #0
 800675c:	d1ed      	bne.n	800673a <__swbuf_r+0x32>
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	3001      	adds	r0, #1
 8006762:	3b01      	subs	r3, #1
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	6022      	str	r2, [r4, #0]
 800676c:	701f      	strb	r7, [r3, #0]
 800676e:	6963      	ldr	r3, [r4, #20]
 8006770:	4283      	cmp	r3, r0
 8006772:	d004      	beq.n	800677e <__swbuf_r+0x76>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	07db      	lsls	r3, r3, #31
 8006778:	d5e1      	bpl.n	800673e <__swbuf_r+0x36>
 800677a:	2d0a      	cmp	r5, #10
 800677c:	d1df      	bne.n	800673e <__swbuf_r+0x36>
 800677e:	0021      	movs	r1, r4
 8006780:	0030      	movs	r0, r6
 8006782:	f000 fd29 	bl	80071d8 <_fflush_r>
 8006786:	2800      	cmp	r0, #0
 8006788:	d0d9      	beq.n	800673e <__swbuf_r+0x36>
 800678a:	e7d6      	b.n	800673a <__swbuf_r+0x32>

0800678c <__swsetup_r>:
 800678c:	4b2d      	ldr	r3, [pc, #180]	@ (8006844 <__swsetup_r+0xb8>)
 800678e:	b570      	push	{r4, r5, r6, lr}
 8006790:	0005      	movs	r5, r0
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	000c      	movs	r4, r1
 8006796:	2800      	cmp	r0, #0
 8006798:	d004      	beq.n	80067a4 <__swsetup_r+0x18>
 800679a:	6a03      	ldr	r3, [r0, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <__swsetup_r+0x18>
 80067a0:	f7ff fec2 	bl	8006528 <__sinit>
 80067a4:	230c      	movs	r3, #12
 80067a6:	5ee2      	ldrsh	r2, [r4, r3]
 80067a8:	0713      	lsls	r3, r2, #28
 80067aa:	d423      	bmi.n	80067f4 <__swsetup_r+0x68>
 80067ac:	06d3      	lsls	r3, r2, #27
 80067ae:	d407      	bmi.n	80067c0 <__swsetup_r+0x34>
 80067b0:	2309      	movs	r3, #9
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	2340      	movs	r3, #64	@ 0x40
 80067b6:	2001      	movs	r0, #1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	4240      	negs	r0, r0
 80067be:	e03a      	b.n	8006836 <__swsetup_r+0xaa>
 80067c0:	0752      	lsls	r2, r2, #29
 80067c2:	d513      	bpl.n	80067ec <__swsetup_r+0x60>
 80067c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c6:	2900      	cmp	r1, #0
 80067c8:	d008      	beq.n	80067dc <__swsetup_r+0x50>
 80067ca:	0023      	movs	r3, r4
 80067cc:	3344      	adds	r3, #68	@ 0x44
 80067ce:	4299      	cmp	r1, r3
 80067d0:	d002      	beq.n	80067d8 <__swsetup_r+0x4c>
 80067d2:	0028      	movs	r0, r5
 80067d4:	f000 f8bc 	bl	8006950 <_free_r>
 80067d8:	2300      	movs	r3, #0
 80067da:	6363      	str	r3, [r4, #52]	@ 0x34
 80067dc:	2224      	movs	r2, #36	@ 0x24
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	4393      	bics	r3, r2
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	2300      	movs	r3, #0
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	2308      	movs	r3, #8
 80067ee:	89a2      	ldrh	r2, [r4, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <__swsetup_r+0x86>
 80067fa:	21a0      	movs	r1, #160	@ 0xa0
 80067fc:	2280      	movs	r2, #128	@ 0x80
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	0089      	lsls	r1, r1, #2
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	400b      	ands	r3, r1
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <__swsetup_r+0x86>
 800680a:	0021      	movs	r1, r4
 800680c:	0028      	movs	r0, r5
 800680e:	f000 fd39 	bl	8007284 <__smakebuf_r>
 8006812:	230c      	movs	r3, #12
 8006814:	5ee2      	ldrsh	r2, [r4, r3]
 8006816:	2101      	movs	r1, #1
 8006818:	0013      	movs	r3, r2
 800681a:	400b      	ands	r3, r1
 800681c:	420a      	tst	r2, r1
 800681e:	d00b      	beq.n	8006838 <__swsetup_r+0xac>
 8006820:	2300      	movs	r3, #0
 8006822:	60a3      	str	r3, [r4, #8]
 8006824:	6963      	ldr	r3, [r4, #20]
 8006826:	425b      	negs	r3, r3
 8006828:	61a3      	str	r3, [r4, #24]
 800682a:	2000      	movs	r0, #0
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	4283      	cmp	r3, r0
 8006830:	d101      	bne.n	8006836 <__swsetup_r+0xaa>
 8006832:	0613      	lsls	r3, r2, #24
 8006834:	d4be      	bmi.n	80067b4 <__swsetup_r+0x28>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	0791      	lsls	r1, r2, #30
 800683a:	d400      	bmi.n	800683e <__swsetup_r+0xb2>
 800683c:	6963      	ldr	r3, [r4, #20]
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	e7f3      	b.n	800682a <__swsetup_r+0x9e>
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	2000001c 	.word	0x2000001c

08006848 <memset>:
 8006848:	0003      	movs	r3, r0
 800684a:	1882      	adds	r2, r0, r2
 800684c:	4293      	cmp	r3, r2
 800684e:	d100      	bne.n	8006852 <memset+0xa>
 8006850:	4770      	bx	lr
 8006852:	7019      	strb	r1, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	e7f9      	b.n	800684c <memset+0x4>

08006858 <_close_r>:
 8006858:	2300      	movs	r3, #0
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	4d06      	ldr	r5, [pc, #24]	@ (8006878 <_close_r+0x20>)
 800685e:	0004      	movs	r4, r0
 8006860:	0008      	movs	r0, r1
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	f7fa fe79 	bl	800155a <_close>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d103      	bne.n	8006874 <_close_r+0x1c>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d000      	beq.n	8006874 <_close_r+0x1c>
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	2000059c 	.word	0x2000059c

0800687c <_lseek_r>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	0004      	movs	r4, r0
 8006880:	0008      	movs	r0, r1
 8006882:	0011      	movs	r1, r2
 8006884:	001a      	movs	r2, r3
 8006886:	2300      	movs	r3, #0
 8006888:	4d05      	ldr	r5, [pc, #20]	@ (80068a0 <_lseek_r+0x24>)
 800688a:	602b      	str	r3, [r5, #0]
 800688c:	f7fa fe86 	bl	800159c <_lseek>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d103      	bne.n	800689c <_lseek_r+0x20>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d000      	beq.n	800689c <_lseek_r+0x20>
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	bd70      	pop	{r4, r5, r6, pc}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	2000059c 	.word	0x2000059c

080068a4 <_read_r>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	0004      	movs	r4, r0
 80068a8:	0008      	movs	r0, r1
 80068aa:	0011      	movs	r1, r2
 80068ac:	001a      	movs	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	4d05      	ldr	r5, [pc, #20]	@ (80068c8 <_read_r+0x24>)
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	f7fa fe18 	bl	80014e8 <_read>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d103      	bne.n	80068c4 <_read_r+0x20>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d000      	beq.n	80068c4 <_read_r+0x20>
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	bd70      	pop	{r4, r5, r6, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	2000059c 	.word	0x2000059c

080068cc <_write_r>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	0004      	movs	r4, r0
 80068d0:	0008      	movs	r0, r1
 80068d2:	0011      	movs	r1, r2
 80068d4:	001a      	movs	r2, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	4d05      	ldr	r5, [pc, #20]	@ (80068f0 <_write_r+0x24>)
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fa fe21 	bl	8001522 <_write>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d103      	bne.n	80068ec <_write_r+0x20>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d000      	beq.n	80068ec <_write_r+0x20>
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	46c0      	nop			@ (mov r8, r8)
 80068f0:	2000059c 	.word	0x2000059c

080068f4 <__errno>:
 80068f4:	4b01      	ldr	r3, [pc, #4]	@ (80068fc <__errno+0x8>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	4770      	bx	lr
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	2000001c 	.word	0x2000001c

08006900 <__libc_init_array>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	2600      	movs	r6, #0
 8006904:	4c0c      	ldr	r4, [pc, #48]	@ (8006938 <__libc_init_array+0x38>)
 8006906:	4d0d      	ldr	r5, [pc, #52]	@ (800693c <__libc_init_array+0x3c>)
 8006908:	1b64      	subs	r4, r4, r5
 800690a:	10a4      	asrs	r4, r4, #2
 800690c:	42a6      	cmp	r6, r4
 800690e:	d109      	bne.n	8006924 <__libc_init_array+0x24>
 8006910:	2600      	movs	r6, #0
 8006912:	f000 fd3b 	bl	800738c <_init>
 8006916:	4c0a      	ldr	r4, [pc, #40]	@ (8006940 <__libc_init_array+0x40>)
 8006918:	4d0a      	ldr	r5, [pc, #40]	@ (8006944 <__libc_init_array+0x44>)
 800691a:	1b64      	subs	r4, r4, r5
 800691c:	10a4      	asrs	r4, r4, #2
 800691e:	42a6      	cmp	r6, r4
 8006920:	d105      	bne.n	800692e <__libc_init_array+0x2e>
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	00b3      	lsls	r3, r6, #2
 8006926:	58eb      	ldr	r3, [r5, r3]
 8006928:	4798      	blx	r3
 800692a:	3601      	adds	r6, #1
 800692c:	e7ee      	b.n	800690c <__libc_init_array+0xc>
 800692e:	00b3      	lsls	r3, r6, #2
 8006930:	58eb      	ldr	r3, [r5, r3]
 8006932:	4798      	blx	r3
 8006934:	3601      	adds	r6, #1
 8006936:	e7f2      	b.n	800691e <__libc_init_array+0x1e>
 8006938:	080074c8 	.word	0x080074c8
 800693c:	080074c8 	.word	0x080074c8
 8006940:	080074cc 	.word	0x080074cc
 8006944:	080074c8 	.word	0x080074c8

08006948 <__retarget_lock_init_recursive>:
 8006948:	4770      	bx	lr

0800694a <__retarget_lock_acquire_recursive>:
 800694a:	4770      	bx	lr

0800694c <__retarget_lock_release_recursive>:
 800694c:	4770      	bx	lr
	...

08006950 <_free_r>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	0005      	movs	r5, r0
 8006954:	1e0c      	subs	r4, r1, #0
 8006956:	d010      	beq.n	800697a <_free_r+0x2a>
 8006958:	3c04      	subs	r4, #4
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da00      	bge.n	8006962 <_free_r+0x12>
 8006960:	18e4      	adds	r4, r4, r3
 8006962:	0028      	movs	r0, r5
 8006964:	f000 f8e0 	bl	8006b28 <__malloc_lock>
 8006968:	4a1d      	ldr	r2, [pc, #116]	@ (80069e0 <_free_r+0x90>)
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <_free_r+0x2c>
 8006970:	6063      	str	r3, [r4, #4]
 8006972:	6014      	str	r4, [r2, #0]
 8006974:	0028      	movs	r0, r5
 8006976:	f000 f8df 	bl	8006b38 <__malloc_unlock>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	42a3      	cmp	r3, r4
 800697e:	d908      	bls.n	8006992 <_free_r+0x42>
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	1821      	adds	r1, r4, r0
 8006984:	428b      	cmp	r3, r1
 8006986:	d1f3      	bne.n	8006970 <_free_r+0x20>
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	1809      	adds	r1, r1, r0
 800698e:	6021      	str	r1, [r4, #0]
 8006990:	e7ee      	b.n	8006970 <_free_r+0x20>
 8006992:	001a      	movs	r2, r3
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <_free_r+0x4e>
 800699a:	42a3      	cmp	r3, r4
 800699c:	d9f9      	bls.n	8006992 <_free_r+0x42>
 800699e:	6811      	ldr	r1, [r2, #0]
 80069a0:	1850      	adds	r0, r2, r1
 80069a2:	42a0      	cmp	r0, r4
 80069a4:	d10b      	bne.n	80069be <_free_r+0x6e>
 80069a6:	6820      	ldr	r0, [r4, #0]
 80069a8:	1809      	adds	r1, r1, r0
 80069aa:	1850      	adds	r0, r2, r1
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	4283      	cmp	r3, r0
 80069b0:	d1e0      	bne.n	8006974 <_free_r+0x24>
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	1841      	adds	r1, r0, r1
 80069b8:	6011      	str	r1, [r2, #0]
 80069ba:	6053      	str	r3, [r2, #4]
 80069bc:	e7da      	b.n	8006974 <_free_r+0x24>
 80069be:	42a0      	cmp	r0, r4
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x78>
 80069c2:	230c      	movs	r3, #12
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7d5      	b.n	8006974 <_free_r+0x24>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428b      	cmp	r3, r1
 80069ce:	d103      	bne.n	80069d8 <_free_r+0x88>
 80069d0:	6819      	ldr	r1, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	1809      	adds	r1, r1, r0
 80069d6:	6021      	str	r1, [r4, #0]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	6054      	str	r4, [r2, #4]
 80069dc:	e7ca      	b.n	8006974 <_free_r+0x24>
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	200005a8 	.word	0x200005a8

080069e4 <sbrk_aligned>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006a24 <sbrk_aligned+0x40>)
 80069e8:	000d      	movs	r5, r1
 80069ea:	6831      	ldr	r1, [r6, #0]
 80069ec:	0004      	movs	r4, r0
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d102      	bne.n	80069f8 <sbrk_aligned+0x14>
 80069f2:	f000 fcad 	bl	8007350 <_sbrk_r>
 80069f6:	6030      	str	r0, [r6, #0]
 80069f8:	0029      	movs	r1, r5
 80069fa:	0020      	movs	r0, r4
 80069fc:	f000 fca8 	bl	8007350 <_sbrk_r>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d103      	bne.n	8006a0c <sbrk_aligned+0x28>
 8006a04:	2501      	movs	r5, #1
 8006a06:	426d      	negs	r5, r5
 8006a08:	0028      	movs	r0, r5
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	1cc5      	adds	r5, r0, #3
 8006a10:	439d      	bics	r5, r3
 8006a12:	42a8      	cmp	r0, r5
 8006a14:	d0f8      	beq.n	8006a08 <sbrk_aligned+0x24>
 8006a16:	1a29      	subs	r1, r5, r0
 8006a18:	0020      	movs	r0, r4
 8006a1a:	f000 fc99 	bl	8007350 <_sbrk_r>
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d1f2      	bne.n	8006a08 <sbrk_aligned+0x24>
 8006a22:	e7ef      	b.n	8006a04 <sbrk_aligned+0x20>
 8006a24:	200005a4 	.word	0x200005a4

08006a28 <_malloc_r>:
 8006a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	1ccb      	adds	r3, r1, #3
 8006a2e:	4393      	bics	r3, r2
 8006a30:	3308      	adds	r3, #8
 8006a32:	0005      	movs	r5, r0
 8006a34:	001f      	movs	r7, r3
 8006a36:	2b0c      	cmp	r3, #12
 8006a38:	d234      	bcs.n	8006aa4 <_malloc_r+0x7c>
 8006a3a:	270c      	movs	r7, #12
 8006a3c:	42b9      	cmp	r1, r7
 8006a3e:	d833      	bhi.n	8006aa8 <_malloc_r+0x80>
 8006a40:	0028      	movs	r0, r5
 8006a42:	f000 f871 	bl	8006b28 <__malloc_lock>
 8006a46:	4e37      	ldr	r6, [pc, #220]	@ (8006b24 <_malloc_r+0xfc>)
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	001c      	movs	r4, r3
 8006a4c:	2c00      	cmp	r4, #0
 8006a4e:	d12f      	bne.n	8006ab0 <_malloc_r+0x88>
 8006a50:	0039      	movs	r1, r7
 8006a52:	0028      	movs	r0, r5
 8006a54:	f7ff ffc6 	bl	80069e4 <sbrk_aligned>
 8006a58:	0004      	movs	r4, r0
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	d15f      	bne.n	8006b1e <_malloc_r+0xf6>
 8006a5e:	6834      	ldr	r4, [r6, #0]
 8006a60:	9400      	str	r4, [sp, #0]
 8006a62:	9b00      	ldr	r3, [sp, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d14a      	bne.n	8006afe <_malloc_r+0xd6>
 8006a68:	2c00      	cmp	r4, #0
 8006a6a:	d052      	beq.n	8006b12 <_malloc_r+0xea>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	0028      	movs	r0, r5
 8006a70:	18e3      	adds	r3, r4, r3
 8006a72:	9900      	ldr	r1, [sp, #0]
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	f000 fc6b 	bl	8007350 <_sbrk_r>
 8006a7a:	9b01      	ldr	r3, [sp, #4]
 8006a7c:	4283      	cmp	r3, r0
 8006a7e:	d148      	bne.n	8006b12 <_malloc_r+0xea>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	0028      	movs	r0, r5
 8006a84:	1aff      	subs	r7, r7, r3
 8006a86:	0039      	movs	r1, r7
 8006a88:	f7ff ffac 	bl	80069e4 <sbrk_aligned>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d040      	beq.n	8006b12 <_malloc_r+0xea>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	19db      	adds	r3, r3, r7
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	6833      	ldr	r3, [r6, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d133      	bne.n	8006b06 <_malloc_r+0xde>
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	e019      	b.n	8006ad8 <_malloc_r+0xb0>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dac9      	bge.n	8006a3c <_malloc_r+0x14>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	2000      	movs	r0, #0
 8006aae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ab0:	6821      	ldr	r1, [r4, #0]
 8006ab2:	1bc9      	subs	r1, r1, r7
 8006ab4:	d420      	bmi.n	8006af8 <_malloc_r+0xd0>
 8006ab6:	290b      	cmp	r1, #11
 8006ab8:	d90a      	bls.n	8006ad0 <_malloc_r+0xa8>
 8006aba:	19e2      	adds	r2, r4, r7
 8006abc:	6027      	str	r7, [r4, #0]
 8006abe:	42a3      	cmp	r3, r4
 8006ac0:	d104      	bne.n	8006acc <_malloc_r+0xa4>
 8006ac2:	6032      	str	r2, [r6, #0]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	6011      	str	r1, [r2, #0]
 8006ac8:	6053      	str	r3, [r2, #4]
 8006aca:	e005      	b.n	8006ad8 <_malloc_r+0xb0>
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	e7f9      	b.n	8006ac4 <_malloc_r+0x9c>
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	d10e      	bne.n	8006af4 <_malloc_r+0xcc>
 8006ad6:	6032      	str	r2, [r6, #0]
 8006ad8:	0028      	movs	r0, r5
 8006ada:	f000 f82d 	bl	8006b38 <__malloc_unlock>
 8006ade:	0020      	movs	r0, r4
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	300b      	adds	r0, #11
 8006ae4:	1d23      	adds	r3, r4, #4
 8006ae6:	4390      	bics	r0, r2
 8006ae8:	1ac2      	subs	r2, r0, r3
 8006aea:	4298      	cmp	r0, r3
 8006aec:	d0df      	beq.n	8006aae <_malloc_r+0x86>
 8006aee:	1a1b      	subs	r3, r3, r0
 8006af0:	50a3      	str	r3, [r4, r2]
 8006af2:	e7dc      	b.n	8006aae <_malloc_r+0x86>
 8006af4:	605a      	str	r2, [r3, #4]
 8006af6:	e7ef      	b.n	8006ad8 <_malloc_r+0xb0>
 8006af8:	0023      	movs	r3, r4
 8006afa:	6864      	ldr	r4, [r4, #4]
 8006afc:	e7a6      	b.n	8006a4c <_malloc_r+0x24>
 8006afe:	9c00      	ldr	r4, [sp, #0]
 8006b00:	6863      	ldr	r3, [r4, #4]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	e7ad      	b.n	8006a62 <_malloc_r+0x3a>
 8006b06:	001a      	movs	r2, r3
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	d1fb      	bne.n	8006b06 <_malloc_r+0xde>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e7da      	b.n	8006ac8 <_malloc_r+0xa0>
 8006b12:	230c      	movs	r3, #12
 8006b14:	0028      	movs	r0, r5
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	f000 f80e 	bl	8006b38 <__malloc_unlock>
 8006b1c:	e7c6      	b.n	8006aac <_malloc_r+0x84>
 8006b1e:	6007      	str	r7, [r0, #0]
 8006b20:	e7da      	b.n	8006ad8 <_malloc_r+0xb0>
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	200005a8 	.word	0x200005a8

08006b28 <__malloc_lock>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	4802      	ldr	r0, [pc, #8]	@ (8006b34 <__malloc_lock+0xc>)
 8006b2c:	f7ff ff0d 	bl	800694a <__retarget_lock_acquire_recursive>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	200005a0 	.word	0x200005a0

08006b38 <__malloc_unlock>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4802      	ldr	r0, [pc, #8]	@ (8006b44 <__malloc_unlock+0xc>)
 8006b3c:	f7ff ff06 	bl	800694c <__retarget_lock_release_recursive>
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	200005a0 	.word	0x200005a0

08006b48 <__sfputc_r>:
 8006b48:	6893      	ldr	r3, [r2, #8]
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	6093      	str	r3, [r2, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da04      	bge.n	8006b5e <__sfputc_r+0x16>
 8006b54:	6994      	ldr	r4, [r2, #24]
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	db07      	blt.n	8006b6a <__sfputc_r+0x22>
 8006b5a:	290a      	cmp	r1, #10
 8006b5c:	d005      	beq.n	8006b6a <__sfputc_r+0x22>
 8006b5e:	6813      	ldr	r3, [r2, #0]
 8006b60:	1c58      	adds	r0, r3, #1
 8006b62:	6010      	str	r0, [r2, #0]
 8006b64:	7019      	strb	r1, [r3, #0]
 8006b66:	0008      	movs	r0, r1
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	f7ff fdcd 	bl	8006708 <__swbuf_r>
 8006b6e:	0001      	movs	r1, r0
 8006b70:	e7f9      	b.n	8006b66 <__sfputc_r+0x1e>

08006b72 <__sfputs_r>:
 8006b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b74:	0006      	movs	r6, r0
 8006b76:	000f      	movs	r7, r1
 8006b78:	0014      	movs	r4, r2
 8006b7a:	18d5      	adds	r5, r2, r3
 8006b7c:	42ac      	cmp	r4, r5
 8006b7e:	d101      	bne.n	8006b84 <__sfputs_r+0x12>
 8006b80:	2000      	movs	r0, #0
 8006b82:	e007      	b.n	8006b94 <__sfputs_r+0x22>
 8006b84:	7821      	ldrb	r1, [r4, #0]
 8006b86:	003a      	movs	r2, r7
 8006b88:	0030      	movs	r0, r6
 8006b8a:	f7ff ffdd 	bl	8006b48 <__sfputc_r>
 8006b8e:	3401      	adds	r4, #1
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d1f3      	bne.n	8006b7c <__sfputs_r+0xa>
 8006b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b98 <_vfiprintf_r>:
 8006b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b9a:	b0a1      	sub	sp, #132	@ 0x84
 8006b9c:	000f      	movs	r7, r1
 8006b9e:	0015      	movs	r5, r2
 8006ba0:	001e      	movs	r6, r3
 8006ba2:	9003      	str	r0, [sp, #12]
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d004      	beq.n	8006bb2 <_vfiprintf_r+0x1a>
 8006ba8:	6a03      	ldr	r3, [r0, #32]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <_vfiprintf_r+0x1a>
 8006bae:	f7ff fcbb 	bl	8006528 <__sinit>
 8006bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb4:	07db      	lsls	r3, r3, #31
 8006bb6:	d405      	bmi.n	8006bc4 <_vfiprintf_r+0x2c>
 8006bb8:	89bb      	ldrh	r3, [r7, #12]
 8006bba:	059b      	lsls	r3, r3, #22
 8006bbc:	d402      	bmi.n	8006bc4 <_vfiprintf_r+0x2c>
 8006bbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006bc0:	f7ff fec3 	bl	800694a <__retarget_lock_acquire_recursive>
 8006bc4:	89bb      	ldrh	r3, [r7, #12]
 8006bc6:	071b      	lsls	r3, r3, #28
 8006bc8:	d502      	bpl.n	8006bd0 <_vfiprintf_r+0x38>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d113      	bne.n	8006bf8 <_vfiprintf_r+0x60>
 8006bd0:	0039      	movs	r1, r7
 8006bd2:	9803      	ldr	r0, [sp, #12]
 8006bd4:	f7ff fdda 	bl	800678c <__swsetup_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d00d      	beq.n	8006bf8 <_vfiprintf_r+0x60>
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bde:	07db      	lsls	r3, r3, #31
 8006be0:	d503      	bpl.n	8006bea <_vfiprintf_r+0x52>
 8006be2:	2001      	movs	r0, #1
 8006be4:	4240      	negs	r0, r0
 8006be6:	b021      	add	sp, #132	@ 0x84
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	89bb      	ldrh	r3, [r7, #12]
 8006bec:	059b      	lsls	r3, r3, #22
 8006bee:	d4f8      	bmi.n	8006be2 <_vfiprintf_r+0x4a>
 8006bf0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006bf2:	f7ff feab 	bl	800694c <__retarget_lock_release_recursive>
 8006bf6:	e7f4      	b.n	8006be2 <_vfiprintf_r+0x4a>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	ac08      	add	r4, sp, #32
 8006bfc:	6163      	str	r3, [r4, #20]
 8006bfe:	3320      	adds	r3, #32
 8006c00:	7663      	strb	r3, [r4, #25]
 8006c02:	3310      	adds	r3, #16
 8006c04:	76a3      	strb	r3, [r4, #26]
 8006c06:	9607      	str	r6, [sp, #28]
 8006c08:	002e      	movs	r6, r5
 8006c0a:	7833      	ldrb	r3, [r6, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <_vfiprintf_r+0x7c>
 8006c10:	2b25      	cmp	r3, #37	@ 0x25
 8006c12:	d148      	bne.n	8006ca6 <_vfiprintf_r+0x10e>
 8006c14:	1b73      	subs	r3, r6, r5
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	42ae      	cmp	r6, r5
 8006c1a:	d00b      	beq.n	8006c34 <_vfiprintf_r+0x9c>
 8006c1c:	002a      	movs	r2, r5
 8006c1e:	0039      	movs	r1, r7
 8006c20:	9803      	ldr	r0, [sp, #12]
 8006c22:	f7ff ffa6 	bl	8006b72 <__sfputs_r>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d100      	bne.n	8006c2c <_vfiprintf_r+0x94>
 8006c2a:	e0ae      	b.n	8006d8a <_vfiprintf_r+0x1f2>
 8006c2c:	6963      	ldr	r3, [r4, #20]
 8006c2e:	9a05      	ldr	r2, [sp, #20]
 8006c30:	189b      	adds	r3, r3, r2
 8006c32:	6163      	str	r3, [r4, #20]
 8006c34:	7833      	ldrb	r3, [r6, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d100      	bne.n	8006c3c <_vfiprintf_r+0xa4>
 8006c3a:	e0a6      	b.n	8006d8a <_vfiprintf_r+0x1f2>
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4252      	negs	r2, r2
 8006c42:	6062      	str	r2, [r4, #4]
 8006c44:	a904      	add	r1, sp, #16
 8006c46:	3254      	adds	r2, #84	@ 0x54
 8006c48:	1852      	adds	r2, r2, r1
 8006c4a:	1c75      	adds	r5, r6, #1
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	60e3      	str	r3, [r4, #12]
 8006c50:	60a3      	str	r3, [r4, #8]
 8006c52:	7013      	strb	r3, [r2, #0]
 8006c54:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006c56:	4b59      	ldr	r3, [pc, #356]	@ (8006dbc <_vfiprintf_r+0x224>)
 8006c58:	2205      	movs	r2, #5
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	7829      	ldrb	r1, [r5, #0]
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	f000 fb88 	bl	8007374 <memchr>
 8006c64:	1c6e      	adds	r6, r5, #1
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d11f      	bne.n	8006caa <_vfiprintf_r+0x112>
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	06d3      	lsls	r3, r2, #27
 8006c6e:	d504      	bpl.n	8006c7a <_vfiprintf_r+0xe2>
 8006c70:	2353      	movs	r3, #83	@ 0x53
 8006c72:	a904      	add	r1, sp, #16
 8006c74:	185b      	adds	r3, r3, r1
 8006c76:	2120      	movs	r1, #32
 8006c78:	7019      	strb	r1, [r3, #0]
 8006c7a:	0713      	lsls	r3, r2, #28
 8006c7c:	d504      	bpl.n	8006c88 <_vfiprintf_r+0xf0>
 8006c7e:	2353      	movs	r3, #83	@ 0x53
 8006c80:	a904      	add	r1, sp, #16
 8006c82:	185b      	adds	r3, r3, r1
 8006c84:	212b      	movs	r1, #43	@ 0x2b
 8006c86:	7019      	strb	r1, [r3, #0]
 8006c88:	782b      	ldrb	r3, [r5, #0]
 8006c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c8c:	d016      	beq.n	8006cbc <_vfiprintf_r+0x124>
 8006c8e:	002e      	movs	r6, r5
 8006c90:	2100      	movs	r1, #0
 8006c92:	200a      	movs	r0, #10
 8006c94:	68e3      	ldr	r3, [r4, #12]
 8006c96:	7832      	ldrb	r2, [r6, #0]
 8006c98:	1c75      	adds	r5, r6, #1
 8006c9a:	3a30      	subs	r2, #48	@ 0x30
 8006c9c:	2a09      	cmp	r2, #9
 8006c9e:	d950      	bls.n	8006d42 <_vfiprintf_r+0x1aa>
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	d111      	bne.n	8006cc8 <_vfiprintf_r+0x130>
 8006ca4:	e017      	b.n	8006cd6 <_vfiprintf_r+0x13e>
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7af      	b.n	8006c0a <_vfiprintf_r+0x72>
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	1ac0      	subs	r0, r0, r3
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4083      	lsls	r3, r0
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	0035      	movs	r5, r6
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	e7cc      	b.n	8006c56 <_vfiprintf_r+0xbe>
 8006cbc:	9b07      	ldr	r3, [sp, #28]
 8006cbe:	1d19      	adds	r1, r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	9107      	str	r1, [sp, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	db01      	blt.n	8006ccc <_vfiprintf_r+0x134>
 8006cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cca:	e004      	b.n	8006cd6 <_vfiprintf_r+0x13e>
 8006ccc:	425b      	negs	r3, r3
 8006cce:	60e3      	str	r3, [r4, #12]
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	7833      	ldrb	r3, [r6, #0]
 8006cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cda:	d10c      	bne.n	8006cf6 <_vfiprintf_r+0x15e>
 8006cdc:	7873      	ldrb	r3, [r6, #1]
 8006cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce0:	d134      	bne.n	8006d4c <_vfiprintf_r+0x1b4>
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	3602      	adds	r6, #2
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	9207      	str	r2, [sp, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da01      	bge.n	8006cf4 <_vfiprintf_r+0x15c>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	425b      	negs	r3, r3
 8006cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf6:	4d32      	ldr	r5, [pc, #200]	@ (8006dc0 <_vfiprintf_r+0x228>)
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	0028      	movs	r0, r5
 8006cfc:	7831      	ldrb	r1, [r6, #0]
 8006cfe:	f000 fb39 	bl	8007374 <memchr>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d006      	beq.n	8006d14 <_vfiprintf_r+0x17c>
 8006d06:	2340      	movs	r3, #64	@ 0x40
 8006d08:	1b40      	subs	r0, r0, r5
 8006d0a:	4083      	lsls	r3, r0
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	3601      	adds	r6, #1
 8006d10:	4313      	orrs	r3, r2
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	7831      	ldrb	r1, [r6, #0]
 8006d16:	2206      	movs	r2, #6
 8006d18:	482a      	ldr	r0, [pc, #168]	@ (8006dc4 <_vfiprintf_r+0x22c>)
 8006d1a:	1c75      	adds	r5, r6, #1
 8006d1c:	7621      	strb	r1, [r4, #24]
 8006d1e:	f000 fb29 	bl	8007374 <memchr>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d040      	beq.n	8006da8 <_vfiprintf_r+0x210>
 8006d26:	4b28      	ldr	r3, [pc, #160]	@ (8006dc8 <_vfiprintf_r+0x230>)
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d122      	bne.n	8006d72 <_vfiprintf_r+0x1da>
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	9b07      	ldr	r3, [sp, #28]
 8006d30:	3307      	adds	r3, #7
 8006d32:	4393      	bics	r3, r2
 8006d34:	3308      	adds	r3, #8
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	6963      	ldr	r3, [r4, #20]
 8006d3a:	9a04      	ldr	r2, [sp, #16]
 8006d3c:	189b      	adds	r3, r3, r2
 8006d3e:	6163      	str	r3, [r4, #20]
 8006d40:	e762      	b.n	8006c08 <_vfiprintf_r+0x70>
 8006d42:	4343      	muls	r3, r0
 8006d44:	002e      	movs	r6, r5
 8006d46:	2101      	movs	r1, #1
 8006d48:	189b      	adds	r3, r3, r2
 8006d4a:	e7a4      	b.n	8006c96 <_vfiprintf_r+0xfe>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	200a      	movs	r0, #10
 8006d50:	0019      	movs	r1, r3
 8006d52:	3601      	adds	r6, #1
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	7832      	ldrb	r2, [r6, #0]
 8006d58:	1c75      	adds	r5, r6, #1
 8006d5a:	3a30      	subs	r2, #48	@ 0x30
 8006d5c:	2a09      	cmp	r2, #9
 8006d5e:	d903      	bls.n	8006d68 <_vfiprintf_r+0x1d0>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0c8      	beq.n	8006cf6 <_vfiprintf_r+0x15e>
 8006d64:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d66:	e7c6      	b.n	8006cf6 <_vfiprintf_r+0x15e>
 8006d68:	4341      	muls	r1, r0
 8006d6a:	002e      	movs	r6, r5
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	1889      	adds	r1, r1, r2
 8006d70:	e7f1      	b.n	8006d56 <_vfiprintf_r+0x1be>
 8006d72:	aa07      	add	r2, sp, #28
 8006d74:	9200      	str	r2, [sp, #0]
 8006d76:	0021      	movs	r1, r4
 8006d78:	003a      	movs	r2, r7
 8006d7a:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <_vfiprintf_r+0x234>)
 8006d7c:	9803      	ldr	r0, [sp, #12]
 8006d7e:	e000      	b.n	8006d82 <_vfiprintf_r+0x1ea>
 8006d80:	bf00      	nop
 8006d82:	9004      	str	r0, [sp, #16]
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	d1d6      	bne.n	8006d38 <_vfiprintf_r+0x1a0>
 8006d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8c:	07db      	lsls	r3, r3, #31
 8006d8e:	d405      	bmi.n	8006d9c <_vfiprintf_r+0x204>
 8006d90:	89bb      	ldrh	r3, [r7, #12]
 8006d92:	059b      	lsls	r3, r3, #22
 8006d94:	d402      	bmi.n	8006d9c <_vfiprintf_r+0x204>
 8006d96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006d98:	f7ff fdd8 	bl	800694c <__retarget_lock_release_recursive>
 8006d9c:	89bb      	ldrh	r3, [r7, #12]
 8006d9e:	065b      	lsls	r3, r3, #25
 8006da0:	d500      	bpl.n	8006da4 <_vfiprintf_r+0x20c>
 8006da2:	e71e      	b.n	8006be2 <_vfiprintf_r+0x4a>
 8006da4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006da6:	e71e      	b.n	8006be6 <_vfiprintf_r+0x4e>
 8006da8:	aa07      	add	r2, sp, #28
 8006daa:	9200      	str	r2, [sp, #0]
 8006dac:	0021      	movs	r1, r4
 8006dae:	003a      	movs	r2, r7
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <_vfiprintf_r+0x234>)
 8006db2:	9803      	ldr	r0, [sp, #12]
 8006db4:	f000 f87c 	bl	8006eb0 <_printf_i>
 8006db8:	e7e3      	b.n	8006d82 <_vfiprintf_r+0x1ea>
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	0800748c 	.word	0x0800748c
 8006dc0:	08007492 	.word	0x08007492
 8006dc4:	08007496 	.word	0x08007496
 8006dc8:	00000000 	.word	0x00000000
 8006dcc:	08006b73 	.word	0x08006b73

08006dd0 <_printf_common>:
 8006dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd2:	0016      	movs	r6, r2
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	688a      	ldr	r2, [r1, #8]
 8006dd8:	690b      	ldr	r3, [r1, #16]
 8006dda:	000c      	movs	r4, r1
 8006ddc:	9000      	str	r0, [sp, #0]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	da00      	bge.n	8006de4 <_printf_common+0x14>
 8006de2:	0013      	movs	r3, r2
 8006de4:	0022      	movs	r2, r4
 8006de6:	6033      	str	r3, [r6, #0]
 8006de8:	3243      	adds	r2, #67	@ 0x43
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	2a00      	cmp	r2, #0
 8006dee:	d001      	beq.n	8006df4 <_printf_common+0x24>
 8006df0:	3301      	adds	r3, #1
 8006df2:	6033      	str	r3, [r6, #0]
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	069b      	lsls	r3, r3, #26
 8006df8:	d502      	bpl.n	8006e00 <_printf_common+0x30>
 8006dfa:	6833      	ldr	r3, [r6, #0]
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	6033      	str	r3, [r6, #0]
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	2306      	movs	r3, #6
 8006e04:	0015      	movs	r5, r2
 8006e06:	401d      	ands	r5, r3
 8006e08:	421a      	tst	r2, r3
 8006e0a:	d027      	beq.n	8006e5c <_printf_common+0x8c>
 8006e0c:	0023      	movs	r3, r4
 8006e0e:	3343      	adds	r3, #67	@ 0x43
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	1e5a      	subs	r2, r3, #1
 8006e14:	4193      	sbcs	r3, r2
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	0692      	lsls	r2, r2, #26
 8006e1a:	d430      	bmi.n	8006e7e <_printf_common+0xae>
 8006e1c:	0022      	movs	r2, r4
 8006e1e:	9901      	ldr	r1, [sp, #4]
 8006e20:	9800      	ldr	r0, [sp, #0]
 8006e22:	9d08      	ldr	r5, [sp, #32]
 8006e24:	3243      	adds	r2, #67	@ 0x43
 8006e26:	47a8      	blx	r5
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d025      	beq.n	8006e78 <_printf_common+0xa8>
 8006e2c:	2206      	movs	r2, #6
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	2500      	movs	r5, #0
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d105      	bne.n	8006e44 <_printf_common+0x74>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	68e5      	ldr	r5, [r4, #12]
 8006e3c:	1aed      	subs	r5, r5, r3
 8006e3e:	43eb      	mvns	r3, r5
 8006e40:	17db      	asrs	r3, r3, #31
 8006e42:	401d      	ands	r5, r3
 8006e44:	68a3      	ldr	r3, [r4, #8]
 8006e46:	6922      	ldr	r2, [r4, #16]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	dd01      	ble.n	8006e50 <_printf_common+0x80>
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	18ed      	adds	r5, r5, r3
 8006e50:	2600      	movs	r6, #0
 8006e52:	42b5      	cmp	r5, r6
 8006e54:	d120      	bne.n	8006e98 <_printf_common+0xc8>
 8006e56:	2000      	movs	r0, #0
 8006e58:	e010      	b.n	8006e7c <_printf_common+0xac>
 8006e5a:	3501      	adds	r5, #1
 8006e5c:	68e3      	ldr	r3, [r4, #12]
 8006e5e:	6832      	ldr	r2, [r6, #0]
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	42ab      	cmp	r3, r5
 8006e64:	ddd2      	ble.n	8006e0c <_printf_common+0x3c>
 8006e66:	0022      	movs	r2, r4
 8006e68:	2301      	movs	r3, #1
 8006e6a:	9901      	ldr	r1, [sp, #4]
 8006e6c:	9800      	ldr	r0, [sp, #0]
 8006e6e:	9f08      	ldr	r7, [sp, #32]
 8006e70:	3219      	adds	r2, #25
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	d1f0      	bne.n	8006e5a <_printf_common+0x8a>
 8006e78:	2001      	movs	r0, #1
 8006e7a:	4240      	negs	r0, r0
 8006e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e7e:	2030      	movs	r0, #48	@ 0x30
 8006e80:	18e1      	adds	r1, r4, r3
 8006e82:	3143      	adds	r1, #67	@ 0x43
 8006e84:	7008      	strb	r0, [r1, #0]
 8006e86:	0021      	movs	r1, r4
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	3145      	adds	r1, #69	@ 0x45
 8006e8c:	7809      	ldrb	r1, [r1, #0]
 8006e8e:	18a2      	adds	r2, r4, r2
 8006e90:	3243      	adds	r2, #67	@ 0x43
 8006e92:	3302      	adds	r3, #2
 8006e94:	7011      	strb	r1, [r2, #0]
 8006e96:	e7c1      	b.n	8006e1c <_printf_common+0x4c>
 8006e98:	0022      	movs	r2, r4
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	9901      	ldr	r1, [sp, #4]
 8006e9e:	9800      	ldr	r0, [sp, #0]
 8006ea0:	9f08      	ldr	r7, [sp, #32]
 8006ea2:	321a      	adds	r2, #26
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d0e6      	beq.n	8006e78 <_printf_common+0xa8>
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7d1      	b.n	8006e52 <_printf_common+0x82>
	...

08006eb0 <_printf_i>:
 8006eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb2:	b08b      	sub	sp, #44	@ 0x2c
 8006eb4:	9206      	str	r2, [sp, #24]
 8006eb6:	000a      	movs	r2, r1
 8006eb8:	3243      	adds	r2, #67	@ 0x43
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	9005      	str	r0, [sp, #20]
 8006ebe:	9203      	str	r2, [sp, #12]
 8006ec0:	7e0a      	ldrb	r2, [r1, #24]
 8006ec2:	000c      	movs	r4, r1
 8006ec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ec6:	2a78      	cmp	r2, #120	@ 0x78
 8006ec8:	d809      	bhi.n	8006ede <_printf_i+0x2e>
 8006eca:	2a62      	cmp	r2, #98	@ 0x62
 8006ecc:	d80b      	bhi.n	8006ee6 <_printf_i+0x36>
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	d100      	bne.n	8006ed4 <_printf_i+0x24>
 8006ed2:	e0bc      	b.n	800704e <_printf_i+0x19e>
 8006ed4:	497b      	ldr	r1, [pc, #492]	@ (80070c4 <_printf_i+0x214>)
 8006ed6:	9104      	str	r1, [sp, #16]
 8006ed8:	2a58      	cmp	r2, #88	@ 0x58
 8006eda:	d100      	bne.n	8006ede <_printf_i+0x2e>
 8006edc:	e090      	b.n	8007000 <_printf_i+0x150>
 8006ede:	0025      	movs	r5, r4
 8006ee0:	3542      	adds	r5, #66	@ 0x42
 8006ee2:	702a      	strb	r2, [r5, #0]
 8006ee4:	e022      	b.n	8006f2c <_printf_i+0x7c>
 8006ee6:	0010      	movs	r0, r2
 8006ee8:	3863      	subs	r0, #99	@ 0x63
 8006eea:	2815      	cmp	r0, #21
 8006eec:	d8f7      	bhi.n	8006ede <_printf_i+0x2e>
 8006eee:	f7f9 f90b 	bl	8000108 <__gnu_thumb1_case_shi>
 8006ef2:	0016      	.short	0x0016
 8006ef4:	fff6001f 	.word	0xfff6001f
 8006ef8:	fff6fff6 	.word	0xfff6fff6
 8006efc:	001ffff6 	.word	0x001ffff6
 8006f00:	fff6fff6 	.word	0xfff6fff6
 8006f04:	fff6fff6 	.word	0xfff6fff6
 8006f08:	003600a1 	.word	0x003600a1
 8006f0c:	fff60080 	.word	0xfff60080
 8006f10:	00b2fff6 	.word	0x00b2fff6
 8006f14:	0036fff6 	.word	0x0036fff6
 8006f18:	fff6fff6 	.word	0xfff6fff6
 8006f1c:	0084      	.short	0x0084
 8006f1e:	0025      	movs	r5, r4
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	3542      	adds	r5, #66	@ 0x42
 8006f24:	1d11      	adds	r1, r2, #4
 8006f26:	6019      	str	r1, [r3, #0]
 8006f28:	6813      	ldr	r3, [r2, #0]
 8006f2a:	702b      	strb	r3, [r5, #0]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0a0      	b.n	8007072 <_printf_i+0x1c2>
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	6809      	ldr	r1, [r1, #0]
 8006f34:	1d02      	adds	r2, r0, #4
 8006f36:	060d      	lsls	r5, r1, #24
 8006f38:	d50b      	bpl.n	8006f52 <_printf_i+0xa2>
 8006f3a:	6806      	ldr	r6, [r0, #0]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	2e00      	cmp	r6, #0
 8006f40:	da03      	bge.n	8006f4a <_printf_i+0x9a>
 8006f42:	232d      	movs	r3, #45	@ 0x2d
 8006f44:	9a03      	ldr	r2, [sp, #12]
 8006f46:	4276      	negs	r6, r6
 8006f48:	7013      	strb	r3, [r2, #0]
 8006f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80070c4 <_printf_i+0x214>)
 8006f4c:	270a      	movs	r7, #10
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	e018      	b.n	8006f84 <_printf_i+0xd4>
 8006f52:	6806      	ldr	r6, [r0, #0]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	0649      	lsls	r1, r1, #25
 8006f58:	d5f1      	bpl.n	8006f3e <_printf_i+0x8e>
 8006f5a:	b236      	sxth	r6, r6
 8006f5c:	e7ef      	b.n	8006f3e <_printf_i+0x8e>
 8006f5e:	6808      	ldr	r0, [r1, #0]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	c940      	ldmia	r1!, {r6}
 8006f64:	0605      	lsls	r5, r0, #24
 8006f66:	d402      	bmi.n	8006f6e <_printf_i+0xbe>
 8006f68:	0640      	lsls	r0, r0, #25
 8006f6a:	d500      	bpl.n	8006f6e <_printf_i+0xbe>
 8006f6c:	b2b6      	uxth	r6, r6
 8006f6e:	6019      	str	r1, [r3, #0]
 8006f70:	4b54      	ldr	r3, [pc, #336]	@ (80070c4 <_printf_i+0x214>)
 8006f72:	270a      	movs	r7, #10
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	2a6f      	cmp	r2, #111	@ 0x6f
 8006f78:	d100      	bne.n	8006f7c <_printf_i+0xcc>
 8006f7a:	3f02      	subs	r7, #2
 8006f7c:	0023      	movs	r3, r4
 8006f7e:	2200      	movs	r2, #0
 8006f80:	3343      	adds	r3, #67	@ 0x43
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	db03      	blt.n	8006f94 <_printf_i+0xe4>
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	438a      	bics	r2, r1
 8006f92:	6022      	str	r2, [r4, #0]
 8006f94:	2e00      	cmp	r6, #0
 8006f96:	d102      	bne.n	8006f9e <_printf_i+0xee>
 8006f98:	9d03      	ldr	r5, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <_printf_i+0x108>
 8006f9e:	9d03      	ldr	r5, [sp, #12]
 8006fa0:	0030      	movs	r0, r6
 8006fa2:	0039      	movs	r1, r7
 8006fa4:	f7f9 f940 	bl	8000228 <__aeabi_uidivmod>
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	3d01      	subs	r5, #1
 8006fac:	5c5b      	ldrb	r3, [r3, r1]
 8006fae:	702b      	strb	r3, [r5, #0]
 8006fb0:	0033      	movs	r3, r6
 8006fb2:	0006      	movs	r6, r0
 8006fb4:	429f      	cmp	r7, r3
 8006fb6:	d9f3      	bls.n	8006fa0 <_printf_i+0xf0>
 8006fb8:	2f08      	cmp	r7, #8
 8006fba:	d109      	bne.n	8006fd0 <_printf_i+0x120>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	07db      	lsls	r3, r3, #31
 8006fc0:	d506      	bpl.n	8006fd0 <_printf_i+0x120>
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	dc02      	bgt.n	8006fd0 <_printf_i+0x120>
 8006fca:	2330      	movs	r3, #48	@ 0x30
 8006fcc:	3d01      	subs	r5, #1
 8006fce:	702b      	strb	r3, [r5, #0]
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	1b5b      	subs	r3, r3, r5
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	9b07      	ldr	r3, [sp, #28]
 8006fd8:	0021      	movs	r1, r4
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	9805      	ldr	r0, [sp, #20]
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	aa09      	add	r2, sp, #36	@ 0x24
 8006fe2:	f7ff fef5 	bl	8006dd0 <_printf_common>
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d148      	bne.n	800707c <_printf_i+0x1cc>
 8006fea:	2001      	movs	r0, #1
 8006fec:	4240      	negs	r0, r0
 8006fee:	b00b      	add	sp, #44	@ 0x2c
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	6809      	ldr	r1, [r1, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	6022      	str	r2, [r4, #0]
 8006ffa:	2278      	movs	r2, #120	@ 0x78
 8006ffc:	4932      	ldr	r1, [pc, #200]	@ (80070c8 <_printf_i+0x218>)
 8006ffe:	9104      	str	r1, [sp, #16]
 8007000:	0021      	movs	r1, r4
 8007002:	3145      	adds	r1, #69	@ 0x45
 8007004:	700a      	strb	r2, [r1, #0]
 8007006:	6819      	ldr	r1, [r3, #0]
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	c940      	ldmia	r1!, {r6}
 800700c:	0610      	lsls	r0, r2, #24
 800700e:	d402      	bmi.n	8007016 <_printf_i+0x166>
 8007010:	0650      	lsls	r0, r2, #25
 8007012:	d500      	bpl.n	8007016 <_printf_i+0x166>
 8007014:	b2b6      	uxth	r6, r6
 8007016:	6019      	str	r1, [r3, #0]
 8007018:	07d3      	lsls	r3, r2, #31
 800701a:	d502      	bpl.n	8007022 <_printf_i+0x172>
 800701c:	2320      	movs	r3, #32
 800701e:	4313      	orrs	r3, r2
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	2e00      	cmp	r6, #0
 8007024:	d001      	beq.n	800702a <_printf_i+0x17a>
 8007026:	2710      	movs	r7, #16
 8007028:	e7a8      	b.n	8006f7c <_printf_i+0xcc>
 800702a:	2220      	movs	r2, #32
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	4393      	bics	r3, r2
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	e7f8      	b.n	8007026 <_printf_i+0x176>
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	680d      	ldr	r5, [r1, #0]
 8007038:	1d10      	adds	r0, r2, #4
 800703a:	6949      	ldr	r1, [r1, #20]
 800703c:	6018      	str	r0, [r3, #0]
 800703e:	6813      	ldr	r3, [r2, #0]
 8007040:	062e      	lsls	r6, r5, #24
 8007042:	d501      	bpl.n	8007048 <_printf_i+0x198>
 8007044:	6019      	str	r1, [r3, #0]
 8007046:	e002      	b.n	800704e <_printf_i+0x19e>
 8007048:	066d      	lsls	r5, r5, #25
 800704a:	d5fb      	bpl.n	8007044 <_printf_i+0x194>
 800704c:	8019      	strh	r1, [r3, #0]
 800704e:	2300      	movs	r3, #0
 8007050:	9d03      	ldr	r5, [sp, #12]
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	e7bf      	b.n	8006fd6 <_printf_i+0x126>
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	1d11      	adds	r1, r2, #4
 800705a:	6019      	str	r1, [r3, #0]
 800705c:	6815      	ldr	r5, [r2, #0]
 800705e:	2100      	movs	r1, #0
 8007060:	0028      	movs	r0, r5
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	f000 f986 	bl	8007374 <memchr>
 8007068:	2800      	cmp	r0, #0
 800706a:	d001      	beq.n	8007070 <_printf_i+0x1c0>
 800706c:	1b40      	subs	r0, r0, r5
 800706e:	6060      	str	r0, [r4, #4]
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2300      	movs	r3, #0
 8007076:	9a03      	ldr	r2, [sp, #12]
 8007078:	7013      	strb	r3, [r2, #0]
 800707a:	e7ac      	b.n	8006fd6 <_printf_i+0x126>
 800707c:	002a      	movs	r2, r5
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	9906      	ldr	r1, [sp, #24]
 8007082:	9805      	ldr	r0, [sp, #20]
 8007084:	9d07      	ldr	r5, [sp, #28]
 8007086:	47a8      	blx	r5
 8007088:	3001      	adds	r0, #1
 800708a:	d0ae      	beq.n	8006fea <_printf_i+0x13a>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	079b      	lsls	r3, r3, #30
 8007090:	d415      	bmi.n	80070be <_printf_i+0x20e>
 8007092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007094:	68e0      	ldr	r0, [r4, #12]
 8007096:	4298      	cmp	r0, r3
 8007098:	daa9      	bge.n	8006fee <_printf_i+0x13e>
 800709a:	0018      	movs	r0, r3
 800709c:	e7a7      	b.n	8006fee <_printf_i+0x13e>
 800709e:	0022      	movs	r2, r4
 80070a0:	2301      	movs	r3, #1
 80070a2:	9906      	ldr	r1, [sp, #24]
 80070a4:	9805      	ldr	r0, [sp, #20]
 80070a6:	9e07      	ldr	r6, [sp, #28]
 80070a8:	3219      	adds	r2, #25
 80070aa:	47b0      	blx	r6
 80070ac:	3001      	adds	r0, #1
 80070ae:	d09c      	beq.n	8006fea <_printf_i+0x13a>
 80070b0:	3501      	adds	r5, #1
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	dcf0      	bgt.n	800709e <_printf_i+0x1ee>
 80070bc:	e7e9      	b.n	8007092 <_printf_i+0x1e2>
 80070be:	2500      	movs	r5, #0
 80070c0:	e7f7      	b.n	80070b2 <_printf_i+0x202>
 80070c2:	46c0      	nop			@ (mov r8, r8)
 80070c4:	0800749d 	.word	0x0800749d
 80070c8:	080074ae 	.word	0x080074ae

080070cc <__sflush_r>:
 80070cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ce:	220c      	movs	r2, #12
 80070d0:	5e8b      	ldrsh	r3, [r1, r2]
 80070d2:	0005      	movs	r5, r0
 80070d4:	000c      	movs	r4, r1
 80070d6:	071a      	lsls	r2, r3, #28
 80070d8:	d456      	bmi.n	8007188 <__sflush_r+0xbc>
 80070da:	684a      	ldr	r2, [r1, #4]
 80070dc:	2a00      	cmp	r2, #0
 80070de:	dc02      	bgt.n	80070e6 <__sflush_r+0x1a>
 80070e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	dd4e      	ble.n	8007184 <__sflush_r+0xb8>
 80070e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	d04b      	beq.n	8007184 <__sflush_r+0xb8>
 80070ec:	2200      	movs	r2, #0
 80070ee:	2080      	movs	r0, #128	@ 0x80
 80070f0:	682e      	ldr	r6, [r5, #0]
 80070f2:	602a      	str	r2, [r5, #0]
 80070f4:	001a      	movs	r2, r3
 80070f6:	0140      	lsls	r0, r0, #5
 80070f8:	6a21      	ldr	r1, [r4, #32]
 80070fa:	4002      	ands	r2, r0
 80070fc:	4203      	tst	r3, r0
 80070fe:	d033      	beq.n	8007168 <__sflush_r+0x9c>
 8007100:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	075b      	lsls	r3, r3, #29
 8007106:	d506      	bpl.n	8007116 <__sflush_r+0x4a>
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	1ad2      	subs	r2, r2, r3
 800710c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <__sflush_r+0x4a>
 8007112:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	2300      	movs	r3, #0
 8007118:	0028      	movs	r0, r5
 800711a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800711c:	6a21      	ldr	r1, [r4, #32]
 800711e:	47b8      	blx	r7
 8007120:	89a2      	ldrh	r2, [r4, #12]
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d106      	bne.n	8007134 <__sflush_r+0x68>
 8007126:	6829      	ldr	r1, [r5, #0]
 8007128:	291d      	cmp	r1, #29
 800712a:	d846      	bhi.n	80071ba <__sflush_r+0xee>
 800712c:	4b29      	ldr	r3, [pc, #164]	@ (80071d4 <__sflush_r+0x108>)
 800712e:	410b      	asrs	r3, r1
 8007130:	07db      	lsls	r3, r3, #31
 8007132:	d442      	bmi.n	80071ba <__sflush_r+0xee>
 8007134:	2300      	movs	r3, #0
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	04d2      	lsls	r2, r2, #19
 800713e:	d505      	bpl.n	800714c <__sflush_r+0x80>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <__sflush_r+0x7e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d100      	bne.n	800714c <__sflush_r+0x80>
 800714a:	6560      	str	r0, [r4, #84]	@ 0x54
 800714c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800714e:	602e      	str	r6, [r5, #0]
 8007150:	2900      	cmp	r1, #0
 8007152:	d017      	beq.n	8007184 <__sflush_r+0xb8>
 8007154:	0023      	movs	r3, r4
 8007156:	3344      	adds	r3, #68	@ 0x44
 8007158:	4299      	cmp	r1, r3
 800715a:	d002      	beq.n	8007162 <__sflush_r+0x96>
 800715c:	0028      	movs	r0, r5
 800715e:	f7ff fbf7 	bl	8006950 <_free_r>
 8007162:	2300      	movs	r3, #0
 8007164:	6363      	str	r3, [r4, #52]	@ 0x34
 8007166:	e00d      	b.n	8007184 <__sflush_r+0xb8>
 8007168:	2301      	movs	r3, #1
 800716a:	0028      	movs	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	0002      	movs	r2, r0
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d1c6      	bne.n	8007102 <__sflush_r+0x36>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0c3      	beq.n	8007102 <__sflush_r+0x36>
 800717a:	2b1d      	cmp	r3, #29
 800717c:	d001      	beq.n	8007182 <__sflush_r+0xb6>
 800717e:	2b16      	cmp	r3, #22
 8007180:	d11a      	bne.n	80071b8 <__sflush_r+0xec>
 8007182:	602e      	str	r6, [r5, #0]
 8007184:	2000      	movs	r0, #0
 8007186:	e01e      	b.n	80071c6 <__sflush_r+0xfa>
 8007188:	690e      	ldr	r6, [r1, #16]
 800718a:	2e00      	cmp	r6, #0
 800718c:	d0fa      	beq.n	8007184 <__sflush_r+0xb8>
 800718e:	680f      	ldr	r7, [r1, #0]
 8007190:	600e      	str	r6, [r1, #0]
 8007192:	1bba      	subs	r2, r7, r6
 8007194:	9201      	str	r2, [sp, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	079b      	lsls	r3, r3, #30
 800719a:	d100      	bne.n	800719e <__sflush_r+0xd2>
 800719c:	694a      	ldr	r2, [r1, #20]
 800719e:	60a2      	str	r2, [r4, #8]
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	ddee      	ble.n	8007184 <__sflush_r+0xb8>
 80071a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80071a8:	0032      	movs	r2, r6
 80071aa:	001f      	movs	r7, r3
 80071ac:	0028      	movs	r0, r5
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	6a21      	ldr	r1, [r4, #32]
 80071b2:	47b8      	blx	r7
 80071b4:	2800      	cmp	r0, #0
 80071b6:	dc07      	bgt.n	80071c8 <__sflush_r+0xfc>
 80071b8:	89a2      	ldrh	r2, [r4, #12]
 80071ba:	2340      	movs	r3, #64	@ 0x40
 80071bc:	2001      	movs	r0, #1
 80071be:	4313      	orrs	r3, r2
 80071c0:	b21b      	sxth	r3, r3
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	4240      	negs	r0, r0
 80071c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	1836      	adds	r6, r6, r0
 80071cc:	1a1b      	subs	r3, r3, r0
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	e7e6      	b.n	80071a0 <__sflush_r+0xd4>
 80071d2:	46c0      	nop			@ (mov r8, r8)
 80071d4:	dfbffffe 	.word	0xdfbffffe

080071d8 <_fflush_r>:
 80071d8:	690b      	ldr	r3, [r1, #16]
 80071da:	b570      	push	{r4, r5, r6, lr}
 80071dc:	0005      	movs	r5, r0
 80071de:	000c      	movs	r4, r1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <_fflush_r+0x12>
 80071e4:	2500      	movs	r5, #0
 80071e6:	0028      	movs	r0, r5
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d004      	beq.n	80071f8 <_fflush_r+0x20>
 80071ee:	6a03      	ldr	r3, [r0, #32]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <_fflush_r+0x20>
 80071f4:	f7ff f998 	bl	8006528 <__sinit>
 80071f8:	220c      	movs	r2, #12
 80071fa:	5ea3      	ldrsh	r3, [r4, r2]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f1      	beq.n	80071e4 <_fflush_r+0xc>
 8007200:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007202:	07d2      	lsls	r2, r2, #31
 8007204:	d404      	bmi.n	8007210 <_fflush_r+0x38>
 8007206:	059b      	lsls	r3, r3, #22
 8007208:	d402      	bmi.n	8007210 <_fflush_r+0x38>
 800720a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720c:	f7ff fb9d 	bl	800694a <__retarget_lock_acquire_recursive>
 8007210:	0028      	movs	r0, r5
 8007212:	0021      	movs	r1, r4
 8007214:	f7ff ff5a 	bl	80070cc <__sflush_r>
 8007218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800721a:	0005      	movs	r5, r0
 800721c:	07db      	lsls	r3, r3, #31
 800721e:	d4e2      	bmi.n	80071e6 <_fflush_r+0xe>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	059b      	lsls	r3, r3, #22
 8007224:	d4df      	bmi.n	80071e6 <_fflush_r+0xe>
 8007226:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007228:	f7ff fb90 	bl	800694c <__retarget_lock_release_recursive>
 800722c:	e7db      	b.n	80071e6 <_fflush_r+0xe>
	...

08007230 <__swhatbuf_r>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	000e      	movs	r6, r1
 8007234:	001d      	movs	r5, r3
 8007236:	230e      	movs	r3, #14
 8007238:	5ec9      	ldrsh	r1, [r1, r3]
 800723a:	0014      	movs	r4, r2
 800723c:	b096      	sub	sp, #88	@ 0x58
 800723e:	2900      	cmp	r1, #0
 8007240:	da0c      	bge.n	800725c <__swhatbuf_r+0x2c>
 8007242:	89b2      	ldrh	r2, [r6, #12]
 8007244:	2380      	movs	r3, #128	@ 0x80
 8007246:	0011      	movs	r1, r2
 8007248:	4019      	ands	r1, r3
 800724a:	421a      	tst	r2, r3
 800724c:	d114      	bne.n	8007278 <__swhatbuf_r+0x48>
 800724e:	2380      	movs	r3, #128	@ 0x80
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	2000      	movs	r0, #0
 8007254:	6029      	str	r1, [r5, #0]
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	b016      	add	sp, #88	@ 0x58
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	466a      	mov	r2, sp
 800725e:	f000 f853 	bl	8007308 <_fstat_r>
 8007262:	2800      	cmp	r0, #0
 8007264:	dbed      	blt.n	8007242 <__swhatbuf_r+0x12>
 8007266:	23f0      	movs	r3, #240	@ 0xf0
 8007268:	9901      	ldr	r1, [sp, #4]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	4019      	ands	r1, r3
 800726e:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <__swhatbuf_r+0x50>)
 8007270:	18c9      	adds	r1, r1, r3
 8007272:	424b      	negs	r3, r1
 8007274:	4159      	adcs	r1, r3
 8007276:	e7ea      	b.n	800724e <__swhatbuf_r+0x1e>
 8007278:	2100      	movs	r1, #0
 800727a:	2340      	movs	r3, #64	@ 0x40
 800727c:	e7e9      	b.n	8007252 <__swhatbuf_r+0x22>
 800727e:	46c0      	nop			@ (mov r8, r8)
 8007280:	ffffe000 	.word	0xffffe000

08007284 <__smakebuf_r>:
 8007284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007286:	2602      	movs	r6, #2
 8007288:	898b      	ldrh	r3, [r1, #12]
 800728a:	0005      	movs	r5, r0
 800728c:	000c      	movs	r4, r1
 800728e:	b085      	sub	sp, #20
 8007290:	4233      	tst	r3, r6
 8007292:	d007      	beq.n	80072a4 <__smakebuf_r+0x20>
 8007294:	0023      	movs	r3, r4
 8007296:	3347      	adds	r3, #71	@ 0x47
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	2301      	movs	r3, #1
 800729e:	6163      	str	r3, [r4, #20]
 80072a0:	b005      	add	sp, #20
 80072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	aa02      	add	r2, sp, #8
 80072a8:	f7ff ffc2 	bl	8007230 <__swhatbuf_r>
 80072ac:	9f02      	ldr	r7, [sp, #8]
 80072ae:	9001      	str	r0, [sp, #4]
 80072b0:	0039      	movs	r1, r7
 80072b2:	0028      	movs	r0, r5
 80072b4:	f7ff fbb8 	bl	8006a28 <_malloc_r>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d108      	bne.n	80072ce <__smakebuf_r+0x4a>
 80072bc:	220c      	movs	r2, #12
 80072be:	5ea3      	ldrsh	r3, [r4, r2]
 80072c0:	059a      	lsls	r2, r3, #22
 80072c2:	d4ed      	bmi.n	80072a0 <__smakebuf_r+0x1c>
 80072c4:	2203      	movs	r2, #3
 80072c6:	4393      	bics	r3, r2
 80072c8:	431e      	orrs	r6, r3
 80072ca:	81a6      	strh	r6, [r4, #12]
 80072cc:	e7e2      	b.n	8007294 <__smakebuf_r+0x10>
 80072ce:	2380      	movs	r3, #128	@ 0x80
 80072d0:	89a2      	ldrh	r2, [r4, #12]
 80072d2:	6020      	str	r0, [r4, #0]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	6120      	str	r0, [r4, #16]
 80072dc:	6167      	str	r7, [r4, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00c      	beq.n	80072fc <__smakebuf_r+0x78>
 80072e2:	0028      	movs	r0, r5
 80072e4:	230e      	movs	r3, #14
 80072e6:	5ee1      	ldrsh	r1, [r4, r3]
 80072e8:	f000 f820 	bl	800732c <_isatty_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d005      	beq.n	80072fc <__smakebuf_r+0x78>
 80072f0:	2303      	movs	r3, #3
 80072f2:	89a2      	ldrh	r2, [r4, #12]
 80072f4:	439a      	bics	r2, r3
 80072f6:	3b02      	subs	r3, #2
 80072f8:	4313      	orrs	r3, r2
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	9a01      	ldr	r2, [sp, #4]
 8007300:	4313      	orrs	r3, r2
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	e7cc      	b.n	80072a0 <__smakebuf_r+0x1c>
	...

08007308 <_fstat_r>:
 8007308:	2300      	movs	r3, #0
 800730a:	b570      	push	{r4, r5, r6, lr}
 800730c:	4d06      	ldr	r5, [pc, #24]	@ (8007328 <_fstat_r+0x20>)
 800730e:	0004      	movs	r4, r0
 8007310:	0008      	movs	r0, r1
 8007312:	0011      	movs	r1, r2
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	f7fa f92a 	bl	800156e <_fstat>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d103      	bne.n	8007326 <_fstat_r+0x1e>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d000      	beq.n	8007326 <_fstat_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	2000059c 	.word	0x2000059c

0800732c <_isatty_r>:
 800732c:	2300      	movs	r3, #0
 800732e:	b570      	push	{r4, r5, r6, lr}
 8007330:	4d06      	ldr	r5, [pc, #24]	@ (800734c <_isatty_r+0x20>)
 8007332:	0004      	movs	r4, r0
 8007334:	0008      	movs	r0, r1
 8007336:	602b      	str	r3, [r5, #0]
 8007338:	f7fa f927 	bl	800158a <_isatty>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d103      	bne.n	8007348 <_isatty_r+0x1c>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d000      	beq.n	8007348 <_isatty_r+0x1c>
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	2000059c 	.word	0x2000059c

08007350 <_sbrk_r>:
 8007350:	2300      	movs	r3, #0
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	4d06      	ldr	r5, [pc, #24]	@ (8007370 <_sbrk_r+0x20>)
 8007356:	0004      	movs	r4, r0
 8007358:	0008      	movs	r0, r1
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f7fa f92a 	bl	80015b4 <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d103      	bne.n	800736c <_sbrk_r+0x1c>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d000      	beq.n	800736c <_sbrk_r+0x1c>
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	46c0      	nop			@ (mov r8, r8)
 8007370:	2000059c 	.word	0x2000059c

08007374 <memchr>:
 8007374:	b2c9      	uxtb	r1, r1
 8007376:	1882      	adds	r2, r0, r2
 8007378:	4290      	cmp	r0, r2
 800737a:	d101      	bne.n	8007380 <memchr+0xc>
 800737c:	2000      	movs	r0, #0
 800737e:	4770      	bx	lr
 8007380:	7803      	ldrb	r3, [r0, #0]
 8007382:	428b      	cmp	r3, r1
 8007384:	d0fb      	beq.n	800737e <memchr+0xa>
 8007386:	3001      	adds	r0, #1
 8007388:	e7f6      	b.n	8007378 <memchr+0x4>
	...

0800738c <_init>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	46c0      	nop			@ (mov r8, r8)
 8007390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007392:	bc08      	pop	{r3}
 8007394:	469e      	mov	lr, r3
 8007396:	4770      	bx	lr

08007398 <_fini>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr
