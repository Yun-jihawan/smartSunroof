
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005490  08005490  00006490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054fc  080054fc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005504  08005504  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800550c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000010  0800551c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800551c  000071b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011097  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cff  00000000  00000000  000180cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0001add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ade  00000000  00000000  0001bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001612f  00000000  00000000  0001c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133f3  00000000  00000000  000327fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f9c  00000000  00000000  00045bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfb8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  000cfbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d2ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005478 	.word	0x08005478

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005478 	.word	0x08005478

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f004 ffe0 	bl	8005420 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000462:	4a38      	ldr	r2, [pc, #224]	@ (8000544 <MX_ADC_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b36      	ldr	r3, [pc, #216]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MX_ADC_Init+0xf4>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC_Init+0xf4>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fed8 	bl	8001288 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 fad9 	bl	8000a92 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <MX_ADC_Init+0xf4>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 f937 	bl	8001768 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fac8 	bl	8000a92 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <MX_ADC_Init+0xfc>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_ADC_Init+0xf4>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f92a 	bl	8001768 <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fabb 	bl	8000a92 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800051c:	003b      	movs	r3, r7
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_ADC_Init+0x100>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC_Init+0xf4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f91d 	bl	8001768 <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 faae 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40012400 	.word	0x40012400
 8000548:	04000002 	.word	0x04000002
 800054c:	3c008000 	.word	0x3c008000

08000550 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f004 ff5c 	bl	8005420 <memset>
  if(adcHandle->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <HAL_ADC_MspInit+0xa8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13d      	bne.n	80005ee <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_ADC_MspInit+0xac>)
 80005a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fbf8 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0xb0>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f001 fbe9 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	@ 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40012400 	.word	0x40012400
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000800 	.word	0x50000800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	@ 0x2c
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2414      	movs	r4, #20
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 ff03 	bl	8005420 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b52      	ldr	r3, [pc, #328]	@ (8000764 <MX_GPIO_Init+0x160>)
 800061c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061e:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000620:	2104      	movs	r1, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000626:	4b4f      	ldr	r3, [pc, #316]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062a:	2204      	movs	r2, #4
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	4b4b      	ldr	r3, [pc, #300]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063e:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <MX_GPIO_Init+0x160>)
 800064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b40      	ldr	r3, [pc, #256]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066e:	4b3d      	ldr	r3, [pc, #244]	@ (8000764 <MX_GPIO_Init+0x160>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROOF_DIR_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2160      	movs	r1, #96	@ 0x60
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fd37 	bl	80020f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 8000688:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <MX_GPIO_Init+0x164>)
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fd31 	bl	80020f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|OPACITY_Pin, GPIO_PIN_RESET);
 8000694:	23c0      	movs	r3, #192	@ 0xc0
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4834      	ldr	r0, [pc, #208]	@ (800076c <MX_GPIO_Init+0x168>)
 800069a:	2200      	movs	r2, #0
 800069c:	0019      	movs	r1, r3
 800069e:	f001 fd2a 	bl	80020f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2284      	movs	r2, #132	@ 0x84
 80006ae:	0392      	lsls	r2, r2, #14
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_GPIO_Init+0x168>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f001 fb7e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2203      	movs	r2, #3
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	22c4      	movs	r2, #196	@ 0xc4
 80006d0:	0392      	lsls	r2, r2, #14
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	4a23      	ldr	r2, [pc, #140]	@ (800076c <MX_GPIO_Init+0x168>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f001 fb6c 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROOF_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROOF_DIR_Pin;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2260      	movs	r2, #96	@ 0x60
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	193a      	adds	r2, r7, r4
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fb59 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2204      	movs	r2, #4
 8000712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2201      	movs	r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x164>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f001 fb47 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin OPACITY_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|OPACITY_Pin;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	22c0      	movs	r2, #192	@ 0xc0
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	187b      	adds	r3, r7, r1
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <MX_GPIO_Init+0x168>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f001 fb33 	bl	8001dc0 <HAL_GPIO_Init>

}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00b      	add	sp, #44	@ 0x2c
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400
 800076c:	50000800 	.word	0x50000800

08000770 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1 Second Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	static uint8_t m = OPEN;
	if(htim->Instance == TIM7)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d112      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		// DEBUG
		m = 1 - m;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2201      	movs	r2, #1
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800078e:	701a      	strb	r2, [r3, #0]
		if(Control_Mode == AUTO_MODE) roof_state = m;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d103      	bne.n	80007a2 <HAL_TIM_PeriodElapsedCallback+0x32>
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80007a0:	701a      	strb	r2, [r3, #0]

		sensor_read = 1;
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
	}
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40001400 	.word	0x40001400
 80007b4:	20000001 	.word	0x20000001
 80007b8:	20000088 	.word	0x20000088
 80007bc:	20000000 	.word	0x20000000
 80007c0:	200000a4 	.word	0x200000a4

080007c4 <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a27      	ldr	r2, [pc, #156]	@ (8000870 <HAL_UART_RxCpltCallback+0xac>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d148      	bne.n	8000868 <HAL_UART_RxCpltCallback+0xa4>
    	rx_payload = 0;
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[0] << 24);
 80007dc:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	061a      	lsls	r2, r3, #24
 80007e2:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	431a      	orrs	r2, r3
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 80007ea:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[1] << 16);
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	041a      	lsls	r2, r3, #16
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	431a      	orrs	r2, r3
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 80007fa:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[2] << 8);
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 80007fe:	789b      	ldrb	r3, [r3, #2]
 8000800:	021a      	lsls	r2, r3, #8
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	431a      	orrs	r2, r3
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 800080a:	601a      	str	r2, [r3, #0]
    	rx_payload |= ((uint32_t)rx_buf[3]);
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 800080e:	78db      	ldrb	r3, [r3, #3]
 8000810:	001a      	movs	r2, r3
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	431a      	orrs	r2, r3
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 800081a:	601a      	str	r2, [r3, #0]
		//Control_Mode = (rx_payload >> 31) & 0x1;
		//film_opacity = (rx_payload >> 30) & 0x1;
		//roof_state = (rx_payload >> 28) & 0x3;

	    //DEBUG
	    Control_Mode = ((rx_payload >> 24) & 0x01);
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	0e1b      	lsrs	r3, r3, #24
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2201      	movs	r2, #1
 8000826:	4013      	ands	r3, r2
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <HAL_UART_RxCpltCallback+0xb8>)
 800082c:	701a      	strb	r2, [r3, #0]
	    if(Control_Mode == USER_MODE) {
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <HAL_UART_RxCpltCallback+0xb8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b01      	cmp	r3, #1
 8000836:	d111      	bne.n	800085c <HAL_UART_RxCpltCallback+0x98>
	    	film_opacity = ((rx_payload >> 16) & 0x01);
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	0c1b      	lsrs	r3, r3, #16
 800083e:	b29b      	uxth	r3, r3
 8000840:	2201      	movs	r2, #1
 8000842:	4013      	ands	r3, r2
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <HAL_UART_RxCpltCallback+0xbc>)
 8000848:	801a      	strh	r2, [r3, #0]
	    	roof_state = ((rx_payload >> 8) & 0x03);
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2203      	movs	r2, #3
 8000854:	4013      	ands	r3, r2
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_UART_RxCpltCallback+0xc0>)
 800085a:	701a      	strb	r2, [r3, #0]
	    }
        // 다시 수신 시작 (반복 수신)
        HAL_UART_Receive_IT(&huart2, rx_buf, 4);
 800085c:	4906      	ldr	r1, [pc, #24]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_UART_RxCpltCallback+0xc4>)
 8000860:	2204      	movs	r2, #4
 8000862:	0018      	movs	r0, r3
 8000864:	f003 fac0 	bl	8003de8 <HAL_UART_Receive_IT>
    }
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40004400 	.word	0x40004400
 8000874:	200000a0 	.word	0x200000a0
 8000878:	2000009c 	.word	0x2000009c
 800087c:	20000088 	.word	0x20000088
 8000880:	20000098 	.word	0x20000098
 8000884:	20000000 	.word	0x20000000
 8000888:	20000128 	.word	0x20000128

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fc8a 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f884 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f7ff feb4 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 fbde 	bl	800105c <MX_USART2_UART_Init>
  MX_ADC_Init();
 80008a0:	f7ff fdd4 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 80008a4:	f000 fb3c 	bl	8000f20 <MX_TIM7_Init>
  MX_TIM2_Init();
 80008a8:	f000 fabc 	bl	8000e24 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008ac:	f000 f8dc 	bl	8000a68 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80008b0:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <main+0xe0>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fc0e 	bl	80030d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <main+0xe4>)
 80008ba:	2104      	movs	r1, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fca3 	bl	8003208 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, rx_buf, 4);
 80008c2:	492c      	ldr	r1, [pc, #176]	@ (8000974 <main+0xe8>)
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <main+0xec>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 fa8d 	bl	8003de8 <HAL_UART_Receive_IT>

  // Initialize
  Control_Mode = AUTO_MODE;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <main+0xf0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
  encoder = 0;
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <main+0xf4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]

  roof_state = STOP;
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <main+0xf8>)
 80008dc:	2202      	movs	r2, #2
 80008de:	701a      	strb	r2, [r3, #0]
  Sunroof_Set(STOP);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 f93b 	bl	8000b5c <Sunroof_Set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(sensor_read)
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <main+0xfc>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <main+0x70>
	  {
		  read_illum();
 80008ee:	f000 fa09 	bl	8000d04 <read_illum>
		  read_rain();
 80008f2:	f000 fa21 	bl	8000d38 <read_rain>

		  sensor_read = 0;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <main+0xfc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
		  //tx_payload |= (rain_state & 0x01) << 7;               // rain_flag : 1 0 -> 8 - 1 = 7

		  //Send_Sensor_Data();
	  }

	  switch(Control_Mode) {
 80008fc:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <main+0xf0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d117      	bne.n	8000936 <main+0xaa>
	  case AUTO_MODE:
		  film_opacity = (in_illum < (out_illum - 50));
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <main+0x100>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	001a      	movs	r2, r3
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <main+0x104>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	3b32      	subs	r3, #50	@ 0x32
 8000916:	2101      	movs	r1, #1
 8000918:	429a      	cmp	r2, r3
 800091a:	db01      	blt.n	8000920 <main+0x94>
 800091c:	2300      	movs	r3, #0
 800091e:	1c19      	adds	r1, r3, #0
 8000920:	b2cb      	uxtb	r3, r1
 8000922:	001a      	movs	r2, r3
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <main+0x108>)
 8000926:	801a      	strh	r2, [r3, #0]
		  // 모터 제어
		  Sunroof_Set(roof_state);
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <main+0xf8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	0018      	movs	r0, r3
 8000930:	f000 f914 	bl	8000b5c <Sunroof_Set>
		  break;
 8000934:	e006      	b.n	8000944 <main+0xb8>

	  case USER_MODE:
	  default:
		  Sunroof_Set(roof_state);
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <main+0xf8>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	0018      	movs	r0, r3
 800093e:	f000 f90d 	bl	8000b5c <Sunroof_Set>
		  break;
 8000942:	46c0      	nop			@ (mov r8, r8)
	  }

	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, Control_Mode);
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <main+0xf0>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4813      	ldr	r0, [pc, #76]	@ (8000998 <main+0x10c>)
 800094c:	001a      	movs	r2, r3
 800094e:	2104      	movs	r1, #4
 8000950:	f001 fbd1 	bl	80020f6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, film_opacity);
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <main+0x108>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	b2da      	uxtb	r2, r3
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	480e      	ldr	r0, [pc, #56]	@ (800099c <main+0x110>)
 8000962:	0019      	movs	r1, r3
 8000964:	f001 fbc7 	bl	80020f6 <HAL_GPIO_WritePin>
	  if(sensor_read)
 8000968:	e7bd      	b.n	80008e6 <main+0x5a>
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	200000e8 	.word	0x200000e8
 8000970:	200000a8 	.word	0x200000a8
 8000974:	2000009c 	.word	0x2000009c
 8000978:	20000128 	.word	0x20000128
 800097c:	20000088 	.word	0x20000088
 8000980:	2000008c 	.word	0x2000008c
 8000984:	20000000 	.word	0x20000000
 8000988:	200000a4 	.word	0x200000a4
 800098c:	20000090 	.word	0x20000090
 8000990:	20000092 	.word	0x20000092
 8000994:	20000098 	.word	0x20000098
 8000998:	50000400 	.word	0x50000400
 800099c:	50000800 	.word	0x50000800

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b09f      	sub	sp, #124	@ 0x7c
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	2440      	movs	r4, #64	@ 0x40
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2338      	movs	r3, #56	@ 0x38
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f004 fd35 	bl	8005420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b6:	232c      	movs	r3, #44	@ 0x2c
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2314      	movs	r3, #20
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f004 fd2d 	bl	8005420 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2328      	movs	r3, #40	@ 0x28
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f004 fd26 	bl	8005420 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d4:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <SystemClock_Config+0xc0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a22      	ldr	r2, [pc, #136]	@ (8000a64 <SystemClock_Config+0xc4>)
 80009da:	401a      	ands	r2, r3
 80009dc:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <SystemClock_Config+0xc0>)
 80009de:	2180      	movs	r1, #128	@ 0x80
 80009e0:	0109      	lsls	r1, r1, #4
 80009e2:	430a      	orrs	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	22a0      	movs	r2, #160	@ 0xa0
 80009f0:	02d2      	lsls	r2, r2, #11
 80009f2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fbb3 	bl	8002168 <HAL_RCC_OscConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a06:	f000 f844 	bl	8000a92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	212c      	movs	r1, #44	@ 0x2c
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	220f      	movs	r2, #15
 8000a10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2202      	movs	r2, #2
 8000a16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 ff6e 	bl	8002910 <HAL_RCC_ClockConfig>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a38:	f000 f82b 	bl	8000a92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2202      	movs	r2, #2
 8000a40:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 f964 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a54:	f000 f81d 	bl	8000a92 <Error_Handler>
  }
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b01f      	add	sp, #124	@ 0x7c
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	40007000 	.word	0x40007000
 8000a64:	ffffe7ff 	.word	0xffffe7ff

08000a68 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2005      	movs	r0, #5
 8000a72:	f001 f8eb 	bl	8001c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f001 f8fd 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2012      	movs	r0, #18
 8000a82:	f001 f8e3 	bl	8001c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a86:	2012      	movs	r0, #18
 8000a88:	f001 f8f5 	bl	8001c76 <HAL_NVIC_EnableIRQ>
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a96:	b672      	cpsid	i
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	e7fd      	b.n	8000a9a <Error_Handler+0x8>
	...

08000aa0 <HAL_GPIO_EXTI_Callback>:
 */

#include "roof.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	1dbb      	adds	r3, r7, #6
 8000aaa:	801a      	strh	r2, [r3, #0]
	uint8_t A_state = 0;
 8000aac:	250f      	movs	r5, #15
 8000aae:	197b      	adds	r3, r7, r5
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	uint8_t B_state = 0;
 8000ab4:	260e      	movs	r6, #14
 8000ab6:	19bb      	adds	r3, r7, r6
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == ENC_A_Pin) {
 8000abc:	1dbb      	adds	r3, r7, #6
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d11e      	bne.n	8000b02 <HAL_GPIO_EXTI_Callback+0x62>
		A_state = HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin);
 8000ac4:	197c      	adds	r4, r7, r5
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 faf6 	bl	80020bc <HAL_GPIO_ReadPin>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]
		B_state = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000ad4:	19bc      	adds	r4, r7, r6
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000ad8:	2102      	movs	r1, #2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 faee 	bl	80020bc <HAL_GPIO_ReadPin>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]
		encoder += ((A_state == B_state) ? 1 : -1);
 8000ae4:	197a      	adds	r2, r7, r5
 8000ae6:	19bb      	adds	r3, r7, r6
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d101      	bne.n	8000af4 <HAL_GPIO_EXTI_Callback+0x54>
 8000af0:	2201      	movs	r2, #1
 8000af2:	e001      	b.n	8000af8 <HAL_GPIO_EXTI_Callback+0x58>
 8000af4:	2301      	movs	r3, #1
 8000af6:	425a      	negs	r2, r3
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	18d2      	adds	r2, r2, r3
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b00:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == ENC_B_Pin) {
 8000b02:	1dbb      	adds	r3, r7, #6
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d120      	bne.n	8000b4c <HAL_GPIO_EXTI_Callback+0xac>
		A_state = HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin);
 8000b0a:	250f      	movs	r5, #15
 8000b0c:	197c      	adds	r4, r7, r5
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fad2 	bl	80020bc <HAL_GPIO_ReadPin>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	7023      	strb	r3, [r4, #0]
		B_state = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000b1c:	260e      	movs	r6, #14
 8000b1e:	19bc      	adds	r4, r7, r6
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b22:	2102      	movs	r1, #2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fac9 	bl	80020bc <HAL_GPIO_ReadPin>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	7023      	strb	r3, [r4, #0]
		encoder += ((A_state == B_state) ? -1 : 1);
 8000b2e:	197a      	adds	r2, r7, r5
 8000b30:	19bb      	adds	r3, r7, r6
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d102      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0xa0>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	425a      	negs	r2, r3
 8000b3e:	e000      	b.n	8000b42 <HAL_GPIO_EXTI_Callback+0xa2>
 8000b40:	2201      	movs	r2, #1
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b4a:	601a      	str	r2, [r3, #0]
	}
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b005      	add	sp, #20
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b54:	50000800 	.word	0x50000800
 8000b58:	2000008c 	.word	0x2000008c

08000b5c <Sunroof_Set>:

void Sunroof_Set(uint8_t mode) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d023      	beq.n	8000bb8 <Sunroof_Set+0x5c>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d142      	bne.n	8000bfa <Sunroof_Set+0x9e>
	case OPEN:
		if(encoder <= ROOF_MAX) {
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <Sunroof_Set+0xbc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a28      	ldr	r2, [pc, #160]	@ (8000c1c <Sunroof_Set+0xc0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	dc11      	bgt.n	8000ba2 <Sunroof_Set+0x46>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000b7e:	4b28      	ldr	r3, [pc, #160]	@ (8000c20 <Sunroof_Set+0xc4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2246      	movs	r2, #70	@ 0x46
 8000b84:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000b86:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <Sunroof_Set+0xc8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 fab2 	bl	80020f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000b92:	23a0      	movs	r3, #160	@ 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2201      	movs	r2, #1
 8000b98:	2140      	movs	r1, #64	@ 0x40
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 faab 	bl	80020f6 <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000ba0:	e036      	b.n	8000c10 <Sunroof_Set+0xb4>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <Sunroof_Set+0xc4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <Sunroof_Set+0xc8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 faa0 	bl	80020f6 <HAL_GPIO_WritePin>
		break;
 8000bb6:	e02b      	b.n	8000c10 <Sunroof_Set+0xb4>
	case CLOSE:
		if(encoder >= 0) {
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <Sunroof_Set+0xbc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db11      	blt.n	8000be4 <Sunroof_Set+0x88>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <Sunroof_Set+0xc4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2246      	movs	r2, #70	@ 0x46
 8000bc6:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <Sunroof_Set+0xc8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2180      	movs	r1, #128	@ 0x80
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fa91 	bl	80020f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000bd4:	23a0      	movs	r3, #160	@ 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fa8a 	bl	80020f6 <HAL_GPIO_WritePin>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000be2:	e015      	b.n	8000c10 <Sunroof_Set+0xb4>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <Sunroof_Set+0xc4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2200      	movs	r2, #0
 8000bea:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <Sunroof_Set+0xc8>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2180      	movs	r1, #128	@ 0x80
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 fa7f 	bl	80020f6 <HAL_GPIO_WritePin>
		break;
 8000bf8:	e00a      	b.n	8000c10 <Sunroof_Set+0xb4>
	case STOP:
	default:
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <Sunroof_Set+0xc4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <Sunroof_Set+0xc8>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	2180      	movs	r1, #128	@ 0x80
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 fa74 	bl	80020f6 <HAL_GPIO_WritePin>
		break;
 8000c0e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	00001388 	.word	0x00001388
 8000c20:	200000a8 	.word	0x200000a8
 8000c24:	50000800 	.word	0x50000800

08000c28 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000c30:	2316      	movs	r3, #22
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <HW_AdcReadChannel+0xc4>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d1f9      	bne.n	8000c3a <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000c46:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <HW_AdcReadChannel+0xc8>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c4a:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <HW_AdcReadChannel+0xc8>)
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	0089      	lsls	r1, r1, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000c54:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fead 	bl	80019b8 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000c5e:	240c      	movs	r4, #12
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <HW_AdcReadChannel+0xd0>)
 8000c64:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	4a24      	ldr	r2, [pc, #144]	@ (8000cfc <HW_AdcReadChannel+0xd4>)
 8000c6a:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000c6c:	193a      	adds	r2, r7, r4
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fd78 	bl	8001768 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8000c78:	0021      	movs	r1, r4
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	0152      	lsls	r2, r2, #5
 8000c86:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000c88:	187a      	adds	r2, r7, r1
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fd6a 	bl	8001768 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 fc6a 	bl	8001570 <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	425a      	negs	r2, r3
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fcb7 	bl	8001618 <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 8000caa:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fd4f 	bl	8001750 <HAL_ADC_GetValue>
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	2016      	movs	r0, #22
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HW_AdcReadChannel+0xcc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <HW_AdcReadChannel+0xc8>)
 8000cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HW_AdcReadChannel+0xc8>)
 8000cd8:	4909      	ldr	r1, [pc, #36]	@ (8000d00 <HW_AdcReadChannel+0xd8>)
 8000cda:	400a      	ands	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 8000cde:	183b      	adds	r3, r7, r0
 8000ce0:	881b      	ldrh	r3, [r3, #0]
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b007      	add	sp, #28
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	2000002c 	.word	0x2000002c
 8000cf8:	0007ffff 	.word	0x0007ffff
 8000cfc:	00001001 	.word	0x00001001
 8000d00:	fffffdff 	.word	0xfffffdff

08000d04 <read_illum>:

void read_illum(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <read_illum+0x28>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff8c 	bl	8000c28 <HW_AdcReadChannel>
 8000d10:	0003      	movs	r3, r0
 8000d12:	001a      	movs	r2, r3
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <read_illum+0x2c>)
 8000d16:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff ff85 	bl	8000c28 <HW_AdcReadChannel>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	001a      	movs	r2, r3
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <read_illum+0x30>)
 8000d24:	801a      	strh	r2, [r3, #0]
}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	04000002 	.word	0x04000002
 8000d30:	20000090 	.word	0x20000090
 8000d34:	20000092 	.word	0x20000092

08000d38 <read_rain>:

void read_rain(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <read_rain+0x34>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff72 	bl	8000c28 <HW_AdcReadChannel>
 8000d44:	0003      	movs	r3, r0
 8000d46:	001a      	movs	r2, r3
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <read_rain+0x38>)
 8000d4a:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <read_rain+0x38>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	22c8      	movs	r2, #200	@ 0xc8
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	429a      	cmp	r2, r3
 8000d58:	419b      	sbcs	r3, r3
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	001a      	movs	r2, r3
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <read_rain+0x3c>)
 8000d62:	701a      	strb	r2, [r3, #0]
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	3c008000 	.word	0x3c008000
 8000d70:	20000094 	.word	0x20000094
 8000d74:	20000096 	.word	0x20000096

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <HAL_MspInit+0x24>)
 8000d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x24>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <HAL_MspInit+0x24>)
 8000d8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_MspInit+0x24>)
 8000d8e:	2180      	movs	r1, #128	@ 0x80
 8000d90:	0549      	lsls	r1, r1, #21
 8000d92:	430a      	orrs	r2, r1
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 fa42 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f001 f9aa 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f001 f9a7 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <TIM7_IRQHandler+0x14>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 fa9c 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	200000e8 	.word	0x200000e8

08000e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <USART2_IRQHandler+0x14>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f003 f84c 	bl	8003ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	20000128 	.word	0x20000128

08000e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	2318      	movs	r3, #24
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2310      	movs	r3, #16
 8000e32:	001a      	movs	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f004 faf3 	bl	8005420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2308      	movs	r3, #8
 8000e42:	001a      	movs	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f004 faeb 	bl	8005420 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2310      	movs	r3, #16
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 fae4 	bl	8005420 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e58:	4b30      	ldr	r3, [pc, #192]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	05d2      	lsls	r2, r2, #23
 8000e5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e60:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e6e:	2263      	movs	r2, #99	@ 0x63
 8000e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e7e:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f002 f8e7 	bl	8003054 <HAL_TIM_Base_Init>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e8a:	f7ff fe02 	bl	8000a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8e:	2118      	movs	r1, #24
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	0152      	lsls	r2, r2, #5
 8000e96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e98:	187a      	adds	r2, r7, r1
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 fbd6 	bl	8003650 <HAL_TIM_ConfigClockSource>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ea8:	f7ff fdf3 	bl	8000a92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 f962 	bl	8003178 <HAL_TIM_PWM_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000eb8:	f7ff fdeb 	bl	8000a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eca:	187a      	adds	r2, r7, r1
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f002 fed7 	bl	8003c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000eda:	f7ff fdda 	bl	8000a92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2260      	movs	r2, #96	@ 0x60
 8000ee2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef6:	0039      	movs	r1, r7
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	0018      	movs	r0, r3
 8000efe:	f002 fae1 	bl	80034c4 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000f06:	f7ff fdc4 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f0a:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <MX_TIM2_Init+0xf8>)
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 f869 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b00a      	add	sp, #40	@ 0x28
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	200000a8 	.word	0x200000a8

08000f20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	003b      	movs	r3, r7
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f004 fa76 	bl	8005420 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f36:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <MX_TIM7_Init+0x70>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f3c:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <MX_TIM7_Init+0x74>)
 8000f3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f48:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <MX_TIM7_Init+0x78>)
 8000f4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f002 f87d 	bl	8003054 <HAL_TIM_Base_Init>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f5e:	f7ff fd98 	bl	8000a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f6e:	003a      	movs	r2, r7
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_TIM7_Init+0x6c>)
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f002 fe85 	bl	8003c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000f7e:	f7ff fd88 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	40001400 	.word	0x40001400
 8000f94:	00001f3f 	.word	0x00001f3f
 8000f98:	0000270f 	.word	0x0000270f

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d106      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM7)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d105      	bne.n	8000fd4 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fce:	2120      	movs	r1, #32
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40001400 	.word	0x40001400

08000fe4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	240c      	movs	r4, #12
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f004 fa12 	bl	8005420 <memset>
  if(timHandle->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	429a      	cmp	r2, r3
 8001006:	d121      	bne.n	800104c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_TIM_MspPostInit+0x70>)
 800100a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_TIM_MspPostInit+0x70>)
 800100e:	2102      	movs	r1, #2
 8001010:	430a      	orrs	r2, r1
 8001012:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_TIM_MspPostInit+0x70>)
 8001016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001018:	2202      	movs	r2, #2
 800101a:	4013      	ands	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001020:	0021      	movs	r1, r4
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2208      	movs	r2, #8
 8001026:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2202      	movs	r2, #2
 800102c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2202      	movs	r2, #2
 800103e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	187b      	adds	r3, r7, r1
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <HAL_TIM_MspPostInit+0x74>)
 8001044:	0019      	movs	r1, r3
 8001046:	0010      	movs	r0, r2
 8001048:	f000 feba 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b009      	add	sp, #36	@ 0x24
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	50000400 	.word	0x50000400

0800105c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001062:	4a15      	ldr	r2, [pc, #84]	@ (80010b8 <MX_USART2_UART_Init+0x5c>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001068:	22e1      	movs	r2, #225	@ 0xe1
 800106a:	0252      	lsls	r2, r2, #9
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <MX_USART2_UART_Init+0x58>)
 80010a0:	0018      	movs	r0, r3
 80010a2:	f002 fe4d 	bl	8003d40 <HAL_UART_Init>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010aa:	f7ff fcf2 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000128 	.word	0x20000128
 80010b8:	40004400 	.word	0x40004400

080010bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	240c      	movs	r4, #12
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	0018      	movs	r0, r3
 80010ca:	2314      	movs	r3, #20
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f004 f9a6 	bl	8005420 <memset>
  if(uartHandle->Instance==USART2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <HAL_UART_MspInit+0x90>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d131      	bne.n	8001142 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_UART_MspInit+0x94>)
 80010e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <HAL_UART_MspInit+0x94>)
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	0289      	lsls	r1, r1, #10
 80010e8:	430a      	orrs	r2, r1
 80010ea:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_UART_MspInit+0x94>)
 80010ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <HAL_UART_MspInit+0x94>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_UART_MspInit+0x94>)
 80010fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fc:	2201      	movs	r2, #1
 80010fe:	4013      	ands	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001104:	0021      	movs	r1, r4
 8001106:	187b      	adds	r3, r7, r1
 8001108:	220c      	movs	r2, #12
 800110a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2202      	movs	r2, #2
 8001110:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2203      	movs	r2, #3
 800111c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2204      	movs	r2, #4
 8001122:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	187a      	adds	r2, r7, r1
 8001126:	23a0      	movs	r3, #160	@ 0xa0
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f000 fe47 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201c      	movs	r0, #28
 8001138:	f000 fd88 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113c:	201c      	movs	r0, #28
 800113e:	f000 fd9a 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b009      	add	sp, #36	@ 0x24
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	40004400 	.word	0x40004400
 8001150:	40021000 	.word	0x40021000

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001156:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001158:	f7ff fe5e 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001182:	f004 f955 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fb81 	bl	800088c <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
   ldr   r0, =_estack
 800118c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001198:	0800550c 	.word	0x0800550c
  ldr r2, =_sbss
 800119c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011a0:	200001b4 	.word	0x200001b4

080011a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_COMP_IRQHandler>
	...

080011a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_Init+0x3c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_Init+0x3c>)
 80011ba:	2140      	movs	r1, #64	@ 0x40
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f811 	bl	80011e8 <HAL_InitTick>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e001      	b.n	80011d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d2:	f7ff fdd1 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_InitTick+0x5c>)
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	0019      	movs	r1, r3
 80011fa:	23fa      	movs	r3, #250	@ 0xfa
 80011fc:	0098      	lsls	r0, r3, #2
 80011fe:	f7fe ff83 	bl	8000108 <__udivsi3>
 8001202:	0003      	movs	r3, r0
 8001204:	0019      	movs	r1, r3
 8001206:	0020      	movs	r0, r4
 8001208:	f7fe ff7e 	bl	8000108 <__udivsi3>
 800120c:	0003      	movs	r3, r0
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fd41 	bl	8001c96 <HAL_SYSTICK_Config>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d001      	beq.n	800121c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e00f      	b.n	800123c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d80b      	bhi.n	800123a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	2200      	movs	r2, #0
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fd0e 	bl	8001c4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_InitTick+0x64>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b003      	add	sp, #12
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	2000000c 	.word	0x2000000c
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	18d2      	adds	r2, r2, r3
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_IncTick+0x20>)
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	2000000c 	.word	0x2000000c
 8001270:	200001b0 	.word	0x200001b0

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	@ (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	200001b0 	.word	0x200001b0

08001288 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e159      	b.n	800154e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2250      	movs	r2, #80	@ 0x50
 80012ac:	2100      	movs	r1, #0
 80012ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7ff f94c 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012bc:	2210      	movs	r2, #16
 80012be:	4013      	ands	r3, r2
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d005      	beq.n	80012d0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012ce:	d00b      	beq.n	80012e8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d4:	2210      	movs	r2, #16
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2250      	movs	r2, #80	@ 0x50
 80012e0:	2100      	movs	r1, #0
 80012e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e132      	b.n	800154e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ec:	4a9a      	ldr	r2, [pc, #616]	@ (8001558 <HAL_ADC_Init+0x2d0>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	2202      	movs	r2, #2
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2203      	movs	r2, #3
 8001300:	4013      	ands	r3, r2
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_ADC_Init+0x90>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2201      	movs	r2, #1
 800130e:	4013      	ands	r3, r2
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_Init+0x90>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_ADC_Init+0x92>
 8001318:	2300      	movs	r3, #0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d149      	bne.n	80013b2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	23c0      	movs	r3, #192	@ 0xc0
 8001324:	061b      	lsls	r3, r3, #24
 8001326:	429a      	cmp	r2, r3
 8001328:	d00b      	beq.n	8001342 <HAL_ADC_Init+0xba>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	429a      	cmp	r2, r3
 8001334:	d005      	beq.n	8001342 <HAL_ADC_Init+0xba>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	429a      	cmp	r2, r3
 8001340:	d111      	bne.n	8001366 <HAL_ADC_Init+0xde>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	0892      	lsrs	r2, r2, #2
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6919      	ldr	r1, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	e014      	b.n	8001390 <HAL_ADC_Init+0x108>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	0892      	lsrs	r2, r2, #2
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	4b79      	ldr	r3, [pc, #484]	@ (800155c <HAL_ADC_Init+0x2d4>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b78      	ldr	r3, [pc, #480]	@ (800155c <HAL_ADC_Init+0x2d4>)
 800137c:	4978      	ldr	r1, [pc, #480]	@ (8001560 <HAL_ADC_Init+0x2d8>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	4b76      	ldr	r3, [pc, #472]	@ (800155c <HAL_ADC_Init+0x2d4>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4b74      	ldr	r3, [pc, #464]	@ (800155c <HAL_ADC_Init+0x2d4>)
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2118      	movs	r1, #24
 800139c:	438a      	bics	r2, r1
 800139e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68d9      	ldr	r1, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013b2:	4b6a      	ldr	r3, [pc, #424]	@ (800155c <HAL_ADC_Init+0x2d4>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b69      	ldr	r3, [pc, #420]	@ (800155c <HAL_ADC_Init+0x2d4>)
 80013b8:	496a      	ldr	r1, [pc, #424]	@ (8001564 <HAL_ADC_Init+0x2dc>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80013be:	4b67      	ldr	r3, [pc, #412]	@ (800155c <HAL_ADC_Init+0x2d4>)
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c6:	065a      	lsls	r2, r3, #25
 80013c8:	4b64      	ldr	r3, [pc, #400]	@ (800155c <HAL_ADC_Init+0x2d4>)
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	4013      	ands	r3, r2
 80013da:	d108      	bne.n	80013ee <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2180      	movs	r1, #128	@ 0x80
 80013e8:	0549      	lsls	r1, r1, #21
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	495b      	ldr	r1, [pc, #364]	@ (8001568 <HAL_ADC_Init+0x2e0>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68d9      	ldr	r1, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d101      	bne.n	8001414 <HAL_ADC_Init+0x18c>
 8001410:	2304      	movs	r3, #4
 8001412:	e000      	b.n	8001416 <HAL_ADC_Init+0x18e>
 8001414:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001416:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2020      	movs	r0, #32
 800141c:	5c1b      	ldrb	r3, [r3, r0]
 800141e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001420:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	202c      	movs	r0, #44	@ 0x2c
 8001426:	5c1b      	ldrb	r3, [r3, r0]
 8001428:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800142a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001430:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001438:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001440:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800144e:	23c2      	movs	r3, #194	@ 0xc2
 8001450:	33ff      	adds	r3, #255	@ 0xff
 8001452:	429a      	cmp	r2, r3
 8001454:	d00b      	beq.n	800146e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68d9      	ldr	r1, [r3, #12]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2221      	movs	r2, #33	@ 0x21
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d11a      	bne.n	80014ae <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	0249      	lsls	r1, r1, #9
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	e00b      	b.n	80014ae <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	2220      	movs	r2, #32
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	2201      	movs	r2, #1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d11f      	bne.n	80014f6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	492a      	ldr	r1, [pc, #168]	@ (800156c <HAL_ADC_Init+0x2e4>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6919      	ldr	r1, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014d4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80014da:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2101      	movs	r1, #1
 80014f0:	430a      	orrs	r2, r1
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	e00e      	b.n	8001514 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2107      	movs	r1, #7
 8001520:	438a      	bics	r2, r1
 8001522:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6959      	ldr	r1, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	2203      	movs	r2, #3
 8001542:	4393      	bics	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	fffffefd 	.word	0xfffffefd
 800155c:	40012708 	.word	0x40012708
 8001560:	ffc3ffff 	.word	0xffc3ffff
 8001564:	fdffffff 	.word	0xfdffffff
 8001568:	fffe0219 	.word	0xfffe0219
 800156c:	fffffc03 	.word	0xfffffc03

08001570 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001578:	230f      	movs	r3, #15
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2204      	movs	r2, #4
 8001588:	4013      	ands	r3, r2
 800158a:	d138      	bne.n	80015fe <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2250      	movs	r2, #80	@ 0x50
 8001590:	5c9b      	ldrb	r3, [r3, r2]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_ADC_Start+0x2a>
 8001596:	2302      	movs	r3, #2
 8001598:	e038      	b.n	800160c <HAL_ADC_Start+0x9c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2250      	movs	r2, #80	@ 0x50
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80015aa:	230f      	movs	r3, #15
 80015ac:	18fc      	adds	r4, r7, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 f979 	bl	80018a8 <ADC_Enable>
 80015b6:	0003      	movs	r3, r0
 80015b8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015ba:	230f      	movs	r3, #15
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d120      	bne.n	8001606 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <HAL_ADC_Start+0xa4>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	2280      	movs	r2, #128	@ 0x80
 80015ce:	0052      	lsls	r2, r2, #1
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2250      	movs	r2, #80	@ 0x50
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	221c      	movs	r2, #28
 80015ea:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2104      	movs	r1, #4
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e003      	b.n	8001606 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015fe:	230f      	movs	r3, #15
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2202      	movs	r2, #2
 8001604:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001606:	230f      	movs	r3, #15
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	781b      	ldrb	r3, [r3, #0]
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b005      	add	sp, #20
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	fffff0fe 	.word	0xfffff0fe

08001618 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d102      	bne.n	8001638 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001632:	2308      	movs	r3, #8
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e014      	b.n	8001662 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10b      	bne.n	800165e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164a:	2220      	movs	r2, #32
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2250      	movs	r2, #80	@ 0x50
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e072      	b.n	8001744 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800165e:	230c      	movs	r3, #12
 8001660:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001662:	f7ff fe07 	bl	8001274 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800166a:	e01f      	b.n	80016ac <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	d01c      	beq.n	80016ac <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <HAL_ADC_PollForConversion+0x70>
 8001678:	f7ff fdfc 	bl	8001274 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d211      	bcs.n	80016ac <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001698:	2204      	movs	r2, #4
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2250      	movs	r2, #80	@ 0x50
 80016a4:	2100      	movs	r1, #0
 80016a6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e04b      	b.n	8001744 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0d9      	beq.n	800166c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016bc:	2280      	movs	r2, #128	@ 0x80
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	23c0      	movs	r3, #192	@ 0xc0
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d12e      	bne.n	8001732 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d129      	bne.n	8001732 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2208      	movs	r2, #8
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d122      	bne.n	8001732 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2204      	movs	r2, #4
 80016f4:	4013      	ands	r3, r2
 80016f6:	d110      	bne.n	800171a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	210c      	movs	r1, #12
 8001704:	438a      	bics	r2, r1
 8001706:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170c:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <HAL_ADC_PollForConversion+0x134>)
 800170e:	4013      	ands	r3, r2
 8001710:	2201      	movs	r2, #1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	@ 0x54
 8001718:	e00b      	b.n	8001732 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171e:	2220      	movs	r2, #32
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	2201      	movs	r2, #1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b004      	add	sp, #16
 800174a:	bd80      	pop	{r7, pc}
 800174c:	fffffefe 	.word	0xfffffefe

08001750 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2250      	movs	r2, #80	@ 0x50
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x18>
 800177c:	2302      	movs	r3, #2
 800177e:	e085      	b.n	800188c <HAL_ADC_ConfigChannel+0x124>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2250      	movs	r2, #80	@ 0x50
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d00b      	beq.n	80017ac <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001798:	2220      	movs	r2, #32
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2250      	movs	r2, #80	@ 0x50
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e06f      	b.n	800188c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a38      	ldr	r2, [pc, #224]	@ (8001894 <HAL_ADC_ConfigChannel+0x12c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d035      	beq.n	8001822 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	035b      	lsls	r3, r3, #13
 80017c2:	0b5a      	lsrs	r2, r3, #13
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	02db      	lsls	r3, r3, #11
 80017d4:	4013      	ands	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 80017de:	2180      	movs	r1, #128	@ 0x80
 80017e0:	0409      	lsls	r1, r1, #16
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f000 f8c6 	bl	8001978 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	029b      	lsls	r3, r3, #10
 80017f4:	4013      	ands	r3, r2
 80017f6:	d006      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 80017fe:	2180      	movs	r1, #128	@ 0x80
 8001800:	03c9      	lsls	r1, r1, #15
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4013      	ands	r3, r2
 8001810:	d037      	beq.n	8001882 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 8001818:	2180      	movs	r1, #128	@ 0x80
 800181a:	0449      	lsls	r1, r1, #17
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e02f      	b.n	8001882 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	035b      	lsls	r3, r3, #13
 800182e:	0b5b      	lsrs	r3, r3, #13
 8001830:	43d9      	mvns	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	400a      	ands	r2, r1
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	02db      	lsls	r3, r3, #11
 8001842:	4013      	ands	r3, r2
 8001844:	d005      	beq.n	8001852 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 800184c:	4913      	ldr	r1, [pc, #76]	@ (800189c <HAL_ADC_ConfigChannel+0x134>)
 800184e:	400a      	ands	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	029b      	lsls	r3, r3, #10
 800185a:	4013      	ands	r3, r2
 800185c:	d005      	beq.n	800186a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 8001864:	490e      	ldr	r1, [pc, #56]	@ (80018a0 <HAL_ADC_ConfigChannel+0x138>)
 8001866:	400a      	ands	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	4013      	ands	r3, r2
 8001874:	d005      	beq.n	8001882 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001876:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <HAL_ADC_ConfigChannel+0x130>)
 800187c:	4909      	ldr	r1, [pc, #36]	@ (80018a4 <HAL_ADC_ConfigChannel+0x13c>)
 800187e:	400a      	ands	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2250      	movs	r2, #80	@ 0x50
 8001886:	2100      	movs	r1, #0
 8001888:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}
 8001894:	00001001 	.word	0x00001001
 8001898:	40012708 	.word	0x40012708
 800189c:	ff7fffff 	.word	0xff7fffff
 80018a0:	ffbfffff 	.word	0xffbfffff
 80018a4:	feffffff 	.word	0xfeffffff

080018a8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2203      	movs	r2, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <ADC_Enable+0x2c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <ADC_Enable+0x2c>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <ADC_Enable+0x2e>
 80018d4:	2300      	movs	r3, #0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d146      	bne.n	8001968 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a24      	ldr	r2, [pc, #144]	@ (8001974 <ADC_Enable+0xcc>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	d00d      	beq.n	8001902 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ea:	2210      	movs	r2, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	2201      	movs	r2, #1
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e033      	b.n	800196a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f830 	bl	8001978 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001918:	f7ff fcac 	bl	8001274 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001920:	e01b      	b.n	800195a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001922:	f7ff fca7 	bl	8001274 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b0a      	cmp	r3, #10
 800192e:	d914      	bls.n	800195a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	2b01      	cmp	r3, #1
 800193c:	d00d      	beq.n	800195a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001942:	2210      	movs	r2, #16
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	2201      	movs	r2, #1
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e007      	b.n	800196a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	2b01      	cmp	r3, #1
 8001966:	d1dc      	bne.n	8001922 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	80000017 	.word	0x80000017

08001978 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <ADC_DelayMicroSecond+0x38>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	490b      	ldr	r1, [pc, #44]	@ (80019b4 <ADC_DelayMicroSecond+0x3c>)
 8001986:	0018      	movs	r0, r3
 8001988:	f7fe fbbe 	bl	8000108 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4353      	muls	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001996:	e002      	b.n	800199e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3b01      	subs	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <ADC_DelayMicroSecond+0x20>
  }
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	20000004 	.word	0x20000004
 80019b4:	000f4240 	.word	0x000f4240

080019b8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c2:	2317      	movs	r3, #23
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2250      	movs	r2, #80	@ 0x50
 80019d6:	5c9b      	ldrb	r3, [r3, r2]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_ADCEx_Calibration_Start+0x28>
 80019dc:	2302      	movs	r3, #2
 80019de:	e083      	b.n	8001ae8 <HAL_ADCEx_Calibration_Start+0x130>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2250      	movs	r2, #80	@ 0x50
 80019e4:	2101      	movs	r1, #1
 80019e6:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2203      	movs	r2, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_ADCEx_Calibration_Start+0x50>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_ADCEx_Calibration_Start+0x50>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_ADCEx_Calibration_Start+0x52>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d15b      	bne.n	8001ac6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a12:	4a37      	ldr	r2, [pc, #220]	@ (8001af0 <HAL_ADCEx_Calibration_Start+0x138>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	2202      	movs	r2, #2
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2103      	movs	r1, #3
 8001a36:	438a      	bics	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	0609      	lsls	r1, r1, #24
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8001a4c:	f7ff fc12 	bl	8001274 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a54:	e01d      	b.n	8001a92 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a56:	f7ff fc0d 	bl	8001274 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b0a      	cmp	r3, #10
 8001a62:	d916      	bls.n	8001a92 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	0fdb      	lsrs	r3, r3, #31
 8001a6c:	07da      	lsls	r2, r3, #31
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d10d      	bne.n	8001a92 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7a:	2212      	movs	r2, #18
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	2210      	movs	r2, #16
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2250      	movs	r2, #80	@ 0x50
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e02a      	b.n	8001ae8 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	0fdb      	lsrs	r3, r3, #31
 8001a9a:	07da      	lsls	r2, r3, #31
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d0d8      	beq.n	8001a56 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68d9      	ldr	r1, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4393      	bics	r3, r2
 8001abc:	2201      	movs	r2, #1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ac4:	e009      	b.n	8001ada <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aca:	2220      	movs	r2, #32
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2317      	movs	r3, #23
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2250      	movs	r2, #80	@ 0x50
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001ae2:	2317      	movs	r3, #23
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b006      	add	sp, #24
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	fffffefd 	.word	0xfffffefd

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	0002      	movs	r2, r0
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b06:	d809      	bhi.n	8001b1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	231f      	movs	r3, #31
 8001b10:	401a      	ands	r2, r3
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <__NVIC_EnableIRQ+0x30>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	4091      	lsls	r1, r2
 8001b18:	000a      	movs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
  }
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b3c:	d828      	bhi.n	8001b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <__NVIC_SetPriority+0xd4>)
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	33c0      	adds	r3, #192	@ 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	589b      	ldr	r3, [r3, r2]
 8001b4e:	1dfa      	adds	r2, r7, #7
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	0011      	movs	r1, r2
 8001b54:	2203      	movs	r2, #3
 8001b56:	400a      	ands	r2, r1
 8001b58:	00d2      	lsls	r2, r2, #3
 8001b5a:	21ff      	movs	r1, #255	@ 0xff
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	43d2      	mvns	r2, r2
 8001b62:	401a      	ands	r2, r3
 8001b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	22ff      	movs	r2, #255	@ 0xff
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	0018      	movs	r0, r3
 8001b74:	2303      	movs	r3, #3
 8001b76:	4003      	ands	r3, r0
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7c:	481f      	ldr	r0, [pc, #124]	@ (8001bfc <__NVIC_SetPriority+0xd4>)
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	430a      	orrs	r2, r1
 8001b88:	33c0      	adds	r3, #192	@ 0xc0
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b8e:	e031      	b.n	8001bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b90:	4a1b      	ldr	r2, [pc, #108]	@ (8001c00 <__NVIC_SetPriority+0xd8>)
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	0019      	movs	r1, r3
 8001b98:	230f      	movs	r3, #15
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3306      	adds	r3, #6
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1dfa      	adds	r2, r7, #7
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	0011      	movs	r1, r2
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	00d2      	lsls	r2, r2, #3
 8001bb6:	21ff      	movs	r1, #255	@ 0xff
 8001bb8:	4091      	lsls	r1, r2
 8001bba:	000a      	movs	r2, r1
 8001bbc:	43d2      	mvns	r2, r2
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	22ff      	movs	r2, #255	@ 0xff
 8001bc8:	401a      	ands	r2, r3
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	4003      	ands	r3, r0
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd8:	4809      	ldr	r0, [pc, #36]	@ (8001c00 <__NVIC_SetPriority+0xd8>)
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	001c      	movs	r4, r3
 8001be0:	230f      	movs	r3, #15
 8001be2:	4023      	ands	r3, r4
 8001be4:	3b08      	subs	r3, #8
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	430a      	orrs	r2, r1
 8001bea:	3306      	adds	r3, #6
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	18c3      	adds	r3, r0, r3
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b003      	add	sp, #12
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	045b      	lsls	r3, r3, #17
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d301      	bcc.n	8001c1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e010      	b.n	8001c3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <SysTick_Config+0x44>)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	3a01      	subs	r2, #1
 8001c22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c24:	2301      	movs	r3, #1
 8001c26:	425b      	negs	r3, r3
 8001c28:	2103      	movs	r1, #3
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff ff7c 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <SysTick_Config+0x44>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <SysTick_Config+0x44>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	210f      	movs	r1, #15
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	1c02      	adds	r2, r0, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	0011      	movs	r1, r2
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ff33 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff ffaf 	bl	8001c04 <SysTick_Config>
 8001ca6:	0003      	movs	r3, r0
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	230f      	movs	r3, #15
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2225      	movs	r2, #37	@ 0x25
 8001cc4:	5c9b      	ldrb	r3, [r3, r2]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d008      	beq.n	8001cde <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e024      	b.n	8001d28 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	210e      	movs	r1, #14
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	438a      	bics	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	221c      	movs	r2, #28
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4091      	lsls	r1, r2
 8001d0e:	000a      	movs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2225      	movs	r2, #37	@ 0x25
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2224      	movs	r2, #36	@ 0x24
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

    return status;
 8001d22:	230f      	movs	r3, #15
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	210f      	movs	r1, #15
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2225      	movs	r2, #37	@ 0x25
 8001d44:	5c9b      	ldrb	r3, [r3, r2]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d006      	beq.n	8001d5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e02a      	b.n	8001db0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	210e      	movs	r1, #14
 8001d66:	438a      	bics	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	438a      	bics	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	221c      	movs	r2, #28
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2101      	movs	r1, #1
 8001d88:	4091      	lsls	r1, r2
 8001d8a:	000a      	movs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2225      	movs	r2, #37	@ 0x25
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2224      	movs	r2, #36	@ 0x24
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	0010      	movs	r0, r2
 8001dae:	4798      	blx	r3
    }
  }
  return status;
 8001db0:	230f      	movs	r3, #15
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd6:	e155      	b.n	8002084 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4091      	lsls	r1, r2
 8001de2:	000a      	movs	r2, r1
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d100      	bne.n	8001df0 <HAL_GPIO_Init+0x30>
 8001dee:	e146      	b.n	800207e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d005      	beq.n	8001e08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d130      	bne.n	8001e6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	409a      	lsls	r2, r3
 8001e16:	0013      	movs	r3, r2
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	43da      	mvns	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	2201      	movs	r2, #1
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d017      	beq.n	8001ea6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d123      	bne.n	8001efa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	58d3      	ldr	r3, [r2, r3]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2107      	movs	r1, #7
 8001ede:	400b      	ands	r3, r1
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	6939      	ldr	r1, [r7, #16]
 8001ef8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	23c0      	movs	r3, #192	@ 0xc0
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	4013      	ands	r3, r2
 8001f38:	d100      	bne.n	8001f3c <HAL_GPIO_Init+0x17c>
 8001f3a:	e0a0      	b.n	800207e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3c:	4b57      	ldr	r3, [pc, #348]	@ (800209c <HAL_GPIO_Init+0x2dc>)
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f40:	4b56      	ldr	r3, [pc, #344]	@ (800209c <HAL_GPIO_Init+0x2dc>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f48:	4a55      	ldr	r2, [pc, #340]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	589b      	ldr	r3, [r3, r2]
 8001f54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	409a      	lsls	r2, r3
 8001f62:	0013      	movs	r3, r2
 8001f64:	43da      	mvns	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	23a0      	movs	r3, #160	@ 0xa0
 8001f70:	05db      	lsls	r3, r3, #23
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x1f6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	@ (80020a4 <HAL_GPIO_Init+0x2e4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x1f2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	@ (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	@ (80020ac <HAL_GPIO_Init+0x2ec>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x1ea>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a47      	ldr	r2, [pc, #284]	@ (80020b0 <HAL_GPIO_Init+0x2f0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x1e6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a46      	ldr	r2, [pc, #280]	@ (80020b4 <HAL_GPIO_Init+0x2f4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x1e2>
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	035b      	lsls	r3, r3, #13
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43da      	mvns	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	039b      	lsls	r3, r3, #14
 8002018:	4013      	ands	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002024:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800202a:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43da      	mvns	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	2380      	movs	r3, #128	@ 0x80
 8002040:	029b      	lsls	r3, r3, #10
 8002042:	4013      	ands	r3, r2
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43da      	mvns	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	025b      	lsls	r3, r3, #9
 800206c:	4013      	ands	r3, r2
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	40da      	lsrs	r2, r3
 800208c:	1e13      	subs	r3, r2, #0
 800208e:	d000      	beq.n	8002092 <HAL_GPIO_Init+0x2d2>
 8002090:	e6a2      	b.n	8001dd8 <HAL_GPIO_Init+0x18>
  }
}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b006      	add	sp, #24
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	50000400 	.word	0x50000400
 80020a8:	50000800 	.word	0x50000800
 80020ac:	50000c00 	.word	0x50000c00
 80020b0:	50001000 	.word	0x50001000
 80020b4:	50001c00 	.word	0x50001c00
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	000a      	movs	r2, r1
 80020c6:	1cbb      	adds	r3, r7, #2
 80020c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	1cba      	adds	r2, r7, #2
 80020d0:	8812      	ldrh	r2, [r2, #0]
 80020d2:	4013      	ands	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020d6:	230f      	movs	r3, #15
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e003      	b.n	80020e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e0:	230f      	movs	r3, #15
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020e8:	230f      	movs	r3, #15
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	0008      	movs	r0, r1
 8002100:	0011      	movs	r1, r2
 8002102:	1cbb      	adds	r3, r7, #2
 8002104:	1c02      	adds	r2, r0, #0
 8002106:	801a      	strh	r2, [r3, #0]
 8002108:	1c7b      	adds	r3, r7, #1
 800210a:	1c0a      	adds	r2, r1, #0
 800210c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210e:	1c7b      	adds	r3, r7, #1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	1cbb      	adds	r3, r7, #2
 8002118:	881a      	ldrh	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800211e:	e003      	b.n	8002128 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002120:	1cbb      	adds	r3, r7, #2
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002128:	46c0      	nop			@ (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	0002      	movs	r2, r0
 8002138:	1dbb      	adds	r3, r7, #6
 800213a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	1dba      	adds	r2, r7, #6
 8002142:	8812      	ldrh	r2, [r2, #0]
 8002144:	4013      	ands	r3, r2
 8002146:	d008      	beq.n	800215a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800214a:	1dba      	adds	r2, r7, #6
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	0018      	movs	r0, r3
 8002156:	f7fe fca3 	bl	8000aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	f000 fbbf 	bl	80028fa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217c:	4bc9      	ldr	r3, [pc, #804]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	220c      	movs	r2, #12
 8002182:	4013      	ands	r3, r2
 8002184:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002186:	4bc7      	ldr	r3, [pc, #796]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x36>
 800219c:	e07e      	b.n	800229c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d007      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d112      	bne.n	80021d0 <HAL_RCC_OscConfig+0x68>
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4bbb      	ldr	r3, [pc, #748]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	4013      	ands	r3, r2
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5a>
 80021c0:	e06b      	b.n	800229a <HAL_RCC_OscConfig+0x132>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d167      	bne.n	800229a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 fb95 	bl	80028fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x84>
 80021dc:	4bb1      	ldr	r3, [pc, #708]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4bb0      	ldr	r3, [pc, #704]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80021e2:	2180      	movs	r1, #128	@ 0x80
 80021e4:	0249      	lsls	r1, r1, #9
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e027      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	23a0      	movs	r3, #160	@ 0xa0
 80021f2:	02db      	lsls	r3, r3, #11
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d10e      	bne.n	8002216 <HAL_RCC_OscConfig+0xae>
 80021f8:	4baa      	ldr	r3, [pc, #680]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4ba9      	ldr	r3, [pc, #676]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80021fe:	2180      	movs	r1, #128	@ 0x80
 8002200:	02c9      	lsls	r1, r1, #11
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	4ba7      	ldr	r3, [pc, #668]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4ba6      	ldr	r3, [pc, #664]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800220c:	2180      	movs	r1, #128	@ 0x80
 800220e:	0249      	lsls	r1, r1, #9
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e012      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 8002216:	4ba3      	ldr	r3, [pc, #652]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4ba2      	ldr	r3, [pc, #648]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800221c:	49a2      	ldr	r1, [pc, #648]	@ (80024a8 <HAL_RCC_OscConfig+0x340>)
 800221e:	400a      	ands	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4ba0      	ldr	r3, [pc, #640]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4b9c      	ldr	r3, [pc, #624]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b9b      	ldr	r3, [pc, #620]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002236:	499d      	ldr	r1, [pc, #628]	@ (80024ac <HAL_RCC_OscConfig+0x344>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d015      	beq.n	8002270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff f816 	bl	8001274 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800224c:	e009      	b.n	8002262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224e:	f7ff f811 	bl	8001274 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	@ 0x64
 800225a:	d902      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	f000 fb4c 	bl	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002262:	4b90      	ldr	r3, [pc, #576]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	029b      	lsls	r3, r3, #10
 800226a:	4013      	ands	r3, r2
 800226c:	d0ef      	beq.n	800224e <HAL_RCC_OscConfig+0xe6>
 800226e:	e015      	b.n	800229c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff f800 	bl	8001274 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227a:	f7fe fffb 	bl	8001274 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e336      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800228c:	4b85      	ldr	r3, [pc, #532]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x112>
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_RCC_OscConfig+0x140>
 80022a6:	e099      	b.n	80023dc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	2220      	movs	r2, #32
 80022b2:	4013      	ands	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80022b6:	4b7b      	ldr	r3, [pc, #492]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b7a      	ldr	r3, [pc, #488]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80022bc:	2120      	movs	r1, #32
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	2220      	movs	r2, #32
 80022c6:	4393      	bics	r3, r2
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d13e      	bne.n	8002354 <HAL_RCC_OscConfig+0x1ec>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d13b      	bne.n	8002354 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022dc:	4b71      	ldr	r3, [pc, #452]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2204      	movs	r2, #4
 80022e2:	4013      	ands	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_RCC_OscConfig+0x188>
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e304      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b6c      	ldr	r3, [pc, #432]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a6e      	ldr	r2, [pc, #440]	@ (80024b0 <HAL_RCC_OscConfig+0x348>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	021a      	lsls	r2, r3, #8
 8002300:	4b68      	ldr	r3, [pc, #416]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002306:	4b67      	ldr	r3, [pc, #412]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2209      	movs	r2, #9
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	4b64      	ldr	r3, [pc, #400]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002318:	f000 fc42 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 800231c:	0001      	movs	r1, r0
 800231e:	4b61      	ldr	r3, [pc, #388]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	220f      	movs	r2, #15
 8002326:	4013      	ands	r3, r2
 8002328:	4a62      	ldr	r2, [pc, #392]	@ (80024b4 <HAL_RCC_OscConfig+0x34c>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	000a      	movs	r2, r1
 800232e:	40da      	lsrs	r2, r3
 8002330:	4b61      	ldr	r3, [pc, #388]	@ (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002332:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002334:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <HAL_RCC_OscConfig+0x354>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2513      	movs	r5, #19
 800233a:	197c      	adds	r4, r7, r5
 800233c:	0018      	movs	r0, r3
 800233e:	f7fe ff53 	bl	80011e8 <HAL_InitTick>
 8002342:	0003      	movs	r3, r0
 8002344:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002346:	197b      	adds	r3, r7, r5
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d046      	beq.n	80023dc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800234e:	197b      	adds	r3, r7, r5
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	e2d2      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	2b00      	cmp	r3, #0
 8002358:	d027      	beq.n	80023aa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800235a:	4b52      	ldr	r3, [pc, #328]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2209      	movs	r2, #9
 8002360:	4393      	bics	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	4b4f      	ldr	r3, [pc, #316]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe ff82 	bl	8001274 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002376:	f7fe ff7d 	bl	8001274 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e2b8      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002388:	4b46      	ldr	r3, [pc, #280]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2204      	movs	r2, #4
 800238e:	4013      	ands	r3, r2
 8002390:	d0f1      	beq.n	8002376 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a46      	ldr	r2, [pc, #280]	@ (80024b0 <HAL_RCC_OscConfig+0x348>)
 8002398:	4013      	ands	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	4b40      	ldr	r3, [pc, #256]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	e018      	b.n	80023dc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b3e      	ldr	r3, [pc, #248]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b3d      	ldr	r3, [pc, #244]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	438a      	bics	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe ff5d 	bl	8001274 <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe ff58 	bl	8001274 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e293      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d1f1      	bne.n	80023c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2210      	movs	r2, #16
 80023e2:	4013      	ands	r3, r2
 80023e4:	d100      	bne.n	80023e8 <HAL_RCC_OscConfig+0x280>
 80023e6:	e0a2      	b.n	800252e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d140      	bne.n	8002470 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x29e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e279      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <HAL_RCC_OscConfig+0x358>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	0a19      	lsrs	r1, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	061a      	lsls	r2, r3, #24
 8002428:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	3301      	adds	r3, #1
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	0212      	lsls	r2, r2, #8
 800243a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	210f      	movs	r1, #15
 8002444:	400b      	ands	r3, r1
 8002446:	491b      	ldr	r1, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x34c>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_RCC_OscConfig+0x350>)
 800244e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCC_OscConfig+0x354>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2513      	movs	r5, #19
 8002456:	197c      	adds	r4, r7, r5
 8002458:	0018      	movs	r0, r3
 800245a:	f7fe fec5 	bl	80011e8 <HAL_InitTick>
 800245e:	0003      	movs	r3, r0
 8002460:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002462:	197b      	adds	r3, r7, r5
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d061      	beq.n	800252e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800246a:	197b      	adds	r3, r7, r5
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	e244      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d040      	beq.n	80024fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002478:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_RCC_OscConfig+0x33c>)
 800247e:	2180      	movs	r1, #128	@ 0x80
 8002480:	0049      	lsls	r1, r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fef5 	bl	8001274 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800248e:	e019      	b.n	80024c4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002490:	f7fe fef0 	bl	8001274 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d912      	bls.n	80024c4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e22b      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	40021000 	.word	0x40021000
 80024a8:	fffeffff 	.word	0xfffeffff
 80024ac:	fffbffff 	.word	0xfffbffff
 80024b0:	ffffe0ff 	.word	0xffffe0ff
 80024b4:	08005490 	.word	0x08005490
 80024b8:	20000004 	.word	0x20000004
 80024bc:	20000008 	.word	0x20000008
 80024c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024c4:	4bca      	ldr	r3, [pc, #808]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0df      	beq.n	8002490 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d0:	4bc7      	ldr	r3, [pc, #796]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4ac7      	ldr	r2, [pc, #796]	@ (80027f4 <HAL_RCC_OscConfig+0x68c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024de:	4bc4      	ldr	r3, [pc, #784]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80024e0:	430a      	orrs	r2, r1
 80024e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e4:	4bc2      	ldr	r3, [pc, #776]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	0a19      	lsrs	r1, r3, #8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	061a      	lsls	r2, r3, #24
 80024f2:	4bbf      	ldr	r3, [pc, #764]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	e019      	b.n	800252e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024fa:	4bbd      	ldr	r3, [pc, #756]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4bbc      	ldr	r3, [pc, #752]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002500:	49bd      	ldr	r1, [pc, #756]	@ (80027f8 <HAL_RCC_OscConfig+0x690>)
 8002502:	400a      	ands	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe feb5 	bl	8001274 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002510:	f7fe feb0 	bl	8001274 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1eb      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002522:	4bb3      	ldr	r3, [pc, #716]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2208      	movs	r2, #8
 8002534:	4013      	ands	r3, r2
 8002536:	d036      	beq.n	80025a6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d019      	beq.n	8002574 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002540:	4bab      	ldr	r3, [pc, #684]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002542:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002544:	4baa      	ldr	r3, [pc, #680]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe fe92 	bl	8001274 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe fe8d 	bl	8001274 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1c8      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002568:	4ba1      	ldr	r3, [pc, #644]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d0f1      	beq.n	8002556 <HAL_RCC_OscConfig+0x3ee>
 8002572:	e018      	b.n	80025a6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002574:	4b9e      	ldr	r3, [pc, #632]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002578:	4b9d      	ldr	r3, [pc, #628]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe fe78 	bl	8001274 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fe73 	bl	8001274 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1ae      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259c:	4b94      	ldr	r3, [pc, #592]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800259e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d100      	bne.n	80025b2 <HAL_RCC_OscConfig+0x44a>
 80025b0:	e0ae      	b.n	8002710 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2023      	movs	r0, #35	@ 0x23
 80025b4:	183b      	adds	r3, r7, r0
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b8d      	ldr	r3, [pc, #564]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80025bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	055b      	lsls	r3, r3, #21
 80025c2:	4013      	ands	r3, r2
 80025c4:	d109      	bne.n	80025da <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b8a      	ldr	r3, [pc, #552]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80025c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ca:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80025cc:	2180      	movs	r1, #128	@ 0x80
 80025ce:	0549      	lsls	r1, r1, #21
 80025d0:	430a      	orrs	r2, r1
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80025d4:	183b      	adds	r3, r7, r0
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <HAL_RCC_OscConfig+0x694>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	d11a      	bne.n	800261c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b85      	ldr	r3, [pc, #532]	@ (80027fc <HAL_RCC_OscConfig+0x694>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b84      	ldr	r3, [pc, #528]	@ (80027fc <HAL_RCC_OscConfig+0x694>)
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	0049      	lsls	r1, r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fe3e 	bl	8001274 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe fe39 	bl	8001274 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	@ 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e174      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b7a      	ldr	r3, [pc, #488]	@ (80027fc <HAL_RCC_OscConfig+0x694>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	429a      	cmp	r2, r3
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x4d0>
 8002628:	4b71      	ldr	r3, [pc, #452]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800262a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262c:	4b70      	ldr	r3, [pc, #448]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800262e:	2180      	movs	r1, #128	@ 0x80
 8002630:	0049      	lsls	r1, r1, #1
 8002632:	430a      	orrs	r2, r1
 8002634:	651a      	str	r2, [r3, #80]	@ 0x50
 8002636:	e031      	b.n	800269c <HAL_RCC_OscConfig+0x534>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x4f2>
 8002640:	4b6b      	ldr	r3, [pc, #428]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002642:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002644:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002646:	496c      	ldr	r1, [pc, #432]	@ (80027f8 <HAL_RCC_OscConfig+0x690>)
 8002648:	400a      	ands	r2, r1
 800264a:	651a      	str	r2, [r3, #80]	@ 0x50
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800264e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002650:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002652:	496b      	ldr	r1, [pc, #428]	@ (8002800 <HAL_RCC_OscConfig+0x698>)
 8002654:	400a      	ands	r2, r1
 8002656:	651a      	str	r2, [r3, #80]	@ 0x50
 8002658:	e020      	b.n	800269c <HAL_RCC_OscConfig+0x534>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	23a0      	movs	r3, #160	@ 0xa0
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	429a      	cmp	r2, r3
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0x51c>
 8002666:	4b62      	ldr	r3, [pc, #392]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800266a:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	651a      	str	r2, [r3, #80]	@ 0x50
 8002674:	4b5e      	ldr	r3, [pc, #376]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002676:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002678:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	0049      	lsls	r1, r1, #1
 800267e:	430a      	orrs	r2, r1
 8002680:	651a      	str	r2, [r3, #80]	@ 0x50
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x534>
 8002684:	4b5a      	ldr	r3, [pc, #360]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002688:	4b59      	ldr	r3, [pc, #356]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800268a:	495b      	ldr	r1, [pc, #364]	@ (80027f8 <HAL_RCC_OscConfig+0x690>)
 800268c:	400a      	ands	r2, r1
 800268e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002690:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002692:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002694:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002696:	495a      	ldr	r1, [pc, #360]	@ (8002800 <HAL_RCC_OscConfig+0x698>)
 8002698:	400a      	ands	r2, r1
 800269a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7fe fde6 	bl	8001274 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ac:	e009      	b.n	80026c2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fde1 	bl	8001274 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	4a52      	ldr	r2, [pc, #328]	@ (8002804 <HAL_RCC_OscConfig+0x69c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e11b      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c2:	4b4b      	ldr	r3, [pc, #300]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80026c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4013      	ands	r3, r2
 80026cc:	d0ef      	beq.n	80026ae <HAL_RCC_OscConfig+0x546>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fdd0 	bl	8001274 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fdcb 	bl	8001274 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a47      	ldr	r2, [pc, #284]	@ (8002804 <HAL_RCC_OscConfig+0x69c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e105      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026ee:	4b40      	ldr	r3, [pc, #256]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80026f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1ef      	bne.n	80026da <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026fa:	2323      	movs	r3, #35	@ 0x23
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b3a      	ldr	r3, [pc, #232]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002708:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 800270a:	493f      	ldr	r1, [pc, #252]	@ (8002808 <HAL_RCC_OscConfig+0x6a0>)
 800270c:	400a      	ands	r2, r1
 800270e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2220      	movs	r2, #32
 8002716:	4013      	ands	r3, r2
 8002718:	d049      	beq.n	80027ae <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d026      	beq.n	8002770 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002722:	4b33      	ldr	r3, [pc, #204]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b32      	ldr	r3, [pc, #200]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002728:	2101      	movs	r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	4b30      	ldr	r3, [pc, #192]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002732:	4b2f      	ldr	r3, [pc, #188]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
 800273a:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x6a4>)
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	4b33      	ldr	r3, [pc, #204]	@ (800280c <HAL_RCC_OscConfig+0x6a4>)
 8002740:	2180      	movs	r1, #128	@ 0x80
 8002742:	0189      	lsls	r1, r1, #6
 8002744:	430a      	orrs	r2, r1
 8002746:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fd94 	bl	8001274 <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002752:	f7fe fd8f 	bl	8001274 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ca      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d0f1      	beq.n	8002752 <HAL_RCC_OscConfig+0x5ea>
 800276e:	e01e      	b.n	80027ae <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002770:	4b1f      	ldr	r3, [pc, #124]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	4b23      	ldr	r3, [pc, #140]	@ (800280c <HAL_RCC_OscConfig+0x6a4>)
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <HAL_RCC_OscConfig+0x6a4>)
 8002782:	4923      	ldr	r1, [pc, #140]	@ (8002810 <HAL_RCC_OscConfig+0x6a8>)
 8002784:	400a      	ands	r2, r1
 8002786:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fd74 	bl	8001274 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002792:	f7fe fd6f 	bl	8001274 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0aa      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f1      	bne.n	8002792 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d100      	bne.n	80027b8 <HAL_RCC_OscConfig+0x650>
 80027b6:	e09f      	b.n	80028f8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d100      	bne.n	80027c0 <HAL_RCC_OscConfig+0x658>
 80027be:	e078      	b.n	80028b2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d159      	bne.n	800287c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <HAL_RCC_OscConfig+0x688>)
 80027ce:	4911      	ldr	r1, [pc, #68]	@ (8002814 <HAL_RCC_OscConfig+0x6ac>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fd4e 	bl	8001274 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fd49 	bl	8001274 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d915      	bls.n	8002818 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e084      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	ffff1fff 	.word	0xffff1fff
 80027f8:	fffffeff 	.word	0xfffffeff
 80027fc:	40007000 	.word	0x40007000
 8002800:	fffffbff 	.word	0xfffffbff
 8002804:	00001388 	.word	0x00001388
 8002808:	efffffff 	.word	0xefffffff
 800280c:	40010000 	.word	0x40010000
 8002810:	ffffdfff 	.word	0xffffdfff
 8002814:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002818:	4b3a      	ldr	r3, [pc, #232]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	049b      	lsls	r3, r3, #18
 8002820:	4013      	ands	r3, r2
 8002822:	d1dc      	bne.n	80027de <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002824:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a37      	ldr	r2, [pc, #220]	@ (8002908 <HAL_RCC_OscConfig+0x7a0>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	431a      	orrs	r2, r3
 800283e:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	0449      	lsls	r1, r1, #17
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fd0f 	bl	8001274 <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fd0a 	bl	8001274 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e045      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	049b      	lsls	r3, r3, #18
 8002876:	4013      	ands	r3, r2
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x6f4>
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 8002882:	4922      	ldr	r1, [pc, #136]	@ (800290c <HAL_RCC_OscConfig+0x7a4>)
 8002884:	400a      	ands	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fcf4 	bl	8001274 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fcef 	bl	8001274 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e02a      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028a4:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	049b      	lsls	r3, r3, #18
 80028ac:	4013      	ands	r3, r2
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x72a>
 80028b0:	e022      	b.n	80028f8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e01d      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x79c>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	025b      	lsls	r3, r3, #9
 80028ca:	401a      	ands	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10f      	bne.n	80028f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	23f0      	movs	r3, #240	@ 0xf0
 80028d8:	039b      	lsls	r3, r3, #14
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	23c0      	movs	r3, #192	@ 0xc0
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b00a      	add	sp, #40	@ 0x28
 8002900:	bdb0      	pop	{r4, r5, r7, pc}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	40021000 	.word	0x40021000
 8002908:	ff02ffff 	.word	0xff02ffff
 800290c:	feffffff 	.word	0xfeffffff

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e128      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b96      	ldr	r3, [pc, #600]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	4013      	ands	r3, r2
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d91e      	bls.n	8002970 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b93      	ldr	r3, [pc, #588]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	4393      	bics	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	4b90      	ldr	r3, [pc, #576]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002944:	f7fe fc96 	bl	8001274 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294c:	e009      	b.n	8002962 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294e:	f7fe fc91 	bl	8001274 <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	4a8a      	ldr	r2, [pc, #552]	@ (8002b84 <HAL_RCC_ClockConfig+0x274>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e109      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b87      	ldr	r3, [pc, #540]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2201      	movs	r2, #1
 8002968:	4013      	ands	r3, r2
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2202      	movs	r2, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297a:	4b83      	ldr	r3, [pc, #524]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	22f0      	movs	r2, #240	@ 0xf0
 8002980:	4393      	bics	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4b7f      	ldr	r3, [pc, #508]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 800298a:	430a      	orrs	r2, r1
 800298c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	4013      	ands	r3, r2
 8002996:	d100      	bne.n	800299a <HAL_RCC_ClockConfig+0x8a>
 8002998:	e089      	b.n	8002aae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a2:	4b79      	ldr	r3, [pc, #484]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	029b      	lsls	r3, r3, #10
 80029aa:	4013      	ands	r3, r2
 80029ac:	d120      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0e1      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ba:	4b73      	ldr	r3, [pc, #460]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	4013      	ands	r3, r2
 80029c4:	d114      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0d5      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4013      	ands	r3, r2
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0ca      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029e0:	4b69      	ldr	r3, [pc, #420]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0c2      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f0:	4b65      	ldr	r3, [pc, #404]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2203      	movs	r2, #3
 80029f6:	4393      	bics	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4b62      	ldr	r3, [pc, #392]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fc36 	bl	8001274 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a14:	e009      	b.n	8002a2a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a16:	f7fe fc2d 	bl	8001274 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	4a58      	ldr	r2, [pc, #352]	@ (8002b84 <HAL_RCC_ClockConfig+0x274>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0a5      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2a:	4b57      	ldr	r3, [pc, #348]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	220c      	movs	r2, #12
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d1ef      	bne.n	8002a16 <HAL_RCC_ClockConfig+0x106>
 8002a36:	e03a      	b.n	8002aae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a40:	e009      	b.n	8002a56 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a42:	f7fe fc17 	bl	8001274 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b84 <HAL_RCC_ClockConfig+0x274>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e08f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a56:	4b4c      	ldr	r3, [pc, #304]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x132>
 8002a62:	e024      	b.n	8002aae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6c:	e009      	b.n	8002a82 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6e:	f7fe fc01 	bl	8001274 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	4a42      	ldr	r2, [pc, #264]	@ (8002b84 <HAL_RCC_ClockConfig+0x274>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e079      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a82:	4b41      	ldr	r3, [pc, #260]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	220c      	movs	r2, #12
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d1ef      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x15e>
 8002a8e:	e00e      	b.n	8002aae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fe fbf0 	bl	8001274 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b84 <HAL_RCC_ClockConfig+0x274>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e068      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aa4:	4b38      	ldr	r3, [pc, #224]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aae:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d21e      	bcs.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abc:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fbd1 	bl	8001274 <HAL_GetTick>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	e009      	b.n	8002aec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe fbcc 	bl	8001274 <HAL_GetTick>
 8002adc:	0002      	movs	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	4a28      	ldr	r2, [pc, #160]	@ (8002b84 <HAL_RCC_ClockConfig+0x274>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e044      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aec:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_RCC_ClockConfig+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d1ee      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2204      	movs	r2, #4
 8002b00:	4013      	ands	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <HAL_RCC_ClockConfig+0x27c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a1a      	ldr	r2, [pc, #104]	@ (8002b90 <HAL_RCC_ClockConfig+0x280>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00da      	lsls	r2, r3, #3
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b38:	f000 f832 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b3c:	0001      	movs	r1, r0
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_RCC_ClockConfig+0x278>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	220f      	movs	r2, #15
 8002b46:	4013      	ands	r3, r2
 8002b48:	4a12      	ldr	r2, [pc, #72]	@ (8002b94 <HAL_RCC_ClockConfig+0x284>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	000a      	movs	r2, r1
 8002b4e:	40da      	lsrs	r2, r3
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_RCC_ClockConfig+0x288>)
 8002b52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_RCC_ClockConfig+0x28c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	250b      	movs	r5, #11
 8002b5a:	197c      	adds	r4, r7, r5
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7fe fb43 	bl	80011e8 <HAL_InitTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b66:	197b      	adds	r3, r7, r5
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b6e:	197b      	adds	r3, r7, r5
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	40022000 	.word	0x40022000
 8002b84:	00001388 	.word	0x00001388
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	fffff8ff 	.word	0xfffff8ff
 8002b90:	ffffc7ff 	.word	0xffffc7ff
 8002b94:	08005490 	.word	0x08005490
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	20000008 	.word	0x20000008

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	220c      	movs	r2, #12
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d013      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x3e>
 8002bb6:	d85c      	bhi.n	8002c72 <HAL_RCC_GetSysClockFreq+0xd2>
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d002      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x22>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x38>
 8002bc0:	e057      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bc2:	4b35      	ldr	r3, [pc, #212]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bcc:	4b33      	ldr	r3, [pc, #204]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bce:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002bd0:	e05d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002bd2:	4b33      	ldr	r3, [pc, #204]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bd4:	613b      	str	r3, [r7, #16]
      break;
 8002bd6:	e05a      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	e057      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	220f      	movs	r2, #15
 8002be4:	4013      	ands	r3, r2
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	0d9b      	lsrs	r3, r3, #22
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf8:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	025b      	lsls	r3, r3, #9
 8002c00:	4013      	ands	r3, r2
 8002c02:	d00f      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	000a      	movs	r2, r1
 8002c08:	0152      	lsls	r2, r2, #5
 8002c0a:	1a52      	subs	r2, r2, r1
 8002c0c:	0193      	lsls	r3, r2, #6
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	185b      	adds	r3, r3, r1
 8002c14:	025b      	lsls	r3, r3, #9
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7fd fa75 	bl	8000108 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e023      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c24:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d00f      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	000a      	movs	r2, r1
 8002c32:	0152      	lsls	r2, r2, #5
 8002c34:	1a52      	subs	r2, r2, r1
 8002c36:	0193      	lsls	r3, r2, #6
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	185b      	adds	r3, r3, r1
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7fd fa60 	bl	8000108 <__udivsi3>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e00e      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	000a      	movs	r2, r1
 8002c52:	0152      	lsls	r2, r2, #5
 8002c54:	1a52      	subs	r2, r2, r1
 8002c56:	0193      	lsls	r3, r2, #6
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	185b      	adds	r3, r3, r1
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7fd fa50 	bl	8000108 <__udivsi3>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
      break;
 8002c70:	e00d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	2207      	movs	r2, #7
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	2280      	movs	r2, #128	@ 0x80
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
      break;
 8002c8c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c8e:	693b      	ldr	r3, [r7, #16]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b006      	add	sp, #24
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	003d0900 	.word	0x003d0900
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	080054a8 	.word	0x080054a8

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	0001      	movs	r1, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	40d9      	lsrs	r1, r3
 8002cda:	000b      	movs	r3, r1
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	080054a0 	.word	0x080054a0

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff ffdc 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf4:	0001      	movs	r1, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	4013      	ands	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	000b      	movs	r3, r1
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	080054a0 	.word	0x080054a0

08002d18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d20:	2317      	movs	r3, #23
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d106      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d3e:	e104      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d40:	4bb9      	ldr	r3, [pc, #740]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	055b      	lsls	r3, r3, #21
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d10a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4bb6      	ldr	r3, [pc, #728]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d50:	4bb5      	ldr	r3, [pc, #724]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d52:	2180      	movs	r1, #128	@ 0x80
 8002d54:	0549      	lsls	r1, r1, #21
 8002d56:	430a      	orrs	r2, r1
 8002d58:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002d5a:	2317      	movs	r3, #23
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4bb2      	ldr	r3, [pc, #712]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4baf      	ldr	r3, [pc, #700]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4bae      	ldr	r3, [pc, #696]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d74:	2180      	movs	r1, #128	@ 0x80
 8002d76:	0049      	lsls	r1, r1, #1
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fa7a 	bl	8001274 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe fa75 	bl	8001274 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	@ 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e143      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4ba4      	ldr	r3, [pc, #656]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002da4:	4ba0      	ldr	r3, [pc, #640]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	23c0      	movs	r3, #192	@ 0xc0
 8002daa:	039b      	lsls	r3, r3, #14
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	23c0      	movs	r3, #192	@ 0xc0
 8002db6:	039b      	lsls	r3, r3, #14
 8002db8:	4013      	ands	r3, r2
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	23c0      	movs	r3, #192	@ 0xc0
 8002dc6:	039b      	lsls	r3, r3, #14
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d013      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	23c0      	movs	r3, #192	@ 0xc0
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	401a      	ands	r2, r3
 8002dda:	23c0      	movs	r3, #192	@ 0xc0
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002de2:	4b91      	ldr	r3, [pc, #580]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	029b      	lsls	r3, r3, #10
 8002dea:	401a      	ands	r2, r3
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d101      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e113      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002df8:	4b8b      	ldr	r3, [pc, #556]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dfc:	23c0      	movs	r3, #192	@ 0xc0
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d049      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	23c0      	movs	r3, #192	@ 0xc0
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	4013      	ands	r3, r2
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d004      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	4013      	ands	r3, r2
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	23c0      	movs	r3, #192	@ 0xc0
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d034      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d02e      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e40:	4b79      	ldr	r3, [pc, #484]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e44:	4a7a      	ldr	r2, [pc, #488]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4a:	4b77      	ldr	r3, [pc, #476]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e4e:	4b76      	ldr	r3, [pc, #472]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e50:	2180      	movs	r1, #128	@ 0x80
 8002e52:	0309      	lsls	r1, r1, #12
 8002e54:	430a      	orrs	r2, r1
 8002e56:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	4b73      	ldr	r3, [pc, #460]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e5c:	4b72      	ldr	r3, [pc, #456]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e5e:	4975      	ldr	r1, [pc, #468]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e64:	4b70      	ldr	r3, [pc, #448]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d014      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe f9fe 	bl	8001274 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e7c:	e009      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe f9f9 	bl	8001274 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	4a6b      	ldr	r2, [pc, #428]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0c6      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e92:	4b65      	ldr	r3, [pc, #404]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d0ef      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	23c0      	movs	r3, #192	@ 0xc0
 8002eb0:	029b      	lsls	r3, r3, #10
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	23c0      	movs	r3, #192	@ 0xc0
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	23c0      	movs	r3, #192	@ 0xc0
 8002ecc:	039b      	lsls	r3, r3, #14
 8002ece:	401a      	ands	r2, r3
 8002ed0:	4b55      	ldr	r3, [pc, #340]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	23c0      	movs	r3, #192	@ 0xc0
 8002ee0:	029b      	lsls	r3, r3, #10
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	4b50      	ldr	r3, [pc, #320]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d01f      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	23c0      	movs	r3, #192	@ 0xc0
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	401a      	ands	r2, r3
 8002efe:	23c0      	movs	r3, #192	@ 0xc0
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002f06:	4b48      	ldr	r3, [pc, #288]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	23c0      	movs	r3, #192	@ 0xc0
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	401a      	ands	r2, r3
 8002f1a:	4b43      	ldr	r3, [pc, #268]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f22:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	23c0      	movs	r3, #192	@ 0xc0
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f30:	430a      	orrs	r2, r1
 8002f32:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f34:	2317      	movs	r3, #23
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f42:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f44:	493e      	ldr	r1, [pc, #248]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f54:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	220c      	movs	r2, #12
 8002f78:	4393      	bics	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f94:	4a2b      	ldr	r2, [pc, #172]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	4a25      	ldr	r2, [pc, #148]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fce:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fec:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	4a16      	ldr	r2, [pc, #88]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2280      	movs	r2, #128	@ 0x80
 8003006:	4013      	ands	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800300a:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	4a10      	ldr	r2, [pc, #64]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301a:	430a      	orrs	r2, r1
 800301c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b006      	add	sp, #24
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
 8003030:	fffcffff 	.word	0xfffcffff
 8003034:	fff7ffff 	.word	0xfff7ffff
 8003038:	00001388 	.word	0x00001388
 800303c:	ffcfffff 	.word	0xffcfffff
 8003040:	efffffff 	.word	0xefffffff
 8003044:	fffff3ff 	.word	0xfffff3ff
 8003048:	ffffcfff 	.word	0xffffcfff
 800304c:	fbffffff 	.word	0xfbffffff
 8003050:	fff3ffff 	.word	0xfff3ffff

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e032      	b.n	80030cc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2239      	movs	r2, #57	@ 0x39
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d107      	bne.n	8003082 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2238      	movs	r2, #56	@ 0x38
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd ff8d 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2239      	movs	r2, #57	@ 0x39
 8003086:	2102      	movs	r1, #2
 8003088:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	0019      	movs	r1, r3
 8003094:	0010      	movs	r0, r2
 8003096:	f000 fbcf 	bl	8003838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223e      	movs	r2, #62	@ 0x3e
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	223a      	movs	r2, #58	@ 0x3a
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	223b      	movs	r2, #59	@ 0x3b
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	223c      	movs	r2, #60	@ 0x3c
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223d      	movs	r2, #61	@ 0x3d
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2239      	movs	r2, #57	@ 0x39
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2239      	movs	r2, #57	@ 0x39
 80030e0:	5c9b      	ldrb	r3, [r3, r2]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e03b      	b.n	8003164 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2239      	movs	r2, #57	@ 0x39
 80030f0:	2102      	movs	r1, #2
 80030f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	429a      	cmp	r2, r3
 800310e:	d00e      	beq.n	800312e <HAL_TIM_Base_Start_IT+0x5a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <HAL_TIM_Base_Start_IT+0x98>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_TIM_Base_Start_IT+0x5a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a14      	ldr	r2, [pc, #80]	@ (8003170 <HAL_TIM_Base_Start_IT+0x9c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_TIM_Base_Start_IT+0x5a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a12      	ldr	r2, [pc, #72]	@ (8003174 <HAL_TIM_Base_Start_IT+0xa0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2207      	movs	r2, #7
 8003136:	4013      	ands	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b06      	cmp	r3, #6
 800313e:	d010      	beq.n	8003162 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2101      	movs	r1, #1
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	e007      	b.n	8003162 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40000400 	.word	0x40000400
 8003170:	40010800 	.word	0x40010800
 8003174:	40011400 	.word	0x40011400

08003178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e032      	b.n	80031f0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2239      	movs	r2, #57	@ 0x39
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2238      	movs	r2, #56	@ 0x38
 800319a:	2100      	movs	r1, #0
 800319c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 f829 	bl	80031f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2239      	movs	r2, #57	@ 0x39
 80031aa:	2102      	movs	r1, #2
 80031ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	0019      	movs	r1, r3
 80031b8:	0010      	movs	r0, r2
 80031ba:	f000 fb3d 	bl	8003838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223e      	movs	r2, #62	@ 0x3e
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223a      	movs	r2, #58	@ 0x3a
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	223b      	movs	r2, #59	@ 0x3b
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	223c      	movs	r2, #60	@ 0x3c
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	223d      	movs	r2, #61	@ 0x3d
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2239      	movs	r2, #57	@ 0x39
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b002      	add	sp, #8
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <HAL_TIM_PWM_Start+0x22>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	223a      	movs	r2, #58	@ 0x3a
 800321c:	5c9b      	ldrb	r3, [r3, r2]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	4193      	sbcs	r3, r2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e01f      	b.n	800326a <HAL_TIM_PWM_Start+0x62>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d108      	bne.n	8003242 <HAL_TIM_PWM_Start+0x3a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	223b      	movs	r2, #59	@ 0x3b
 8003234:	5c9b      	ldrb	r3, [r3, r2]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	4193      	sbcs	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e013      	b.n	800326a <HAL_TIM_PWM_Start+0x62>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d108      	bne.n	800325a <HAL_TIM_PWM_Start+0x52>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	223c      	movs	r2, #60	@ 0x3c
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	1e5a      	subs	r2, r3, #1
 8003254:	4193      	sbcs	r3, r2
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e007      	b.n	800326a <HAL_TIM_PWM_Start+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	223d      	movs	r2, #61	@ 0x3d
 800325e:	5c9b      	ldrb	r3, [r3, r2]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	4193      	sbcs	r3, r2
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e052      	b.n	8003318 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x7a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	223a      	movs	r2, #58	@ 0x3a
 800327c:	2102      	movs	r1, #2
 800327e:	5499      	strb	r1, [r3, r2]
 8003280:	e013      	b.n	80032aa <HAL_TIM_PWM_Start+0xa2>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0x8a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	223b      	movs	r2, #59	@ 0x3b
 800328c:	2102      	movs	r1, #2
 800328e:	5499      	strb	r1, [r3, r2]
 8003290:	e00b      	b.n	80032aa <HAL_TIM_PWM_Start+0xa2>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0x9a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	223c      	movs	r2, #60	@ 0x3c
 800329c:	2102      	movs	r1, #2
 800329e:	5499      	strb	r1, [r3, r2]
 80032a0:	e003      	b.n	80032aa <HAL_TIM_PWM_Start+0xa2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	223d      	movs	r2, #61	@ 0x3d
 80032a6:	2102      	movs	r1, #2
 80032a8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6839      	ldr	r1, [r7, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fcc2 	bl	8003c3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	05db      	lsls	r3, r3, #23
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d00e      	beq.n	80032e2 <HAL_TIM_PWM_Start+0xda>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a15      	ldr	r2, [pc, #84]	@ (8003320 <HAL_TIM_PWM_Start+0x118>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIM_PWM_Start+0xda>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <HAL_TIM_PWM_Start+0x11c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIM_PWM_Start+0xda>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <HAL_TIM_PWM_Start+0x120>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d111      	bne.n	8003306 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2207      	movs	r2, #7
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d010      	beq.n	8003316 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	e007      	b.n	8003316 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40000400 	.word	0x40000400
 8003324:	40010800 	.word	0x40010800
 8003328:	40011400 	.word	0x40011400

0800332c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2202      	movs	r2, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d021      	beq.n	8003390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d01d      	beq.n	8003390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2203      	movs	r2, #3
 800335a:	4252      	negs	r2, r2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2203      	movs	r2, #3
 800336c:	4013      	ands	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fa48 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003378:	e007      	b.n	800338a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fa3b 	bl	80037f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fa47 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2204      	movs	r2, #4
 8003394:	4013      	ands	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2204      	movs	r2, #4
 800339c:	4013      	ands	r3, r2
 800339e:	d01e      	beq.n	80033de <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2205      	movs	r2, #5
 80033a6:	4252      	negs	r2, r2
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	23c0      	movs	r3, #192	@ 0xc0
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 fa21 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 80033c6:	e007      	b.n	80033d8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 fa14 	bl	80037f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fa20 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2208      	movs	r2, #8
 80033e2:	4013      	ands	r3, r2
 80033e4:	d021      	beq.n	800342a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2208      	movs	r2, #8
 80033ea:	4013      	ands	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2209      	movs	r2, #9
 80033f4:	4252      	negs	r2, r2
 80033f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2204      	movs	r2, #4
 80033fc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2203      	movs	r2, #3
 8003406:	4013      	ands	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f9fb 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003412:	e007      	b.n	8003424 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f9ee 	bl	80037f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f9fa 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2210      	movs	r2, #16
 800342e:	4013      	ands	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2210      	movs	r2, #16
 8003436:	4013      	ands	r3, r2
 8003438:	d01e      	beq.n	8003478 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2211      	movs	r2, #17
 8003440:	4252      	negs	r2, r2
 8003442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2208      	movs	r2, #8
 8003448:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	23c0      	movs	r3, #192	@ 0xc0
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4013      	ands	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 f9d4 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003460:	e007      	b.n	8003472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f000 f9c7 	bl	80037f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 f9d3 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	d00c      	beq.n	800349a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	d008      	beq.n	800349a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2202      	movs	r2, #2
 800348e:	4252      	negs	r2, r2
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f7fd f96b 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2240      	movs	r2, #64	@ 0x40
 800349e:	4013      	ands	r3, r2
 80034a0:	d00c      	beq.n	80034bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2240      	movs	r2, #64	@ 0x40
 80034a6:	4013      	ands	r3, r2
 80034a8:	d008      	beq.n	80034bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2241      	movs	r2, #65	@ 0x41
 80034b0:	4252      	negs	r2, r2
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f9b6 	bl	8003828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b004      	add	sp, #16
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2317      	movs	r3, #23
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2238      	movs	r2, #56	@ 0x38
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0ad      	b.n	8003642 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2238      	movs	r2, #56	@ 0x38
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d100      	bne.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80034f4:	e076      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d900      	bls.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80034fc:	e095      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x166>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d04e      	beq.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d900      	bls.n	800350c <HAL_TIM_PWM_ConfigChannel+0x48>
 800350a:	e08e      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x166>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d021      	beq.n	800355c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003518:	e087      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	0011      	movs	r1, r2
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f9ec 	bl	8003900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2108      	movs	r1, #8
 8003534:	430a      	orrs	r2, r1
 8003536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2104      	movs	r1, #4
 8003544:	438a      	bics	r2, r1
 8003546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]
      break;
 800355a:	e06b      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fa07 	bl	8003978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	0109      	lsls	r1, r1, #4
 8003578:	430a      	orrs	r2, r1
 800357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4931      	ldr	r1, [pc, #196]	@ (800364c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003588:	400a      	ands	r2, r1
 800358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	021a      	lsls	r2, r3, #8
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	619a      	str	r2, [r3, #24]
      break;
 80035a0:	e048      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fa26 	bl	80039fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2108      	movs	r1, #8
 80035bc:	430a      	orrs	r2, r1
 80035be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2104      	movs	r1, #4
 80035cc:	438a      	bics	r2, r1
 80035ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69d9      	ldr	r1, [r3, #28]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	61da      	str	r2, [r3, #28]
      break;
 80035e2:	e027      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	0011      	movs	r1, r2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fa45 	bl	8003a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2180      	movs	r1, #128	@ 0x80
 80035fe:	0109      	lsls	r1, r1, #4
 8003600:	430a      	orrs	r2, r1
 8003602:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	490f      	ldr	r1, [pc, #60]	@ (800364c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003610:	400a      	ands	r2, r1
 8003612:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69d9      	ldr	r1, [r3, #28]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	61da      	str	r2, [r3, #28]
      break;
 8003628:	e004      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800362a:	2317      	movs	r3, #23
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2238      	movs	r2, #56	@ 0x38
 8003638:	2100      	movs	r1, #0
 800363a:	5499      	strb	r1, [r3, r2]

  return status;
 800363c:	2317      	movs	r3, #23
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	781b      	ldrb	r3, [r3, #0]
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b006      	add	sp, #24
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	fffffbff 	.word	0xfffffbff

08003650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	230f      	movs	r3, #15
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2238      	movs	r2, #56	@ 0x38
 8003666:	5c9b      	ldrb	r3, [r3, r2]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIM_ConfigClockSource+0x20>
 800366c:	2302      	movs	r3, #2
 800366e:	e0bc      	b.n	80037ea <HAL_TIM_ConfigClockSource+0x19a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2238      	movs	r2, #56	@ 0x38
 8003674:	2101      	movs	r1, #1
 8003676:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2239      	movs	r2, #57	@ 0x39
 800367c:	2102      	movs	r1, #2
 800367e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2277      	movs	r2, #119	@ 0x77
 800368c:	4393      	bics	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4a58      	ldr	r2, [pc, #352]	@ (80037f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003694:	4013      	ands	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2280      	movs	r2, #128	@ 0x80
 80036a6:	0192      	lsls	r2, r2, #6
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_TIM_ConfigClockSource+0xde>
 80036ac:	2280      	movs	r2, #128	@ 0x80
 80036ae:	0192      	lsls	r2, r2, #6
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d900      	bls.n	80036b6 <HAL_TIM_ConfigClockSource+0x66>
 80036b4:	e088      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036b6:	2280      	movs	r2, #128	@ 0x80
 80036b8:	0152      	lsls	r2, r2, #5
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d100      	bne.n	80036c0 <HAL_TIM_ConfigClockSource+0x70>
 80036be:	e088      	b.n	80037d2 <HAL_TIM_ConfigClockSource+0x182>
 80036c0:	2280      	movs	r2, #128	@ 0x80
 80036c2:	0152      	lsls	r2, r2, #5
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d900      	bls.n	80036ca <HAL_TIM_ConfigClockSource+0x7a>
 80036c8:	e07e      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036ca:	2b70      	cmp	r3, #112	@ 0x70
 80036cc:	d018      	beq.n	8003700 <HAL_TIM_ConfigClockSource+0xb0>
 80036ce:	d900      	bls.n	80036d2 <HAL_TIM_ConfigClockSource+0x82>
 80036d0:	e07a      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036d2:	2b60      	cmp	r3, #96	@ 0x60
 80036d4:	d04f      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x126>
 80036d6:	d900      	bls.n	80036da <HAL_TIM_ConfigClockSource+0x8a>
 80036d8:	e076      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036da:	2b50      	cmp	r3, #80	@ 0x50
 80036dc:	d03b      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x106>
 80036de:	d900      	bls.n	80036e2 <HAL_TIM_ConfigClockSource+0x92>
 80036e0:	e072      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036e2:	2b40      	cmp	r3, #64	@ 0x40
 80036e4:	d057      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x146>
 80036e6:	d900      	bls.n	80036ea <HAL_TIM_ConfigClockSource+0x9a>
 80036e8:	e06e      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036ea:	2b30      	cmp	r3, #48	@ 0x30
 80036ec:	d063      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x166>
 80036ee:	d86b      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d060      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x166>
 80036f4:	d868      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d05d      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x166>
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d05b      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x166>
 80036fe:	e063      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003710:	f000 fa74 	bl	8003bfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2277      	movs	r2, #119	@ 0x77
 8003720:	4313      	orrs	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]
      break;
 800372c:	e052      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373e:	f000 fa5d 	bl	8003bfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2180      	movs	r1, #128	@ 0x80
 800374e:	01c9      	lsls	r1, r1, #7
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
      break;
 8003754:	e03e      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	001a      	movs	r2, r3
 8003764:	f000 f9d0 	bl	8003b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2150      	movs	r1, #80	@ 0x50
 800376e:	0018      	movs	r0, r3
 8003770:	f000 fa2a 	bl	8003bc8 <TIM_ITRx_SetConfig>
      break;
 8003774:	e02e      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003782:	001a      	movs	r2, r3
 8003784:	f000 f9ee 	bl	8003b64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2160      	movs	r1, #96	@ 0x60
 800378e:	0018      	movs	r0, r3
 8003790:	f000 fa1a 	bl	8003bc8 <TIM_ITRx_SetConfig>
      break;
 8003794:	e01e      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	001a      	movs	r2, r3
 80037a4:	f000 f9b0 	bl	8003b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2140      	movs	r1, #64	@ 0x40
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 fa0a 	bl	8003bc8 <TIM_ITRx_SetConfig>
      break;
 80037b4:	e00e      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f000 fa01 	bl	8003bc8 <TIM_ITRx_SetConfig>
      break;
 80037c6:	e005      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80037c8:	230f      	movs	r3, #15
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
      break;
 80037d0:	e000      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80037d2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2239      	movs	r2, #57	@ 0x39
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2238      	movs	r2, #56	@ 0x38
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

  return status;
 80037e4:	230f      	movs	r3, #15
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	ffff00ff 	.word	0xffff00ff

080037f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003800:	46c0      	nop			@ (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003810:	46c0      	nop			@ (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	05db      	lsls	r3, r3, #23
 800384e:	429a      	cmp	r2, r3
 8003850:	d00b      	beq.n	800386a <TIM_Base_SetConfig+0x32>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a26      	ldr	r2, [pc, #152]	@ (80038f0 <TIM_Base_SetConfig+0xb8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <TIM_Base_SetConfig+0x32>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a25      	ldr	r2, [pc, #148]	@ (80038f4 <TIM_Base_SetConfig+0xbc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_Base_SetConfig+0x32>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <TIM_Base_SetConfig+0xc0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2270      	movs	r2, #112	@ 0x70
 800386e:	4393      	bics	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	05db      	lsls	r3, r3, #23
 8003882:	429a      	cmp	r2, r3
 8003884:	d00b      	beq.n	800389e <TIM_Base_SetConfig+0x66>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a19      	ldr	r2, [pc, #100]	@ (80038f0 <TIM_Base_SetConfig+0xb8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <TIM_Base_SetConfig+0x66>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a18      	ldr	r2, [pc, #96]	@ (80038f4 <TIM_Base_SetConfig+0xbc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_Base_SetConfig+0x66>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <TIM_Base_SetConfig+0xc0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <TIM_Base_SetConfig+0xc4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	4393      	bics	r3, r2
 80038b6:	001a      	movs	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2204      	movs	r2, #4
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	601a      	str	r2, [r3, #0]
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b004      	add	sp, #16
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40010800 	.word	0x40010800
 80038f8:	40011400 	.word	0x40011400
 80038fc:	fffffcff 	.word	0xfffffcff

08003900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	2201      	movs	r2, #1
 8003916:	4393      	bics	r3, r2
 8003918:	001a      	movs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2270      	movs	r2, #112	@ 0x70
 800392e:	4393      	bics	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2203      	movs	r2, #3
 8003936:	4393      	bics	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2202      	movs	r2, #2
 8003948:	4393      	bics	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b006      	add	sp, #24
 8003976:	bd80      	pop	{r7, pc}

08003978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	2210      	movs	r2, #16
 800398e:	4393      	bics	r3, r2
 8003990:	001a      	movs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a13      	ldr	r2, [pc, #76]	@ (80039f4 <TIM_OC2_SetConfig+0x7c>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a12      	ldr	r2, [pc, #72]	@ (80039f8 <TIM_OC2_SetConfig+0x80>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2220      	movs	r2, #32
 80039c2:	4393      	bics	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	46c0      	nop			@ (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	ffff8fff 	.word	0xffff8fff
 80039f8:	fffffcff 	.word	0xfffffcff

080039fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a18      	ldr	r2, [pc, #96]	@ (8003a74 <TIM_OC3_SetConfig+0x78>)
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2270      	movs	r2, #112	@ 0x70
 8003a28:	4393      	bics	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2203      	movs	r2, #3
 8003a30:	4393      	bics	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <TIM_OC3_SetConfig+0x7c>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b006      	add	sp, #24
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	fffffeff 	.word	0xfffffeff
 8003a78:	fffffdff 	.word	0xfffffdff

08003a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <TIM_OC4_SetConfig+0x7c>)
 8003a92:	401a      	ands	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a15      	ldr	r2, [pc, #84]	@ (8003afc <TIM_OC4_SetConfig+0x80>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a14      	ldr	r2, [pc, #80]	@ (8003b00 <TIM_OC4_SetConfig+0x84>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4a10      	ldr	r2, [pc, #64]	@ (8003b04 <TIM_OC4_SetConfig+0x88>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	031b      	lsls	r3, r3, #12
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b006      	add	sp, #24
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	ffffefff 	.word	0xffffefff
 8003afc:	ffff8fff 	.word	0xffff8fff
 8003b00:	fffffcff 	.word	0xfffffcff
 8003b04:	ffffdfff 	.word	0xffffdfff

08003b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4393      	bics	r3, r2
 8003b22:	001a      	movs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	22f0      	movs	r2, #240	@ 0xf0
 8003b32:	4393      	bics	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	220a      	movs	r2, #10
 8003b44:	4393      	bics	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	621a      	str	r2, [r3, #32]
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b006      	add	sp, #24
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	001a      	movs	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <TIM_TI2_ConfigInputStage+0x60>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	031b      	lsls	r3, r3, #12
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	22a0      	movs	r2, #160	@ 0xa0
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b006      	add	sp, #24
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	ffff0fff 	.word	0xffff0fff

08003bc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2270      	movs	r2, #112	@ 0x70
 8003bdc:	4393      	bics	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	2207      	movs	r2, #7
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b004      	add	sp, #16
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <TIM_ETR_SetConfig+0x3c>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	021a      	lsls	r2, r3, #8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	609a      	str	r2, [r3, #8]
}
 8003c30:	46c0      	nop			@ (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b006      	add	sp, #24
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	ffff00ff 	.word	0xffff00ff

08003c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	221f      	movs	r2, #31
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	0013      	movs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	43d2      	mvns	r2, r2
 8003c5e:	401a      	ands	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	211f      	movs	r1, #31
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4099      	lsls	r1, r3
 8003c72:	000b      	movs	r3, r1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b006      	add	sp, #24
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2238      	movs	r2, #56	@ 0x38
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e047      	b.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2238      	movs	r2, #56	@ 0x38
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2239      	movs	r2, #57	@ 0x39
 8003ca8:	2102      	movs	r1, #2
 8003caa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2270      	movs	r2, #112	@ 0x70
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	05db      	lsls	r3, r3, #23
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a10      	ldr	r2, [pc, #64]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10c      	bne.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2280      	movs	r2, #128	@ 0x80
 8003d04:	4393      	bics	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2239      	movs	r2, #57	@ 0x39
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2238      	movs	r2, #56	@ 0x38
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b004      	add	sp, #16
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40010800 	.word	0x40010800
 8003d3c:	40011400 	.word	0x40011400

08003d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e044      	b.n	8003ddc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2278      	movs	r2, #120	@ 0x78
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7fd f9a9 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2224      	movs	r2, #36	@ 0x24
 8003d6e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 fe44 	bl	8004a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 fba2 	bl	80044dc <UART_SetConfig>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e01c      	b.n	8003ddc <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	490d      	ldr	r1, [pc, #52]	@ (8003de4 <HAL_UART_Init+0xa4>)
 8003dae:	400a      	ands	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	212a      	movs	r1, #42	@ 0x2a
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 fed3 	bl	8004b80 <UART_CheckIdleState>
 8003dda:	0003      	movs	r3, r0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	ffffb7ff 	.word	0xffffb7ff

08003de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	1dbb      	adds	r3, r7, #6
 8003df4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2280      	movs	r2, #128	@ 0x80
 8003dfa:	589b      	ldr	r3, [r3, r2]
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d14a      	bne.n	8003e96 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_UART_Receive_IT+0x26>
 8003e06:	1dbb      	adds	r3, r7, #6
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e042      	b.n	8003e98 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d109      	bne.n	8003e32 <HAL_UART_Receive_IT+0x4a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d001      	beq.n	8003e32 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e032      	b.n	8003e98 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ea0 <HAL_UART_Receive_IT+0xb8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d020      	beq.n	8003e84 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d019      	beq.n	8003e84 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	613b      	str	r3, [r7, #16]
  return(result);
 8003e56:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2180      	movs	r1, #128	@ 0x80
 8003e72:	04c9      	lsls	r1, r1, #19
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f383 8810 	msr	PRIMASK, r3
}
 8003e82:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e84:	1dbb      	adds	r3, r7, #6
 8003e86:	881a      	ldrh	r2, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 ff8f 	bl	8004db0 <UART_Start_Receive_IT>
 8003e92:	0003      	movs	r3, r0
 8003e94:	e000      	b.n	8003e98 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b008      	add	sp, #32
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40004800 	.word	0x40004800

08003ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b0ab      	sub	sp, #172	@ 0xac
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	22a4      	movs	r2, #164	@ 0xa4
 8003eb4:	18b9      	adds	r1, r7, r2
 8003eb6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	20a0      	movs	r0, #160	@ 0xa0
 8003ec0:	1839      	adds	r1, r7, r0
 8003ec2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	219c      	movs	r1, #156	@ 0x9c
 8003ecc:	1879      	adds	r1, r7, r1
 8003ece:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	18bb      	adds	r3, r7, r2
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a99      	ldr	r2, [pc, #612]	@ (800413c <HAL_UART_IRQHandler+0x298>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2298      	movs	r2, #152	@ 0x98
 8003edc:	18bc      	adds	r4, r7, r2
 8003ede:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003ee0:	18bb      	adds	r3, r7, r2
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d114      	bne.n	8003f12 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2220      	movs	r2, #32
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00f      	beq.n	8003f12 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ef2:	183b      	adds	r3, r7, r0
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d00a      	beq.n	8003f12 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d100      	bne.n	8003f06 <HAL_UART_IRQHandler+0x62>
 8003f04:	e2be      	b.n	8004484 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	4798      	blx	r3
      }
      return;
 8003f10:	e2b8      	b.n	8004484 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f12:	2398      	movs	r3, #152	@ 0x98
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d100      	bne.n	8003f1e <HAL_UART_IRQHandler+0x7a>
 8003f1c:	e114      	b.n	8004148 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f1e:	239c      	movs	r3, #156	@ 0x9c
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2201      	movs	r2, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f2a:	23a0      	movs	r3, #160	@ 0xa0
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a83      	ldr	r2, [pc, #524]	@ (8004140 <HAL_UART_IRQHandler+0x29c>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	d100      	bne.n	8003f38 <HAL_UART_IRQHandler+0x94>
 8003f36:	e107      	b.n	8004148 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f38:	23a4      	movs	r3, #164	@ 0xa4
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	d012      	beq.n	8003f6a <HAL_UART_IRQHandler+0xc6>
 8003f44:	23a0      	movs	r3, #160	@ 0xa0
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2284      	movs	r2, #132	@ 0x84
 8003f5e:	589b      	ldr	r3, [r3, r2]
 8003f60:	2201      	movs	r2, #1
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2184      	movs	r1, #132	@ 0x84
 8003f68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f6a:	23a4      	movs	r3, #164	@ 0xa4
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2202      	movs	r2, #2
 8003f72:	4013      	ands	r3, r2
 8003f74:	d011      	beq.n	8003f9a <HAL_UART_IRQHandler+0xf6>
 8003f76:	239c      	movs	r3, #156	@ 0x9c
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2202      	movs	r2, #2
 8003f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2284      	movs	r2, #132	@ 0x84
 8003f8e:	589b      	ldr	r3, [r3, r2]
 8003f90:	2204      	movs	r2, #4
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2184      	movs	r1, #132	@ 0x84
 8003f98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f9a:	23a4      	movs	r3, #164	@ 0xa4
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d011      	beq.n	8003fca <HAL_UART_IRQHandler+0x126>
 8003fa6:	239c      	movs	r3, #156	@ 0x9c
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2284      	movs	r2, #132	@ 0x84
 8003fbe:	589b      	ldr	r3, [r3, r2]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2184      	movs	r1, #132	@ 0x84
 8003fc8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fca:	23a4      	movs	r3, #164	@ 0xa4
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d017      	beq.n	8004006 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fd6:	23a0      	movs	r3, #160	@ 0xa0
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d105      	bne.n	8003fee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fe2:	239c      	movs	r3, #156	@ 0x9c
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2284      	movs	r2, #132	@ 0x84
 8003ffa:	589b      	ldr	r3, [r3, r2]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2184      	movs	r1, #132	@ 0x84
 8004004:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004006:	23a4      	movs	r3, #164	@ 0xa4
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4013      	ands	r3, r2
 8004012:	d013      	beq.n	800403c <HAL_UART_IRQHandler+0x198>
 8004014:	23a0      	movs	r3, #160	@ 0xa0
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	@ 0x80
 800401c:	04db      	lsls	r3, r3, #19
 800401e:	4013      	ands	r3, r2
 8004020:	d00c      	beq.n	800403c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2280      	movs	r2, #128	@ 0x80
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2284      	movs	r2, #132	@ 0x84
 8004030:	589b      	ldr	r3, [r3, r2]
 8004032:	2220      	movs	r2, #32
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2184      	movs	r1, #132	@ 0x84
 800403a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2284      	movs	r2, #132	@ 0x84
 8004040:	589b      	ldr	r3, [r3, r2]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d100      	bne.n	8004048 <HAL_UART_IRQHandler+0x1a4>
 8004046:	e21f      	b.n	8004488 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004048:	23a4      	movs	r3, #164	@ 0xa4
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2220      	movs	r2, #32
 8004050:	4013      	ands	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004054:	23a0      	movs	r3, #160	@ 0xa0
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2220      	movs	r2, #32
 800405c:	4013      	ands	r3, r2
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	0010      	movs	r0, r2
 8004070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2284      	movs	r2, #132	@ 0x84
 8004076:	589b      	ldr	r3, [r3, r2]
 8004078:	2194      	movs	r1, #148	@ 0x94
 800407a:	187a      	adds	r2, r7, r1
 800407c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2240      	movs	r2, #64	@ 0x40
 8004086:	4013      	ands	r3, r2
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d004      	beq.n	8004096 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800408c:	187b      	adds	r3, r7, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2228      	movs	r2, #40	@ 0x28
 8004092:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004094:	d047      	beq.n	8004126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 ff53 	bl	8004f44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2240      	movs	r2, #64	@ 0x40
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	d137      	bne.n	800411c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ac:	f3ef 8310 	mrs	r3, PRIMASK
 80040b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80040b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b4:	2090      	movs	r0, #144	@ 0x90
 80040b6:	183a      	adds	r2, r7, r0
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	2301      	movs	r3, #1
 80040bc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c0:	f383 8810 	msr	PRIMASK, r3
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2140      	movs	r1, #64	@ 0x40
 80040d2:	438a      	bics	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	183b      	adds	r3, r7, r0
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f0:	4a14      	ldr	r2, [pc, #80]	@ (8004144 <HAL_UART_IRQHandler+0x2a0>)
 80040f2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fd fe19 	bl	8001d30 <HAL_DMA_Abort_IT>
 80040fe:	1e03      	subs	r3, r0, #0
 8004100:	d01a      	beq.n	8004138 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410c:	0018      	movs	r0, r3
 800410e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	e012      	b.n	8004138 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f9cd 	bl	80044b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411a:	e00d      	b.n	8004138 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	0018      	movs	r0, r3
 8004120:	f000 f9c8 	bl	80044b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	e008      	b.n	8004138 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f000 f9c3 	bl	80044b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2284      	movs	r2, #132	@ 0x84
 8004132:	2100      	movs	r1, #0
 8004134:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004136:	e1a7      	b.n	8004488 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	46c0      	nop			@ (mov r8, r8)
    return;
 800413a:	e1a5      	b.n	8004488 <HAL_UART_IRQHandler+0x5e4>
 800413c:	0000080f 	.word	0x0000080f
 8004140:	04000120 	.word	0x04000120
 8004144:	0800500d 	.word	0x0800500d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414c:	2b01      	cmp	r3, #1
 800414e:	d000      	beq.n	8004152 <HAL_UART_IRQHandler+0x2ae>
 8004150:	e159      	b.n	8004406 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004152:	23a4      	movs	r3, #164	@ 0xa4
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2210      	movs	r2, #16
 800415a:	4013      	ands	r3, r2
 800415c:	d100      	bne.n	8004160 <HAL_UART_IRQHandler+0x2bc>
 800415e:	e152      	b.n	8004406 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004160:	23a0      	movs	r3, #160	@ 0xa0
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2210      	movs	r2, #16
 8004168:	4013      	ands	r3, r2
 800416a:	d100      	bne.n	800416e <HAL_UART_IRQHandler+0x2ca>
 800416c:	e14b      	b.n	8004406 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2210      	movs	r2, #16
 8004174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2240      	movs	r2, #64	@ 0x40
 800417e:	4013      	ands	r3, r2
 8004180:	2b40      	cmp	r3, #64	@ 0x40
 8004182:	d000      	beq.n	8004186 <HAL_UART_IRQHandler+0x2e2>
 8004184:	e0bf      	b.n	8004306 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	217e      	movs	r1, #126	@ 0x7e
 8004190:	187b      	adds	r3, r7, r1
 8004192:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004194:	187b      	adds	r3, r7, r1
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d100      	bne.n	800419e <HAL_UART_IRQHandler+0x2fa>
 800419c:	e095      	b.n	80042ca <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2258      	movs	r2, #88	@ 0x58
 80041a2:	5a9b      	ldrh	r3, [r3, r2]
 80041a4:	187a      	adds	r2, r7, r1
 80041a6:	8812      	ldrh	r2, [r2, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d300      	bcc.n	80041ae <HAL_UART_IRQHandler+0x30a>
 80041ac:	e08d      	b.n	80042ca <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	187a      	adds	r2, r7, r1
 80041b2:	215a      	movs	r1, #90	@ 0x5a
 80041b4:	8812      	ldrh	r2, [r2, #0]
 80041b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2220      	movs	r2, #32
 80041c2:	4013      	ands	r3, r2
 80041c4:	d16f      	bne.n	80042a6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80041cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041d0:	2301      	movs	r3, #1
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	49ad      	ldr	r1, [pc, #692]	@ (800449c <HAL_UART_IRQHandler+0x5f8>)
 80041e8:	400a      	ands	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f2:	f383 8810 	msr	PRIMASK, r3
}
 80041f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f8:	f3ef 8310 	mrs	r3, PRIMASK
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80041fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	677b      	str	r3, [r7, #116]	@ 0x74
 8004202:	2301      	movs	r3, #1
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2101      	movs	r1, #1
 800421a:	438a      	bics	r2, r1
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004220:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422a:	f3ef 8310 	mrs	r3, PRIMASK
 800422e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	673b      	str	r3, [r7, #112]	@ 0x70
 8004234:	2301      	movs	r3, #1
 8004236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2140      	movs	r1, #64	@ 0x40
 800424c:	438a      	bics	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004252:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004256:	f383 8810 	msr	PRIMASK, r3
}
 800425a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	2120      	movs	r1, #32
 8004262:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426a:	f3ef 8310 	mrs	r3, PRIMASK
 800426e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004274:	2301      	movs	r3, #1
 8004276:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800427a:	f383 8810 	msr	PRIMASK, r3
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2110      	movs	r1, #16
 800428c:	438a      	bics	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004296:	f383 8810 	msr	PRIMASK, r3
}
 800429a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fd fd05 	bl	8001cb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2258      	movs	r2, #88	@ 0x58
 80042b0:	5a9a      	ldrh	r2, [r3, r2]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	215a      	movs	r1, #90	@ 0x5a
 80042b6:	5a5b      	ldrh	r3, [r3, r1]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 f8fe 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80042c8:	e0e0      	b.n	800448c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2258      	movs	r2, #88	@ 0x58
 80042ce:	5a9b      	ldrh	r3, [r3, r2]
 80042d0:	227e      	movs	r2, #126	@ 0x7e
 80042d2:	18ba      	adds	r2, r7, r2
 80042d4:	8812      	ldrh	r2, [r2, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d000      	beq.n	80042dc <HAL_UART_IRQHandler+0x438>
 80042da:	e0d7      	b.n	800448c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2220      	movs	r2, #32
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d000      	beq.n	80042ee <HAL_UART_IRQHandler+0x44a>
 80042ec:	e0ce      	b.n	800448c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2258      	movs	r2, #88	@ 0x58
 80042f8:	5a9a      	ldrh	r2, [r3, r2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0011      	movs	r1, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 f8e0 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
      return;
 8004304:	e0c2      	b.n	800448c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2258      	movs	r2, #88	@ 0x58
 800430a:	5a99      	ldrh	r1, [r3, r2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	225a      	movs	r2, #90	@ 0x5a
 8004310:	5a9b      	ldrh	r3, [r3, r2]
 8004312:	b29a      	uxth	r2, r3
 8004314:	208e      	movs	r0, #142	@ 0x8e
 8004316:	183b      	adds	r3, r7, r0
 8004318:	1a8a      	subs	r2, r1, r2
 800431a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	225a      	movs	r2, #90	@ 0x5a
 8004320:	5a9b      	ldrh	r3, [r3, r2]
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d100      	bne.n	800432a <HAL_UART_IRQHandler+0x486>
 8004328:	e0b2      	b.n	8004490 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800432a:	183b      	adds	r3, r7, r0
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d100      	bne.n	8004334 <HAL_UART_IRQHandler+0x490>
 8004332:	e0ad      	b.n	8004490 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004334:	f3ef 8310 	mrs	r3, PRIMASK
 8004338:	60fb      	str	r3, [r7, #12]
  return(result);
 800433a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433c:	2488      	movs	r4, #136	@ 0x88
 800433e:	193a      	adds	r2, r7, r4
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	2301      	movs	r3, #1
 8004344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			@ (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4951      	ldr	r1, [pc, #324]	@ (80044a0 <HAL_UART_IRQHandler+0x5fc>)
 800435a:	400a      	ands	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	193b      	adds	r3, r7, r4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436c:	f3ef 8310 	mrs	r3, PRIMASK
 8004370:	61bb      	str	r3, [r7, #24]
  return(result);
 8004372:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004374:	2484      	movs	r4, #132	@ 0x84
 8004376:	193a      	adds	r2, r7, r4
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f383 8810 	msr	PRIMASK, r3
}
 8004384:	46c0      	nop			@ (mov r8, r8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2101      	movs	r1, #1
 8004392:	438a      	bics	r2, r1
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	193b      	adds	r3, r7, r4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2280      	movs	r2, #128	@ 0x80
 80043a8:	2120      	movs	r1, #32
 80043aa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b8:	f3ef 8310 	mrs	r3, PRIMASK
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c0:	2480      	movs	r4, #128	@ 0x80
 80043c2:	193a      	adds	r2, r7, r4
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	2301      	movs	r3, #1
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			@ (mov r8, r8)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2110      	movs	r1, #16
 80043de:	438a      	bics	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	193b      	adds	r3, r7, r4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043f6:	183b      	adds	r3, r7, r0
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f860 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004404:	e044      	b.n	8004490 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004406:	23a4      	movs	r3, #164	@ 0xa4
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	@ 0x80
 800440e:	035b      	lsls	r3, r3, #13
 8004410:	4013      	ands	r3, r2
 8004412:	d010      	beq.n	8004436 <HAL_UART_IRQHandler+0x592>
 8004414:	239c      	movs	r3, #156	@ 0x9c
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	03db      	lsls	r3, r3, #15
 800441e:	4013      	ands	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2280      	movs	r2, #128	@ 0x80
 8004428:	0352      	lsls	r2, r2, #13
 800442a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	0018      	movs	r0, r3
 8004430:	f000 ffee 	bl	8005410 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004434:	e02f      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004436:	23a4      	movs	r3, #164	@ 0xa4
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2280      	movs	r2, #128	@ 0x80
 800443e:	4013      	ands	r3, r2
 8004440:	d00f      	beq.n	8004462 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004442:	23a0      	movs	r3, #160	@ 0xa0
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2280      	movs	r2, #128	@ 0x80
 800444a:	4013      	ands	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01e      	beq.n	8004494 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	0010      	movs	r0, r2
 800445e:	4798      	blx	r3
    }
    return;
 8004460:	e018      	b.n	8004494 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004462:	23a4      	movs	r3, #164	@ 0xa4
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2240      	movs	r2, #64	@ 0x40
 800446a:	4013      	ands	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_UART_IRQHandler+0x5f2>
 800446e:	23a0      	movs	r3, #160	@ 0xa0
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2240      	movs	r2, #64	@ 0x40
 8004476:	4013      	ands	r3, r2
 8004478:	d00d      	beq.n	8004496 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 fdd8 	bl	8005032 <UART_EndTransmit_IT>
    return;
 8004482:	e008      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e006      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	e004      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
      return;
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	e002      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	e000      	b.n	8004496 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004494:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004496:	46bd      	mov	sp, r7
 8004498:	b02b      	add	sp, #172	@ 0xac
 800449a:	bd90      	pop	{r4, r7, pc}
 800449c:	fffffeff 	.word	0xfffffeff
 80044a0:	fffffedf 	.word	0xfffffedf

080044a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b002      	add	sp, #8
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	000a      	movs	r2, r1
 80044ce:	1cbb      	adds	r3, r7, #2
 80044d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044dc:	b5b0      	push	{r4, r5, r7, lr}
 80044de:	b08e      	sub	sp, #56	@ 0x38
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044e4:	231a      	movs	r3, #26
 80044e6:	2218      	movs	r2, #24
 80044e8:	189b      	adds	r3, r3, r2
 80044ea:	19db      	adds	r3, r3, r7
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	431a      	orrs	r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4313      	orrs	r3, r2
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4ac3      	ldr	r2, [pc, #780]	@ (800481c <UART_SetConfig+0x340>)
 8004510:	4013      	ands	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800451a:	430a      	orrs	r2, r1
 800451c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4abe      	ldr	r2, [pc, #760]	@ (8004820 <UART_SetConfig+0x344>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4ab8      	ldr	r2, [pc, #736]	@ (8004824 <UART_SetConfig+0x348>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800454c:	4313      	orrs	r3, r2
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4ab4      	ldr	r2, [pc, #720]	@ (8004828 <UART_SetConfig+0x34c>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4ab0      	ldr	r2, [pc, #704]	@ (800482c <UART_SetConfig+0x350>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d131      	bne.n	80045d4 <UART_SetConfig+0xf8>
 8004570:	4baf      	ldr	r3, [pc, #700]	@ (8004830 <UART_SetConfig+0x354>)
 8004572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004574:	2203      	movs	r2, #3
 8004576:	4013      	ands	r3, r2
 8004578:	2b03      	cmp	r3, #3
 800457a:	d01d      	beq.n	80045b8 <UART_SetConfig+0xdc>
 800457c:	d823      	bhi.n	80045c6 <UART_SetConfig+0xea>
 800457e:	2b02      	cmp	r3, #2
 8004580:	d00c      	beq.n	800459c <UART_SetConfig+0xc0>
 8004582:	d820      	bhi.n	80045c6 <UART_SetConfig+0xea>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <UART_SetConfig+0xb2>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d00e      	beq.n	80045aa <UART_SetConfig+0xce>
 800458c:	e01b      	b.n	80045c6 <UART_SetConfig+0xea>
 800458e:	231b      	movs	r3, #27
 8004590:	2218      	movs	r2, #24
 8004592:	189b      	adds	r3, r3, r2
 8004594:	19db      	adds	r3, r3, r7
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e0b4      	b.n	8004706 <UART_SetConfig+0x22a>
 800459c:	231b      	movs	r3, #27
 800459e:	2218      	movs	r2, #24
 80045a0:	189b      	adds	r3, r3, r2
 80045a2:	19db      	adds	r3, r3, r7
 80045a4:	2202      	movs	r2, #2
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e0ad      	b.n	8004706 <UART_SetConfig+0x22a>
 80045aa:	231b      	movs	r3, #27
 80045ac:	2218      	movs	r2, #24
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	19db      	adds	r3, r3, r7
 80045b2:	2204      	movs	r2, #4
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e0a6      	b.n	8004706 <UART_SetConfig+0x22a>
 80045b8:	231b      	movs	r3, #27
 80045ba:	2218      	movs	r2, #24
 80045bc:	189b      	adds	r3, r3, r2
 80045be:	19db      	adds	r3, r3, r7
 80045c0:	2208      	movs	r2, #8
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e09f      	b.n	8004706 <UART_SetConfig+0x22a>
 80045c6:	231b      	movs	r3, #27
 80045c8:	2218      	movs	r2, #24
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	19db      	adds	r3, r3, r7
 80045ce:	2210      	movs	r2, #16
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e098      	b.n	8004706 <UART_SetConfig+0x22a>
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a96      	ldr	r2, [pc, #600]	@ (8004834 <UART_SetConfig+0x358>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d131      	bne.n	8004642 <UART_SetConfig+0x166>
 80045de:	4b94      	ldr	r3, [pc, #592]	@ (8004830 <UART_SetConfig+0x354>)
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	220c      	movs	r2, #12
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d01d      	beq.n	8004626 <UART_SetConfig+0x14a>
 80045ea:	d823      	bhi.n	8004634 <UART_SetConfig+0x158>
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d00c      	beq.n	800460a <UART_SetConfig+0x12e>
 80045f0:	d820      	bhi.n	8004634 <UART_SetConfig+0x158>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <UART_SetConfig+0x120>
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d00e      	beq.n	8004618 <UART_SetConfig+0x13c>
 80045fa:	e01b      	b.n	8004634 <UART_SetConfig+0x158>
 80045fc:	231b      	movs	r3, #27
 80045fe:	2218      	movs	r2, #24
 8004600:	189b      	adds	r3, r3, r2
 8004602:	19db      	adds	r3, r3, r7
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e07d      	b.n	8004706 <UART_SetConfig+0x22a>
 800460a:	231b      	movs	r3, #27
 800460c:	2218      	movs	r2, #24
 800460e:	189b      	adds	r3, r3, r2
 8004610:	19db      	adds	r3, r3, r7
 8004612:	2202      	movs	r2, #2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e076      	b.n	8004706 <UART_SetConfig+0x22a>
 8004618:	231b      	movs	r3, #27
 800461a:	2218      	movs	r2, #24
 800461c:	189b      	adds	r3, r3, r2
 800461e:	19db      	adds	r3, r3, r7
 8004620:	2204      	movs	r2, #4
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e06f      	b.n	8004706 <UART_SetConfig+0x22a>
 8004626:	231b      	movs	r3, #27
 8004628:	2218      	movs	r2, #24
 800462a:	189b      	adds	r3, r3, r2
 800462c:	19db      	adds	r3, r3, r7
 800462e:	2208      	movs	r2, #8
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e068      	b.n	8004706 <UART_SetConfig+0x22a>
 8004634:	231b      	movs	r3, #27
 8004636:	2218      	movs	r2, #24
 8004638:	189b      	adds	r3, r3, r2
 800463a:	19db      	adds	r3, r3, r7
 800463c:	2210      	movs	r2, #16
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e061      	b.n	8004706 <UART_SetConfig+0x22a>
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7c      	ldr	r2, [pc, #496]	@ (8004838 <UART_SetConfig+0x35c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d106      	bne.n	800465a <UART_SetConfig+0x17e>
 800464c:	231b      	movs	r3, #27
 800464e:	2218      	movs	r2, #24
 8004650:	189b      	adds	r3, r3, r2
 8004652:	19db      	adds	r3, r3, r7
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e055      	b.n	8004706 <UART_SetConfig+0x22a>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a77      	ldr	r2, [pc, #476]	@ (800483c <UART_SetConfig+0x360>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d106      	bne.n	8004672 <UART_SetConfig+0x196>
 8004664:	231b      	movs	r3, #27
 8004666:	2218      	movs	r2, #24
 8004668:	189b      	adds	r3, r3, r2
 800466a:	19db      	adds	r3, r3, r7
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e049      	b.n	8004706 <UART_SetConfig+0x22a>
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6b      	ldr	r2, [pc, #428]	@ (8004824 <UART_SetConfig+0x348>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d13e      	bne.n	80046fa <UART_SetConfig+0x21e>
 800467c:	4b6c      	ldr	r3, [pc, #432]	@ (8004830 <UART_SetConfig+0x354>)
 800467e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004680:	23c0      	movs	r3, #192	@ 0xc0
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	4013      	ands	r3, r2
 8004686:	22c0      	movs	r2, #192	@ 0xc0
 8004688:	0112      	lsls	r2, r2, #4
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <UART_SetConfig+0x202>
 800468e:	22c0      	movs	r2, #192	@ 0xc0
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	4293      	cmp	r3, r2
 8004694:	d82a      	bhi.n	80046ec <UART_SetConfig+0x210>
 8004696:	2280      	movs	r2, #128	@ 0x80
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	4293      	cmp	r3, r2
 800469c:	d011      	beq.n	80046c2 <UART_SetConfig+0x1e6>
 800469e:	2280      	movs	r2, #128	@ 0x80
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d822      	bhi.n	80046ec <UART_SetConfig+0x210>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <UART_SetConfig+0x1d8>
 80046aa:	2280      	movs	r2, #128	@ 0x80
 80046ac:	00d2      	lsls	r2, r2, #3
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <UART_SetConfig+0x1f4>
 80046b2:	e01b      	b.n	80046ec <UART_SetConfig+0x210>
 80046b4:	231b      	movs	r3, #27
 80046b6:	2218      	movs	r2, #24
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	19db      	adds	r3, r3, r7
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e021      	b.n	8004706 <UART_SetConfig+0x22a>
 80046c2:	231b      	movs	r3, #27
 80046c4:	2218      	movs	r2, #24
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	2202      	movs	r2, #2
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e01a      	b.n	8004706 <UART_SetConfig+0x22a>
 80046d0:	231b      	movs	r3, #27
 80046d2:	2218      	movs	r2, #24
 80046d4:	189b      	adds	r3, r3, r2
 80046d6:	19db      	adds	r3, r3, r7
 80046d8:	2204      	movs	r2, #4
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e013      	b.n	8004706 <UART_SetConfig+0x22a>
 80046de:	231b      	movs	r3, #27
 80046e0:	2218      	movs	r2, #24
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	2208      	movs	r2, #8
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e00c      	b.n	8004706 <UART_SetConfig+0x22a>
 80046ec:	231b      	movs	r3, #27
 80046ee:	2218      	movs	r2, #24
 80046f0:	189b      	adds	r3, r3, r2
 80046f2:	19db      	adds	r3, r3, r7
 80046f4:	2210      	movs	r2, #16
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e005      	b.n	8004706 <UART_SetConfig+0x22a>
 80046fa:	231b      	movs	r3, #27
 80046fc:	2218      	movs	r2, #24
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	19db      	adds	r3, r3, r7
 8004702:	2210      	movs	r2, #16
 8004704:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a46      	ldr	r2, [pc, #280]	@ (8004824 <UART_SetConfig+0x348>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d000      	beq.n	8004712 <UART_SetConfig+0x236>
 8004710:	e09a      	b.n	8004848 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004712:	231b      	movs	r3, #27
 8004714:	2218      	movs	r2, #24
 8004716:	189b      	adds	r3, r3, r2
 8004718:	19db      	adds	r3, r3, r7
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d01d      	beq.n	800475c <UART_SetConfig+0x280>
 8004720:	dc20      	bgt.n	8004764 <UART_SetConfig+0x288>
 8004722:	2b04      	cmp	r3, #4
 8004724:	d015      	beq.n	8004752 <UART_SetConfig+0x276>
 8004726:	dc1d      	bgt.n	8004764 <UART_SetConfig+0x288>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <UART_SetConfig+0x256>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d005      	beq.n	800473c <UART_SetConfig+0x260>
 8004730:	e018      	b.n	8004764 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe fac5 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004736:	0003      	movs	r3, r0
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800473a:	e01c      	b.n	8004776 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800473c:	4b3c      	ldr	r3, [pc, #240]	@ (8004830 <UART_SetConfig+0x354>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2210      	movs	r2, #16
 8004742:	4013      	ands	r3, r2
 8004744:	d002      	beq.n	800474c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004746:	4b3e      	ldr	r3, [pc, #248]	@ (8004840 <UART_SetConfig+0x364>)
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800474a:	e014      	b.n	8004776 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800474c:	4b3d      	ldr	r3, [pc, #244]	@ (8004844 <UART_SetConfig+0x368>)
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004750:	e011      	b.n	8004776 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe fa25 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8004756:	0003      	movs	r3, r0
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800475a:	e00c      	b.n	8004776 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004762:	e008      	b.n	8004776 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004768:	231a      	movs	r3, #26
 800476a:	2218      	movs	r2, #24
 800476c:	189b      	adds	r3, r3, r2
 800476e:	19db      	adds	r3, r3, r7
 8004770:	2201      	movs	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
        break;
 8004774:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d100      	bne.n	800477e <UART_SetConfig+0x2a2>
 800477c:	e133      	b.n	80049e6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	0013      	movs	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	189b      	adds	r3, r3, r2
 8004788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800478a:	429a      	cmp	r2, r3
 800478c:	d305      	bcc.n	800479a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004796:	429a      	cmp	r2, r3
 8004798:	d906      	bls.n	80047a8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800479a:	231a      	movs	r3, #26
 800479c:	2218      	movs	r2, #24
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	19db      	adds	r3, r3, r7
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e11e      	b.n	80049e6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	6939      	ldr	r1, [r7, #16]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	000b      	movs	r3, r1
 80047b6:	0e1b      	lsrs	r3, r3, #24
 80047b8:	0010      	movs	r0, r2
 80047ba:	0205      	lsls	r5, r0, #8
 80047bc:	431d      	orrs	r5, r3
 80047be:	000b      	movs	r3, r1
 80047c0:	021c      	lsls	r4, r3, #8
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	1900      	adds	r0, r0, r4
 80047d4:	4169      	adcs	r1, r5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	2300      	movs	r3, #0
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f7fb fd1c 	bl	8000220 <__aeabi_uldivmod>
 80047e8:	0002      	movs	r2, r0
 80047ea:	000b      	movs	r3, r1
 80047ec:	0013      	movs	r3, r2
 80047ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f2:	23c0      	movs	r3, #192	@ 0xc0
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d309      	bcc.n	800480e <UART_SetConfig+0x332>
 80047fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047fc:	2380      	movs	r3, #128	@ 0x80
 80047fe:	035b      	lsls	r3, r3, #13
 8004800:	429a      	cmp	r2, r3
 8004802:	d204      	bcs.n	800480e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	e0eb      	b.n	80049e6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800480e:	231a      	movs	r3, #26
 8004810:	2218      	movs	r2, #24
 8004812:	189b      	adds	r3, r3, r2
 8004814:	19db      	adds	r3, r3, r7
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e0e4      	b.n	80049e6 <UART_SetConfig+0x50a>
 800481c:	efff69f3 	.word	0xefff69f3
 8004820:	ffffcfff 	.word	0xffffcfff
 8004824:	40004800 	.word	0x40004800
 8004828:	fffff4ff 	.word	0xfffff4ff
 800482c:	40013800 	.word	0x40013800
 8004830:	40021000 	.word	0x40021000
 8004834:	40004400 	.word	0x40004400
 8004838:	40004c00 	.word	0x40004c00
 800483c:	40005000 	.word	0x40005000
 8004840:	003d0900 	.word	0x003d0900
 8004844:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	429a      	cmp	r2, r3
 8004852:	d000      	beq.n	8004856 <UART_SetConfig+0x37a>
 8004854:	e070      	b.n	8004938 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004856:	231b      	movs	r3, #27
 8004858:	2218      	movs	r2, #24
 800485a:	189b      	adds	r3, r3, r2
 800485c:	19db      	adds	r3, r3, r7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d822      	bhi.n	80048aa <UART_SetConfig+0x3ce>
 8004864:	009a      	lsls	r2, r3, #2
 8004866:	4b67      	ldr	r3, [pc, #412]	@ (8004a04 <UART_SetConfig+0x528>)
 8004868:	18d3      	adds	r3, r2, r3
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7fe fa27 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004872:	0003      	movs	r3, r0
 8004874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004876:	e021      	b.n	80048bc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe fa38 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800487c:	0003      	movs	r3, r0
 800487e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004880:	e01c      	b.n	80048bc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004882:	4b61      	ldr	r3, [pc, #388]	@ (8004a08 <UART_SetConfig+0x52c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2210      	movs	r2, #16
 8004888:	4013      	ands	r3, r2
 800488a:	d002      	beq.n	8004892 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800488c:	4b5f      	ldr	r3, [pc, #380]	@ (8004a0c <UART_SetConfig+0x530>)
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004890:	e014      	b.n	80048bc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004892:	4b5f      	ldr	r3, [pc, #380]	@ (8004a10 <UART_SetConfig+0x534>)
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004896:	e011      	b.n	80048bc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004898:	f7fe f982 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 800489c:	0003      	movs	r3, r0
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048a0:	e00c      	b.n	80048bc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	2380      	movs	r3, #128	@ 0x80
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048a8:	e008      	b.n	80048bc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80048ae:	231a      	movs	r3, #26
 80048b0:	2218      	movs	r2, #24
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	19db      	adds	r3, r3, r7
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
        break;
 80048ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d100      	bne.n	80048c4 <UART_SetConfig+0x3e8>
 80048c2:	e090      	b.n	80049e6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c6:	005a      	lsls	r2, r3, #1
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	18d2      	adds	r2, r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0019      	movs	r1, r3
 80048d6:	0010      	movs	r0, r2
 80048d8:	f7fb fc16 	bl	8000108 <__udivsi3>
 80048dc:	0003      	movs	r3, r0
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	d921      	bls.n	800492a <UART_SetConfig+0x44e>
 80048e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	025b      	lsls	r3, r3, #9
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d21c      	bcs.n	800492a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	200e      	movs	r0, #14
 80048f6:	2418      	movs	r4, #24
 80048f8:	1903      	adds	r3, r0, r4
 80048fa:	19db      	adds	r3, r3, r7
 80048fc:	210f      	movs	r1, #15
 80048fe:	438a      	bics	r2, r1
 8004900:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	2207      	movs	r2, #7
 800490a:	4013      	ands	r3, r2
 800490c:	b299      	uxth	r1, r3
 800490e:	1903      	adds	r3, r0, r4
 8004910:	19db      	adds	r3, r3, r7
 8004912:	1902      	adds	r2, r0, r4
 8004914:	19d2      	adds	r2, r2, r7
 8004916:	8812      	ldrh	r2, [r2, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	1902      	adds	r2, r0, r4
 8004922:	19d2      	adds	r2, r2, r7
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e05d      	b.n	80049e6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800492a:	231a      	movs	r3, #26
 800492c:	2218      	movs	r2, #24
 800492e:	189b      	adds	r3, r3, r2
 8004930:	19db      	adds	r3, r3, r7
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e056      	b.n	80049e6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004938:	231b      	movs	r3, #27
 800493a:	2218      	movs	r2, #24
 800493c:	189b      	adds	r3, r3, r2
 800493e:	19db      	adds	r3, r3, r7
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d822      	bhi.n	800498c <UART_SetConfig+0x4b0>
 8004946:	009a      	lsls	r2, r3, #2
 8004948:	4b32      	ldr	r3, [pc, #200]	@ (8004a14 <UART_SetConfig+0x538>)
 800494a:	18d3      	adds	r3, r2, r3
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004950:	f7fe f9b6 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004954:	0003      	movs	r3, r0
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004958:	e021      	b.n	800499e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495a:	f7fe f9c7 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800495e:	0003      	movs	r3, r0
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004962:	e01c      	b.n	800499e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004964:	4b28      	ldr	r3, [pc, #160]	@ (8004a08 <UART_SetConfig+0x52c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2210      	movs	r2, #16
 800496a:	4013      	ands	r3, r2
 800496c:	d002      	beq.n	8004974 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800496e:	4b27      	ldr	r3, [pc, #156]	@ (8004a0c <UART_SetConfig+0x530>)
 8004970:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004972:	e014      	b.n	800499e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004974:	4b26      	ldr	r3, [pc, #152]	@ (8004a10 <UART_SetConfig+0x534>)
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004978:	e011      	b.n	800499e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fe f911 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 800497e:	0003      	movs	r3, r0
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004982:	e00c      	b.n	800499e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004984:	2380      	movs	r3, #128	@ 0x80
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800498a:	e008      	b.n	800499e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004990:	231a      	movs	r3, #26
 8004992:	2218      	movs	r2, #24
 8004994:	189b      	adds	r3, r3, r2
 8004996:	19db      	adds	r3, r3, r7
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
        break;
 800499c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	085a      	lsrs	r2, r3, #1
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	18d2      	adds	r2, r2, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	0019      	movs	r1, r3
 80049b4:	0010      	movs	r0, r2
 80049b6:	f7fb fba7 	bl	8000108 <__udivsi3>
 80049ba:	0003      	movs	r3, r0
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d90a      	bls.n	80049da <UART_SetConfig+0x4fe>
 80049c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	025b      	lsls	r3, r3, #9
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d205      	bcs.n	80049da <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60da      	str	r2, [r3, #12]
 80049d8:	e005      	b.n	80049e6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80049da:	231a      	movs	r3, #26
 80049dc:	2218      	movs	r2, #24
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	19db      	adds	r3, r3, r7
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2200      	movs	r2, #0
 80049ea:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2200      	movs	r2, #0
 80049f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049f2:	231a      	movs	r3, #26
 80049f4:	2218      	movs	r2, #24
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	19db      	adds	r3, r3, r7
 80049fa:	781b      	ldrb	r3, [r3, #0]
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b00e      	add	sp, #56	@ 0x38
 8004a02:	bdb0      	pop	{r4, r5, r7, pc}
 8004a04:	080054b4 	.word	0x080054b4
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	003d0900 	.word	0x003d0900
 8004a10:	00f42400 	.word	0x00f42400
 8004a14:	080054d8 	.word	0x080054d8

08004a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	2208      	movs	r2, #8
 8004a26:	4013      	ands	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a4a      	ldr	r2, [pc, #296]	@ (8004b5c <UART_AdvFeatureConfig+0x144>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2201      	movs	r2, #1
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4a43      	ldr	r2, [pc, #268]	@ (8004b60 <UART_AdvFeatureConfig+0x148>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a3b      	ldr	r2, [pc, #236]	@ (8004b64 <UART_AdvFeatureConfig+0x14c>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a34      	ldr	r2, [pc, #208]	@ (8004b68 <UART_AdvFeatureConfig+0x150>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	2210      	movs	r2, #16
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b6c <UART_AdvFeatureConfig+0x154>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	2220      	movs	r2, #32
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4a25      	ldr	r2, [pc, #148]	@ (8004b70 <UART_AdvFeatureConfig+0x158>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	2240      	movs	r2, #64	@ 0x40
 8004af2:	4013      	ands	r3, r2
 8004af4:	d01d      	beq.n	8004b32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <UART_AdvFeatureConfig+0x15c>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	035b      	lsls	r3, r3, #13
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10b      	bne.n	8004b32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <UART_AdvFeatureConfig+0x160>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	2280      	movs	r2, #128	@ 0x80
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a0e      	ldr	r2, [pc, #56]	@ (8004b7c <UART_AdvFeatureConfig+0x164>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }
}
 8004b54:	46c0      	nop			@ (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	ffff7fff 	.word	0xffff7fff
 8004b60:	fffdffff 	.word	0xfffdffff
 8004b64:	fffeffff 	.word	0xfffeffff
 8004b68:	fffbffff 	.word	0xfffbffff
 8004b6c:	ffffefff 	.word	0xffffefff
 8004b70:	ffffdfff 	.word	0xffffdfff
 8004b74:	ffefffff 	.word	0xffefffff
 8004b78:	ff9fffff 	.word	0xff9fffff
 8004b7c:	fff7ffff 	.word	0xfff7ffff

08004b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b092      	sub	sp, #72	@ 0x48
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2284      	movs	r2, #132	@ 0x84
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b90:	f7fc fb70 	bl	8001274 <HAL_GetTick>
 8004b94:	0003      	movs	r3, r0
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d12c      	bne.n	8004c00 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba8:	2280      	movs	r2, #128	@ 0x80
 8004baa:	0391      	lsls	r1, r2, #14
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4a46      	ldr	r2, [pc, #280]	@ (8004cc8 <UART_CheckIdleState+0x148>)
 8004bb0:	9200      	str	r2, [sp, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f000 f88c 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d021      	beq.n	8004c00 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2180      	movs	r1, #128	@ 0x80
 8004bde:	438a      	bics	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2278      	movs	r2, #120	@ 0x78
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e05f      	b.n	8004cc0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2204      	movs	r2, #4
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d146      	bne.n	8004c9c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c10:	2280      	movs	r2, #128	@ 0x80
 8004c12:	03d1      	lsls	r1, r2, #15
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc8 <UART_CheckIdleState+0x148>)
 8004c18:	9200      	str	r2, [sp, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f000 f858 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004c20:	1e03      	subs	r3, r0, #0
 8004c22:	d03b      	beq.n	8004c9c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c24:	f3ef 8310 	mrs	r3, PRIMASK
 8004c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c2e:	2301      	movs	r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f383 8810 	msr	PRIMASK, r3
}
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4921      	ldr	r1, [pc, #132]	@ (8004ccc <UART_CheckIdleState+0x14c>)
 8004c46:	400a      	ands	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c56:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c60:	2301      	movs	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f383 8810 	msr	PRIMASK, r3
}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2101      	movs	r1, #1
 8004c78:	438a      	bics	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f383 8810 	msr	PRIMASK, r3
}
 8004c86:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2280      	movs	r2, #128	@ 0x80
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2278      	movs	r2, #120	@ 0x78
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e011      	b.n	8004cc0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2280      	movs	r2, #128	@ 0x80
 8004ca6:	2120      	movs	r1, #32
 8004ca8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2278      	movs	r2, #120	@ 0x78
 8004cba:	2100      	movs	r1, #0
 8004cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b010      	add	sp, #64	@ 0x40
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	01ffffff 	.word	0x01ffffff
 8004ccc:	fffffedf 	.word	0xfffffedf

08004cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	1dfb      	adds	r3, r7, #7
 8004cde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	e051      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d04e      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce8:	f7fc fac4 	bl	8001274 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e051      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b80      	cmp	r3, #128	@ 0x80
 8004d12:	d038      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b40      	cmp	r3, #64	@ 0x40
 8004d18:	d035      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2208      	movs	r2, #8
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d111      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f906 	bl	8004f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2284      	movs	r2, #132	@ 0x84
 8004d3c:	2108      	movs	r1, #8
 8004d3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2278      	movs	r2, #120	@ 0x78
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e02c      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	401a      	ands	r2, r3
 8004d58:	2380      	movs	r3, #128	@ 0x80
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d112      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2280      	movs	r2, #128	@ 0x80
 8004d66:	0112      	lsls	r2, r2, #4
 8004d68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f000 f8e9 	bl	8004f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2284      	movs	r2, #132	@ 0x84
 8004d76:	2120      	movs	r1, #32
 8004d78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2278      	movs	r2, #120	@ 0x78
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e00f      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	425a      	negs	r2, r3
 8004d96:	4153      	adcs	r3, r2
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	1dfb      	adds	r3, r7, #7
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d09e      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b004      	add	sp, #16
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b090      	sub	sp, #64	@ 0x40
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	1dbb      	adds	r3, r7, #6
 8004dbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1dba      	adds	r2, r7, #6
 8004dc8:	2158      	movs	r1, #88	@ 0x58
 8004dca:	8812      	ldrh	r2, [r2, #0]
 8004dcc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1dba      	adds	r2, r7, #6
 8004dd2:	215a      	movs	r1, #90	@ 0x5a
 8004dd4:	8812      	ldrh	r2, [r2, #0]
 8004dd6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	015b      	lsls	r3, r3, #5
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10d      	bne.n	8004e06 <UART_Start_Receive_IT+0x56>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <UART_Start_Receive_IT+0x4c>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	225c      	movs	r2, #92	@ 0x5c
 8004df6:	4950      	ldr	r1, [pc, #320]	@ (8004f38 <UART_Start_Receive_IT+0x188>)
 8004df8:	5299      	strh	r1, [r3, r2]
 8004dfa:	e02e      	b.n	8004e5a <UART_Start_Receive_IT+0xaa>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	225c      	movs	r2, #92	@ 0x5c
 8004e00:	21ff      	movs	r1, #255	@ 0xff
 8004e02:	5299      	strh	r1, [r3, r2]
 8004e04:	e029      	b.n	8004e5a <UART_Start_Receive_IT+0xaa>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <UART_Start_Receive_IT+0x7a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <UART_Start_Receive_IT+0x70>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	225c      	movs	r2, #92	@ 0x5c
 8004e1a:	21ff      	movs	r1, #255	@ 0xff
 8004e1c:	5299      	strh	r1, [r3, r2]
 8004e1e:	e01c      	b.n	8004e5a <UART_Start_Receive_IT+0xaa>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	225c      	movs	r2, #92	@ 0x5c
 8004e24:	217f      	movs	r1, #127	@ 0x7f
 8004e26:	5299      	strh	r1, [r3, r2]
 8004e28:	e017      	b.n	8004e5a <UART_Start_Receive_IT+0xaa>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	055b      	lsls	r3, r3, #21
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d10d      	bne.n	8004e52 <UART_Start_Receive_IT+0xa2>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <UART_Start_Receive_IT+0x98>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	225c      	movs	r2, #92	@ 0x5c
 8004e42:	217f      	movs	r1, #127	@ 0x7f
 8004e44:	5299      	strh	r1, [r3, r2]
 8004e46:	e008      	b.n	8004e5a <UART_Start_Receive_IT+0xaa>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	225c      	movs	r2, #92	@ 0x5c
 8004e4c:	213f      	movs	r1, #63	@ 0x3f
 8004e4e:	5299      	strh	r1, [r3, r2]
 8004e50:	e003      	b.n	8004e5a <UART_Start_Receive_IT+0xaa>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	225c      	movs	r2, #92	@ 0x5c
 8004e56:	2100      	movs	r1, #0
 8004e58:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2284      	movs	r2, #132	@ 0x84
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2280      	movs	r2, #128	@ 0x80
 8004e66:	2122      	movs	r1, #34	@ 0x22
 8004e68:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e74:	2301      	movs	r3, #1
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7a:	f383 8810 	msr	PRIMASK, r3
}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e92:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	015b      	lsls	r3, r3, #5
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d107      	bne.n	8004eb8 <UART_Start_Receive_IT+0x108>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <UART_Start_Receive_IT+0x18c>)
 8004eb4:	669a      	str	r2, [r3, #104]	@ 0x68
 8004eb6:	e002      	b.n	8004ebe <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a21      	ldr	r2, [pc, #132]	@ (8004f40 <UART_Start_Receive_IT+0x190>)
 8004ebc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d019      	beq.n	8004efa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2190      	movs	r1, #144	@ 0x90
 8004ee8:	0049      	lsls	r1, r1, #1
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	f383 8810 	msr	PRIMASK, r3
}
 8004ef8:	e018      	b.n	8004f2c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004efa:	f3ef 8310 	mrs	r3, PRIMASK
 8004efe:	613b      	str	r3, [r7, #16]
  return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2120      	movs	r1, #32
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f383 8810 	msr	PRIMASK, r3
}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b010      	add	sp, #64	@ 0x40
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	000001ff 	.word	0x000001ff
 8004f3c:	0800524d 	.word	0x0800524d
 8004f40:	08005089 	.word	0x08005089

08004f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08e      	sub	sp, #56	@ 0x38
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f50:	617b      	str	r3, [r7, #20]
  return(result);
 8004f52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f56:	2301      	movs	r3, #1
 8004f58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f383 8810 	msr	PRIMASK, r3
}
 8004f60:	46c0      	nop			@ (mov r8, r8)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4926      	ldr	r1, [pc, #152]	@ (8005008 <UART_EndRxTransfer+0xc4>)
 8004f6e:	400a      	ands	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f82:	623b      	str	r3, [r7, #32]
  return(result);
 8004f84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f88:	2301      	movs	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	438a      	bics	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	f383 8810 	msr	PRIMASK, r3
}
 8004fae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d118      	bne.n	8004fea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f383 8810 	msr	PRIMASK, r3
}
 8004fcc:	46c0      	nop			@ (mov r8, r8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2110      	movs	r1, #16
 8004fda:	438a      	bics	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f383 8810 	msr	PRIMASK, r3
}
 8004fe8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2280      	movs	r2, #128	@ 0x80
 8004fee:	2120      	movs	r1, #32
 8004ff0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b00e      	add	sp, #56	@ 0x38
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	fffffedf 	.word	0xfffffedf

0800500c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	225a      	movs	r2, #90	@ 0x5a
 800501e:	2100      	movs	r1, #0
 8005020:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff fa45 	bl	80044b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503a:	f3ef 8310 	mrs	r3, PRIMASK
 800503e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005040:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	2301      	movs	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2140      	movs	r1, #64	@ 0x40
 800505c:	438a      	bics	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0018      	movs	r0, r3
 800507c:	f7ff fa12 	bl	80044a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	b006      	add	sp, #24
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b094      	sub	sp, #80	@ 0x50
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005090:	204e      	movs	r0, #78	@ 0x4e
 8005092:	183b      	adds	r3, r7, r0
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	215c      	movs	r1, #92	@ 0x5c
 8005098:	5a52      	ldrh	r2, [r2, r1]
 800509a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2280      	movs	r2, #128	@ 0x80
 80050a0:	589b      	ldr	r3, [r3, r2]
 80050a2:	2b22      	cmp	r3, #34	@ 0x22
 80050a4:	d000      	beq.n	80050a8 <UART_RxISR_8BIT+0x20>
 80050a6:	e0bf      	b.n	8005228 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ae:	214c      	movs	r1, #76	@ 0x4c
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b2d9      	uxtb	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c4:	400a      	ands	r2, r1
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	225a      	movs	r2, #90	@ 0x5a
 80050d8:	5a9b      	ldrh	r3, [r3, r2]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b299      	uxth	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	225a      	movs	r2, #90	@ 0x5a
 80050e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	225a      	movs	r2, #90	@ 0x5a
 80050ea:	5a9b      	ldrh	r3, [r3, r2]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d000      	beq.n	80050f4 <UART_RxISR_8BIT+0x6c>
 80050f2:	e0a1      	b.n	8005238 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f4:	f3ef 8310 	mrs	r3, PRIMASK
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fe:	2301      	movs	r3, #1
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	494a      	ldr	r1, [pc, #296]	@ (8005240 <UART_RxISR_8BIT+0x1b8>)
 8005116:	400a      	ands	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	f383 8810 	msr	PRIMASK, r3
}
 8005124:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005130:	2301      	movs	r3, #1
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2280      	movs	r2, #128	@ 0x80
 800515c:	2120      	movs	r1, #32
 800515e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <UART_RxISR_8BIT+0x1bc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	2380      	movs	r3, #128	@ 0x80
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	4013      	ands	r3, r2
 8005182:	d018      	beq.n	80051b6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	61bb      	str	r3, [r7, #24]
  return(result);
 800518a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800518c:	643b      	str	r3, [r7, #64]	@ 0x40
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4928      	ldr	r1, [pc, #160]	@ (8005248 <UART_RxISR_8BIT+0x1c0>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d12f      	bne.n	800521e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ce:	2301      	movs	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2110      	movs	r1, #16
 80051e6:	438a      	bics	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2210      	movs	r2, #16
 80051fe:	4013      	ands	r3, r2
 8005200:	2b10      	cmp	r3, #16
 8005202:	d103      	bne.n	800520c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2210      	movs	r2, #16
 800520a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2258      	movs	r2, #88	@ 0x58
 8005210:	5a9a      	ldrh	r2, [r3, r2]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff f954 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800521c:	e00c      	b.n	8005238 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0018      	movs	r0, r3
 8005222:	f7fb facf 	bl	80007c4 <HAL_UART_RxCpltCallback>
}
 8005226:	e007      	b.n	8005238 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2108      	movs	r1, #8
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b014      	add	sp, #80	@ 0x50
 800523e:	bd80      	pop	{r7, pc}
 8005240:	fffffedf 	.word	0xfffffedf
 8005244:	40004800 	.word	0x40004800
 8005248:	fbffffff 	.word	0xfbffffff

0800524c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b094      	sub	sp, #80	@ 0x50
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005254:	204e      	movs	r0, #78	@ 0x4e
 8005256:	183b      	adds	r3, r7, r0
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	215c      	movs	r1, #92	@ 0x5c
 800525c:	5a52      	ldrh	r2, [r2, r1]
 800525e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2280      	movs	r2, #128	@ 0x80
 8005264:	589b      	ldr	r3, [r3, r2]
 8005266:	2b22      	cmp	r3, #34	@ 0x22
 8005268:	d000      	beq.n	800526c <UART_RxISR_16BIT+0x20>
 800526a:	e0bf      	b.n	80053ec <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005272:	214c      	movs	r1, #76	@ 0x4c
 8005274:	187b      	adds	r3, r7, r1
 8005276:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800527e:	187b      	adds	r3, r7, r1
 8005280:	183a      	adds	r2, r7, r0
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	8812      	ldrh	r2, [r2, #0]
 8005286:	4013      	ands	r3, r2
 8005288:	b29a      	uxth	r2, r3
 800528a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800528c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	1c9a      	adds	r2, r3, #2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	225a      	movs	r2, #90	@ 0x5a
 800529c:	5a9b      	ldrh	r3, [r3, r2]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b299      	uxth	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	225a      	movs	r2, #90	@ 0x5a
 80052a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	225a      	movs	r2, #90	@ 0x5a
 80052ae:	5a9b      	ldrh	r3, [r3, r2]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d000      	beq.n	80052b8 <UART_RxISR_16BIT+0x6c>
 80052b6:	e0a1      	b.n	80053fc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	623b      	str	r3, [r7, #32]
  return(result);
 80052be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c2:	2301      	movs	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			@ (mov r8, r8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	494a      	ldr	r1, [pc, #296]	@ (8005404 <UART_RxISR_16BIT+0x1b8>)
 80052da:	400a      	ands	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f4:	2301      	movs	r3, #1
 80052f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2280      	movs	r2, #128	@ 0x80
 8005320:	2120      	movs	r1, #32
 8005322:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a34      	ldr	r2, [pc, #208]	@ (8005408 <UART_RxISR_16BIT+0x1bc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01f      	beq.n	800537a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	4013      	ands	r3, r2
 8005346:	d018      	beq.n	800537a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005348:	f3ef 8310 	mrs	r3, PRIMASK
 800534c:	617b      	str	r3, [r7, #20]
  return(result);
 800534e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005352:	2301      	movs	r3, #1
 8005354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			@ (mov r8, r8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4928      	ldr	r1, [pc, #160]	@ (800540c <UART_RxISR_16BIT+0x1c0>)
 800536a:	400a      	ands	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537e:	2b01      	cmp	r3, #1
 8005380:	d12f      	bne.n	80053e2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	60bb      	str	r3, [r7, #8]
  return(result);
 800538e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005392:	2301      	movs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2110      	movs	r1, #16
 80053aa:	438a      	bics	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	2210      	movs	r2, #16
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d103      	bne.n	80053d0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2258      	movs	r2, #88	@ 0x58
 80053d4:	5a9a      	ldrh	r2, [r3, r2]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	0011      	movs	r1, r2
 80053da:	0018      	movs	r0, r3
 80053dc:	f7ff f872 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e0:	e00c      	b.n	80053fc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f7fb f9ed 	bl	80007c4 <HAL_UART_RxCpltCallback>
}
 80053ea:	e007      	b.n	80053fc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2108      	movs	r1, #8
 80053f8:	430a      	orrs	r2, r1
 80053fa:	619a      	str	r2, [r3, #24]
}
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b014      	add	sp, #80	@ 0x50
 8005402:	bd80      	pop	{r7, pc}
 8005404:	fffffedf 	.word	0xfffffedf
 8005408:	40004800 	.word	0x40004800
 800540c:	fbffffff 	.word	0xfbffffff

08005410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005418:	46c0      	nop			@ (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}

08005420 <memset>:
 8005420:	0003      	movs	r3, r0
 8005422:	1882      	adds	r2, r0, r2
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	7019      	strb	r1, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	2600      	movs	r6, #0
 8005434:	4c0c      	ldr	r4, [pc, #48]	@ (8005468 <__libc_init_array+0x38>)
 8005436:	4d0d      	ldr	r5, [pc, #52]	@ (800546c <__libc_init_array+0x3c>)
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	2600      	movs	r6, #0
 8005442:	f000 f819 	bl	8005478 <_init>
 8005446:	4c0a      	ldr	r4, [pc, #40]	@ (8005470 <__libc_init_array+0x40>)
 8005448:	4d0a      	ldr	r5, [pc, #40]	@ (8005474 <__libc_init_array+0x44>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	00b3      	lsls	r3, r6, #2
 8005456:	58eb      	ldr	r3, [r5, r3]
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	00b3      	lsls	r3, r6, #2
 8005460:	58eb      	ldr	r3, [r5, r3]
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08005504 	.word	0x08005504
 800546c:	08005504 	.word	0x08005504
 8005470:	08005508 	.word	0x08005508
 8005474:	08005504 	.word	0x08005504

08005478 <_init>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr

08005484 <_fini>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr
