
Sunroof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005ff0  08005ff0  00006ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800605c  0800605c  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  0800605c  0800605c  0000705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006064  08006064  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006064  08006064  00007064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006068  08006068  00007068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800606c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000010  0800607c  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800607c  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001159f  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e48  00000000  00000000  000195d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b12  00000000  00000000  0001d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001639a  00000000  00000000  0001dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e58  00000000  00000000  00034134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a18d  00000000  00000000  00047f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003198  00000000  00000000  000d215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d52f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fd8 	.word	0x08005fd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005fd8 	.word	0x08005fd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2308      	movs	r3, #8
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f005 fd8f 	bl	8005f7e <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000460:	4b44      	ldr	r3, [pc, #272]	@ (8000574 <MX_ADC_Init+0x128>)
 8000462:	4a45      	ldr	r2, [pc, #276]	@ (8000578 <MX_ADC_Init+0x12c>)
 8000464:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000466:	4b43      	ldr	r3, [pc, #268]	@ (8000574 <MX_ADC_Init+0x128>)
 8000468:	2200      	movs	r2, #0
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800046c:	4b41      	ldr	r3, [pc, #260]	@ (8000574 <MX_ADC_Init+0x128>)
 800046e:	22c0      	movs	r2, #192	@ 0xc0
 8000470:	0612      	lsls	r2, r2, #24
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b3f      	ldr	r3, [pc, #252]	@ (8000574 <MX_ADC_Init+0x128>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b3e      	ldr	r3, [pc, #248]	@ (8000574 <MX_ADC_Init+0x128>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b3c      	ldr	r3, [pc, #240]	@ (8000574 <MX_ADC_Init+0x128>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b3b      	ldr	r3, [pc, #236]	@ (8000574 <MX_ADC_Init+0x128>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b39      	ldr	r3, [pc, #228]	@ (8000574 <MX_ADC_Init+0x128>)
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000494:	4b37      	ldr	r3, [pc, #220]	@ (8000574 <MX_ADC_Init+0x128>)
 8000496:	2221      	movs	r2, #33	@ 0x21
 8000498:	2100      	movs	r1, #0
 800049a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b35      	ldr	r3, [pc, #212]	@ (8000574 <MX_ADC_Init+0x128>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	4b34      	ldr	r3, [pc, #208]	@ (8000574 <MX_ADC_Init+0x128>)
 80004a4:	22c2      	movs	r2, #194	@ 0xc2
 80004a6:	32ff      	adds	r2, #255	@ 0xff
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b32      	ldr	r3, [pc, #200]	@ (8000574 <MX_ADC_Init+0x128>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b30      	ldr	r3, [pc, #192]	@ (8000574 <MX_ADC_Init+0x128>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000574 <MX_ADC_Init+0x128>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b2d      	ldr	r3, [pc, #180]	@ (8000574 <MX_ADC_Init+0x128>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <MX_ADC_Init+0x128>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000574 <MX_ADC_Init+0x128>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <MX_ADC_Init+0x128>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 faba 	bl	8001a4c <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 fb58 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	003a      	movs	r2, r7
 80004f0:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <MX_ADC_Init+0x128>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fd19 	bl	8001f2c <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004fe:	f000 fb47 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	003b      	movs	r3, r7
 8000504:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <MX_ADC_Init+0x130>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	003a      	movs	r2, r7
 800050a:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <MX_ADC_Init+0x128>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fd0c 	bl	8001f2c <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000518:	f000 fb3a 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800051c:	003b      	movs	r3, r7
 800051e:	4a18      	ldr	r2, [pc, #96]	@ (8000580 <MX_ADC_Init+0x134>)
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	003a      	movs	r2, r7
 8000524:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_ADC_Init+0x128>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fcff 	bl	8001f2c <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000532:	f000 fb2d 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000536:	003b      	movs	r3, r7
 8000538:	4a12      	ldr	r2, [pc, #72]	@ (8000584 <MX_ADC_Init+0x138>)
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053c:	003a      	movs	r2, r7
 800053e:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <MX_ADC_Init+0x128>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fcf2 	bl	8001f2c <HAL_ADC_ConfigChannel>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 800054c:	f000 fb20 	bl	8000b90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000550:	003b      	movs	r3, r7
 8000552:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <MX_ADC_Init+0x13c>)
 8000554:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000556:	003a      	movs	r2, r7
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_ADC_Init+0x128>)
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fce5 	bl	8001f2c <HAL_ADC_ConfigChannel>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000566:	f000 fb13 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40012400 	.word	0x40012400
 800057c:	04000002 	.word	0x04000002
 8000580:	20000100 	.word	0x20000100
 8000584:	24000200 	.word	0x24000200
 8000588:	3c008000 	.word	0x3c008000

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	@ 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	2414      	movs	r4, #20
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	2314      	movs	r3, #20
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f005 fced 	bl	8005f7e <memset>
  if(adcHandle->Instance==ADC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a30      	ldr	r2, [pc, #192]	@ (800066c <HAL_ADC_MspInit+0xe0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d159      	bne.n	8000662 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	0089      	lsls	r1, r1, #2
 80005b8:	430a      	orrs	r2, r1
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	4013      	ands	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005da:	2104      	movs	r1, #4
 80005dc:	430a      	orrs	r2, r1
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005e4:	2204      	movs	r2, #4
 80005e6:	4013      	ands	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005f2:	2102      	movs	r1, #2
 80005f4:	430a      	orrs	r2, r1
 80005f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <HAL_ADC_MspInit+0xe4>)
 80005fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fc:	2202      	movs	r2, #2
 80005fe:	4013      	ands	r3, r2
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = OUT_ILLUMI_Pin|IN_ILLUMI_Pin;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2203      	movs	r2, #3
 8000608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2203      	movs	r2, #3
 800060e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	193a      	adds	r2, r7, r4
 8000618:	23a0      	movs	r3, #160	@ 0xa0
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f002 f96a 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RAIN_Pin;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2220      	movs	r2, #32
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2203      	movs	r2, #3
 800062e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 8000636:	193b      	adds	r3, r7, r4
 8000638:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <HAL_ADC_MspInit+0xe8>)
 800063a:	0019      	movs	r1, r3
 800063c:	0010      	movs	r0, r2
 800063e:	f002 f95b 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TILTING_ENC_A_Pin|TILTING_ENC_B_Pin;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2203      	movs	r2, #3
 8000648:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	187b      	adds	r3, r7, r1
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <HAL_ADC_MspInit+0xec>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f002 f94b 	bl	80028f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b00b      	add	sp, #44	@ 0x2c
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	40012400 	.word	0x40012400
 8000670:	40021000 	.word	0x40021000
 8000674:	50000800 	.word	0x50000800
 8000678:	50000400 	.word	0x50000400

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_DMA_Init+0x48>)
 8000684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_DMA_Init+0x48>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	631a      	str	r2, [r3, #48]	@ 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_DMA_Init+0x48>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	200a      	movs	r0, #10
 80006a0:	f001 feb6 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f001 fec8 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	200b      	movs	r0, #11
 80006b0:	f001 feae 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006b4:	200b      	movs	r0, #11
 80006b6:	f001 fec0 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	40021000 	.word	0x40021000

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08b      	sub	sp, #44	@ 0x2c
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	2414      	movs	r4, #20
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2314      	movs	r3, #20
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f005 fc50 	bl	8005f7e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b5a      	ldr	r3, [pc, #360]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006e2:	4b59      	ldr	r3, [pc, #356]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006e4:	2104      	movs	r1, #4
 80006e6:	430a      	orrs	r2, r1
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ea:	4b57      	ldr	r3, [pc, #348]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ee:	2204      	movs	r2, #4
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b54      	ldr	r3, [pc, #336]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fa:	4b53      	ldr	r3, [pc, #332]	@ (8000848 <MX_GPIO_Init+0x180>)
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000702:	4b51      	ldr	r3, [pc, #324]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b4e      	ldr	r3, [pc, #312]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000712:	4b4d      	ldr	r3, [pc, #308]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	@ 0x2c
 800071a:	4b4b      	ldr	r3, [pc, #300]	@ (8000848 <MX_GPIO_Init+0x180>)
 800071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b48      	ldr	r3, [pc, #288]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	4b47      	ldr	r3, [pc, #284]	@ (8000848 <MX_GPIO_Init+0x180>)
 800072c:	2102      	movs	r1, #2
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000732:	4b45      	ldr	r3, [pc, #276]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	2202      	movs	r2, #2
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b42      	ldr	r3, [pc, #264]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000742:	4b41      	ldr	r3, [pc, #260]	@ (8000848 <MX_GPIO_Init+0x180>)
 8000744:	2108      	movs	r1, #8
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074a:	4b3f      	ldr	r3, [pc, #252]	@ (8000848 <MX_GPIO_Init+0x180>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	2208      	movs	r2, #8
 8000750:	4013      	ands	r3, r2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin, GPIO_PIN_RESET);
 8000756:	2398      	movs	r3, #152	@ 0x98
 8000758:	0099      	lsls	r1, r3, #2
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2200      	movs	r2, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fa64 	bl	8002c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, GPIO_PIN_RESET);
 8000766:	4b39      	ldr	r3, [pc, #228]	@ (800084c <MX_GPIO_Init+0x184>)
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fa5e 	bl	8002c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROOF_BRAKE_Pin|OPACITY_Pin, GPIO_PIN_RESET);
 8000772:	23c0      	movs	r3, #192	@ 0xc0
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4836      	ldr	r0, [pc, #216]	@ (8000850 <MX_GPIO_Init+0x188>)
 8000778:	2200      	movs	r2, #0
 800077a:	0019      	movs	r1, r3
 800077c:	f002 fa57 	bl	8002c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0192      	lsls	r2, r2, #6
 8000786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2284      	movs	r2, #132	@ 0x84
 800078c:	0392      	lsls	r2, r2, #14
 800078e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	193b      	adds	r3, r7, r4
 8000798:	4a2d      	ldr	r2, [pc, #180]	@ (8000850 <MX_GPIO_Init+0x188>)
 800079a:	0019      	movs	r1, r3
 800079c:	0010      	movs	r0, r2
 800079e:	f002 f8ab 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_ENC_A_Pin ROOF_ENC_B_Pin */
  GPIO_InitStruct.Pin = ROOF_ENC_A_Pin|ROOF_ENC_B_Pin;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2203      	movs	r2, #3
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	22c4      	movs	r2, #196	@ 0xc4
 80007ae:	0392      	lsls	r2, r2, #14
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	000c      	movs	r4, r1
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	4a24      	ldr	r2, [pc, #144]	@ (8000850 <MX_GPIO_Init+0x188>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f002 f899 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILTING_DIR_Pin ROOF_DIR_Pin TILTING_BRAKE_Pin */
  GPIO_InitStruct.Pin = TILTING_DIR_Pin|ROOF_DIR_Pin|TILTING_BRAKE_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2298      	movs	r2, #152	@ 0x98
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	000c      	movs	r4, r1
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	23a0      	movs	r3, #160	@ 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 f883 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IS_RAIN_Pin */
  GPIO_InitStruct.Pin = IS_RAIN_Pin;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2204      	movs	r2, #4
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IS_RAIN_GPIO_Port, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <MX_GPIO_Init+0x184>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f002 f871 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROOF_BRAKE_Pin OPACITY_Pin */
  GPIO_InitStruct.Pin = ROOF_BRAKE_Pin|OPACITY_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22c0      	movs	r2, #192	@ 0xc0
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	187b      	adds	r3, r7, r1
 8000834:	4a06      	ldr	r2, [pc, #24]	@ (8000850 <MX_GPIO_Init+0x188>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f002 f85d 	bl	80028f8 <HAL_GPIO_Init>

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b00b      	add	sp, #44	@ 0x2c
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	40021000 	.word	0x40021000
 800084c:	50000400 	.word	0x50000400
 8000850:	50000800 	.word	0x50000800

08000854 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1 Second Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d102      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		sensor_read = 1;
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
	}
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40001400 	.word	0x40001400
 8000878:	200000a8 	.word	0x200000a8

0800087c <HAL_UART_RxCpltCallback>:

// UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART4) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <HAL_UART_RxCpltCallback+0x78>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12e      	bne.n	80008ec <HAL_UART_RxCpltCallback+0x70>
    	rx_payload = 0;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
    	rx_payload |= ((uint16_t)rx_buf[0] << 8);
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <HAL_UART_RxCpltCallback+0x80>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008aa:	801a      	strh	r2, [r3, #0]
    	rx_payload |= ((uint16_t)rx_buf[1]);
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_UART_RxCpltCallback+0x80>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	001a      	movs	r2, r3
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008bc:	801a      	strh	r2, [r3, #0]

		roof_state = ((rx_payload >> 8) & 0x03);
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2203      	movs	r2, #3
 80008ca:	4013      	ands	r3, r2
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_UART_RxCpltCallback+0x84>)
 80008d0:	701a      	strb	r2, [r3, #0]
		film_opacity = ((rx_payload) & 0x01);
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_UART_RxCpltCallback+0x7c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_UART_RxCpltCallback+0x88>)
 80008de:	801a      	strh	r2, [r3, #0]

        // 다시 수신 시작 (반복 수신)
        HAL_UART_Receive_DMA(&huart4, rx_buf, 2);
 80008e0:	4906      	ldr	r1, [pc, #24]	@ (80008fc <HAL_UART_RxCpltCallback+0x80>)
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_UART_RxCpltCallback+0x8c>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f004 f8ba 	bl	8004a60 <HAL_UART_Receive_DMA>
    }
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40004c00 	.word	0x40004c00
 80008f8:	200000a6 	.word	0x200000a6
 80008fc:	200000a4 	.word	0x200000a4
 8000900:	20000000 	.word	0x20000000
 8000904:	20000098 	.word	0x20000098
 8000908:	200001f4 	.word	0x200001f4

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f001 f82c 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f89a 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f7ff fed6 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800091c:	f7ff feae 	bl	800067c <MX_DMA_Init>
  MX_ADC_Init();
 8000920:	f7ff fd94 	bl	800044c <MX_ADC_Init>
  MX_TIM7_Init();
 8000924:	f000 fd56 	bl	80013d4 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000928:	f000 fc58 	bl	80011dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800092c:	f000 fcd4 	bl	80012d8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8000930:	f000 fe58 	bl	80015e4 <MX_USART4_UART_Init>
  MX_USART2_UART_Init();
 8000934:	f000 fe26 	bl	8001584 <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8000938:	f000 fe84 	bl	8001644 <MX_USART5_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800093c:	f000 f8ea 	bl	8000b14 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000940:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <main+0x100>)
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f962 	bl	8003c0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000948:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <main+0x104>)
 800094a:	2104      	movs	r1, #4
 800094c:	0018      	movs	r0, r3
 800094e:	f003 f9f7 	bl	8003d40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000952:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <main+0x108>)
 8000954:	2104      	movs	r1, #4
 8000956:	0018      	movs	r0, r3
 8000958:	f003 f9f2 	bl	8003d40 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart4, rx_buf, 2);
 800095c:	492e      	ldr	r1, [pc, #184]	@ (8000a18 <main+0x10c>)
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <main+0x110>)
 8000960:	2202      	movs	r2, #2
 8000962:	0018      	movs	r0, r3
 8000964:	f004 f87c 	bl	8004a60 <HAL_UART_Receive_DMA>


  // Initialize
  roof_encoder = 0;
 8000968:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <main+0x114>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  roof_state = STOP;
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <main+0x118>)
 8000970:	2203      	movs	r2, #3
 8000972:	701a      	strb	r2, [r3, #0]
  Sunroof_Set(STOP);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f9c7 	bl	8000d08 <Sunroof_Set>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 센서 값 수신 및 UART 송신
	  if(sensor_read)
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <main+0x11c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d02b      	beq.n	80009da <main+0xce>
	  {
		  read_illum();
 8000982:	f000 fb7d 	bl	8001080 <read_illum>
		  read_rain();
 8000986:	f000 fb95 	bl	80010b4 <read_rain>

		  sensor_read = 0;
 800098a:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <main+0x11c>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

		  //UART Send
		  tx_payload = 0;
 8000990:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <main+0x120>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)in_illum & 0x0FFF) << 20;  // In Illum : 12 -> 32 - 12 = 20
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <main+0x124>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	051a      	lsls	r2, r3, #20
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <main+0x120>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	431a      	orrs	r2, r3
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <main+0x120>)
 80009a6:	601a      	str	r2, [r3, #0]
		  tx_payload |= ((uint32_t)out_illum & 0x0FFF) << 8;   // Out Illum : 12 -> 20 - 12 = 8
 80009a8:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <main+0x128>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <main+0x12c>)
 80009b2:	401a      	ands	r2, r3
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <main+0x120>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <main+0x120>)
 80009bc:	601a      	str	r2, [r3, #0]
		  tx_payload |= (rain_state & 0x01) << 7;               // rain_flag : 1 0 -> 8 - 1 = 7
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <main+0x130>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	01db      	lsls	r3, r3, #7
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	4013      	ands	r3, r2
 80009ca:	001a      	movs	r2, r3
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <main+0x120>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <main+0x120>)
 80009d4:	601a      	str	r2, [r3, #0]

		  Send_Sensor_Data();
 80009d6:	f000 f8b3 	bl	8000b40 <Send_Sensor_Data>
	  }

	  Sunroof_Set(roof_state);
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <main+0x118>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 f991 	bl	8000d08 <Sunroof_Set>

	  HAL_GPIO_WritePin(IS_RAIN_GPIO_Port, IS_RAIN_Pin, rain_state);
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <main+0x130>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4814      	ldr	r0, [pc, #80]	@ (8000a40 <main+0x134>)
 80009ee:	001a      	movs	r2, r3
 80009f0:	2104      	movs	r1, #4
 80009f2:	f002 f91c 	bl	8002c2e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OPACITY_GPIO_Port, OPACITY_Pin, film_opacity);
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <main+0x138>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <main+0x13c>)
 8000a04:	0019      	movs	r1, r3
 8000a06:	f002 f912 	bl	8002c2e <HAL_GPIO_WritePin>
	  if(sensor_read)
 8000a0a:	e7b6      	b.n	800097a <main+0x6e>
 8000a0c:	2000012c 	.word	0x2000012c
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	200000ec 	.word	0x200000ec
 8000a18:	200000a4 	.word	0x200000a4
 8000a1c:	200001f4 	.word	0x200001f4
 8000a20:	20000088 	.word	0x20000088
 8000a24:	20000000 	.word	0x20000000
 8000a28:	200000a8 	.word	0x200000a8
 8000a2c:	200000a0 	.word	0x200000a0
 8000a30:	20000090 	.word	0x20000090
 8000a34:	20000092 	.word	0x20000092
 8000a38:	000fff00 	.word	0x000fff00
 8000a3c:	20000096 	.word	0x20000096
 8000a40:	50000400 	.word	0x50000400
 8000a44:	20000098 	.word	0x20000098
 8000a48:	50000800 	.word	0x50000800

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b09f      	sub	sp, #124	@ 0x7c
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	2440      	movs	r4, #64	@ 0x40
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	0018      	movs	r0, r3
 8000a58:	2338      	movs	r3, #56	@ 0x38
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f005 fa8e 	bl	8005f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a62:	232c      	movs	r3, #44	@ 0x2c
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f005 fa86 	bl	8005f7e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2328      	movs	r3, #40	@ 0x28
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f005 fa7f 	bl	8005f7e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <SystemClock_Config+0xc0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <SystemClock_Config+0xc4>)
 8000a86:	401a      	ands	r2, r3
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <SystemClock_Config+0xc0>)
 8000a8a:	2180      	movs	r1, #128	@ 0x80
 8000a8c:	0109      	lsls	r1, r1, #4
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	22a0      	movs	r2, #160	@ 0xa0
 8000a9c:	02d2      	lsls	r2, r2, #11
 8000a9e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 f8f9 	bl	8002ca0 <HAL_RCC_OscConfig>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 f86d 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	212c      	movs	r1, #44	@ 0x2c
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	220f      	movs	r2, #15
 8000abc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fcb4 	bl	8003448 <HAL_RCC_ClockConfig>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ae4:	f000 f854 	bl	8000b90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2202      	movs	r2, #2
 8000aec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 feaa 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b00:	f000 f846 	bl	8000b90 <Error_Handler>
  }
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b01f      	add	sp, #124	@ 0x7c
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	ffffe7ff 	.word	0xffffe7ff

08000b14 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2005      	movs	r0, #5
 8000b1e:	f001 fc77 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b22:	2005      	movs	r0, #5
 8000b24:	f001 fc89 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2012      	movs	r0, #18
 8000b2e:	f001 fc6f 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b32:	2012      	movs	r0, #18
 8000b34:	f001 fc81 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <Send_Sensor_Data>:

/* USER CODE BEGIN 4 */
void Send_Sensor_Data(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	tx_buf[0] = (tx_payload >> 24) & 0xFF;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	0e1b      	lsrs	r3, r3, #24
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b4e:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (tx_payload >> 16) & 0xFF;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	0c1b      	lsrs	r3, r3, #16
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b5a:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (tx_payload >> 8) & 0xFF;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b66:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = tx_payload & 0xFF;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <Send_Sensor_Data+0x44>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b70:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit(&huart4, tx_buf, 4, 100);
 8000b72:	4905      	ldr	r1, [pc, #20]	@ (8000b88 <Send_Sensor_Data+0x48>)
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <Send_Sensor_Data+0x4c>)
 8000b76:	2364      	movs	r3, #100	@ 0x64
 8000b78:	2204      	movs	r2, #4
 8000b7a:	f003 fed1 	bl	8004920 <HAL_UART_Transmit>
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000a0 	.word	0x200000a0
 8000b88:	2000009c 	.word	0x2000009c
 8000b8c:	200001f4 	.word	0x200001f4

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_GPIO_EXTI_Callback>:
#include "roof.h"

#define TWO_MOTOR 1
#define ONE_MOTOR 0

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dbb      	adds	r3, r7, #6
 8000ba6:	801a      	strh	r2, [r3, #0]
	uint8_t ROOF_A_state = 0;
 8000ba8:	210f      	movs	r1, #15
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	uint8_t ROOF_B_state = 0;
 8000bb0:	260e      	movs	r6, #14
 8000bb2:	19bb      	adds	r3, r7, r6
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_A_state = 0;
 8000bb8:	230d      	movs	r3, #13
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	uint8_t TILTING_B_state = 0;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

	//Roof Motor
	if(GPIO_Pin == ROOF_ENC_A_Pin) {
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d11f      	bne.n	8000c10 <HAL_GPIO_EXTI_Callback+0x74>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000bd0:	000d      	movs	r5, r1
 8000bd2:	187c      	adds	r4, r7, r1
 8000bd4:	4b48      	ldr	r3, [pc, #288]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 f80b 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000bde:	0003      	movs	r3, r0
 8000be0:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000be2:	19bc      	adds	r4, r7, r6
 8000be4:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000be6:	2102      	movs	r1, #2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f002 f803 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? 1 : -1);
 8000bf2:	197a      	adds	r2, r7, r5
 8000bf4:	19bb      	adds	r3, r7, r6
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d101      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x66>
 8000bfe:	2201      	movs	r2, #1
 8000c00:	e001      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x6a>
 8000c02:	2301      	movs	r3, #1
 8000c04:	425a      	negs	r2, r3
 8000c06:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	18d2      	adds	r2, r2, r3
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c0e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == ROOF_ENC_B_Pin) {
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d120      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0xbe>
		ROOF_A_state = HAL_GPIO_ReadPin(ROOF_ENC_A_GPIO_Port, ROOF_ENC_A_Pin);
 8000c18:	250f      	movs	r5, #15
 8000c1a:	197c      	adds	r4, r7, r5
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 ffe7 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000c26:	0003      	movs	r3, r0
 8000c28:	7023      	strb	r3, [r4, #0]
		ROOF_B_state = HAL_GPIO_ReadPin(ROOF_ENC_B_GPIO_Port, ROOF_ENC_B_Pin);
 8000c2a:	260e      	movs	r6, #14
 8000c2c:	19bc      	adds	r4, r7, r6
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c30:	2102      	movs	r1, #2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 ffde 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	7023      	strb	r3, [r4, #0]
		roof_encoder += ((ROOF_A_state == ROOF_B_state) ? -1 : 1);
 8000c3c:	197a      	adds	r2, r7, r5
 8000c3e:	19bb      	adds	r3, r7, r6
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d102      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0xb2>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425a      	negs	r2, r3
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_EXTI_Callback+0xb4>
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	18d2      	adds	r2, r2, r3
 8000c56:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x160>)
 8000c58:	601a      	str	r2, [r3, #0]
	}

	//Tilting Motor
	if(GPIO_Pin == TILTING_ENC_A_Pin) {
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d120      	bne.n	8000ca4 <HAL_GPIO_EXTI_Callback+0x108>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000c62:	250d      	movs	r5, #13
 8000c64:	197c      	adds	r4, r7, r5
 8000c66:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 ffc2 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000c70:	0003      	movs	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000c74:	260c      	movs	r6, #12
 8000c76:	19bc      	adds	r4, r7, r6
 8000c78:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 ffb9 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000c82:	0003      	movs	r3, r0
 8000c84:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? 1 : -1);
 8000c86:	197a      	adds	r2, r7, r5
 8000c88:	19bb      	adds	r3, r7, r6
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0xfa>
 8000c92:	2201      	movs	r2, #1
 8000c94:	e001      	b.n	8000c9a <HAL_GPIO_EXTI_Callback+0xfe>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425a      	negs	r2, r3
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	18d2      	adds	r2, r2, r3
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ca2:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == TILTING_ENC_B_Pin) {
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d120      	bne.n	8000cee <HAL_GPIO_EXTI_Callback+0x152>
		TILTING_A_state = HAL_GPIO_ReadPin(TILTING_ENC_A_GPIO_Port, TILTING_ENC_A_Pin);
 8000cac:	250d      	movs	r5, #13
 8000cae:	197c      	adds	r4, r7, r5
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 ff9d 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	7023      	strb	r3, [r4, #0]
		TILTING_B_state = HAL_GPIO_ReadPin(TILTING_ENC_B_GPIO_Port, TILTING_ENC_B_Pin);
 8000cbe:	260c      	movs	r6, #12
 8000cc0:	19bc      	adds	r4, r7, r6
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 ff94 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	7023      	strb	r3, [r4, #0]
		tilting_encoder += ((TILTING_A_state == TILTING_B_state) ? -1 : 1);
 8000cd0:	197a      	adds	r2, r7, r5
 8000cd2:	19bb      	adds	r3, r7, r6
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d102      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0x146>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425a      	negs	r2, r3
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x148>
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	18d2      	adds	r2, r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x168>)
 8000cec:	601a      	str	r2, [r3, #0]
	}
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b005      	add	sp, #20
 8000cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	50000800 	.word	0x50000800
 8000cfc:	20000088 	.word	0x20000088
 8000d00:	50000400 	.word	0x50000400
 8000d04:	2000008c 	.word	0x2000008c

08000d08 <Sunroof_Set>:

#if TWO_MOTOR
void Sunroof_Set(uint8_t mode) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
	switch(mode) {
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d007      	beq.n	8000d2c <Sunroof_Set+0x24>
 8000d1c:	dd00      	ble.n	8000d20 <Sunroof_Set+0x18>
 8000d1e:	e118      	b.n	8000f52 <Sunroof_Set+0x24a>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d100      	bne.n	8000d26 <Sunroof_Set+0x1e>
 8000d24:	e0ba      	b.n	8000e9c <Sunroof_Set+0x194>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d05c      	beq.n	8000de4 <Sunroof_Set+0xdc>
 8000d2a:	e112      	b.n	8000f52 <Sunroof_Set+0x24a>
	case OPEN:
		if(tilting_encoder >= 0)
 8000d2c:	4b96      	ldr	r3, [pc, #600]	@ (8000f88 <Sunroof_Set+0x280>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1d      	blt.n	8000d70 <Sunroof_Set+0x68>
		{
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000d34:	4b95      	ldr	r3, [pc, #596]	@ (8000f8c <Sunroof_Set+0x284>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000d3c:	4b94      	ldr	r3, [pc, #592]	@ (8000f90 <Sunroof_Set+0x288>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 ff73 	bl	8002c2e <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000d48:	4b92      	ldr	r3, [pc, #584]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2246      	movs	r2, #70	@ 0x46
 8000d4e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	0099      	lsls	r1, r3, #2
 8000d54:	23a0      	movs	r3, #160	@ 0xa0
 8000d56:	05db      	lsls	r3, r3, #23
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 ff67 	bl	8002c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2200      	movs	r2, #0
 8000d66:	2120      	movs	r1, #32
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 ff60 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000d6e:	e107      	b.n	8000f80 <Sunroof_Set+0x278>
		else if(roof_encoder <= ROOF_OPEN_MAX) {
 8000d70:	4b89      	ldr	r3, [pc, #548]	@ (8000f98 <Sunroof_Set+0x290>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a89      	ldr	r2, [pc, #548]	@ (8000f9c <Sunroof_Set+0x294>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	dc1d      	bgt.n	8000db6 <Sunroof_Set+0xae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000d7a:	4b86      	ldr	r3, [pc, #536]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	0099      	lsls	r1, r3, #2
 8000d86:	23a0      	movs	r3, #160	@ 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 ff4e 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000d92:	4b7e      	ldr	r3, [pc, #504]	@ (8000f8c <Sunroof_Set+0x284>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2246      	movs	r2, #70	@ 0x46
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f90 <Sunroof_Set+0x288>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	@ 0x80
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 ff44 	bl	8002c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, CW);
 8000da6:	23a0      	movs	r3, #160	@ 0xa0
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	2201      	movs	r2, #1
 8000dac:	2140      	movs	r1, #64	@ 0x40
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 ff3d 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000db4:	e0e4      	b.n	8000f80 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000db6:	4b77      	ldr	r3, [pc, #476]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000dbe:	2380      	movs	r3, #128	@ 0x80
 8000dc0:	0099      	lsls	r1, r3, #2
 8000dc2:	23a0      	movs	r3, #160	@ 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 ff30 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000dce:	4b6f      	ldr	r3, [pc, #444]	@ (8000f8c <Sunroof_Set+0x284>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8000f90 <Sunroof_Set+0x288>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 ff26 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000de2:	e0cd      	b.n	8000f80 <Sunroof_Set+0x278>
	case TILTING:
		if(roof_encoder >= 0) {
 8000de4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f98 <Sunroof_Set+0x290>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db1d      	blt.n	8000e28 <Sunroof_Set+0x120>
			// STOP Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000dec:	4b69      	ldr	r3, [pc, #420]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	0099      	lsls	r1, r3, #2
 8000df8:	23a0      	movs	r3, #160	@ 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 ff15 	bl	8002c2e <HAL_GPIO_WritePin>
			// ACW Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000e04:	4b61      	ldr	r3, [pc, #388]	@ (8000f8c <Sunroof_Set+0x284>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2246      	movs	r2, #70	@ 0x46
 8000e0a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000e0c:	4b60      	ldr	r3, [pc, #384]	@ (8000f90 <Sunroof_Set+0x288>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0018      	movs	r0, r3
 8000e14:	f001 ff0b 	bl	8002c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000e18:	23a0      	movs	r3, #160	@ 0xa0
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	@ 0x40
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 ff04 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000e26:	e0ab      	b.n	8000f80 <Sunroof_Set+0x278>
		else if(tilting_encoder <= ROOF_TILTING_MAX) {
 8000e28:	4b57      	ldr	r3, [pc, #348]	@ (8000f88 <Sunroof_Set+0x280>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa0 <Sunroof_Set+0x298>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	dc1d      	bgt.n	8000e6e <Sunroof_Set+0x166>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000e32:	4b56      	ldr	r3, [pc, #344]	@ (8000f8c <Sunroof_Set+0x284>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2200      	movs	r2, #0
 8000e38:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000e3a:	4b55      	ldr	r3, [pc, #340]	@ (8000f90 <Sunroof_Set+0x288>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 fef4 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000e46:	4b53      	ldr	r3, [pc, #332]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2246      	movs	r2, #70	@ 0x46
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	0099      	lsls	r1, r3, #2
 8000e52:	23a0      	movs	r3, #160	@ 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	2200      	movs	r2, #0
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 fee8 	bl	8002c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, CW);
 8000e5e:	23a0      	movs	r3, #160	@ 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2201      	movs	r2, #1
 8000e64:	2120      	movs	r1, #32
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fee1 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000e6c:	e088      	b.n	8000f80 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000e6e:	4b49      	ldr	r3, [pc, #292]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	0099      	lsls	r1, r3, #2
 8000e7a:	23a0      	movs	r3, #160	@ 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	2201      	movs	r2, #1
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fed4 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000e86:	4b41      	ldr	r3, [pc, #260]	@ (8000f8c <Sunroof_Set+0x284>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000e8e:	4b40      	ldr	r3, [pc, #256]	@ (8000f90 <Sunroof_Set+0x288>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 feca 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000e9a:	e071      	b.n	8000f80 <Sunroof_Set+0x278>
	case CLOSE:
		if(tilting_encoder >= 0)
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f88 <Sunroof_Set+0x280>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db1d      	blt.n	8000ee0 <Sunroof_Set+0x1d8>
		{
			// STOP Roof Motor
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ea4:	4b39      	ldr	r3, [pc, #228]	@ (8000f8c <Sunroof_Set+0x284>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000eac:	4b38      	ldr	r3, [pc, #224]	@ (8000f90 <Sunroof_Set+0x288>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 febb 	bl	8002c2e <HAL_GPIO_WritePin>
			// ACW Tilting Motor
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOVE_SPEED);
 8000eb8:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2246      	movs	r2, #70	@ 0x46
 8000ebe:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 0);
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	0099      	lsls	r1, r3, #2
 8000ec4:	23a0      	movs	r3, #160	@ 0xa0
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	2200      	movs	r2, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 feaf 	bl	8002c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TILTING_DIR_GPIO_Port, TILTING_DIR_Pin, ACW);
 8000ed0:	23a0      	movs	r3, #160	@ 0xa0
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fea8 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
		}
		break;
 8000ede:	e04f      	b.n	8000f80 <Sunroof_Set+0x278>
		else if(roof_encoder >= 0) {
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <Sunroof_Set+0x290>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db1d      	blt.n	8000f24 <Sunroof_Set+0x21c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	0099      	lsls	r1, r3, #2
 8000ef4:	23a0      	movs	r3, #160	@ 0xa0
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	2201      	movs	r2, #1
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 fe97 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MOVE_SPEED);
 8000f00:	4b22      	ldr	r3, [pc, #136]	@ (8000f8c <Sunroof_Set+0x284>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2246      	movs	r2, #70	@ 0x46
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 0);
 8000f08:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <Sunroof_Set+0x288>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2180      	movs	r1, #128	@ 0x80
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f001 fe8d 	bl	8002c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROOF_DIR_GPIO_Port, ROOF_DIR_Pin, ACW);
 8000f14:	23a0      	movs	r3, #160	@ 0xa0
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fe86 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000f22:	e02d      	b.n	8000f80 <Sunroof_Set+0x278>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	0099      	lsls	r1, r3, #2
 8000f30:	23a0      	movs	r3, #160	@ 0xa0
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	2201      	movs	r2, #1
 8000f36:	0018      	movs	r0, r3
 8000f38:	f001 fe79 	bl	8002c2e <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <Sunroof_Set+0x284>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <Sunroof_Set+0x288>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 fe6f 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000f50:	e016      	b.n	8000f80 <Sunroof_Set+0x278>
	case STOP:
	default:
		// STOP Both Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <Sunroof_Set+0x28c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(TILTING_BRAKE_GPIO_Port, TILTING_BRAKE_Pin, 1);
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	0099      	lsls	r1, r3, #2
 8000f5e:	23a0      	movs	r3, #160	@ 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2201      	movs	r2, #1
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 fe62 	bl	8002c2e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <Sunroof_Set+0x284>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(ROOF_BRAKE_GPIO_Port, ROOF_BRAKE_Pin, 1);
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <Sunroof_Set+0x288>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 fe58 	bl	8002c2e <HAL_GPIO_WritePin>
		break;
 8000f7e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000008c 	.word	0x2000008c
 8000f8c:	200000ac 	.word	0x200000ac
 8000f90:	50000800 	.word	0x50000800
 8000f94:	200000ec 	.word	0x200000ec
 8000f98:	20000088 	.word	0x20000088
 8000f9c:	00001770 	.word	0x00001770
 8000fa0:	00000bb8 	.word	0x00000bb8

08000fa4 <HW_AdcReadChannel>:
 *      Author: USER
 */
#include "sensor.h"

uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8000fac:	2316      	movs	r3, #22
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]

	/* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <HW_AdcReadChannel+0xc4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2208      	movs	r2, #8
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d1f9      	bne.n	8000fb6 <HW_AdcReadChannel+0x12>

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <HW_AdcReadChannel+0xc8>)
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc6:	4b29      	ldr	r3, [pc, #164]	@ (800106c <HW_AdcReadChannel+0xc8>)
 8000fc8:	2180      	movs	r1, #128	@ 0x80
 8000fca:	0089      	lsls	r1, r1, #2
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8000fd0:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f001 f8d1 	bl	800217c <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	adcConf.Channel = ADC_CHANNEL_MASK;
 8000fda:	240c      	movs	r4, #12
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <HW_AdcReadChannel+0xd0>)
 8000fe0:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_NONE;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <HW_AdcReadChannel+0xd4>)
 8000fe6:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8000fe8:	193a      	adds	r2, r7, r4
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 ff9c 	bl	8001f2c <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	adcConf.Channel = Channel;
 8000ff4:	0021      	movs	r1, r4
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	601a      	str	r2, [r3, #0]
	adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	0152      	lsls	r2, r2, #5
 8001002:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8001004:	187a      	adds	r2, r7, r1
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f000 ff8e 	bl	8001f2c <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	HAL_ADC_Start( &hadc);
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fe8e 	bl	8001d34 <HAL_ADC_Start>

	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8001018:	2301      	movs	r3, #1
 800101a:	425a      	negs	r2, r3
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fedb 	bl	8001ddc <HAL_ADC_PollForConversion>

	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc);
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8001028:	0018      	movs	r0, r3
 800102a:	f000 ff73 	bl	8001f14 <HAL_ADC_GetValue>
 800102e:	0002      	movs	r2, r0
 8001030:	2016      	movs	r0, #22
 8001032:	183b      	adds	r3, r7, r0
 8001034:	801a      	strh	r2, [r3, #0]

	__HAL_ADC_DISABLE( &hadc) ;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2102      	movs	r1, #2
 8001042:	430a      	orrs	r2, r1
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HW_AdcReadChannel+0xcc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2203      	movs	r2, #3
 800104c:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_DISABLE();
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <HW_AdcReadChannel+0xc8>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HW_AdcReadChannel+0xc8>)
 8001054:	4909      	ldr	r1, [pc, #36]	@ (800107c <HW_AdcReadChannel+0xd8>)
 8001056:	400a      	ands	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34

  return adcData;
 800105a:	183b      	adds	r3, r7, r0
 800105c:	881b      	ldrh	r3, [r3, #0]
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b007      	add	sp, #28
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	40007000 	.word	0x40007000
 800106c:	40021000 	.word	0x40021000
 8001070:	2000002c 	.word	0x2000002c
 8001074:	0007ffff 	.word	0x0007ffff
 8001078:	00001001 	.word	0x00001001
 800107c:	fffffdff 	.word	0xfffffdff

08001080 <read_illum>:

void read_illum(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	in_illum = HW_AdcReadChannel(ADC_CHANNEL_1);
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <read_illum+0x28>)
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff ff8c 	bl	8000fa4 <HW_AdcReadChannel>
 800108c:	0003      	movs	r3, r0
 800108e:	001a      	movs	r2, r3
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <read_illum+0x2c>)
 8001092:	801a      	strh	r2, [r3, #0]
    out_illum = HW_AdcReadChannel(ADC_CHANNEL_0);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff85 	bl	8000fa4 <HW_AdcReadChannel>
 800109a:	0003      	movs	r3, r0
 800109c:	001a      	movs	r2, r3
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <read_illum+0x30>)
 80010a0:	801a      	strh	r2, [r3, #0]
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	04000002 	.word	0x04000002
 80010ac:	20000090 	.word	0x20000090
 80010b0:	20000092 	.word	0x20000092

080010b4 <read_rain>:

void read_rain(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	rain_sense = HW_AdcReadChannel(ADC_CHANNEL_15);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <read_rain+0x34>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff ff72 	bl	8000fa4 <HW_AdcReadChannel>
 80010c0:	0003      	movs	r3, r0
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <read_rain+0x38>)
 80010c6:	801a      	strh	r2, [r3, #0]

	rain_state = (rain_sense > RAIN_TH);
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <read_rain+0x38>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	22c8      	movs	r2, #200	@ 0xc8
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	429a      	cmp	r2, r3
 80010d4:	419b      	sbcs	r3, r3
 80010d6:	425b      	negs	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	001a      	movs	r2, r3
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <read_rain+0x3c>)
 80010de:	701a      	strb	r2, [r3, #0]
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	3c008000 	.word	0x3c008000
 80010ec:	20000094 	.word	0x20000094
 80010f0:	20000096 	.word	0x20000096

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <HAL_MspInit+0x24>)
 80010fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_MspInit+0x24>)
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <HAL_MspInit+0x24>)
 8001106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_MspInit+0x24>)
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	0549      	lsls	r1, r1, #21
 800110e:	430a      	orrs	r2, r1
 8001110:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 fc66 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_A_Pin);
 8001152:	2001      	movs	r0, #1
 8001154:	f001 fd88 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROOF_ENC_B_Pin);
 8001158:	2002      	movs	r0, #2
 800115a:	f001 fd85 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <DMA1_Channel2_3_IRQHandler+0x14>)
 800116a:	0018      	movs	r0, r3
 800116c:	f001 fae7 	bl	800273e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	20000304 	.word	0x20000304

0800117c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001182:	0018      	movs	r0, r3
 8001184:	f001 fadb 	bl	800273e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	2000034c 	.word	0x2000034c

08001194 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <USART4_5_IRQHandler+0x1c>)
 800119a:	0018      	movs	r0, r3
 800119c:	f003 fcbe 	bl	8004b1c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <USART4_5_IRQHandler+0x20>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f003 fcba 	bl	8004b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	200001f4 	.word	0x200001f4
 80011b4:	2000027c 	.word	0x2000027c

080011b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <TIM7_IRQHandler+0x14>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f002 fe50 	bl	8003e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	2000012c 	.word	0x2000012c

080011d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	2318      	movs	r3, #24
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	0018      	movs	r0, r3
 80011e8:	2310      	movs	r3, #16
 80011ea:	001a      	movs	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f004 fec6 	bl	8005f7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f2:	2310      	movs	r3, #16
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	0018      	movs	r0, r3
 80011f8:	2308      	movs	r3, #8
 80011fa:	001a      	movs	r2, r3
 80011fc:	2100      	movs	r1, #0
 80011fe:	f004 febe 	bl	8005f7e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	003b      	movs	r3, r7
 8001204:	0018      	movs	r0, r3
 8001206:	2310      	movs	r3, #16
 8001208:	001a      	movs	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f004 feb7 	bl	8005f7e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001210:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	05d2      	lsls	r2, r2, #23
 8001216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001218:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001226:	2263      	movs	r2, #99	@ 0x63
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001238:	0018      	movs	r0, r3
 800123a:	f002 fca7 	bl	8003b8c <HAL_TIM_Base_Init>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001242:	f7ff fca5 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	2118      	movs	r1, #24
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	0152      	lsls	r2, r2, #5
 800124e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001250:	187a      	adds	r2, r7, r1
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f002 ff96 	bl	8004188 <HAL_TIM_ConfigClockSource>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001260:	f7ff fc96 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001266:	0018      	movs	r0, r3
 8001268:	f002 fd22 	bl	8003cb0 <HAL_TIM_PWM_Init>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001270:	f7ff fc8e 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	2110      	movs	r1, #16
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001282:	187a      	adds	r2, r7, r1
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f003 fa97 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001292:	f7ff fc7d 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001296:	003b      	movs	r3, r7
 8001298:	2260      	movs	r2, #96	@ 0x60
 800129a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800129c:	003b      	movs	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	003b      	movs	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a8:	003b      	movs	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ae:	0039      	movs	r1, r7
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 80012b2:	2204      	movs	r2, #4
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 fea1 	bl	8003ffc <HAL_TIM_PWM_ConfigChannel>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80012be:	f7ff fc67 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <MX_TIM2_Init+0xf8>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 f8f5 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b00a      	add	sp, #40	@ 0x28
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	200000ac 	.word	0x200000ac

080012d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	2318      	movs	r3, #24
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	0018      	movs	r0, r3
 80012e4:	2310      	movs	r3, #16
 80012e6:	001a      	movs	r2, r3
 80012e8:	2100      	movs	r1, #0
 80012ea:	f004 fe48 	bl	8005f7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ee:	2310      	movs	r3, #16
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	0018      	movs	r0, r3
 80012f4:	2308      	movs	r3, #8
 80012f6:	001a      	movs	r2, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	f004 fe40 	bl	8005f7e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fe:	003b      	movs	r3, r7
 8001300:	0018      	movs	r0, r3
 8001302:	2310      	movs	r3, #16
 8001304:	001a      	movs	r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	f004 fe39 	bl	8005f7e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <MX_TIM3_Init+0xf4>)
 800130e:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <MX_TIM3_Init+0xf8>)
 8001310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001312:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <MX_TIM3_Init+0xf4>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800131e:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001320:	2263      	movs	r2, #99	@ 0x63
 8001322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <MX_TIM3_Init+0xf4>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001330:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001332:	0018      	movs	r0, r3
 8001334:	f002 fc2a 	bl	8003b8c <HAL_TIM_Base_Init>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800133c:	f7ff fc28 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	2118      	movs	r1, #24
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	0152      	lsls	r2, r2, #5
 8001348:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134a:	187a      	adds	r2, r7, r1
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_TIM3_Init+0xf4>)
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f002 ff19 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800135a:	f7ff fc19 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001360:	0018      	movs	r0, r3
 8001362:	f002 fca5 	bl	8003cb0 <HAL_TIM_PWM_Init>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800136a:	f7ff fc11 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2110      	movs	r1, #16
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137c:	187a      	adds	r2, r7, r1
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f003 fa1a 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800138c:	f7ff fc00 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001390:	003b      	movs	r3, r7
 8001392:	2260      	movs	r2, #96	@ 0x60
 8001394:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001396:	003b      	movs	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139c:	003b      	movs	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	003b      	movs	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	0039      	movs	r1, r7
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_TIM3_Init+0xf4>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	0018      	movs	r0, r3
 80013b0:	f002 fe24 	bl	8003ffc <HAL_TIM_PWM_ConfigChannel>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80013b8:	f7ff fbea 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <MX_TIM3_Init+0xf4>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f878 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b00a      	add	sp, #40	@ 0x28
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000ec 	.word	0x200000ec
 80013d0:	40000400 	.word	0x40000400

080013d4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	003b      	movs	r3, r7
 80013dc:	0018      	movs	r0, r3
 80013de:	2308      	movs	r3, #8
 80013e0:	001a      	movs	r2, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	f004 fdcb 	bl	8005f7e <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_TIM7_Init+0x6c>)
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <MX_TIM7_Init+0x70>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_TIM7_Init+0x6c>)
 80013f0:	4a15      	ldr	r2, [pc, #84]	@ (8001448 <MX_TIM7_Init+0x74>)
 80013f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_TIM7_Init+0x6c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_TIM7_Init+0x6c>)
 80013fc:	4a13      	ldr	r2, [pc, #76]	@ (800144c <MX_TIM7_Init+0x78>)
 80013fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_TIM7_Init+0x6c>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_TIM7_Init+0x6c>)
 8001408:	0018      	movs	r0, r3
 800140a:	f002 fbbf 	bl	8003b8c <HAL_TIM_Base_Init>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001412:	f7ff fbbd 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	003b      	movs	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	003b      	movs	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001422:	003a      	movs	r2, r7
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_TIM7_Init+0x6c>)
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f003 f9c7 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8001432:	f7ff fbad 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	2000012c 	.word	0x2000012c
 8001444:	40001400 	.word	0x40001400
 8001448:	00001f3f 	.word	0x00001f3f
 800144c:	0000270f 	.word	0x0000270f

08001450 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	429a      	cmp	r2, r3
 8001462:	d106      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_TIM_Base_MspInit+0x58>)
 8001466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_TIM_Base_MspInit+0x58>)
 800146a:	2101      	movs	r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001470:	e016      	b.n	80014a0 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <HAL_TIM_Base_MspInit+0x5c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d106      	bne.n	800148a <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_TIM_Base_MspInit+0x58>)
 800147e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_TIM_Base_MspInit+0x58>)
 8001482:	2102      	movs	r1, #2
 8001484:	430a      	orrs	r2, r1
 8001486:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001488:	e00a      	b.n	80014a0 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM7)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_TIM_Base_MspInit+0x60>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d105      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <HAL_TIM_Base_MspInit+0x58>)
 8001496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_TIM_Base_MspInit+0x58>)
 800149a:	2120      	movs	r1, #32
 800149c:	430a      	orrs	r2, r1
 800149e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40001400 	.word	0x40001400

080014b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b08b      	sub	sp, #44	@ 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	2414      	movs	r4, #20
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	0018      	movs	r0, r3
 80014c2:	2314      	movs	r3, #20
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	f004 fd59 	bl	8005f7e <memset>
  if(timHandle->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d122      	bne.n	800151e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_TIM_MspPostInit+0xc4>)
 80014da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014dc:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <HAL_TIM_MspPostInit+0xc4>)
 80014de:	2102      	movs	r1, #2
 80014e0:	430a      	orrs	r2, r1
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_TIM_MspPostInit+0xc4>)
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f0:	0021      	movs	r1, r4
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2208      	movs	r2, #8
 80014f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2202      	movs	r2, #2
 80014fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2202      	movs	r2, #2
 800150e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a1a      	ldr	r2, [pc, #104]	@ (800157c <HAL_TIM_MspPostInit+0xc8>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f001 f9ee 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800151c:	e027      	b.n	800156e <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_TIM_MspPostInit+0xcc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d122      	bne.n	800156e <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_TIM_MspPostInit+0xc4>)
 800152a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_TIM_MspPostInit+0xc4>)
 800152e:	2101      	movs	r1, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_TIM_MspPostInit+0xc4>)
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001540:	2114      	movs	r1, #20
 8001542:	187b      	adds	r3, r7, r1
 8001544:	2280      	movs	r2, #128	@ 0x80
 8001546:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	187b      	adds	r3, r7, r1
 800154a:	2202      	movs	r2, #2
 800154c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2202      	movs	r2, #2
 800155e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	187a      	adds	r2, r7, r1
 8001562:	23a0      	movs	r3, #160	@ 0xa0
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f001 f9c5 	bl	80028f8 <HAL_GPIO_Init>
}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b00b      	add	sp, #44	@ 0x2c
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	40021000 	.word	0x40021000
 800157c:	50000400 	.word	0x50000400
 8001580:	40000400 	.word	0x40000400

08001584 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart5_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <MX_USART2_UART_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 8001590:	22e1      	movs	r2, #225	@ 0xe1
 8001592:	0252      	lsls	r2, r2, #9
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <MX_USART2_UART_Init+0x58>)
 80015c8:	0018      	movs	r0, r3
 80015ca:	f003 f955 	bl	8004878 <HAL_UART_Init>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015d2:	f7ff fadd 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000016c 	.word	0x2000016c
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_USART4_UART_Init+0x58>)
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <MX_USART4_UART_Init+0x5c>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <MX_USART4_UART_Init+0x58>)
 80015f0:	22e1      	movs	r2, #225	@ 0xe1
 80015f2:	0252      	lsls	r2, r2, #9
 80015f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_USART4_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_USART4_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_USART4_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_USART4_UART_Init+0x58>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_USART4_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_USART4_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_USART4_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_USART4_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <MX_USART4_UART_Init+0x58>)
 8001628:	0018      	movs	r0, r3
 800162a:	f003 f925 	bl	8004878 <HAL_UART_Init>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8001632:	f7ff faad 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200001f4 	.word	0x200001f4
 8001640:	40004c00 	.word	0x40004c00

08001644 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_USART5_UART_Init+0x58>)
 800164a:	4a15      	ldr	r2, [pc, #84]	@ (80016a0 <MX_USART5_UART_Init+0x5c>)
 800164c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001650:	22e1      	movs	r2, #225	@ 0xe1
 8001652:	0252      	lsls	r2, r2, #9
 8001654:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <MX_USART5_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_USART5_UART_Init+0x58>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_USART5_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <MX_USART5_UART_Init+0x58>)
 8001688:	0018      	movs	r0, r3
 800168a:	f003 f8f5 	bl	8004878 <HAL_UART_Init>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8001692:	f7ff fa7d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000027c 	.word	0x2000027c
 80016a0:	40005000 	.word	0x40005000

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08d      	sub	sp, #52	@ 0x34
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	241c      	movs	r4, #28
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	0018      	movs	r0, r3
 80016b2:	2314      	movs	r3, #20
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f004 fc61 	bl	8005f7e <memset>
  if(uartHandle->Instance==USART2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a8b      	ldr	r2, [pc, #556]	@ (80018f0 <HAL_UART_MspInit+0x24c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12a      	bne.n	800171c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c6:	4b8b      	ldr	r3, [pc, #556]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80016c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016ca:	4b8a      	ldr	r3, [pc, #552]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80016cc:	2180      	movs	r1, #128	@ 0x80
 80016ce:	0289      	lsls	r1, r1, #10
 80016d0:	430a      	orrs	r2, r1
 80016d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b87      	ldr	r3, [pc, #540]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80016d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d8:	4b86      	ldr	r3, [pc, #536]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80016da:	2101      	movs	r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016e0:	4b84      	ldr	r3, [pc, #528]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ec:	0021      	movs	r1, r4
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	220c      	movs	r2, #12
 80016f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2202      	movs	r2, #2
 80016f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2203      	movs	r2, #3
 8001704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2204      	movs	r2, #4
 800170a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	187a      	adds	r2, r7, r1
 800170e:	23a0      	movs	r3, #160	@ 0xa0
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f001 f8ef 	bl	80028f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 800171a:	e0e4      	b.n	80018e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a75      	ldr	r2, [pc, #468]	@ (80018f8 <HAL_UART_MspInit+0x254>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d15b      	bne.n	80017de <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001726:	4b73      	ldr	r3, [pc, #460]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 8001728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800172a:	4b72      	ldr	r3, [pc, #456]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 800172c:	2180      	movs	r1, #128	@ 0x80
 800172e:	0309      	lsls	r1, r1, #12
 8001730:	430a      	orrs	r2, r1
 8001732:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4b6f      	ldr	r3, [pc, #444]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 8001736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001738:	4b6e      	ldr	r3, [pc, #440]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 800173a:	2104      	movs	r1, #4
 800173c:	430a      	orrs	r2, r1
 800173e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001740:	4b6c      	ldr	r3, [pc, #432]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 8001742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001744:	2204      	movs	r2, #4
 8001746:	4013      	ands	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800174c:	211c      	movs	r1, #28
 800174e:	187b      	adds	r3, r7, r1
 8001750:	22c0      	movs	r2, #192	@ 0xc0
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2202      	movs	r2, #2
 800175a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2203      	movs	r2, #3
 8001766:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2206      	movs	r2, #6
 800176c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	187b      	adds	r3, r7, r1
 8001770:	4a62      	ldr	r2, [pc, #392]	@ (80018fc <HAL_UART_MspInit+0x258>)
 8001772:	0019      	movs	r1, r3
 8001774:	0010      	movs	r0, r2
 8001776:	f001 f8bf 	bl	80028f8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800177a:	4b61      	ldr	r3, [pc, #388]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 800177c:	4a61      	ldr	r2, [pc, #388]	@ (8001904 <HAL_UART_MspInit+0x260>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8001780:	4b5f      	ldr	r3, [pc, #380]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 8001782:	220c      	movs	r2, #12
 8001784:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001786:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b5c      	ldr	r3, [pc, #368]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179e:	4b58      	ldr	r3, [pc, #352]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 80017a4:	4b56      	ldr	r3, [pc, #344]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 fe5e 	bl	8002474 <HAL_DMA_Init>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 80017bc:	f7ff f9e8 	bl	8000b90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 80017c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80017c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001900 <HAL_UART_MspInit+0x25c>)
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	200e      	movs	r0, #14
 80017d2:	f000 fe1d 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80017d6:	200e      	movs	r0, #14
 80017d8:	f000 fe2f 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 80017dc:	e083      	b.n	80018e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART5)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a49      	ldr	r2, [pc, #292]	@ (8001908 <HAL_UART_MspInit+0x264>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d000      	beq.n	80017ea <HAL_UART_MspInit+0x146>
 80017e8:	e07d      	b.n	80018e6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART5_CLK_ENABLE();
 80017ea:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80017ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017ee:	4b41      	ldr	r3, [pc, #260]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0349      	lsls	r1, r1, #13
 80017f4:	430a      	orrs	r2, r1
 80017f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80017fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fc:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 80017fe:	2104      	movs	r1, #4
 8001800:	430a      	orrs	r2, r1
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001804:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001810:	4b38      	ldr	r3, [pc, #224]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 8001812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001814:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 8001816:	2108      	movs	r1, #8
 8001818:	430a      	orrs	r2, r1
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800181c:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <HAL_UART_MspInit+0x250>)
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	2208      	movs	r2, #8
 8001822:	4013      	ands	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001828:	211c      	movs	r1, #28
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2280      	movs	r2, #128	@ 0x80
 800182e:	0152      	lsls	r2, r2, #5
 8001830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	000c      	movs	r4, r1
 8001834:	193b      	adds	r3, r7, r4
 8001836:	2202      	movs	r2, #2
 8001838:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	193b      	adds	r3, r7, r4
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2203      	movs	r2, #3
 8001844:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2202      	movs	r2, #2
 800184a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	193b      	adds	r3, r7, r4
 800184e:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <HAL_UART_MspInit+0x258>)
 8001850:	0019      	movs	r1, r3
 8001852:	0010      	movs	r0, r2
 8001854:	f001 f850 	bl	80028f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001858:	0021      	movs	r1, r4
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2204      	movs	r2, #4
 800185e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2202      	movs	r2, #2
 8001864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2203      	movs	r2, #3
 8001870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2206      	movs	r2, #6
 8001876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	187b      	adds	r3, r7, r1
 800187a:	4a24      	ldr	r2, [pc, #144]	@ (800190c <HAL_UART_MspInit+0x268>)
 800187c:	0019      	movs	r1, r3
 800187e:	0010      	movs	r0, r2
 8001880:	f001 f83a 	bl	80028f8 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel6;
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 8001886:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <HAL_UART_MspInit+0x270>)
 8001888:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 800188c:	220d      	movs	r2, #13
 800188e:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 800189e:	2280      	movs	r2, #128	@ 0x80
 80018a0:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b4:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 fdd9 	bl	8002474 <HAL_DMA_Init>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <HAL_UART_MspInit+0x226>
      Error_Handler();
 80018c6:	f7ff f963 	bl	8000b90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018ce:	675a      	str	r2, [r3, #116]	@ 0x74
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_UART_MspInit+0x26c>)
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	200e      	movs	r0, #14
 80018dc:	f000 fd98 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80018e0:	200e      	movs	r0, #14
 80018e2:	f000 fdaa 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b00d      	add	sp, #52	@ 0x34
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	40004400 	.word	0x40004400
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40004c00 	.word	0x40004c00
 80018fc:	50000800 	.word	0x50000800
 8001900:	20000304 	.word	0x20000304
 8001904:	4002001c 	.word	0x4002001c
 8001908:	40005000 	.word	0x40005000
 800190c:	50000c00 	.word	0x50000c00
 8001910:	2000034c 	.word	0x2000034c
 8001914:	4002006c 	.word	0x4002006c

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800191a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800191c:	f7ff fc58 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001946:	f004 fb23 	bl	8005f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7fe ffdf 	bl	800090c <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
   ldr   r0, =_estack
 8001950:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800195c:	0800606c 	.word	0x0800606c
  ldr r2, =_sbss
 8001960:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001964:	20000398 	.word	0x20000398

08001968 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_COMP_IRQHandler>
	...

0800196c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_Init+0x3c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_Init+0x3c>)
 800197e:	2140      	movs	r1, #64	@ 0x40
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f811 	bl	80019ac <HAL_InitTick>
 800198a:	1e03      	subs	r3, r0, #0
 800198c:	d003      	beq.n	8001996 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e001      	b.n	800199a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001996:	f7ff fbad 	bl	80010f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_InitTick+0x5c>)
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_InitTick+0x60>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	0019      	movs	r1, r3
 80019be:	23fa      	movs	r3, #250	@ 0xfa
 80019c0:	0098      	lsls	r0, r3, #2
 80019c2:	f7fe fba1 	bl	8000108 <__udivsi3>
 80019c6:	0003      	movs	r3, r0
 80019c8:	0019      	movs	r1, r3
 80019ca:	0020      	movs	r0, r4
 80019cc:	f7fe fb9c 	bl	8000108 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 fd41 	bl	800245a <HAL_SYSTICK_Config>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d001      	beq.n	80019e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e00f      	b.n	8001a00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d80b      	bhi.n	80019fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	2301      	movs	r3, #1
 80019ea:	425b      	negs	r3, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 fd0e 	bl	8002410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_InitTick+0x64>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b003      	add	sp, #12
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_IncTick+0x1c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	18d2      	adds	r2, r2, r3
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	20000394 	.word	0x20000394

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	@ (8001a48 <HAL_GetTick+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	20000394 	.word	0x20000394

08001a4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e159      	b.n	8001d12 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2250      	movs	r2, #80	@ 0x50
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7fe fd88 	bl	800058c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	2210      	movs	r2, #16
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d005      	beq.n	8001a94 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a92:	d00b      	beq.n	8001aac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a98:	2210      	movs	r2, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2250      	movs	r2, #80	@ 0x50
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e132      	b.n	8001d12 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	4a9a      	ldr	r2, [pc, #616]	@ (8001d1c <HAL_ADC_Init+0x2d0>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <HAL_ADC_Init+0x90>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_Init+0x90>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_ADC_Init+0x92>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d149      	bne.n	8001b76 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	23c0      	movs	r3, #192	@ 0xc0
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d00b      	beq.n	8001b06 <HAL_ADC_Init+0xba>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	05db      	lsls	r3, r3, #23
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d005      	beq.n	8001b06 <HAL_ADC_Init+0xba>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d111      	bne.n	8001b2a <HAL_ADC_Init+0xde>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	0892      	lsrs	r2, r2, #2
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	e014      	b.n	8001b54 <HAL_ADC_Init+0x108>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	0892      	lsrs	r2, r2, #2
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	4b79      	ldr	r3, [pc, #484]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b78      	ldr	r3, [pc, #480]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b40:	4978      	ldr	r1, [pc, #480]	@ (8001d24 <HAL_ADC_Init+0x2d8>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b76      	ldr	r3, [pc, #472]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4b74      	ldr	r3, [pc, #464]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2118      	movs	r1, #24
 8001b60:	438a      	bics	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001b76:	4b6a      	ldr	r3, [pc, #424]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b69      	ldr	r3, [pc, #420]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b7c:	496a      	ldr	r1, [pc, #424]	@ (8001d28 <HAL_ADC_Init+0x2dc>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001b82:	4b67      	ldr	r3, [pc, #412]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8a:	065a      	lsls	r2, r3, #25
 8001b8c:	4b64      	ldr	r3, [pc, #400]	@ (8001d20 <HAL_ADC_Init+0x2d4>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	055b      	lsls	r3, r3, #21
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d108      	bne.n	8001bb2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	0549      	lsls	r1, r1, #21
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	495b      	ldr	r1, [pc, #364]	@ (8001d2c <HAL_ADC_Init+0x2e0>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_Init+0x18c>
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e000      	b.n	8001bda <HAL_ADC_Init+0x18e>
 8001bd8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001bda:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2020      	movs	r0, #32
 8001be0:	5c1b      	ldrb	r3, [r3, r0]
 8001be2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001be4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	202c      	movs	r0, #44	@ 0x2c
 8001bea:	5c1b      	ldrb	r3, [r3, r0]
 8001bec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bf4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001bfc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c04:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c12:	23c2      	movs	r3, #194	@ 0xc2
 8001c14:	33ff      	adds	r3, #255	@ 0xff
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d00b      	beq.n	8001c32 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68d9      	ldr	r1, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2221      	movs	r2, #33	@ 0x21
 8001c36:	5c9b      	ldrb	r3, [r3, r2]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d11a      	bne.n	8001c72 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	5c9b      	ldrb	r3, [r3, r2]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	0249      	lsls	r1, r1, #9
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	e00b      	b.n	8001c72 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5e:	2220      	movs	r2, #32
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d11f      	bne.n	8001cba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	492a      	ldr	r1, [pc, #168]	@ (8001d30 <HAL_ADC_Init+0x2e4>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6919      	ldr	r1, [r3, #16]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c98:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001c9e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	e00e      	b.n	8001cd8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d107      	bne.n	8001cd8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2107      	movs	r1, #7
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6959      	ldr	r1, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d04:	2203      	movs	r2, #3
 8001d06:	4393      	bics	r3, r2
 8001d08:	2201      	movs	r2, #1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	fffffefd 	.word	0xfffffefd
 8001d20:	40012708 	.word	0x40012708
 8001d24:	ffc3ffff 	.word	0xffc3ffff
 8001d28:	fdffffff 	.word	0xfdffffff
 8001d2c:	fffe0219 	.word	0xfffe0219
 8001d30:	fffffc03 	.word	0xfffffc03

08001d34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d138      	bne.n	8001dc2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2250      	movs	r2, #80	@ 0x50
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Start+0x2a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e038      	b.n	8001dd0 <HAL_ADC_Start+0x9c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2250      	movs	r2, #80	@ 0x50
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d007      	beq.n	8001d7e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d6e:	230f      	movs	r3, #15
 8001d70:	18fc      	adds	r4, r7, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 f979 	bl	800206c <ADC_Enable>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d7e:	230f      	movs	r3, #15
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d120      	bne.n	8001dca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_ADC_Start+0xa4>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2280      	movs	r2, #128	@ 0x80
 8001d92:	0052      	lsls	r2, r2, #1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2250      	movs	r2, #80	@ 0x50
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	221c      	movs	r2, #28
 8001dae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2104      	movs	r1, #4
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	781b      	ldrb	r3, [r3, #0]
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b005      	add	sp, #20
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	fffff0fe 	.word	0xfffff0fe

08001ddc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001df6:	2308      	movs	r3, #8
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e014      	b.n	8001e26 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10b      	bne.n	8001e22 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	2220      	movs	r2, #32
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2250      	movs	r2, #80	@ 0x50
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e072      	b.n	8001f08 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e22:	230c      	movs	r3, #12
 8001e24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e26:	f7ff fe07 	bl	8001a38 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e2e:	e01f      	b.n	8001e70 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	d01c      	beq.n	8001e70 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_ADC_PollForConversion+0x70>
 8001e3c:	f7ff fdfc 	bl	8001a38 <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d211      	bcs.n	8001e70 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	d10b      	bne.n	8001e70 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2250      	movs	r2, #80	@ 0x50
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e04b      	b.n	8001f08 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0d9      	beq.n	8001e30 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	2280      	movs	r2, #128	@ 0x80
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	23c0      	movs	r3, #192	@ 0xc0
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d12e      	bne.n	8001ef6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d129      	bne.n	8001ef6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d122      	bne.n	8001ef6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d110      	bne.n	8001ede <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	210c      	movs	r1, #12
 8001ec8:	438a      	bics	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f10 <HAL_ADC_PollForConversion+0x134>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
 8001edc:	e00b      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	2201      	movs	r2, #1
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	220c      	movs	r2, #12
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	fffffefe 	.word	0xfffffefe

08001f14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2250      	movs	r2, #80	@ 0x50
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x18>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e085      	b.n	8002050 <HAL_ADC_ConfigChannel+0x124>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2250      	movs	r2, #80	@ 0x50
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2204      	movs	r2, #4
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00b      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2250      	movs	r2, #80	@ 0x50
 8001f68:	2100      	movs	r1, #0
 8001f6a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e06f      	b.n	8002050 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a38      	ldr	r2, [pc, #224]	@ (8002058 <HAL_ADC_ConfigChannel+0x12c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d035      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	035b      	lsls	r3, r3, #13
 8001f86:	0b5a      	lsrs	r2, r3, #13
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	02db      	lsls	r3, r3, #11
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	0409      	lsls	r1, r1, #16
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001faa:	200a      	movs	r0, #10
 8001fac:	f000 f8c6 	bl	800213c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d006      	beq.n	8001fca <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	03c9      	lsls	r1, r1, #15
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	025b      	lsls	r3, r3, #9
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d037      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	0449      	lsls	r1, r1, #17
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e02f      	b.n	8002046 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	035b      	lsls	r3, r3, #13
 8001ff2:	0b5b      	lsrs	r3, r3, #13
 8001ff4:	43d9      	mvns	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	02db      	lsls	r3, r3, #11
 8002006:	4013      	ands	r3, r2
 8002008:	d005      	beq.n	8002016 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8002010:	4913      	ldr	r1, [pc, #76]	@ (8002060 <HAL_ADC_ConfigChannel+0x134>)
 8002012:	400a      	ands	r2, r1
 8002014:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	4013      	ands	r3, r2
 8002020:	d005      	beq.n	800202e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8002028:	490e      	ldr	r1, [pc, #56]	@ (8002064 <HAL_ADC_ConfigChannel+0x138>)
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	4013      	ands	r3, r2
 8002038:	d005      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_ADC_ConfigChannel+0x130>)
 8002040:	4909      	ldr	r1, [pc, #36]	@ (8002068 <HAL_ADC_ConfigChannel+0x13c>)
 8002042:	400a      	ands	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2250      	movs	r2, #80	@ 0x50
 800204a:	2100      	movs	r1, #0
 800204c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}
 8002058:	00001001 	.word	0x00001001
 800205c:	40012708 	.word	0x40012708
 8002060:	ff7fffff 	.word	0xff7fffff
 8002064:	ffbfffff 	.word	0xffbfffff
 8002068:	feffffff 	.word	0xfeffffff

0800206c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2203      	movs	r2, #3
 8002080:	4013      	ands	r3, r2
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <ADC_Enable+0x2c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <ADC_Enable+0x2c>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <ADC_Enable+0x2e>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d146      	bne.n	800212c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a24      	ldr	r2, [pc, #144]	@ (8002138 <ADC_Enable+0xcc>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	2210      	movs	r2, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	2201      	movs	r2, #1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e033      	b.n	800212e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 f830 	bl	800213c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80020dc:	f7ff fcac 	bl	8001a38 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020e4:	e01b      	b.n	800211e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020e6:	f7ff fca7 	bl	8001a38 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b0a      	cmp	r3, #10
 80020f2:	d914      	bls.n	800211e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00d      	beq.n	800211e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	2210      	movs	r2, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	2201      	movs	r2, #1
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e007      	b.n	800212e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	2b01      	cmp	r3, #1
 800212a:	d1dc      	bne.n	80020e6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	80000017 	.word	0x80000017

0800213c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <ADC_DelayMicroSecond+0x38>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	490b      	ldr	r1, [pc, #44]	@ (8002178 <ADC_DelayMicroSecond+0x3c>)
 800214a:	0018      	movs	r0, r3
 800214c:	f7fd ffdc 	bl	8000108 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	001a      	movs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4353      	muls	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800215a:	e002      	b.n	8002162 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b01      	subs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <ADC_DelayMicroSecond+0x20>
  }
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	20000004 	.word	0x20000004
 8002178:	000f4240 	.word	0x000f4240

0800217c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002186:	2317      	movs	r3, #23
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2250      	movs	r2, #80	@ 0x50
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADCEx_Calibration_Start+0x28>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e083      	b.n	80022ac <HAL_ADCEx_Calibration_Start+0x130>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2250      	movs	r2, #80	@ 0x50
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_ADCEx_Calibration_Start+0x50>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADCEx_Calibration_Start+0x50>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_ADCEx_Calibration_Start+0x52>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d15b      	bne.n	800228a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	4a37      	ldr	r2, [pc, #220]	@ (80022b4 <HAL_ADCEx_Calibration_Start+0x138>)
 80021d8:	4013      	ands	r3, r2
 80021da:	2202      	movs	r2, #2
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2103      	movs	r1, #3
 80021fa:	438a      	bics	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	0609      	lsls	r1, r1, #24
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002210:	f7ff fc12 	bl	8001a38 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002218:	e01d      	b.n	8002256 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800221a:	f7ff fc0d 	bl	8001a38 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b0a      	cmp	r3, #10
 8002226:	d916      	bls.n	8002256 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0fdb      	lsrs	r3, r3, #31
 8002230:	07da      	lsls	r2, r3, #31
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	429a      	cmp	r2, r3
 8002238:	d10d      	bne.n	8002256 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223e:	2212      	movs	r2, #18
 8002240:	4393      	bics	r3, r2
 8002242:	2210      	movs	r2, #16
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2250      	movs	r2, #80	@ 0x50
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e02a      	b.n	80022ac <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	0fdb      	lsrs	r3, r3, #31
 800225e:	07da      	lsls	r2, r3, #31
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	061b      	lsls	r3, r3, #24
 8002264:	429a      	cmp	r2, r3
 8002266:	d0d8      	beq.n	800221a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68d9      	ldr	r1, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	430a      	orrs	r2, r1
 8002276:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	2203      	movs	r2, #3
 800227e:	4393      	bics	r3, r2
 8002280:	2201      	movs	r2, #1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
 8002288:	e009      	b.n	800229e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	2220      	movs	r2, #32
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002296:	2317      	movs	r3, #23
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2250      	movs	r2, #80	@ 0x50
 80022a2:	2100      	movs	r1, #0
 80022a4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80022a6:	2317      	movs	r3, #23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b006      	add	sp, #24
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	fffffefd 	.word	0xfffffefd

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80022ca:	d809      	bhi.n	80022e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	231f      	movs	r3, #31
 80022d4:	401a      	ands	r2, r3
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <__NVIC_EnableIRQ+0x30>)
 80022d8:	2101      	movs	r1, #1
 80022da:	4091      	lsls	r1, r2
 80022dc:	000a      	movs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
  }
}
 80022e0:	46c0      	nop			@ (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	0002      	movs	r2, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002300:	d828      	bhi.n	8002354 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002302:	4a2f      	ldr	r2, [pc, #188]	@ (80023c0 <__NVIC_SetPriority+0xd4>)
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	33c0      	adds	r3, #192	@ 0xc0
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	589b      	ldr	r3, [r3, r2]
 8002312:	1dfa      	adds	r2, r7, #7
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	0011      	movs	r1, r2
 8002318:	2203      	movs	r2, #3
 800231a:	400a      	ands	r2, r1
 800231c:	00d2      	lsls	r2, r2, #3
 800231e:	21ff      	movs	r1, #255	@ 0xff
 8002320:	4091      	lsls	r1, r2
 8002322:	000a      	movs	r2, r1
 8002324:	43d2      	mvns	r2, r2
 8002326:	401a      	ands	r2, r3
 8002328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	22ff      	movs	r2, #255	@ 0xff
 8002330:	401a      	ands	r2, r3
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	0018      	movs	r0, r3
 8002338:	2303      	movs	r3, #3
 800233a:	4003      	ands	r3, r0
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002340:	481f      	ldr	r0, [pc, #124]	@ (80023c0 <__NVIC_SetPriority+0xd4>)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b25b      	sxtb	r3, r3
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	430a      	orrs	r2, r1
 800234c:	33c0      	adds	r3, #192	@ 0xc0
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002352:	e031      	b.n	80023b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002354:	4a1b      	ldr	r2, [pc, #108]	@ (80023c4 <__NVIC_SetPriority+0xd8>)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	0019      	movs	r1, r3
 800235c:	230f      	movs	r3, #15
 800235e:	400b      	ands	r3, r1
 8002360:	3b08      	subs	r3, #8
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3306      	adds	r3, #6
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	3304      	adds	r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1dfa      	adds	r2, r7, #7
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	0011      	movs	r1, r2
 8002374:	2203      	movs	r2, #3
 8002376:	400a      	ands	r2, r1
 8002378:	00d2      	lsls	r2, r2, #3
 800237a:	21ff      	movs	r1, #255	@ 0xff
 800237c:	4091      	lsls	r1, r2
 800237e:	000a      	movs	r2, r1
 8002380:	43d2      	mvns	r2, r2
 8002382:	401a      	ands	r2, r3
 8002384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	22ff      	movs	r2, #255	@ 0xff
 800238c:	401a      	ands	r2, r3
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	0018      	movs	r0, r3
 8002394:	2303      	movs	r3, #3
 8002396:	4003      	ands	r3, r0
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	4809      	ldr	r0, [pc, #36]	@ (80023c4 <__NVIC_SetPriority+0xd8>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	001c      	movs	r4, r3
 80023a4:	230f      	movs	r3, #15
 80023a6:	4023      	ands	r3, r4
 80023a8:	3b08      	subs	r3, #8
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	430a      	orrs	r2, r1
 80023ae:	3306      	adds	r3, #6
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	18c3      	adds	r3, r0, r3
 80023b4:	3304      	adds	r3, #4
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b003      	add	sp, #12
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	045b      	lsls	r3, r3, #17
 80023d8:	429a      	cmp	r2, r3
 80023da:	d301      	bcc.n	80023e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023dc:	2301      	movs	r3, #1
 80023de:	e010      	b.n	8002402 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <SysTick_Config+0x44>)
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	3a01      	subs	r2, #1
 80023e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e8:	2301      	movs	r3, #1
 80023ea:	425b      	negs	r3, r3
 80023ec:	2103      	movs	r1, #3
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7ff ff7c 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <SysTick_Config+0x44>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	@ (800240c <SysTick_Config+0x44>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	210f      	movs	r1, #15
 800241c:	187b      	adds	r3, r7, r1
 800241e:	1c02      	adds	r2, r0, #0
 8002420:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	187b      	adds	r3, r7, r1
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	0011      	movs	r1, r2
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	0002      	movs	r2, r0
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ff33 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff ffaf 	bl	80023c8 <SysTick_Config>
 800246a:	0003      	movs	r3, r0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e061      	b.n	800254a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a32      	ldr	r2, [pc, #200]	@ (8002554 <HAL_DMA_Init+0xe0>)
 800248c:	4694      	mov	ip, r2
 800248e:	4463      	add	r3, ip
 8002490:	2114      	movs	r1, #20
 8002492:	0018      	movs	r0, r3
 8002494:	f7fd fe38 	bl	8000108 <__udivsi3>
 8002498:	0003      	movs	r3, r0
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002558 <HAL_DMA_Init+0xe4>)
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2225      	movs	r2, #37	@ 0x25
 80024aa:	2102      	movs	r1, #2
 80024ac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a28      	ldr	r2, [pc, #160]	@ (800255c <HAL_DMA_Init+0xe8>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_DMA_Init+0xec>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	211c      	movs	r1, #28
 800250a:	400b      	ands	r3, r1
 800250c:	210f      	movs	r1, #15
 800250e:	4099      	lsls	r1, r3
 8002510:	000b      	movs	r3, r1
 8002512:	43d9      	mvns	r1, r3
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_DMA_Init+0xec>)
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_DMA_Init+0xec>)
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	201c      	movs	r0, #28
 8002528:	4003      	ands	r3, r0
 800252a:	409a      	lsls	r2, r3
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_DMA_Init+0xec>)
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2225      	movs	r2, #37	@ 0x25
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	@ 0x24
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	bffdfff8 	.word	0xbffdfff8
 8002558:	40020000 	.word	0x40020000
 800255c:	ffff800f 	.word	0xffff800f
 8002560:	400200a8 	.word	0x400200a8

08002564 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2317      	movs	r3, #23
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2224      	movs	r2, #36	@ 0x24
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_DMA_Start_IT+0x24>
 8002584:	2302      	movs	r3, #2
 8002586:	e04f      	b.n	8002628 <HAL_DMA_Start_IT+0xc4>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2224      	movs	r2, #36	@ 0x24
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2225      	movs	r2, #37	@ 0x25
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d13a      	bne.n	8002612 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2225      	movs	r2, #37	@ 0x25
 80025a0:	2102      	movs	r1, #2
 80025a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2101      	movs	r1, #1
 80025b6:	438a      	bics	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f96a 	bl	800289a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	210e      	movs	r1, #14
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e00f      	b.n	8002600 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2104      	movs	r1, #4
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	210a      	movs	r1, #10
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e007      	b.n	8002622 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2224      	movs	r2, #36	@ 0x24
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800261a:	2317      	movs	r3, #23
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002622:	2317      	movs	r3, #23
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b006      	add	sp, #24
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2225      	movs	r2, #37	@ 0x25
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d008      	beq.n	800265e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2204      	movs	r2, #4
 8002650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2224      	movs	r2, #36	@ 0x24
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e024      	b.n	80026a8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	210e      	movs	r1, #14
 800266a:	438a      	bics	r2, r1
 800266c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	438a      	bics	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	221c      	movs	r2, #28
 8002684:	401a      	ands	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	2101      	movs	r1, #1
 800268c:	4091      	lsls	r1, r2
 800268e:	000a      	movs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2225      	movs	r2, #37	@ 0x25
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2224      	movs	r2, #36	@ 0x24
 800269e:	2100      	movs	r1, #0
 80026a0:	5499      	strb	r1, [r3, r2]

    return status;
 80026a2:	230f      	movs	r3, #15
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	210f      	movs	r1, #15
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2225      	movs	r2, #37	@ 0x25
 80026c4:	5c9b      	ldrb	r3, [r3, r2]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d006      	beq.n	80026da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2204      	movs	r2, #4
 80026d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e02a      	b.n	8002730 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	210e      	movs	r1, #14
 80026e6:	438a      	bics	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	438a      	bics	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	221c      	movs	r2, #28
 8002700:	401a      	ands	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	2101      	movs	r1, #1
 8002708:	4091      	lsls	r1, r2
 800270a:	000a      	movs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2225      	movs	r2, #37	@ 0x25
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2224      	movs	r2, #36	@ 0x24
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	0010      	movs	r0, r2
 800272e:	4798      	blx	r3
    }
  }
  return status;
 8002730:	230f      	movs	r3, #15
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	221c      	movs	r2, #28
 800275c:	4013      	ands	r3, r2
 800275e:	2204      	movs	r2, #4
 8002760:	409a      	lsls	r2, r3
 8002762:	0013      	movs	r3, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	d026      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x7a>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2204      	movs	r2, #4
 800276e:	4013      	ands	r3, r2
 8002770:	d022      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d107      	bne.n	800278e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2104      	movs	r1, #4
 800278a:	438a      	bics	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	221c      	movs	r2, #28
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2104      	movs	r1, #4
 800279c:	4091      	lsls	r1, r2
 800279e:	000a      	movs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d100      	bne.n	80027ac <HAL_DMA_IRQHandler+0x6e>
 80027aa:	e071      	b.n	8002890 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	0010      	movs	r0, r2
 80027b4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80027b6:	e06b      	b.n	8002890 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	221c      	movs	r2, #28
 80027be:	4013      	ands	r3, r2
 80027c0:	2202      	movs	r2, #2
 80027c2:	409a      	lsls	r2, r3
 80027c4:	0013      	movs	r3, r2
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	d02d      	beq.n	8002828 <HAL_DMA_IRQHandler+0xea>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d029      	beq.n	8002828 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2220      	movs	r2, #32
 80027dc:	4013      	ands	r3, r2
 80027de:	d10b      	bne.n	80027f8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	210a      	movs	r1, #10
 80027ec:	438a      	bics	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2225      	movs	r2, #37	@ 0x25
 80027f4:	2101      	movs	r1, #1
 80027f6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	221c      	movs	r2, #28
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2102      	movs	r1, #2
 8002806:	4091      	lsls	r1, r2
 8002808:	000a      	movs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d039      	beq.n	8002890 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	0010      	movs	r0, r2
 8002824:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002826:	e033      	b.n	8002890 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	221c      	movs	r2, #28
 800282e:	4013      	ands	r3, r2
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	d02a      	beq.n	8002892 <HAL_DMA_IRQHandler+0x154>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	d026      	beq.n	8002892 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	210e      	movs	r1, #14
 8002850:	438a      	bics	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	221c      	movs	r2, #28
 800285a:	401a      	ands	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	2101      	movs	r1, #1
 8002862:	4091      	lsls	r1, r2
 8002864:	000a      	movs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2225      	movs	r2, #37	@ 0x25
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	@ 0x24
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	0010      	movs	r0, r2
 800288e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46c0      	nop			@ (mov r8, r8)
}
 8002894:	46bd      	mov	sp, r7
 8002896:	b004      	add	sp, #16
 8002898:	bd80      	pop	{r7, pc}

0800289a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	221c      	movs	r2, #28
 80028ae:	401a      	ands	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	2101      	movs	r1, #1
 80028b6:	4091      	lsls	r1, r2
 80028b8:	000a      	movs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d108      	bne.n	80028de <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028dc:	e007      	b.n	80028ee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	60da      	str	r2, [r3, #12]
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800290e:	e155      	b.n	8002bbc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4091      	lsls	r1, r2
 800291a:	000a      	movs	r2, r1
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d100      	bne.n	8002928 <HAL_GPIO_Init+0x30>
 8002926:	e146      	b.n	8002bb6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2203      	movs	r2, #3
 800292e:	4013      	ands	r3, r2
 8002930:	2b01      	cmp	r3, #1
 8002932:	d005      	beq.n	8002940 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2203      	movs	r2, #3
 800293a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800293c:	2b02      	cmp	r3, #2
 800293e:	d130      	bne.n	80029a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	409a      	lsls	r2, r3
 800294e:	0013      	movs	r3, r2
 8002950:	43da      	mvns	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	0013      	movs	r3, r2
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002976:	2201      	movs	r2, #1
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	43da      	mvns	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	2201      	movs	r2, #1
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2203      	movs	r2, #3
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d017      	beq.n	80029de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	409a      	lsls	r2, r3
 80029bc:	0013      	movs	r3, r2
 80029be:	43da      	mvns	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	409a      	lsls	r2, r3
 80029d0:	0013      	movs	r3, r2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2203      	movs	r2, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d123      	bne.n	8002a32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	0092      	lsls	r2, r2, #2
 80029f4:	58d3      	ldr	r3, [r2, r3]
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2207      	movs	r2, #7
 80029fc:	4013      	ands	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	43da      	mvns	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2107      	movs	r1, #7
 8002a16:	400b      	ands	r3, r1
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	6939      	ldr	r1, [r7, #16]
 8002a30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	43da      	mvns	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	401a      	ands	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	23c0      	movs	r3, #192	@ 0xc0
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d100      	bne.n	8002a74 <HAL_GPIO_Init+0x17c>
 8002a72:	e0a0      	b.n	8002bb6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a74:	4b57      	ldr	r3, [pc, #348]	@ (8002bd4 <HAL_GPIO_Init+0x2dc>)
 8002a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a78:	4b56      	ldr	r3, [pc, #344]	@ (8002bd4 <HAL_GPIO_Init+0x2dc>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a80:	4a55      	ldr	r2, [pc, #340]	@ (8002bd8 <HAL_GPIO_Init+0x2e0>)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	589b      	ldr	r3, [r3, r2]
 8002a8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2203      	movs	r2, #3
 8002a92:	4013      	ands	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	23a0      	movs	r3, #160	@ 0xa0
 8002aa8:	05db      	lsls	r3, r3, #23
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d01f      	beq.n	8002aee <HAL_GPIO_Init+0x1f6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_GPIO_Init+0x2e4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x1f2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a49      	ldr	r2, [pc, #292]	@ (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a48      	ldr	r2, [pc, #288]	@ (8002be4 <HAL_GPIO_Init+0x2ec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x1ea>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a47      	ldr	r2, [pc, #284]	@ (8002be8 <HAL_GPIO_Init+0x2f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x1e6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a46      	ldr	r2, [pc, #280]	@ (8002bec <HAL_GPIO_Init+0x2f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x1e2>
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	e00a      	b.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002ada:	2306      	movs	r3, #6
 8002adc:	e008      	b.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002ade:	2304      	movs	r3, #4
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e004      	b.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e002      	b.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002aee:	2300      	movs	r3, #0
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	2103      	movs	r1, #3
 8002af4:	400a      	ands	r2, r1
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	4093      	lsls	r3, r2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b00:	4935      	ldr	r1, [pc, #212]	@ (8002bd8 <HAL_GPIO_Init+0x2e0>)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b0e:	4b38      	ldr	r3, [pc, #224]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	035b      	lsls	r3, r3, #13
 8002b26:	4013      	ands	r3, r2
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b32:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	039b      	lsls	r3, r3, #14
 8002b50:	4013      	ands	r3, r2
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002b62:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	40da      	lsrs	r2, r3
 8002bc4:	1e13      	subs	r3, r2, #0
 8002bc6:	d000      	beq.n	8002bca <HAL_GPIO_Init+0x2d2>
 8002bc8:	e6a2      	b.n	8002910 <HAL_GPIO_Init+0x18>
  }
}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	46c0      	nop			@ (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b006      	add	sp, #24
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	50000400 	.word	0x50000400
 8002be0:	50000800 	.word	0x50000800
 8002be4:	50000c00 	.word	0x50000c00
 8002be8:	50001000 	.word	0x50001000
 8002bec:	50001c00 	.word	0x50001c00
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	1cba      	adds	r2, r7, #2
 8002c08:	8812      	ldrh	r2, [r2, #0]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0e:	230f      	movs	r3, #15
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c18:	230f      	movs	r3, #15
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	0008      	movs	r0, r1
 8002c38:	0011      	movs	r1, r2
 8002c3a:	1cbb      	adds	r3, r7, #2
 8002c3c:	1c02      	adds	r2, r0, #0
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	1c7b      	adds	r3, r7, #1
 8002c42:	1c0a      	adds	r2, r1, #0
 8002c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c46:	1c7b      	adds	r3, r7, #1
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	1cbb      	adds	r3, r7, #2
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c56:	e003      	b.n	8002c60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c58:	1cbb      	adds	r3, r7, #2
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	0002      	movs	r2, r0
 8002c70:	1dbb      	adds	r3, r7, #6
 8002c72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	1dba      	adds	r2, r7, #6
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d008      	beq.n	8002c92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c82:	1dba      	adds	r2, r7, #6
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fd ff85 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 fbbf 	bl	8003432 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb4:	4bc9      	ldr	r3, [pc, #804]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	220c      	movs	r2, #12
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbe:	4bc7      	ldr	r3, [pc, #796]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	025b      	lsls	r3, r3, #9
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x36>
 8002cd4:	e07e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d007      	beq.n	8002cec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x68>
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4bbb      	ldr	r3, [pc, #748]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	029b      	lsls	r3, r3, #10
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5a>
 8002cf8:	e06b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x132>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d167      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f000 fb95 	bl	8003432 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	025b      	lsls	r3, r3, #9
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x84>
 8002d14:	4bb1      	ldr	r3, [pc, #708]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4bb0      	ldr	r3, [pc, #704]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	0249      	lsls	r1, r1, #9
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e027      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	23a0      	movs	r3, #160	@ 0xa0
 8002d2a:	02db      	lsls	r3, r3, #11
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10e      	bne.n	8002d4e <HAL_RCC_OscConfig+0xae>
 8002d30:	4baa      	ldr	r3, [pc, #680]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4ba9      	ldr	r3, [pc, #676]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	02c9      	lsls	r1, r1, #11
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4ba6      	ldr	r3, [pc, #664]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	0249      	lsls	r1, r1, #9
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e012      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d4e:	4ba3      	ldr	r3, [pc, #652]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4ba2      	ldr	r3, [pc, #648]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d54:	49a2      	ldr	r1, [pc, #648]	@ (8002fe0 <HAL_RCC_OscConfig+0x340>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	4ba0      	ldr	r3, [pc, #640]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4b9c      	ldr	r3, [pc, #624]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b9b      	ldr	r3, [pc, #620]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d6e:	499d      	ldr	r1, [pc, #628]	@ (8002fe4 <HAL_RCC_OscConfig+0x344>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fe5c 	bl	8001a38 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d84:	e009      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d86:	f7fe fe57 	bl	8001a38 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	@ 0x64
 8002d92:	d902      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	f000 fb4c 	bl	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d9a:	4b90      	ldr	r3, [pc, #576]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	4013      	ands	r3, r2
 8002da4:	d0ef      	beq.n	8002d86 <HAL_RCC_OscConfig+0xe6>
 8002da6:	e015      	b.n	8002dd4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe46 	bl	8001a38 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db2:	f7fe fe41 	bl	8001a38 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	@ 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e336      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc4:	4b85      	ldr	r3, [pc, #532]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x112>
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d100      	bne.n	8002de0 <HAL_RCC_OscConfig+0x140>
 8002dde:	e099      	b.n	8002f14 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	2220      	movs	r2, #32
 8002dea:	4013      	ands	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002dee:	4b7b      	ldr	r3, [pc, #492]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002df4:	2120      	movs	r1, #32
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	4393      	bics	r3, r2
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d13e      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13b      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e14:	4b71      	ldr	r3, [pc, #452]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_RCC_OscConfig+0x188>
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e304      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b6c      	ldr	r3, [pc, #432]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe8 <HAL_RCC_OscConfig+0x348>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	4b68      	ldr	r3, [pc, #416]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e3e:	4b67      	ldr	r3, [pc, #412]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2209      	movs	r2, #9
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	4b64      	ldr	r3, [pc, #400]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e50:	f000 fc42 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8002e54:	0001      	movs	r1, r0
 8002e56:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	4013      	ands	r3, r2
 8002e60:	4a62      	ldr	r2, [pc, #392]	@ (8002fec <HAL_RCC_OscConfig+0x34c>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	000a      	movs	r2, r1
 8002e66:	40da      	lsrs	r2, r3
 8002e68:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <HAL_RCC_OscConfig+0x350>)
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <HAL_RCC_OscConfig+0x354>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2513      	movs	r5, #19
 8002e72:	197c      	adds	r4, r7, r5
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7fe fd99 	bl	80019ac <HAL_InitTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e7e:	197b      	adds	r3, r7, r5
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d046      	beq.n	8002f14 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002e86:	197b      	adds	r3, r7, r5
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	e2d2      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d027      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e92:	4b52      	ldr	r3, [pc, #328]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2209      	movs	r2, #9
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fdc8 	bl	8001a38 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fdc3 	bl	8001a38 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e2b8      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec0:	4b46      	ldr	r3, [pc, #280]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d0f1      	beq.n	8002eae <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a46      	ldr	r2, [pc, #280]	@ (8002fe8 <HAL_RCC_OscConfig+0x348>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	e018      	b.n	8002f14 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	438a      	bics	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe fda3 	bl	8001a38 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fd9e 	bl	8001a38 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e293      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	4013      	ands	r3, r2
 8002f12:	d1f1      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d100      	bne.n	8002f20 <HAL_RCC_OscConfig+0x280>
 8002f1e:	e0a2      	b.n	8003066 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d140      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x29e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e279      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3e:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <HAL_RCC_OscConfig+0x358>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4c:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	0a19      	lsrs	r1, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	061a      	lsls	r2, r3, #24
 8002f60:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	2280      	movs	r2, #128	@ 0x80
 8002f70:	0212      	lsls	r2, r2, #8
 8002f72:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	491b      	ldr	r1, [pc, #108]	@ (8002fec <HAL_RCC_OscConfig+0x34c>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_RCC_OscConfig+0x350>)
 8002f86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <HAL_RCC_OscConfig+0x354>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2513      	movs	r5, #19
 8002f8e:	197c      	adds	r4, r7, r5
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fe fd0b 	bl	80019ac <HAL_InitTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f9a:	197b      	adds	r3, r7, r5
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d061      	beq.n	8003066 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002fa2:	197b      	adds	r3, r7, r5
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	e244      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d040      	beq.n	8003032 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b09      	ldr	r3, [pc, #36]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002fb6:	2180      	movs	r1, #128	@ 0x80
 8002fb8:	0049      	lsls	r1, r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fd3b 	bl	8001a38 <HAL_GetTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc6:	e019      	b.n	8002ffc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fd36 	bl	8001a38 <HAL_GetTick>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d912      	bls.n	8002ffc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e22b      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	fffeffff 	.word	0xfffeffff
 8002fe4:	fffbffff 	.word	0xfffbffff
 8002fe8:	ffffe0ff 	.word	0xffffe0ff
 8002fec:	08005ff0 	.word	0x08005ff0
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	20000008 	.word	0x20000008
 8002ff8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ffc:	4bca      	ldr	r3, [pc, #808]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d0df      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4bc7      	ldr	r3, [pc, #796]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4ac7      	ldr	r2, [pc, #796]	@ (800332c <HAL_RCC_OscConfig+0x68c>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003016:	4bc4      	ldr	r3, [pc, #784]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301c:	4bc2      	ldr	r3, [pc, #776]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	0a19      	lsrs	r1, r3, #8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	061a      	lsls	r2, r3, #24
 800302a:	4bbf      	ldr	r3, [pc, #764]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	e019      	b.n	8003066 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003032:	4bbd      	ldr	r3, [pc, #756]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4bbc      	ldr	r3, [pc, #752]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003038:	49bd      	ldr	r1, [pc, #756]	@ (8003330 <HAL_RCC_OscConfig+0x690>)
 800303a:	400a      	ands	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe fcfb 	bl	8001a38 <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003048:	f7fe fcf6 	bl	8001a38 <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1eb      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800305a:	4bb3      	ldr	r3, [pc, #716]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4013      	ands	r3, r2
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2208      	movs	r2, #8
 800306c:	4013      	ands	r3, r2
 800306e:	d036      	beq.n	80030de <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d019      	beq.n	80030ac <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4bab      	ldr	r3, [pc, #684]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800307a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800307c:	4baa      	ldr	r3, [pc, #680]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800307e:	2101      	movs	r1, #1
 8003080:	430a      	orrs	r2, r1
 8003082:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe fcd8 	bl	8001a38 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe fcd3 	bl	8001a38 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1c8      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030a0:	4ba1      	ldr	r3, [pc, #644]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80030a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d0f1      	beq.n	800308e <HAL_RCC_OscConfig+0x3ee>
 80030aa:	e018      	b.n	80030de <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4b9e      	ldr	r3, [pc, #632]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80030ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	438a      	bics	r2, r1
 80030b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7fe fcbe 	bl	8001a38 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fe fcb9 	bl	8001a38 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1ae      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030d4:	4b94      	ldr	r3, [pc, #592]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d1f1      	bne.n	80030c2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_OscConfig+0x44a>
 80030e8:	e0ae      	b.n	8003248 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2023      	movs	r0, #35	@ 0x23
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80030f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030f6:	2380      	movs	r3, #128	@ 0x80
 80030f8:	055b      	lsls	r3, r3, #21
 80030fa:	4013      	ands	r3, r2
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b8a      	ldr	r3, [pc, #552]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003102:	4b89      	ldr	r3, [pc, #548]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	0549      	lsls	r1, r1, #21
 8003108:	430a      	orrs	r2, r1
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800310c:	183b      	adds	r3, r7, r0
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b88      	ldr	r3, [pc, #544]	@ (8003334 <HAL_RCC_OscConfig+0x694>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4013      	ands	r3, r2
 800311c:	d11a      	bne.n	8003154 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b85      	ldr	r3, [pc, #532]	@ (8003334 <HAL_RCC_OscConfig+0x694>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b84      	ldr	r3, [pc, #528]	@ (8003334 <HAL_RCC_OscConfig+0x694>)
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	0049      	lsls	r1, r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312c:	f7fe fc84 	bl	8001a38 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fc7f 	bl	8001a38 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	@ 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e174      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b7a      	ldr	r3, [pc, #488]	@ (8003334 <HAL_RCC_OscConfig+0x694>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	429a      	cmp	r2, r3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x4d0>
 8003160:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003162:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003164:	4b70      	ldr	r3, [pc, #448]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	0049      	lsls	r1, r1, #1
 800316a:	430a      	orrs	r2, r1
 800316c:	651a      	str	r2, [r3, #80]	@ 0x50
 800316e:	e031      	b.n	80031d4 <HAL_RCC_OscConfig+0x534>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x4f2>
 8003178:	4b6b      	ldr	r3, [pc, #428]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800317a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800317c:	4b6a      	ldr	r3, [pc, #424]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800317e:	496c      	ldr	r1, [pc, #432]	@ (8003330 <HAL_RCC_OscConfig+0x690>)
 8003180:	400a      	ands	r2, r1
 8003182:	651a      	str	r2, [r3, #80]	@ 0x50
 8003184:	4b68      	ldr	r3, [pc, #416]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003188:	4b67      	ldr	r3, [pc, #412]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800318a:	496b      	ldr	r1, [pc, #428]	@ (8003338 <HAL_RCC_OscConfig+0x698>)
 800318c:	400a      	ands	r2, r1
 800318e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003190:	e020      	b.n	80031d4 <HAL_RCC_OscConfig+0x534>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	23a0      	movs	r3, #160	@ 0xa0
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	429a      	cmp	r2, r3
 800319c:	d10e      	bne.n	80031bc <HAL_RCC_OscConfig+0x51c>
 800319e:	4b62      	ldr	r3, [pc, #392]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031a2:	4b61      	ldr	r3, [pc, #388]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031a4:	2180      	movs	r1, #128	@ 0x80
 80031a6:	00c9      	lsls	r1, r1, #3
 80031a8:	430a      	orrs	r2, r1
 80031aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80031ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031b2:	2180      	movs	r1, #128	@ 0x80
 80031b4:	0049      	lsls	r1, r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x534>
 80031bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031c0:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031c2:	495b      	ldr	r1, [pc, #364]	@ (8003330 <HAL_RCC_OscConfig+0x690>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031c8:	4b57      	ldr	r3, [pc, #348]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031cc:	4b56      	ldr	r3, [pc, #344]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031ce:	495a      	ldr	r1, [pc, #360]	@ (8003338 <HAL_RCC_OscConfig+0x698>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7fe fc2c 	bl	8001a38 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e4:	e009      	b.n	80031fa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe fc27 	bl	8001a38 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a52      	ldr	r2, [pc, #328]	@ (800333c <HAL_RCC_OscConfig+0x69c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e11b      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d0ef      	beq.n	80031e6 <HAL_RCC_OscConfig+0x546>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe fc16 	bl	8001a38 <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003210:	e009      	b.n	8003226 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe fc11 	bl	8001a38 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a47      	ldr	r2, [pc, #284]	@ (800333c <HAL_RCC_OscConfig+0x69c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e105      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003226:	4b40      	ldr	r3, [pc, #256]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	d1ef      	bne.n	8003212 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003232:	2323      	movs	r3, #35	@ 0x23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800323e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003240:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003242:	493f      	ldr	r1, [pc, #252]	@ (8003340 <HAL_RCC_OscConfig+0x6a0>)
 8003244:	400a      	ands	r2, r1
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2220      	movs	r2, #32
 800324e:	4013      	ands	r3, r2
 8003250:	d049      	beq.n	80032e6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d026      	beq.n	80032a8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800325a:	4b33      	ldr	r3, [pc, #204]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	4b32      	ldr	r3, [pc, #200]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003260:	2101      	movs	r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800326a:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800326c:	2101      	movs	r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	635a      	str	r2, [r3, #52]	@ 0x34
 8003272:	4b34      	ldr	r3, [pc, #208]	@ (8003344 <HAL_RCC_OscConfig+0x6a4>)
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	4b33      	ldr	r3, [pc, #204]	@ (8003344 <HAL_RCC_OscConfig+0x6a4>)
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	0189      	lsls	r1, r1, #6
 800327c:	430a      	orrs	r2, r1
 800327e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fbda 	bl	8001a38 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328a:	f7fe fbd5 	bl	8001a38 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0ca      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800329c:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d0f1      	beq.n	800328a <HAL_RCC_OscConfig+0x5ea>
 80032a6:	e01e      	b.n	80032e6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80032a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	438a      	bics	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <HAL_RCC_OscConfig+0x6a4>)
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <HAL_RCC_OscConfig+0x6a4>)
 80032ba:	4923      	ldr	r1, [pc, #140]	@ (8003348 <HAL_RCC_OscConfig+0x6a8>)
 80032bc:	400a      	ands	r2, r1
 80032be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fbba 	bl	8001a38 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ca:	f7fe fbb5 	bl	8001a38 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0aa      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032dc:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1f1      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d100      	bne.n	80032f0 <HAL_RCC_OscConfig+0x650>
 80032ee:	e09f      	b.n	8003430 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d100      	bne.n	80032f8 <HAL_RCC_OscConfig+0x658>
 80032f6:	e078      	b.n	80033ea <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d159      	bne.n	80033b4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b08      	ldr	r3, [pc, #32]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003306:	4911      	ldr	r1, [pc, #68]	@ (800334c <HAL_RCC_OscConfig+0x6ac>)
 8003308:	400a      	ands	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe fb94 	bl	8001a38 <HAL_GetTick>
 8003310:	0003      	movs	r3, r0
 8003312:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003314:	e01c      	b.n	8003350 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fe fb8f 	bl	8001a38 <HAL_GetTick>
 800331a:	0002      	movs	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d915      	bls.n	8003350 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e084      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
 8003328:	40021000 	.word	0x40021000
 800332c:	ffff1fff 	.word	0xffff1fff
 8003330:	fffffeff 	.word	0xfffffeff
 8003334:	40007000 	.word	0x40007000
 8003338:	fffffbff 	.word	0xfffffbff
 800333c:	00001388 	.word	0x00001388
 8003340:	efffffff 	.word	0xefffffff
 8003344:	40010000 	.word	0x40010000
 8003348:	ffffdfff 	.word	0xffffdfff
 800334c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003350:	4b3a      	ldr	r3, [pc, #232]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	049b      	lsls	r3, r3, #18
 8003358:	4013      	ands	r3, r2
 800335a:	d1dc      	bne.n	8003316 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335c:	4b37      	ldr	r3, [pc, #220]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a37      	ldr	r2, [pc, #220]	@ (8003440 <HAL_RCC_OscConfig+0x7a0>)
 8003362:	4013      	ands	r3, r2
 8003364:	0019      	movs	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003374:	431a      	orrs	r2, r3
 8003376:	4b31      	ldr	r3, [pc, #196]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 8003378:	430a      	orrs	r2, r1
 800337a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b2f      	ldr	r3, [pc, #188]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b2e      	ldr	r3, [pc, #184]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 8003382:	2180      	movs	r1, #128	@ 0x80
 8003384:	0449      	lsls	r1, r1, #17
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe fb55 	bl	8001a38 <HAL_GetTick>
 800338e:	0003      	movs	r3, r0
 8003390:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fb50 	bl	8001a38 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e045      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033a6:	4b25      	ldr	r3, [pc, #148]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	049b      	lsls	r3, r3, #18
 80033ae:	4013      	ands	r3, r2
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x6f4>
 80033b2:	e03d      	b.n	8003430 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b4:	4b21      	ldr	r3, [pc, #132]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b20      	ldr	r3, [pc, #128]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 80033ba:	4922      	ldr	r1, [pc, #136]	@ (8003444 <HAL_RCC_OscConfig+0x7a4>)
 80033bc:	400a      	ands	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fb3a 	bl	8001a38 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fb35 	bl	8001a38 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e02a      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033dc:	4b17      	ldr	r3, [pc, #92]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	049b      	lsls	r3, r3, #18
 80033e4:	4013      	ands	r3, r2
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x72a>
 80033e8:	e022      	b.n	8003430 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e01d      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f6:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_RCC_OscConfig+0x79c>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	025b      	lsls	r3, r3, #9
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	429a      	cmp	r2, r3
 800340a:	d10f      	bne.n	800342c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	23f0      	movs	r3, #240	@ 0xf0
 8003410:	039b      	lsls	r3, r3, #14
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	23c0      	movs	r3, #192	@ 0xc0
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	401a      	ands	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b00a      	add	sp, #40	@ 0x28
 8003438:	bdb0      	pop	{r4, r5, r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	40021000 	.word	0x40021000
 8003440:	ff02ffff 	.word	0xff02ffff
 8003444:	feffffff 	.word	0xfeffffff

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b5b0      	push	{r4, r5, r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e128      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b96      	ldr	r3, [pc, #600]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d91e      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b93      	ldr	r3, [pc, #588]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	4393      	bics	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	4b90      	ldr	r3, [pc, #576]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800347c:	f7fe fadc 	bl	8001a38 <HAL_GetTick>
 8003480:	0003      	movs	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003484:	e009      	b.n	800349a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003486:	f7fe fad7 	bl	8001a38 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	4a8a      	ldr	r2, [pc, #552]	@ (80036bc <HAL_RCC_ClockConfig+0x274>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e109      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b87      	ldr	r3, [pc, #540]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2202      	movs	r2, #2
 80034ae:	4013      	ands	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b2:	4b83      	ldr	r3, [pc, #524]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	22f0      	movs	r2, #240	@ 0xf0
 80034b8:	4393      	bics	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b7f      	ldr	r3, [pc, #508]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 80034c2:	430a      	orrs	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d100      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
 80034d0:	e089      	b.n	80035e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034da:	4b79      	ldr	r3, [pc, #484]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	029b      	lsls	r3, r3, #10
 80034e2:	4013      	ands	r3, r2
 80034e4:	d120      	bne.n	8003528 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0e1      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f2:	4b73      	ldr	r3, [pc, #460]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	049b      	lsls	r3, r3, #18
 80034fa:	4013      	ands	r3, r2
 80034fc:	d114      	bne.n	8003528 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0d5      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d106      	bne.n	8003518 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350a:	4b6d      	ldr	r3, [pc, #436]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d109      	bne.n	8003528 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0ca      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003518:	4b69      	ldr	r3, [pc, #420]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	@ 0x80
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0c2      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003528:	4b65      	ldr	r3, [pc, #404]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2203      	movs	r2, #3
 800352e:	4393      	bics	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4b62      	ldr	r3, [pc, #392]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800353c:	f7fe fa7c 	bl	8001a38 <HAL_GetTick>
 8003540:	0003      	movs	r3, r0
 8003542:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d111      	bne.n	8003570 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800354c:	e009      	b.n	8003562 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7fe fa73 	bl	8001a38 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	4a58      	ldr	r2, [pc, #352]	@ (80036bc <HAL_RCC_ClockConfig+0x274>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0a5      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003562:	4b57      	ldr	r3, [pc, #348]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	220c      	movs	r2, #12
 8003568:	4013      	ands	r3, r2
 800356a:	2b08      	cmp	r3, #8
 800356c:	d1ef      	bne.n	800354e <HAL_RCC_ClockConfig+0x106>
 800356e:	e03a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d111      	bne.n	800359c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003578:	e009      	b.n	800358e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357a:	f7fe fa5d 	bl	8001a38 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	4a4d      	ldr	r2, [pc, #308]	@ (80036bc <HAL_RCC_ClockConfig+0x274>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e08f      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358e:	4b4c      	ldr	r3, [pc, #304]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	220c      	movs	r2, #12
 8003594:	4013      	ands	r3, r2
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d1ef      	bne.n	800357a <HAL_RCC_ClockConfig+0x132>
 800359a:	e024      	b.n	80035e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d11b      	bne.n	80035dc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a4:	e009      	b.n	80035ba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	f7fe fa47 	bl	8001a38 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <HAL_RCC_ClockConfig+0x274>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e079      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	220c      	movs	r2, #12
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d1ef      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x15e>
 80035c6:	e00e      	b.n	80035e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fe fa36 	bl	8001a38 <HAL_GetTick>
 80035cc:	0002      	movs	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	4a3a      	ldr	r2, [pc, #232]	@ (80036bc <HAL_RCC_ClockConfig+0x274>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e068      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035dc:	4b38      	ldr	r3, [pc, #224]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	220c      	movs	r2, #12
 80035e2:	4013      	ands	r3, r2
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e6:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	4013      	ands	r3, r2
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d21e      	bcs.n	8003632 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f4:	4b30      	ldr	r3, [pc, #192]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4393      	bics	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	4b2e      	ldr	r3, [pc, #184]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003606:	f7fe fa17 	bl	8001a38 <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	e009      	b.n	8003624 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fe fa12 	bl	8001a38 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <HAL_RCC_ClockConfig+0x274>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e044      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003624:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <HAL_RCC_ClockConfig+0x270>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2201      	movs	r2, #1
 800362a:	4013      	ands	r3, r2
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d1ee      	bne.n	8003610 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2204      	movs	r2, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d009      	beq.n	8003650 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a20      	ldr	r2, [pc, #128]	@ (80036c4 <HAL_RCC_ClockConfig+0x27c>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2208      	movs	r2, #8
 8003656:	4013      	ands	r3, r2
 8003658:	d00a      	beq.n	8003670 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365a:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_RCC_ClockConfig+0x280>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00da      	lsls	r2, r3, #3
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800366c:	430a      	orrs	r2, r1
 800366e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003670:	f000 f832 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003674:	0001      	movs	r1, r0
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	220f      	movs	r2, #15
 800367e:	4013      	ands	r3, r2
 8003680:	4a12      	ldr	r2, [pc, #72]	@ (80036cc <HAL_RCC_ClockConfig+0x284>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	000a      	movs	r2, r1
 8003686:	40da      	lsrs	r2, r3
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <HAL_RCC_ClockConfig+0x288>)
 800368a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_ClockConfig+0x28c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	250b      	movs	r5, #11
 8003692:	197c      	adds	r4, r7, r5
 8003694:	0018      	movs	r0, r3
 8003696:	f7fe f989 	bl	80019ac <HAL_InitTick>
 800369a:	0003      	movs	r3, r0
 800369c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800369e:	197b      	adds	r3, r7, r5
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80036a6:	197b      	adds	r3, r7, r5
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	e000      	b.n	80036ae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bdb0      	pop	{r4, r5, r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	40022000 	.word	0x40022000
 80036bc:	00001388 	.word	0x00001388
 80036c0:	40021000 	.word	0x40021000
 80036c4:	fffff8ff 	.word	0xfffff8ff
 80036c8:	ffffc7ff 	.word	0xffffc7ff
 80036cc:	08005ff0 	.word	0x08005ff0
 80036d0:	20000004 	.word	0x20000004
 80036d4:	20000008 	.word	0x20000008

080036d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80036de:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	220c      	movs	r2, #12
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d013      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x3e>
 80036ee:	d85c      	bhi.n	80037aa <HAL_RCC_GetSysClockFreq+0xd2>
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d002      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x22>
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00b      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x38>
 80036f8:	e057      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036fa:	4b35      	ldr	r3, [pc, #212]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2210      	movs	r2, #16
 8003700:	4013      	ands	r3, r2
 8003702:	d002      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003704:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003706:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003708:	e05d      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800370a:	4b33      	ldr	r3, [pc, #204]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x100>)
 800370c:	613b      	str	r3, [r7, #16]
      break;
 800370e:	e05a      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003710:	4b32      	ldr	r3, [pc, #200]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003712:	613b      	str	r3, [r7, #16]
      break;
 8003714:	e057      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	0c9b      	lsrs	r3, r3, #18
 800371a:	220f      	movs	r2, #15
 800371c:	4013      	ands	r3, r2
 800371e:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	0d9b      	lsrs	r3, r3, #22
 8003728:	2203      	movs	r2, #3
 800372a:	4013      	ands	r3, r2
 800372c:	3301      	adds	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003730:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	2380      	movs	r3, #128	@ 0x80
 8003736:	025b      	lsls	r3, r3, #9
 8003738:	4013      	ands	r3, r2
 800373a:	d00f      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	000a      	movs	r2, r1
 8003740:	0152      	lsls	r2, r2, #5
 8003742:	1a52      	subs	r2, r2, r1
 8003744:	0193      	lsls	r3, r2, #6
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	185b      	adds	r3, r3, r1
 800374c:	025b      	lsls	r3, r3, #9
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f7fc fcd9 	bl	8000108 <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e023      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800375c:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2210      	movs	r2, #16
 8003762:	4013      	ands	r3, r2
 8003764:	d00f      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	000a      	movs	r2, r1
 800376a:	0152      	lsls	r2, r2, #5
 800376c:	1a52      	subs	r2, r2, r1
 800376e:	0193      	lsls	r3, r2, #6
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	185b      	adds	r3, r3, r1
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	0018      	movs	r0, r3
 800377c:	f7fc fcc4 	bl	8000108 <__udivsi3>
 8003780:	0003      	movs	r3, r0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e00e      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	000a      	movs	r2, r1
 800378a:	0152      	lsls	r2, r2, #5
 800378c:	1a52      	subs	r2, r2, r1
 800378e:	0193      	lsls	r3, r2, #6
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	185b      	adds	r3, r3, r1
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f7fc fcb4 	bl	8000108 <__udivsi3>
 80037a0:	0003      	movs	r3, r0
 80037a2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
      break;
 80037a8:	e00d      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0b5b      	lsrs	r3, r3, #13
 80037b0:	2207      	movs	r2, #7
 80037b2:	4013      	ands	r3, r2
 80037b4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	2280      	movs	r2, #128	@ 0x80
 80037bc:	0212      	lsls	r2, r2, #8
 80037be:	409a      	lsls	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
      break;
 80037c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037c6:	693b      	ldr	r3, [r7, #16]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b006      	add	sp, #24
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	003d0900 	.word	0x003d0900
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200
 80037e0:	08006008 	.word	0x08006008

080037e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e8:	4b02      	ldr	r3, [pc, #8]	@ (80037f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037fc:	f7ff fff2 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003800:	0001      	movs	r1, r0
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	2207      	movs	r2, #7
 800380a:	4013      	ands	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	40d9      	lsrs	r1, r3
 8003812:	000b      	movs	r3, r1
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	40021000 	.word	0x40021000
 8003820:	08006000 	.word	0x08006000

08003824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003828:	f7ff ffdc 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 800382c:	0001      	movs	r1, r0
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	0adb      	lsrs	r3, r3, #11
 8003834:	2207      	movs	r2, #7
 8003836:	4013      	ands	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x28>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	40d9      	lsrs	r1, r3
 800383e:	000b      	movs	r3, r1
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	40021000 	.word	0x40021000
 800384c:	08006000 	.word	0x08006000

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003858:	2317      	movs	r3, #23
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2220      	movs	r2, #32
 8003866:	4013      	ands	r3, r2
 8003868:	d106      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003876:	e104      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003878:	4bb9      	ldr	r3, [pc, #740]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800387a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	055b      	lsls	r3, r3, #21
 8003880:	4013      	ands	r3, r2
 8003882:	d10a      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4bb6      	ldr	r3, [pc, #728]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003888:	4bb5      	ldr	r3, [pc, #724]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800388a:	2180      	movs	r1, #128	@ 0x80
 800388c:	0549      	lsls	r1, r1, #21
 800388e:	430a      	orrs	r2, r1
 8003890:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003892:	2317      	movs	r3, #23
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4bb2      	ldr	r3, [pc, #712]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d11a      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4baf      	ldr	r3, [pc, #700]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4bae      	ldr	r3, [pc, #696]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038ac:	2180      	movs	r1, #128	@ 0x80
 80038ae:	0049      	lsls	r1, r1, #1
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b4:	f7fe f8c0 	bl	8001a38 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fe f8bb 	bl	8001a38 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	@ 0x64
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e143      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4ba4      	ldr	r3, [pc, #656]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	@ 0x80
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	d0f0      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80038dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	23c0      	movs	r3, #192	@ 0xc0
 80038e2:	039b      	lsls	r3, r3, #14
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	039b      	lsls	r3, r3, #14
 80038f0:	4013      	ands	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	23c0      	movs	r3, #192	@ 0xc0
 80038fe:	039b      	lsls	r3, r3, #14
 8003900:	4013      	ands	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	429a      	cmp	r2, r3
 8003906:	d013      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	23c0      	movs	r3, #192	@ 0xc0
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	401a      	ands	r2, r3
 8003912:	23c0      	movs	r3, #192	@ 0xc0
 8003914:	029b      	lsls	r3, r3, #10
 8003916:	429a      	cmp	r2, r3
 8003918:	d10a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800391a:	4b91      	ldr	r3, [pc, #580]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	401a      	ands	r2, r3
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	429a      	cmp	r2, r3
 800392a:	d101      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e113      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003930:	4b8b      	ldr	r3, [pc, #556]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003934:	23c0      	movs	r3, #192	@ 0xc0
 8003936:	029b      	lsls	r3, r3, #10
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d049      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	23c0      	movs	r3, #192	@ 0xc0
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4013      	ands	r3, r2
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	d004      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2220      	movs	r2, #32
 8003958:	4013      	ands	r3, r2
 800395a:	d10d      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	23c0      	movs	r3, #192	@ 0xc0
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	4013      	ands	r3, r2
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d034      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	4013      	ands	r3, r2
 8003976:	d02e      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003978:	4b79      	ldr	r3, [pc, #484]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800397a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397c:	4a7a      	ldr	r2, [pc, #488]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800397e:	4013      	ands	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003982:	4b77      	ldr	r3, [pc, #476]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003984:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003986:	4b76      	ldr	r3, [pc, #472]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003988:	2180      	movs	r1, #128	@ 0x80
 800398a:	0309      	lsls	r1, r1, #12
 800398c:	430a      	orrs	r2, r1
 800398e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003990:	4b73      	ldr	r3, [pc, #460]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003992:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003994:	4b72      	ldr	r3, [pc, #456]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003996:	4975      	ldr	r1, [pc, #468]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003998:	400a      	ands	r2, r1
 800399a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800399c:	4b70      	ldr	r3, [pc, #448]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4013      	ands	r3, r2
 80039aa:	d014      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe f844 	bl	8001a38 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b4:	e009      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe f83f 	bl	8001a38 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0c6      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4013      	ands	r3, r2
 80039d4:	d0ef      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4013      	ands	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	23c0      	movs	r3, #192	@ 0xc0
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	401a      	ands	r2, r3
 80039ec:	23c0      	movs	r3, #192	@ 0xc0
 80039ee:	029b      	lsls	r3, r3, #10
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80039f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	23c0      	movs	r3, #192	@ 0xc0
 8003a04:	039b      	lsls	r3, r3, #14
 8003a06:	401a      	ands	r2, r3
 8003a08:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4b54      	ldr	r3, [pc, #336]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	23c0      	movs	r3, #192	@ 0xc0
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	4b50      	ldr	r3, [pc, #320]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d01f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	23c0      	movs	r3, #192	@ 0xc0
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	401a      	ands	r2, r3
 8003a36:	23c0      	movs	r3, #192	@ 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003a3e:	4b48      	ldr	r3, [pc, #288]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a4c      	ldr	r2, [pc, #304]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	23c0      	movs	r3, #192	@ 0xc0
 8003a4e:	039b      	lsls	r3, r3, #14
 8003a50:	401a      	ands	r2, r3
 8003a52:	4b43      	ldr	r3, [pc, #268]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b41      	ldr	r3, [pc, #260]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a5a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	23c0      	movs	r3, #192	@ 0xc0
 8003a62:	029b      	lsls	r3, r3, #10
 8003a64:	401a      	ands	r2, r3
 8003a66:	4b3e      	ldr	r3, [pc, #248]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a6c:	2317      	movs	r3, #23
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a76:	4b3a      	ldr	r3, [pc, #232]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a7a:	4b39      	ldr	r3, [pc, #228]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a7c:	493e      	ldr	r1, [pc, #248]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8c:	4b34      	ldr	r3, [pc, #208]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a90:	2203      	movs	r2, #3
 8003a92:	4393      	bics	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	4b31      	ldr	r3, [pc, #196]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aae:	220c      	movs	r2, #12
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	4b29      	ldr	r3, [pc, #164]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aba:	430a      	orrs	r2, r1
 8003abc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003acc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aea:	4a25      	ldr	r2, [pc, #148]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b06:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b16:	430a      	orrs	r2, r1
 8003b18:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2240      	movs	r2, #64	@ 0x40
 8003b20:	4013      	ands	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b24:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b28:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2280      	movs	r2, #128	@ 0x80
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	4b03      	ldr	r3, [pc, #12]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b006      	add	sp, #24
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
 8003b68:	fffcffff 	.word	0xfffcffff
 8003b6c:	fff7ffff 	.word	0xfff7ffff
 8003b70:	00001388 	.word	0x00001388
 8003b74:	ffcfffff 	.word	0xffcfffff
 8003b78:	efffffff 	.word	0xefffffff
 8003b7c:	fffff3ff 	.word	0xfffff3ff
 8003b80:	ffffcfff 	.word	0xffffcfff
 8003b84:	fbffffff 	.word	0xfbffffff
 8003b88:	fff3ffff 	.word	0xfff3ffff

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e032      	b.n	8003c04 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2239      	movs	r2, #57	@ 0x39
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2238      	movs	r2, #56	@ 0x38
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fd fc4b 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2239      	movs	r2, #57	@ 0x39
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	0019      	movs	r1, r3
 8003bcc:	0010      	movs	r0, r2
 8003bce:	f000 fbcf 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	223e      	movs	r2, #62	@ 0x3e
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	223a      	movs	r2, #58	@ 0x3a
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	223b      	movs	r2, #59	@ 0x3b
 8003be6:	2101      	movs	r1, #1
 8003be8:	5499      	strb	r1, [r3, r2]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	223c      	movs	r2, #60	@ 0x3c
 8003bee:	2101      	movs	r1, #1
 8003bf0:	5499      	strb	r1, [r3, r2]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	223d      	movs	r2, #61	@ 0x3d
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2239      	movs	r2, #57	@ 0x39
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2239      	movs	r2, #57	@ 0x39
 8003c18:	5c9b      	ldrb	r3, [r3, r2]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e03b      	b.n	8003c9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2239      	movs	r2, #57	@ 0x39
 8003c28:	2102      	movs	r1, #2
 8003c2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2101      	movs	r1, #1
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	05db      	lsls	r3, r3, #23
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d00e      	beq.n	8003c66 <HAL_TIM_Base_Start_IT+0x5a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <HAL_TIM_Base_Start_IT+0x98>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_TIM_Base_Start_IT+0x5a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIM_Base_Start_IT+0x5a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a12      	ldr	r2, [pc, #72]	@ (8003cac <HAL_TIM_Base_Start_IT+0xa0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d010      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	e007      	b.n	8003c9a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40010800 	.word	0x40010800
 8003cac:	40011400 	.word	0x40011400

08003cb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e032      	b.n	8003d28 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2239      	movs	r2, #57	@ 0x39
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d107      	bne.n	8003cde <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2238      	movs	r2, #56	@ 0x38
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 f829 	bl	8003d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2239      	movs	r2, #57	@ 0x39
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	0019      	movs	r1, r3
 8003cf0:	0010      	movs	r0, r2
 8003cf2:	f000 fb3d 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	223e      	movs	r2, #62	@ 0x3e
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	223a      	movs	r2, #58	@ 0x3a
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	223b      	movs	r2, #59	@ 0x3b
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	223c      	movs	r2, #60	@ 0x3c
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	223d      	movs	r2, #61	@ 0x3d
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2239      	movs	r2, #57	@ 0x39
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d108      	bne.n	8003d62 <HAL_TIM_PWM_Start+0x22>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223a      	movs	r2, #58	@ 0x3a
 8003d54:	5c9b      	ldrb	r3, [r3, r2]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	4193      	sbcs	r3, r2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e01f      	b.n	8003da2 <HAL_TIM_PWM_Start+0x62>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d108      	bne.n	8003d7a <HAL_TIM_PWM_Start+0x3a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	223b      	movs	r2, #59	@ 0x3b
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	4193      	sbcs	r3, r2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e013      	b.n	8003da2 <HAL_TIM_PWM_Start+0x62>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d108      	bne.n	8003d92 <HAL_TIM_PWM_Start+0x52>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	223c      	movs	r2, #60	@ 0x3c
 8003d84:	5c9b      	ldrb	r3, [r3, r2]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	4193      	sbcs	r3, r2
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e007      	b.n	8003da2 <HAL_TIM_PWM_Start+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	223d      	movs	r2, #61	@ 0x3d
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	1e5a      	subs	r2, r3, #1
 8003d9e:	4193      	sbcs	r3, r2
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e052      	b.n	8003e50 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_PWM_Start+0x7a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	223a      	movs	r2, #58	@ 0x3a
 8003db4:	2102      	movs	r1, #2
 8003db6:	5499      	strb	r1, [r3, r2]
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_PWM_Start+0xa2>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Start+0x8a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223b      	movs	r2, #59	@ 0x3b
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	5499      	strb	r1, [r3, r2]
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_PWM_Start+0xa2>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0x9a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	223c      	movs	r2, #60	@ 0x3c
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	5499      	strb	r1, [r3, r2]
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_PWM_Start+0xa2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	223d      	movs	r2, #61	@ 0x3d
 8003dde:	2102      	movs	r1, #2
 8003de0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 fcc2 	bl	8004774 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	05db      	lsls	r3, r3, #23
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d00e      	beq.n	8003e1a <HAL_TIM_PWM_Start+0xda>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <HAL_TIM_PWM_Start+0x118>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_TIM_PWM_Start+0xda>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <HAL_TIM_PWM_Start+0x11c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_TIM_PWM_Start+0xda>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <HAL_TIM_PWM_Start+0x120>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d111      	bne.n	8003e3e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2207      	movs	r2, #7
 8003e22:	4013      	ands	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d010      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3c:	e007      	b.n	8003e4e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40010800 	.word	0x40010800
 8003e60:	40011400 	.word	0x40011400

08003e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d021      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2203      	movs	r2, #3
 8003e92:	4252      	negs	r2, r2
 8003e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 fa48 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e007      	b.n	8003ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fa3b 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 fa47 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d022      	beq.n	8003f16 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d01e      	beq.n	8003f16 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2205      	movs	r2, #5
 8003ede:	4252      	negs	r2, r2
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	23c0      	movs	r3, #192	@ 0xc0
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fa21 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003efe:	e007      	b.n	8003f10 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f000 fa14 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 fa20 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d021      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2208      	movs	r2, #8
 8003f22:	4013      	ands	r3, r2
 8003f24:	d01d      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2209      	movs	r2, #9
 8003f2c:	4252      	negs	r2, r2
 8003f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f000 f9fb 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003f4a:	e007      	b.n	8003f5c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 f9ee 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 f9fa 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2210      	movs	r2, #16
 8003f66:	4013      	ands	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d01e      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2211      	movs	r2, #17
 8003f78:	4252      	negs	r2, r2
 8003f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	23c0      	movs	r3, #192	@ 0xc0
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 f9d4 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e007      	b.n	8003faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 f9c7 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f9d3 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d008      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fc fc41 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2240      	movs	r2, #64	@ 0x40
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2240      	movs	r2, #64	@ 0x40
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d008      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2241      	movs	r2, #65	@ 0x41
 8003fe8:	4252      	negs	r2, r2
 8003fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 f9b6 	bl	8004360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004008:	2317      	movs	r3, #23
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2238      	movs	r2, #56	@ 0x38
 8004014:	5c9b      	ldrb	r3, [r3, r2]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_TIM_PWM_ConfigChannel+0x22>
 800401a:	2302      	movs	r3, #2
 800401c:	e0ad      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2238      	movs	r2, #56	@ 0x38
 8004022:	2101      	movs	r1, #1
 8004024:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d100      	bne.n	800402e <HAL_TIM_PWM_ConfigChannel+0x32>
 800402c:	e076      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x120>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d900      	bls.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004034:	e095      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d04e      	beq.n	80040da <HAL_TIM_PWM_ConfigChannel+0xde>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b08      	cmp	r3, #8
 8004040:	d900      	bls.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004042:	e08e      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x56>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d021      	beq.n	8004094 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004050:	e087      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f000 f9ec 	bl	8004438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2108      	movs	r1, #8
 800406c:	430a      	orrs	r2, r1
 800406e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2104      	movs	r1, #4
 800407c:	438a      	bics	r2, r1
 800407e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	619a      	str	r2, [r3, #24]
      break;
 8004092:	e06b      	b.n	800416c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	0011      	movs	r1, r2
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fa07 	bl	80044b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2180      	movs	r1, #128	@ 0x80
 80040ae:	0109      	lsls	r1, r1, #4
 80040b0:	430a      	orrs	r2, r1
 80040b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4931      	ldr	r1, [pc, #196]	@ (8004184 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	619a      	str	r2, [r3, #24]
      break;
 80040d8:	e048      	b.n	800416c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 fa26 	bl	8004534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2108      	movs	r1, #8
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2104      	movs	r1, #4
 8004104:	438a      	bics	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69d9      	ldr	r1, [r3, #28]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	61da      	str	r2, [r3, #28]
      break;
 800411a:	e027      	b.n	800416c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f000 fa45 	bl	80045b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2180      	movs	r1, #128	@ 0x80
 8004136:	0109      	lsls	r1, r1, #4
 8004138:	430a      	orrs	r2, r1
 800413a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	490f      	ldr	r1, [pc, #60]	@ (8004184 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004148:	400a      	ands	r2, r1
 800414a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69d9      	ldr	r1, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e004      	b.n	800416c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004162:	2317      	movs	r3, #23
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2238      	movs	r2, #56	@ 0x38
 8004170:	2100      	movs	r1, #0
 8004172:	5499      	strb	r1, [r3, r2]

  return status;
 8004174:	2317      	movs	r3, #23
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	781b      	ldrb	r3, [r3, #0]
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b006      	add	sp, #24
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	fffffbff 	.word	0xfffffbff

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	230f      	movs	r3, #15
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2238      	movs	r2, #56	@ 0x38
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_TIM_ConfigClockSource+0x20>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0bc      	b.n	8004322 <HAL_TIM_ConfigClockSource+0x19a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2238      	movs	r2, #56	@ 0x38
 80041ac:	2101      	movs	r1, #1
 80041ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2239      	movs	r2, #57	@ 0x39
 80041b4:	2102      	movs	r1, #2
 80041b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2277      	movs	r2, #119	@ 0x77
 80041c4:	4393      	bics	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a58      	ldr	r2, [pc, #352]	@ (800432c <HAL_TIM_ConfigClockSource+0x1a4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2280      	movs	r2, #128	@ 0x80
 80041de:	0192      	lsls	r2, r2, #6
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0xde>
 80041e4:	2280      	movs	r2, #128	@ 0x80
 80041e6:	0192      	lsls	r2, r2, #6
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d900      	bls.n	80041ee <HAL_TIM_ConfigClockSource+0x66>
 80041ec:	e088      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 80041ee:	2280      	movs	r2, #128	@ 0x80
 80041f0:	0152      	lsls	r2, r2, #5
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d100      	bne.n	80041f8 <HAL_TIM_ConfigClockSource+0x70>
 80041f6:	e088      	b.n	800430a <HAL_TIM_ConfigClockSource+0x182>
 80041f8:	2280      	movs	r2, #128	@ 0x80
 80041fa:	0152      	lsls	r2, r2, #5
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d900      	bls.n	8004202 <HAL_TIM_ConfigClockSource+0x7a>
 8004200:	e07e      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 8004202:	2b70      	cmp	r3, #112	@ 0x70
 8004204:	d018      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0xb0>
 8004206:	d900      	bls.n	800420a <HAL_TIM_ConfigClockSource+0x82>
 8004208:	e07a      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 800420a:	2b60      	cmp	r3, #96	@ 0x60
 800420c:	d04f      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x126>
 800420e:	d900      	bls.n	8004212 <HAL_TIM_ConfigClockSource+0x8a>
 8004210:	e076      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 8004212:	2b50      	cmp	r3, #80	@ 0x50
 8004214:	d03b      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x106>
 8004216:	d900      	bls.n	800421a <HAL_TIM_ConfigClockSource+0x92>
 8004218:	e072      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 800421a:	2b40      	cmp	r3, #64	@ 0x40
 800421c:	d057      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x146>
 800421e:	d900      	bls.n	8004222 <HAL_TIM_ConfigClockSource+0x9a>
 8004220:	e06e      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 8004222:	2b30      	cmp	r3, #48	@ 0x30
 8004224:	d063      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x166>
 8004226:	d86b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d060      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x166>
 800422c:	d868      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d05d      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x166>
 8004232:	2b10      	cmp	r3, #16
 8004234:	d05b      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x166>
 8004236:	e063      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	f000 fa74 	bl	8004734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2277      	movs	r2, #119	@ 0x77
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
      break;
 8004264:	e052      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004276:	f000 fa5d 	bl	8004734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2180      	movs	r1, #128	@ 0x80
 8004286:	01c9      	lsls	r1, r1, #7
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
      break;
 800428c:	e03e      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	001a      	movs	r2, r3
 800429c:	f000 f9d0 	bl	8004640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2150      	movs	r1, #80	@ 0x50
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 fa2a 	bl	8004700 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e02e      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ba:	001a      	movs	r2, r3
 80042bc:	f000 f9ee 	bl	800469c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2160      	movs	r1, #96	@ 0x60
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fa1a 	bl	8004700 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e01e      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	001a      	movs	r2, r3
 80042dc:	f000 f9b0 	bl	8004640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	@ 0x40
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fa0a 	bl	8004700 <TIM_ITRx_SetConfig>
      break;
 80042ec:	e00e      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f000 fa01 	bl	8004700 <TIM_ITRx_SetConfig>
      break;
 80042fe:	e005      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004300:	230f      	movs	r3, #15
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
      break;
 8004308:	e000      	b.n	800430c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800430a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2239      	movs	r2, #57	@ 0x39
 8004310:	2101      	movs	r1, #1
 8004312:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2238      	movs	r2, #56	@ 0x38
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

  return status;
 800431c:	230f      	movs	r3, #15
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b004      	add	sp, #16
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	ffff00ff 	.word	0xffff00ff

08004330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004358:	46c0      	nop			@ (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	b002      	add	sp, #8
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004368:	46c0      	nop			@ (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}

08004370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	2380      	movs	r3, #128	@ 0x80
 8004384:	05db      	lsls	r3, r3, #23
 8004386:	429a      	cmp	r2, r3
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0x32>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <TIM_Base_SetConfig+0xb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0x32>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a25      	ldr	r2, [pc, #148]	@ (800442c <TIM_Base_SetConfig+0xbc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0x32>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a24      	ldr	r2, [pc, #144]	@ (8004430 <TIM_Base_SetConfig+0xc0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2270      	movs	r2, #112	@ 0x70
 80043a6:	4393      	bics	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	05db      	lsls	r3, r3, #23
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d00b      	beq.n	80043d6 <TIM_Base_SetConfig+0x66>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <TIM_Base_SetConfig+0xb8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_Base_SetConfig+0x66>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a18      	ldr	r2, [pc, #96]	@ (800442c <TIM_Base_SetConfig+0xbc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_Base_SetConfig+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a17      	ldr	r2, [pc, #92]	@ (8004430 <TIM_Base_SetConfig+0xc0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d108      	bne.n	80043e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a16      	ldr	r2, [pc, #88]	@ (8004434 <TIM_Base_SetConfig+0xc4>)
 80043da:	4013      	ands	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2280      	movs	r2, #128	@ 0x80
 80043ec:	4393      	bics	r3, r2
 80043ee:	001a      	movs	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2204      	movs	r2, #4
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40000400 	.word	0x40000400
 800442c:	40010800 	.word	0x40010800
 8004430:	40011400 	.word	0x40011400
 8004434:	fffffcff 	.word	0xfffffcff

08004438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	2201      	movs	r2, #1
 800444e:	4393      	bics	r3, r2
 8004450:	001a      	movs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2270      	movs	r2, #112	@ 0x70
 8004466:	4393      	bics	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2203      	movs	r2, #3
 800446e:	4393      	bics	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2202      	movs	r2, #2
 8004480:	4393      	bics	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	621a      	str	r2, [r3, #32]
}
 80044a8:	46c0      	nop			@ (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b006      	add	sp, #24
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	2210      	movs	r2, #16
 80044c6:	4393      	bics	r3, r2
 80044c8:	001a      	movs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a13      	ldr	r2, [pc, #76]	@ (800452c <TIM_OC2_SetConfig+0x7c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <TIM_OC2_SetConfig+0x80>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2220      	movs	r2, #32
 80044fa:	4393      	bics	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b006      	add	sp, #24
 800452a:	bd80      	pop	{r7, pc}
 800452c:	ffff8fff 	.word	0xffff8fff
 8004530:	fffffcff 	.word	0xfffffcff

08004534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <TIM_OC3_SetConfig+0x78>)
 800454a:	401a      	ands	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2270      	movs	r2, #112	@ 0x70
 8004560:	4393      	bics	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2203      	movs	r2, #3
 8004568:	4393      	bics	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4a0d      	ldr	r2, [pc, #52]	@ (80045b0 <TIM_OC3_SetConfig+0x7c>)
 800457a:	4013      	ands	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	621a      	str	r2, [r3, #32]
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b006      	add	sp, #24
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	fffffeff 	.word	0xfffffeff
 80045b0:	fffffdff 	.word	0xfffffdff

080045b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <TIM_OC4_SetConfig+0x7c>)
 80045ca:	401a      	ands	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <TIM_OC4_SetConfig+0x80>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a14      	ldr	r2, [pc, #80]	@ (8004638 <TIM_OC4_SetConfig+0x84>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4a10      	ldr	r2, [pc, #64]	@ (800463c <TIM_OC4_SetConfig+0x88>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	031b      	lsls	r3, r3, #12
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b006      	add	sp, #24
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	ffffefff 	.word	0xffffefff
 8004634:	ffff8fff 	.word	0xffff8fff
 8004638:	fffffcff 	.word	0xfffffcff
 800463c:	ffffdfff 	.word	0xffffdfff

08004640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	2201      	movs	r2, #1
 8004658:	4393      	bics	r3, r2
 800465a:	001a      	movs	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	22f0      	movs	r2, #240	@ 0xf0
 800466a:	4393      	bics	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	220a      	movs	r2, #10
 800467c:	4393      	bics	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	46c0      	nop			@ (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bd80      	pop	{r7, pc}

0800469c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	2210      	movs	r2, #16
 80046b4:	4393      	bics	r3, r2
 80046b6:	001a      	movs	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4a0d      	ldr	r2, [pc, #52]	@ (80046fc <TIM_TI2_ConfigInputStage+0x60>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	031b      	lsls	r3, r3, #12
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	22a0      	movs	r2, #160	@ 0xa0
 80046d8:	4393      	bics	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b006      	add	sp, #24
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	ffff0fff 	.word	0xffff0fff

08004700 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2270      	movs	r2, #112	@ 0x70
 8004714:	4393      	bics	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	2207      	movs	r2, #7
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	609a      	str	r2, [r3, #8]
}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	b004      	add	sp, #16
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4a09      	ldr	r2, [pc, #36]	@ (8004770 <TIM_ETR_SetConfig+0x3c>)
 800474c:	4013      	ands	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	431a      	orrs	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b006      	add	sp, #24
 800476e:	bd80      	pop	{r7, pc}
 8004770:	ffff00ff 	.word	0xffff00ff

08004774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	221f      	movs	r2, #31
 8004784:	4013      	ands	r3, r2
 8004786:	2201      	movs	r2, #1
 8004788:	409a      	lsls	r2, r3
 800478a:	0013      	movs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	43d2      	mvns	r2, r2
 8004796:	401a      	ands	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	211f      	movs	r1, #31
 80047a4:	400b      	ands	r3, r1
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4099      	lsls	r1, r3
 80047aa:	000b      	movs	r3, r1
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b006      	add	sp, #24
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2238      	movs	r2, #56	@ 0x38
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e047      	b.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2238      	movs	r2, #56	@ 0x38
 80047d8:	2101      	movs	r1, #1
 80047da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2239      	movs	r2, #57	@ 0x39
 80047e0:	2102      	movs	r1, #2
 80047e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2270      	movs	r2, #112	@ 0x70
 80047f8:	4393      	bics	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	2380      	movs	r3, #128	@ 0x80
 8004814:	05db      	lsls	r3, r3, #23
 8004816:	429a      	cmp	r2, r3
 8004818:	d00e      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a13      	ldr	r2, [pc, #76]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a11      	ldr	r2, [pc, #68]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a10      	ldr	r2, [pc, #64]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10c      	bne.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2280      	movs	r2, #128	@ 0x80
 800483c:	4393      	bics	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2239      	movs	r2, #57	@ 0x39
 8004856:	2101      	movs	r1, #1
 8004858:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2238      	movs	r2, #56	@ 0x38
 800485e:	2100      	movs	r1, #0
 8004860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40000400 	.word	0x40000400
 8004870:	40010800 	.word	0x40010800
 8004874:	40011400 	.word	0x40011400

08004878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e044      	b.n	8004914 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2278      	movs	r2, #120	@ 0x78
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0018      	movs	r0, r3
 800489e:	f7fc ff01 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2224      	movs	r2, #36	@ 0x24
 80048a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2101      	movs	r1, #1
 80048b4:	438a      	bics	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 feec 	bl	80056a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fc4a 	bl	8005164 <UART_SetConfig>
 80048d0:	0003      	movs	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e01c      	b.n	8004914 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	490d      	ldr	r1, [pc, #52]	@ (800491c <HAL_UART_Init+0xa4>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	212a      	movs	r1, #42	@ 0x2a
 80048f6:	438a      	bics	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	430a      	orrs	r2, r1
 8004908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0018      	movs	r0, r3
 800490e:	f000 ff7b 	bl	8005808 <UART_CheckIdleState>
 8004912:	0003      	movs	r3, r0
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b002      	add	sp, #8
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffffb7ff 	.word	0xffffb7ff

08004920 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	@ 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	1dbb      	adds	r3, r7, #6
 800492e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004934:	2b20      	cmp	r3, #32
 8004936:	d000      	beq.n	800493a <HAL_UART_Transmit+0x1a>
 8004938:	e08c      	b.n	8004a54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_UART_Transmit+0x28>
 8004940:	1dbb      	adds	r3, r7, #6
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e084      	b.n	8004a56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	015b      	lsls	r3, r3, #5
 8004954:	429a      	cmp	r2, r3
 8004956:	d109      	bne.n	800496c <HAL_UART_Transmit+0x4c>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2201      	movs	r2, #1
 8004964:	4013      	ands	r3, r2
 8004966:	d001      	beq.n	800496c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e074      	b.n	8004a56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2284      	movs	r2, #132	@ 0x84
 8004970:	2100      	movs	r1, #0
 8004972:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2221      	movs	r2, #33	@ 0x21
 8004978:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd f85d 	bl	8001a38 <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1dba      	adds	r2, r7, #6
 8004986:	2150      	movs	r1, #80	@ 0x50
 8004988:	8812      	ldrh	r2, [r2, #0]
 800498a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1dba      	adds	r2, r7, #6
 8004990:	2152      	movs	r1, #82	@ 0x52
 8004992:	8812      	ldrh	r2, [r2, #0]
 8004994:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	015b      	lsls	r3, r3, #5
 800499e:	429a      	cmp	r2, r3
 80049a0:	d108      	bne.n	80049b4 <HAL_UART_Transmit+0x94>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e003      	b.n	80049bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049bc:	e02f      	b.n	8004a1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	0013      	movs	r3, r2
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	f000 ffc4 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d004      	beq.n	80049de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e03b      	b.n	8004a56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	001a      	movs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	05d2      	lsls	r2, r2, #23
 80049f0:	0dd2      	lsrs	r2, r2, #23
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	3302      	adds	r3, #2
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e007      	b.n	8004a0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2252      	movs	r2, #82	@ 0x52
 8004a10:	5a9b      	ldrh	r3, [r3, r2]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b299      	uxth	r1, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2252      	movs	r2, #82	@ 0x52
 8004a1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2252      	movs	r2, #82	@ 0x52
 8004a22:	5a9b      	ldrh	r3, [r3, r2]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1c9      	bne.n	80049be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	0013      	movs	r3, r2
 8004a34:	2200      	movs	r2, #0
 8004a36:	2140      	movs	r1, #64	@ 0x40
 8004a38:	f000 ff8e 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 8004a3c:	1e03      	subs	r3, r0, #0
 8004a3e:	d004      	beq.n	8004a4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e005      	b.n	8004a56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b008      	add	sp, #32
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	1dbb      	adds	r3, r7, #6
 8004a6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2280      	movs	r2, #128	@ 0x80
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d14a      	bne.n	8004b0e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UART_Receive_DMA+0x26>
 8004a7e:	1dbb      	adds	r3, r7, #6
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e042      	b.n	8004b10 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	2380      	movs	r3, #128	@ 0x80
 8004a90:	015b      	lsls	r3, r3, #5
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d109      	bne.n	8004aaa <HAL_UART_Receive_DMA+0x4a>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d001      	beq.n	8004aaa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e032      	b.n	8004b10 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	@ (8004b18 <HAL_UART_Receive_DMA+0xb8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d020      	beq.n	8004afc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d019      	beq.n	8004afc <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2180      	movs	r1, #128	@ 0x80
 8004aea:	04c9      	lsls	r1, r1, #19
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f383 8810 	msr	PRIMASK, r3
}
 8004afa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004afc:	1dbb      	adds	r3, r7, #6
 8004afe:	881a      	ldrh	r2, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 ff97 	bl	8005a38 <UART_Start_Receive_DMA>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	e000      	b.n	8004b10 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
  }
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b008      	add	sp, #32
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40004800 	.word	0x40004800

08004b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b0ab      	sub	sp, #172	@ 0xac
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	22a4      	movs	r2, #164	@ 0xa4
 8004b2c:	18b9      	adds	r1, r7, r2
 8004b2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	20a0      	movs	r0, #160	@ 0xa0
 8004b38:	1839      	adds	r1, r7, r0
 8004b3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	219c      	movs	r1, #156	@ 0x9c
 8004b44:	1879      	adds	r1, r7, r1
 8004b46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b48:	0011      	movs	r1, r2
 8004b4a:	18bb      	adds	r3, r7, r2
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a99      	ldr	r2, [pc, #612]	@ (8004db4 <HAL_UART_IRQHandler+0x298>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	2298      	movs	r2, #152	@ 0x98
 8004b54:	18bc      	adds	r4, r7, r2
 8004b56:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004b58:	18bb      	adds	r3, r7, r2
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d114      	bne.n	8004b8a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2220      	movs	r2, #32
 8004b66:	4013      	ands	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b6a:	183b      	adds	r3, r7, r0
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	4013      	ands	r3, r2
 8004b72:	d00a      	beq.n	8004b8a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d100      	bne.n	8004b7e <HAL_UART_IRQHandler+0x62>
 8004b7c:	e2be      	b.n	80050fc <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	0010      	movs	r0, r2
 8004b86:	4798      	blx	r3
      }
      return;
 8004b88:	e2b8      	b.n	80050fc <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b8a:	2398      	movs	r3, #152	@ 0x98
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d100      	bne.n	8004b96 <HAL_UART_IRQHandler+0x7a>
 8004b94:	e114      	b.n	8004dc0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b96:	239c      	movs	r3, #156	@ 0x9c
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d106      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ba2:	23a0      	movs	r3, #160	@ 0xa0
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a83      	ldr	r2, [pc, #524]	@ (8004db8 <HAL_UART_IRQHandler+0x29c>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	d100      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x94>
 8004bae:	e107      	b.n	8004dc0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bb0:	23a4      	movs	r3, #164	@ 0xa4
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d012      	beq.n	8004be2 <HAL_UART_IRQHandler+0xc6>
 8004bbc:	23a0      	movs	r3, #160	@ 0xa0
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2284      	movs	r2, #132	@ 0x84
 8004bd6:	589b      	ldr	r3, [r3, r2]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2184      	movs	r1, #132	@ 0x84
 8004be0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004be2:	23a4      	movs	r3, #164	@ 0xa4
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2202      	movs	r2, #2
 8004bea:	4013      	ands	r3, r2
 8004bec:	d011      	beq.n	8004c12 <HAL_UART_IRQHandler+0xf6>
 8004bee:	239c      	movs	r3, #156	@ 0x9c
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2284      	movs	r2, #132	@ 0x84
 8004c06:	589b      	ldr	r3, [r3, r2]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2184      	movs	r1, #132	@ 0x84
 8004c10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c12:	23a4      	movs	r3, #164	@ 0xa4
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d011      	beq.n	8004c42 <HAL_UART_IRQHandler+0x126>
 8004c1e:	239c      	movs	r3, #156	@ 0x9c
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2201      	movs	r2, #1
 8004c26:	4013      	ands	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2204      	movs	r2, #4
 8004c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2284      	movs	r2, #132	@ 0x84
 8004c36:	589b      	ldr	r3, [r3, r2]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2184      	movs	r1, #132	@ 0x84
 8004c40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c42:	23a4      	movs	r3, #164	@ 0xa4
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d017      	beq.n	8004c7e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c4e:	23a0      	movs	r3, #160	@ 0xa0
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2220      	movs	r2, #32
 8004c56:	4013      	ands	r3, r2
 8004c58:	d105      	bne.n	8004c66 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c5a:	239c      	movs	r3, #156	@ 0x9c
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c64:	d00b      	beq.n	8004c7e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2284      	movs	r2, #132	@ 0x84
 8004c72:	589b      	ldr	r3, [r3, r2]
 8004c74:	2208      	movs	r2, #8
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2184      	movs	r1, #132	@ 0x84
 8004c7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c7e:	23a4      	movs	r3, #164	@ 0xa4
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	@ 0x80
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x198>
 8004c8c:	23a0      	movs	r3, #160	@ 0xa0
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	04db      	lsls	r3, r3, #19
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00c      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2280      	movs	r2, #128	@ 0x80
 8004ca0:	0112      	lsls	r2, r2, #4
 8004ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2284      	movs	r2, #132	@ 0x84
 8004ca8:	589b      	ldr	r3, [r3, r2]
 8004caa:	2220      	movs	r2, #32
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2184      	movs	r1, #132	@ 0x84
 8004cb2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2284      	movs	r2, #132	@ 0x84
 8004cb8:	589b      	ldr	r3, [r3, r2]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d100      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x1a4>
 8004cbe:	e21f      	b.n	8005100 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cc0:	23a4      	movs	r3, #164	@ 0xa4
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d00e      	beq.n	8004cea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ccc:	23a0      	movs	r3, #160	@ 0xa0
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d008      	beq.n	8004cea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	0010      	movs	r0, r2
 8004ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2284      	movs	r2, #132	@ 0x84
 8004cee:	589b      	ldr	r3, [r3, r2]
 8004cf0:	2194      	movs	r1, #148	@ 0x94
 8004cf2:	187a      	adds	r2, r7, r1
 8004cf4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2240      	movs	r2, #64	@ 0x40
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b40      	cmp	r3, #64	@ 0x40
 8004d02:	d004      	beq.n	8004d0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2228      	movs	r2, #40	@ 0x28
 8004d0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d0c:	d047      	beq.n	8004d9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 ff55 	bl	8005bc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2240      	movs	r2, #64	@ 0x40
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b40      	cmp	r3, #64	@ 0x40
 8004d22:	d137      	bne.n	8004d94 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d24:	f3ef 8310 	mrs	r3, PRIMASK
 8004d28:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2c:	2090      	movs	r0, #144	@ 0x90
 8004d2e:	183a      	adds	r2, r7, r0
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	2301      	movs	r3, #1
 8004d34:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			@ (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	@ 0x40
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d012      	beq.n	8004d8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <HAL_UART_IRQHandler+0x2a0>)
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fd fc9d 	bl	80026b0 <HAL_DMA_Abort_IT>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d01a      	beq.n	8004db0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d84:	0018      	movs	r0, r3
 8004d86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	e012      	b.n	8004db0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f9d5 	bl	800513c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d92:	e00d      	b.n	8004db0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f9d0 	bl	800513c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	e008      	b.n	8004db0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 f9cb 	bl	800513c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2284      	movs	r2, #132	@ 0x84
 8004daa:	2100      	movs	r1, #0
 8004dac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004dae:	e1a7      	b.n	8005100 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	46c0      	nop			@ (mov r8, r8)
    return;
 8004db2:	e1a5      	b.n	8005100 <HAL_UART_IRQHandler+0x5e4>
 8004db4:	0000080f 	.word	0x0000080f
 8004db8:	04000120 	.word	0x04000120
 8004dbc:	08005ef3 	.word	0x08005ef3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d000      	beq.n	8004dca <HAL_UART_IRQHandler+0x2ae>
 8004dc8:	e159      	b.n	800507e <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dca:	23a4      	movs	r3, #164	@ 0xa4
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d100      	bne.n	8004dd8 <HAL_UART_IRQHandler+0x2bc>
 8004dd6:	e152      	b.n	800507e <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dd8:	23a0      	movs	r3, #160	@ 0xa0
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2210      	movs	r2, #16
 8004de0:	4013      	ands	r3, r2
 8004de2:	d100      	bne.n	8004de6 <HAL_UART_IRQHandler+0x2ca>
 8004de4:	e14b      	b.n	800507e <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2210      	movs	r2, #16
 8004dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2240      	movs	r2, #64	@ 0x40
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b40      	cmp	r3, #64	@ 0x40
 8004dfa:	d000      	beq.n	8004dfe <HAL_UART_IRQHandler+0x2e2>
 8004dfc:	e0bf      	b.n	8004f7e <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	217e      	movs	r1, #126	@ 0x7e
 8004e08:	187b      	adds	r3, r7, r1
 8004e0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d100      	bne.n	8004e16 <HAL_UART_IRQHandler+0x2fa>
 8004e14:	e095      	b.n	8004f42 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2258      	movs	r2, #88	@ 0x58
 8004e1a:	5a9b      	ldrh	r3, [r3, r2]
 8004e1c:	187a      	adds	r2, r7, r1
 8004e1e:	8812      	ldrh	r2, [r2, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d300      	bcc.n	8004e26 <HAL_UART_IRQHandler+0x30a>
 8004e24:	e08d      	b.n	8004f42 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	187a      	adds	r2, r7, r1
 8004e2a:	215a      	movs	r1, #90	@ 0x5a
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d16f      	bne.n	8004f1e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e48:	2301      	movs	r3, #1
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	49ad      	ldr	r1, [pc, #692]	@ (8005114 <HAL_UART_IRQHandler+0x5f8>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e70:	f3ef 8310 	mrs	r3, PRIMASK
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			@ (mov r8, r8)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2101      	movs	r1, #1
 8004e92:	438a      	bics	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e98:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eac:	2301      	movs	r3, #1
 8004eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2140      	movs	r1, #64	@ 0x40
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	2120      	movs	r1, #32
 8004eda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004eec:	2301      	movs	r3, #1
 8004eee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2110      	movs	r1, #16
 8004f04:	438a      	bics	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f0e:	f383 8810 	msr	PRIMASK, r3
}
 8004f12:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fd fb89 	bl	8002630 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2258      	movs	r2, #88	@ 0x58
 8004f28:	5a9a      	ldrh	r2, [r3, r2]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	215a      	movs	r1, #90	@ 0x5a
 8004f2e:	5a5b      	ldrh	r3, [r3, r1]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 f906 	bl	800514c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004f40:	e0e0      	b.n	8005104 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2258      	movs	r2, #88	@ 0x58
 8004f46:	5a9b      	ldrh	r3, [r3, r2]
 8004f48:	227e      	movs	r2, #126	@ 0x7e
 8004f4a:	18ba      	adds	r2, r7, r2
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d000      	beq.n	8004f54 <HAL_UART_IRQHandler+0x438>
 8004f52:	e0d7      	b.n	8005104 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d000      	beq.n	8004f66 <HAL_UART_IRQHandler+0x44a>
 8004f64:	e0ce      	b.n	8005104 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2258      	movs	r2, #88	@ 0x58
 8004f70:	5a9a      	ldrh	r2, [r3, r2]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0011      	movs	r1, r2
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 f8e8 	bl	800514c <HAL_UARTEx_RxEventCallback>
      return;
 8004f7c:	e0c2      	b.n	8005104 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2258      	movs	r2, #88	@ 0x58
 8004f82:	5a99      	ldrh	r1, [r3, r2]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	225a      	movs	r2, #90	@ 0x5a
 8004f88:	5a9b      	ldrh	r3, [r3, r2]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	208e      	movs	r0, #142	@ 0x8e
 8004f8e:	183b      	adds	r3, r7, r0
 8004f90:	1a8a      	subs	r2, r1, r2
 8004f92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	225a      	movs	r2, #90	@ 0x5a
 8004f98:	5a9b      	ldrh	r3, [r3, r2]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d100      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x486>
 8004fa0:	e0b2      	b.n	8005108 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004fa2:	183b      	adds	r3, r7, r0
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d100      	bne.n	8004fac <HAL_UART_IRQHandler+0x490>
 8004faa:	e0ad      	b.n	8005108 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb4:	2488      	movs	r4, #136	@ 0x88
 8004fb6:	193a      	adds	r2, r7, r4
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4951      	ldr	r1, [pc, #324]	@ (8005118 <HAL_UART_IRQHandler+0x5fc>)
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	193b      	adds	r3, r7, r4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f383 8810 	msr	PRIMASK, r3
}
 8004fe2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fec:	2484      	movs	r4, #132	@ 0x84
 8004fee:	193a      	adds	r2, r7, r4
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f383 8810 	msr	PRIMASK, r3
}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2101      	movs	r1, #1
 800500a:	438a      	bics	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
 800500e:	193b      	adds	r3, r7, r4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2280      	movs	r2, #128	@ 0x80
 8005020:	2120      	movs	r1, #32
 8005022:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005030:	f3ef 8310 	mrs	r3, PRIMASK
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005038:	2480      	movs	r4, #128	@ 0x80
 800503a:	193a      	adds	r2, r7, r4
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	2301      	movs	r3, #1
 8005040:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	f383 8810 	msr	PRIMASK, r3
}
 8005048:	46c0      	nop			@ (mov r8, r8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2110      	movs	r1, #16
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	193b      	adds	r3, r7, r4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800506e:	183b      	adds	r3, r7, r0
 8005070:	881a      	ldrh	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0011      	movs	r1, r2
 8005076:	0018      	movs	r0, r3
 8005078:	f000 f868 	bl	800514c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800507c:	e044      	b.n	8005108 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800507e:	23a4      	movs	r3, #164	@ 0xa4
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	035b      	lsls	r3, r3, #13
 8005088:	4013      	ands	r3, r2
 800508a:	d010      	beq.n	80050ae <HAL_UART_IRQHandler+0x592>
 800508c:	239c      	movs	r3, #156	@ 0x9c
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	03db      	lsls	r3, r3, #15
 8005096:	4013      	ands	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2280      	movs	r2, #128	@ 0x80
 80050a0:	0352      	lsls	r2, r2, #13
 80050a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 ff61 	bl	8005f6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050ac:	e02f      	b.n	800510e <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050ae:	23a4      	movs	r3, #164	@ 0xa4
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2280      	movs	r2, #128	@ 0x80
 80050b6:	4013      	ands	r3, r2
 80050b8:	d00f      	beq.n	80050da <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050ba:	23a0      	movs	r3, #160	@ 0xa0
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2280      	movs	r2, #128	@ 0x80
 80050c2:	4013      	ands	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01e      	beq.n	800510c <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	0010      	movs	r0, r2
 80050d6:	4798      	blx	r3
    }
    return;
 80050d8:	e018      	b.n	800510c <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050da:	23a4      	movs	r3, #164	@ 0xa4
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2240      	movs	r2, #64	@ 0x40
 80050e2:	4013      	ands	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_UART_IRQHandler+0x5f2>
 80050e6:	23a0      	movs	r3, #160	@ 0xa0
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2240      	movs	r2, #64	@ 0x40
 80050ee:	4013      	ands	r3, r2
 80050f0:	d00d      	beq.n	800510e <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 ff0f 	bl	8005f18 <UART_EndTransmit_IT>
    return;
 80050fa:	e008      	b.n	800510e <HAL_UART_IRQHandler+0x5f2>
      return;
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	e006      	b.n	800510e <HAL_UART_IRQHandler+0x5f2>
    return;
 8005100:	46c0      	nop			@ (mov r8, r8)
 8005102:	e004      	b.n	800510e <HAL_UART_IRQHandler+0x5f2>
      return;
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	e002      	b.n	800510e <HAL_UART_IRQHandler+0x5f2>
      return;
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	e000      	b.n	800510e <HAL_UART_IRQHandler+0x5f2>
    return;
 800510c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800510e:	46bd      	mov	sp, r7
 8005110:	b02b      	add	sp, #172	@ 0xac
 8005112:	bd90      	pop	{r4, r7, pc}
 8005114:	fffffeff 	.word	0xfffffeff
 8005118:	fffffedf 	.word	0xfffffedf

0800511c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005124:	46c0      	nop			@ (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	b002      	add	sp, #8
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005144:	46c0      	nop			@ (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	000a      	movs	r2, r1
 8005156:	1cbb      	adds	r3, r7, #2
 8005158:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b002      	add	sp, #8
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005164:	b5b0      	push	{r4, r5, r7, lr}
 8005166:	b08e      	sub	sp, #56	@ 0x38
 8005168:	af00      	add	r7, sp, #0
 800516a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800516c:	231a      	movs	r3, #26
 800516e:	2218      	movs	r2, #24
 8005170:	189b      	adds	r3, r3, r2
 8005172:	19db      	adds	r3, r3, r7
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4ac3      	ldr	r2, [pc, #780]	@ (80054a4 <UART_SetConfig+0x340>)
 8005198:	4013      	ands	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4abe      	ldr	r2, [pc, #760]	@ (80054a8 <UART_SetConfig+0x344>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	0019      	movs	r1, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4ab8      	ldr	r2, [pc, #736]	@ (80054ac <UART_SetConfig+0x348>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051d4:	4313      	orrs	r3, r2
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4ab4      	ldr	r2, [pc, #720]	@ (80054b0 <UART_SetConfig+0x34c>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4ab0      	ldr	r2, [pc, #704]	@ (80054b4 <UART_SetConfig+0x350>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d131      	bne.n	800525c <UART_SetConfig+0xf8>
 80051f8:	4baf      	ldr	r3, [pc, #700]	@ (80054b8 <UART_SetConfig+0x354>)
 80051fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fc:	2203      	movs	r2, #3
 80051fe:	4013      	ands	r3, r2
 8005200:	2b03      	cmp	r3, #3
 8005202:	d01d      	beq.n	8005240 <UART_SetConfig+0xdc>
 8005204:	d823      	bhi.n	800524e <UART_SetConfig+0xea>
 8005206:	2b02      	cmp	r3, #2
 8005208:	d00c      	beq.n	8005224 <UART_SetConfig+0xc0>
 800520a:	d820      	bhi.n	800524e <UART_SetConfig+0xea>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <UART_SetConfig+0xb2>
 8005210:	2b01      	cmp	r3, #1
 8005212:	d00e      	beq.n	8005232 <UART_SetConfig+0xce>
 8005214:	e01b      	b.n	800524e <UART_SetConfig+0xea>
 8005216:	231b      	movs	r3, #27
 8005218:	2218      	movs	r2, #24
 800521a:	189b      	adds	r3, r3, r2
 800521c:	19db      	adds	r3, r3, r7
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e0b4      	b.n	800538e <UART_SetConfig+0x22a>
 8005224:	231b      	movs	r3, #27
 8005226:	2218      	movs	r2, #24
 8005228:	189b      	adds	r3, r3, r2
 800522a:	19db      	adds	r3, r3, r7
 800522c:	2202      	movs	r2, #2
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e0ad      	b.n	800538e <UART_SetConfig+0x22a>
 8005232:	231b      	movs	r3, #27
 8005234:	2218      	movs	r2, #24
 8005236:	189b      	adds	r3, r3, r2
 8005238:	19db      	adds	r3, r3, r7
 800523a:	2204      	movs	r2, #4
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e0a6      	b.n	800538e <UART_SetConfig+0x22a>
 8005240:	231b      	movs	r3, #27
 8005242:	2218      	movs	r2, #24
 8005244:	189b      	adds	r3, r3, r2
 8005246:	19db      	adds	r3, r3, r7
 8005248:	2208      	movs	r2, #8
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e09f      	b.n	800538e <UART_SetConfig+0x22a>
 800524e:	231b      	movs	r3, #27
 8005250:	2218      	movs	r2, #24
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	2210      	movs	r2, #16
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e098      	b.n	800538e <UART_SetConfig+0x22a>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a96      	ldr	r2, [pc, #600]	@ (80054bc <UART_SetConfig+0x358>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d131      	bne.n	80052ca <UART_SetConfig+0x166>
 8005266:	4b94      	ldr	r3, [pc, #592]	@ (80054b8 <UART_SetConfig+0x354>)
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526a:	220c      	movs	r2, #12
 800526c:	4013      	ands	r3, r2
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d01d      	beq.n	80052ae <UART_SetConfig+0x14a>
 8005272:	d823      	bhi.n	80052bc <UART_SetConfig+0x158>
 8005274:	2b08      	cmp	r3, #8
 8005276:	d00c      	beq.n	8005292 <UART_SetConfig+0x12e>
 8005278:	d820      	bhi.n	80052bc <UART_SetConfig+0x158>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <UART_SetConfig+0x120>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d00e      	beq.n	80052a0 <UART_SetConfig+0x13c>
 8005282:	e01b      	b.n	80052bc <UART_SetConfig+0x158>
 8005284:	231b      	movs	r3, #27
 8005286:	2218      	movs	r2, #24
 8005288:	189b      	adds	r3, r3, r2
 800528a:	19db      	adds	r3, r3, r7
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e07d      	b.n	800538e <UART_SetConfig+0x22a>
 8005292:	231b      	movs	r3, #27
 8005294:	2218      	movs	r2, #24
 8005296:	189b      	adds	r3, r3, r2
 8005298:	19db      	adds	r3, r3, r7
 800529a:	2202      	movs	r2, #2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e076      	b.n	800538e <UART_SetConfig+0x22a>
 80052a0:	231b      	movs	r3, #27
 80052a2:	2218      	movs	r2, #24
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	19db      	adds	r3, r3, r7
 80052a8:	2204      	movs	r2, #4
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e06f      	b.n	800538e <UART_SetConfig+0x22a>
 80052ae:	231b      	movs	r3, #27
 80052b0:	2218      	movs	r2, #24
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	19db      	adds	r3, r3, r7
 80052b6:	2208      	movs	r2, #8
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e068      	b.n	800538e <UART_SetConfig+0x22a>
 80052bc:	231b      	movs	r3, #27
 80052be:	2218      	movs	r2, #24
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	19db      	adds	r3, r3, r7
 80052c4:	2210      	movs	r2, #16
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e061      	b.n	800538e <UART_SetConfig+0x22a>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7c      	ldr	r2, [pc, #496]	@ (80054c0 <UART_SetConfig+0x35c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d106      	bne.n	80052e2 <UART_SetConfig+0x17e>
 80052d4:	231b      	movs	r3, #27
 80052d6:	2218      	movs	r2, #24
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	19db      	adds	r3, r3, r7
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e055      	b.n	800538e <UART_SetConfig+0x22a>
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a77      	ldr	r2, [pc, #476]	@ (80054c4 <UART_SetConfig+0x360>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d106      	bne.n	80052fa <UART_SetConfig+0x196>
 80052ec:	231b      	movs	r3, #27
 80052ee:	2218      	movs	r2, #24
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	19db      	adds	r3, r3, r7
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e049      	b.n	800538e <UART_SetConfig+0x22a>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6b      	ldr	r2, [pc, #428]	@ (80054ac <UART_SetConfig+0x348>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d13e      	bne.n	8005382 <UART_SetConfig+0x21e>
 8005304:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <UART_SetConfig+0x354>)
 8005306:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005308:	23c0      	movs	r3, #192	@ 0xc0
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	4013      	ands	r3, r2
 800530e:	22c0      	movs	r2, #192	@ 0xc0
 8005310:	0112      	lsls	r2, r2, #4
 8005312:	4293      	cmp	r3, r2
 8005314:	d027      	beq.n	8005366 <UART_SetConfig+0x202>
 8005316:	22c0      	movs	r2, #192	@ 0xc0
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	4293      	cmp	r3, r2
 800531c:	d82a      	bhi.n	8005374 <UART_SetConfig+0x210>
 800531e:	2280      	movs	r2, #128	@ 0x80
 8005320:	0112      	lsls	r2, r2, #4
 8005322:	4293      	cmp	r3, r2
 8005324:	d011      	beq.n	800534a <UART_SetConfig+0x1e6>
 8005326:	2280      	movs	r2, #128	@ 0x80
 8005328:	0112      	lsls	r2, r2, #4
 800532a:	4293      	cmp	r3, r2
 800532c:	d822      	bhi.n	8005374 <UART_SetConfig+0x210>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <UART_SetConfig+0x1d8>
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	00d2      	lsls	r2, r2, #3
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <UART_SetConfig+0x1f4>
 800533a:	e01b      	b.n	8005374 <UART_SetConfig+0x210>
 800533c:	231b      	movs	r3, #27
 800533e:	2218      	movs	r2, #24
 8005340:	189b      	adds	r3, r3, r2
 8005342:	19db      	adds	r3, r3, r7
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e021      	b.n	800538e <UART_SetConfig+0x22a>
 800534a:	231b      	movs	r3, #27
 800534c:	2218      	movs	r2, #24
 800534e:	189b      	adds	r3, r3, r2
 8005350:	19db      	adds	r3, r3, r7
 8005352:	2202      	movs	r2, #2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e01a      	b.n	800538e <UART_SetConfig+0x22a>
 8005358:	231b      	movs	r3, #27
 800535a:	2218      	movs	r2, #24
 800535c:	189b      	adds	r3, r3, r2
 800535e:	19db      	adds	r3, r3, r7
 8005360:	2204      	movs	r2, #4
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e013      	b.n	800538e <UART_SetConfig+0x22a>
 8005366:	231b      	movs	r3, #27
 8005368:	2218      	movs	r2, #24
 800536a:	189b      	adds	r3, r3, r2
 800536c:	19db      	adds	r3, r3, r7
 800536e:	2208      	movs	r2, #8
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e00c      	b.n	800538e <UART_SetConfig+0x22a>
 8005374:	231b      	movs	r3, #27
 8005376:	2218      	movs	r2, #24
 8005378:	189b      	adds	r3, r3, r2
 800537a:	19db      	adds	r3, r3, r7
 800537c:	2210      	movs	r2, #16
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e005      	b.n	800538e <UART_SetConfig+0x22a>
 8005382:	231b      	movs	r3, #27
 8005384:	2218      	movs	r2, #24
 8005386:	189b      	adds	r3, r3, r2
 8005388:	19db      	adds	r3, r3, r7
 800538a:	2210      	movs	r2, #16
 800538c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a46      	ldr	r2, [pc, #280]	@ (80054ac <UART_SetConfig+0x348>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d000      	beq.n	800539a <UART_SetConfig+0x236>
 8005398:	e09a      	b.n	80054d0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800539a:	231b      	movs	r3, #27
 800539c:	2218      	movs	r2, #24
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	19db      	adds	r3, r3, r7
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d01d      	beq.n	80053e4 <UART_SetConfig+0x280>
 80053a8:	dc20      	bgt.n	80053ec <UART_SetConfig+0x288>
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d015      	beq.n	80053da <UART_SetConfig+0x276>
 80053ae:	dc1d      	bgt.n	80053ec <UART_SetConfig+0x288>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <UART_SetConfig+0x256>
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d005      	beq.n	80053c4 <UART_SetConfig+0x260>
 80053b8:	e018      	b.n	80053ec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ba:	f7fe fa1d 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 80053be:	0003      	movs	r3, r0
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053c2:	e01c      	b.n	80053fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c4:	4b3c      	ldr	r3, [pc, #240]	@ (80054b8 <UART_SetConfig+0x354>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2210      	movs	r2, #16
 80053ca:	4013      	ands	r3, r2
 80053cc:	d002      	beq.n	80053d4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053ce:	4b3e      	ldr	r3, [pc, #248]	@ (80054c8 <UART_SetConfig+0x364>)
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053d2:	e014      	b.n	80053fe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80053d4:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <UART_SetConfig+0x368>)
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053d8:	e011      	b.n	80053fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053da:	f7fe f97d 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80053de:	0003      	movs	r3, r0
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053e2:	e00c      	b.n	80053fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e4:	2380      	movs	r3, #128	@ 0x80
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ea:	e008      	b.n	80053fe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80053f0:	231a      	movs	r3, #26
 80053f2:	2218      	movs	r2, #24
 80053f4:	189b      	adds	r3, r3, r2
 80053f6:	19db      	adds	r3, r3, r7
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
        break;
 80053fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d100      	bne.n	8005406 <UART_SetConfig+0x2a2>
 8005404:	e133      	b.n	800566e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	0013      	movs	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	189b      	adds	r3, r3, r2
 8005410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005412:	429a      	cmp	r2, r3
 8005414:	d305      	bcc.n	8005422 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800541c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800541e:	429a      	cmp	r2, r3
 8005420:	d906      	bls.n	8005430 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005422:	231a      	movs	r3, #26
 8005424:	2218      	movs	r2, #24
 8005426:	189b      	adds	r3, r3, r2
 8005428:	19db      	adds	r3, r3, r7
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e11e      	b.n	800566e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	6939      	ldr	r1, [r7, #16]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	000b      	movs	r3, r1
 800543e:	0e1b      	lsrs	r3, r3, #24
 8005440:	0010      	movs	r0, r2
 8005442:	0205      	lsls	r5, r0, #8
 8005444:	431d      	orrs	r5, r3
 8005446:	000b      	movs	r3, r1
 8005448:	021c      	lsls	r4, r3, #8
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68b8      	ldr	r0, [r7, #8]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	1900      	adds	r0, r0, r4
 800545c:	4169      	adcs	r1, r5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f7fa fed8 	bl	8000220 <__aeabi_uldivmod>
 8005470:	0002      	movs	r2, r0
 8005472:	000b      	movs	r3, r1
 8005474:	0013      	movs	r3, r2
 8005476:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800547a:	23c0      	movs	r3, #192	@ 0xc0
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	429a      	cmp	r2, r3
 8005480:	d309      	bcc.n	8005496 <UART_SetConfig+0x332>
 8005482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005484:	2380      	movs	r3, #128	@ 0x80
 8005486:	035b      	lsls	r3, r3, #13
 8005488:	429a      	cmp	r2, r3
 800548a:	d204      	bcs.n	8005496 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	e0eb      	b.n	800566e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005496:	231a      	movs	r3, #26
 8005498:	2218      	movs	r2, #24
 800549a:	189b      	adds	r3, r3, r2
 800549c:	19db      	adds	r3, r3, r7
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	e0e4      	b.n	800566e <UART_SetConfig+0x50a>
 80054a4:	efff69f3 	.word	0xefff69f3
 80054a8:	ffffcfff 	.word	0xffffcfff
 80054ac:	40004800 	.word	0x40004800
 80054b0:	fffff4ff 	.word	0xfffff4ff
 80054b4:	40013800 	.word	0x40013800
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40004400 	.word	0x40004400
 80054c0:	40004c00 	.word	0x40004c00
 80054c4:	40005000 	.word	0x40005000
 80054c8:	003d0900 	.word	0x003d0900
 80054cc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	429a      	cmp	r2, r3
 80054da:	d000      	beq.n	80054de <UART_SetConfig+0x37a>
 80054dc:	e070      	b.n	80055c0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80054de:	231b      	movs	r3, #27
 80054e0:	2218      	movs	r2, #24
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	19db      	adds	r3, r3, r7
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d822      	bhi.n	8005532 <UART_SetConfig+0x3ce>
 80054ec:	009a      	lsls	r2, r3, #2
 80054ee:	4b67      	ldr	r3, [pc, #412]	@ (800568c <UART_SetConfig+0x528>)
 80054f0:	18d3      	adds	r3, r2, r3
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f6:	f7fe f97f 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 80054fa:	0003      	movs	r3, r0
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054fe:	e021      	b.n	8005544 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fe f990 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 8005504:	0003      	movs	r3, r0
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005508:	e01c      	b.n	8005544 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550a:	4b61      	ldr	r3, [pc, #388]	@ (8005690 <UART_SetConfig+0x52c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2210      	movs	r2, #16
 8005510:	4013      	ands	r3, r2
 8005512:	d002      	beq.n	800551a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005514:	4b5f      	ldr	r3, [pc, #380]	@ (8005694 <UART_SetConfig+0x530>)
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005518:	e014      	b.n	8005544 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800551a:	4b5f      	ldr	r3, [pc, #380]	@ (8005698 <UART_SetConfig+0x534>)
 800551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800551e:	e011      	b.n	8005544 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005520:	f7fe f8da 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8005524:	0003      	movs	r3, r0
 8005526:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005528:	e00c      	b.n	8005544 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552a:	2380      	movs	r3, #128	@ 0x80
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005530:	e008      	b.n	8005544 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005536:	231a      	movs	r3, #26
 8005538:	2218      	movs	r2, #24
 800553a:	189b      	adds	r3, r3, r2
 800553c:	19db      	adds	r3, r3, r7
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
        break;
 8005542:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d100      	bne.n	800554c <UART_SetConfig+0x3e8>
 800554a:	e090      	b.n	800566e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	005a      	lsls	r2, r3, #1
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	18d2      	adds	r2, r2, r3
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	0019      	movs	r1, r3
 800555e:	0010      	movs	r0, r2
 8005560:	f7fa fdd2 	bl	8000108 <__udivsi3>
 8005564:	0003      	movs	r3, r0
 8005566:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	2b0f      	cmp	r3, #15
 800556c:	d921      	bls.n	80055b2 <UART_SetConfig+0x44e>
 800556e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	025b      	lsls	r3, r3, #9
 8005574:	429a      	cmp	r2, r3
 8005576:	d21c      	bcs.n	80055b2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	b29a      	uxth	r2, r3
 800557c:	200e      	movs	r0, #14
 800557e:	2418      	movs	r4, #24
 8005580:	1903      	adds	r3, r0, r4
 8005582:	19db      	adds	r3, r3, r7
 8005584:	210f      	movs	r1, #15
 8005586:	438a      	bics	r2, r1
 8005588:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	b29b      	uxth	r3, r3
 8005590:	2207      	movs	r2, #7
 8005592:	4013      	ands	r3, r2
 8005594:	b299      	uxth	r1, r3
 8005596:	1903      	adds	r3, r0, r4
 8005598:	19db      	adds	r3, r3, r7
 800559a:	1902      	adds	r2, r0, r4
 800559c:	19d2      	adds	r2, r2, r7
 800559e:	8812      	ldrh	r2, [r2, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	1902      	adds	r2, r0, r4
 80055aa:	19d2      	adds	r2, r2, r7
 80055ac:	8812      	ldrh	r2, [r2, #0]
 80055ae:	60da      	str	r2, [r3, #12]
 80055b0:	e05d      	b.n	800566e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80055b2:	231a      	movs	r3, #26
 80055b4:	2218      	movs	r2, #24
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	19db      	adds	r3, r3, r7
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e056      	b.n	800566e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055c0:	231b      	movs	r3, #27
 80055c2:	2218      	movs	r2, #24
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	19db      	adds	r3, r3, r7
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d822      	bhi.n	8005614 <UART_SetConfig+0x4b0>
 80055ce:	009a      	lsls	r2, r3, #2
 80055d0:	4b32      	ldr	r3, [pc, #200]	@ (800569c <UART_SetConfig+0x538>)
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d8:	f7fe f90e 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 80055dc:	0003      	movs	r3, r0
 80055de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055e0:	e021      	b.n	8005626 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e2:	f7fe f91f 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 80055e6:	0003      	movs	r3, r0
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ea:	e01c      	b.n	8005626 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ec:	4b28      	ldr	r3, [pc, #160]	@ (8005690 <UART_SetConfig+0x52c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2210      	movs	r2, #16
 80055f2:	4013      	ands	r3, r2
 80055f4:	d002      	beq.n	80055fc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055f6:	4b27      	ldr	r3, [pc, #156]	@ (8005694 <UART_SetConfig+0x530>)
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055fa:	e014      	b.n	8005626 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80055fc:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <UART_SetConfig+0x534>)
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005600:	e011      	b.n	8005626 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005602:	f7fe f869 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8005606:	0003      	movs	r3, r0
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800560a:	e00c      	b.n	8005626 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560c:	2380      	movs	r3, #128	@ 0x80
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005612:	e008      	b.n	8005626 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005618:	231a      	movs	r3, #26
 800561a:	2218      	movs	r2, #24
 800561c:	189b      	adds	r3, r3, r2
 800561e:	19db      	adds	r3, r3, r7
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
        break;
 8005624:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d020      	beq.n	800566e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	085a      	lsrs	r2, r3, #1
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	18d2      	adds	r2, r2, r3
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	0019      	movs	r1, r3
 800563c:	0010      	movs	r0, r2
 800563e:	f7fa fd63 	bl	8000108 <__udivsi3>
 8005642:	0003      	movs	r3, r0
 8005644:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d90a      	bls.n	8005662 <UART_SetConfig+0x4fe>
 800564c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800564e:	2380      	movs	r3, #128	@ 0x80
 8005650:	025b      	lsls	r3, r3, #9
 8005652:	429a      	cmp	r2, r3
 8005654:	d205      	bcs.n	8005662 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	b29a      	uxth	r2, r3
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e005      	b.n	800566e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	231a      	movs	r3, #26
 8005664:	2218      	movs	r2, #24
 8005666:	189b      	adds	r3, r3, r2
 8005668:	19db      	adds	r3, r3, r7
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2200      	movs	r2, #0
 8005672:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2200      	movs	r2, #0
 8005678:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800567a:	231a      	movs	r3, #26
 800567c:	2218      	movs	r2, #24
 800567e:	189b      	adds	r3, r3, r2
 8005680:	19db      	adds	r3, r3, r7
 8005682:	781b      	ldrb	r3, [r3, #0]
}
 8005684:	0018      	movs	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	b00e      	add	sp, #56	@ 0x38
 800568a:	bdb0      	pop	{r4, r5, r7, pc}
 800568c:	08006014 	.word	0x08006014
 8005690:	40021000 	.word	0x40021000
 8005694:	003d0900 	.word	0x003d0900
 8005698:	00f42400 	.word	0x00f42400
 800569c:	08006038 	.word	0x08006038

080056a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	2208      	movs	r2, #8
 80056ae:	4013      	ands	r3, r2
 80056b0:	d00b      	beq.n	80056ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a4a      	ldr	r2, [pc, #296]	@ (80057e4 <UART_AdvFeatureConfig+0x144>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	2201      	movs	r2, #1
 80056d0:	4013      	ands	r3, r2
 80056d2:	d00b      	beq.n	80056ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a43      	ldr	r2, [pc, #268]	@ (80057e8 <UART_AdvFeatureConfig+0x148>)
 80056dc:	4013      	ands	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	2202      	movs	r2, #2
 80056f2:	4013      	ands	r3, r2
 80056f4:	d00b      	beq.n	800570e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a3b      	ldr	r2, [pc, #236]	@ (80057ec <UART_AdvFeatureConfig+0x14c>)
 80056fe:	4013      	ands	r3, r2
 8005700:	0019      	movs	r1, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	2204      	movs	r2, #4
 8005714:	4013      	ands	r3, r2
 8005716:	d00b      	beq.n	8005730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a34      	ldr	r2, [pc, #208]	@ (80057f0 <UART_AdvFeatureConfig+0x150>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	2210      	movs	r2, #16
 8005736:	4013      	ands	r3, r2
 8005738:	d00b      	beq.n	8005752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a2c      	ldr	r2, [pc, #176]	@ (80057f4 <UART_AdvFeatureConfig+0x154>)
 8005742:	4013      	ands	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	2220      	movs	r2, #32
 8005758:	4013      	ands	r3, r2
 800575a:	d00b      	beq.n	8005774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4a25      	ldr	r2, [pc, #148]	@ (80057f8 <UART_AdvFeatureConfig+0x158>)
 8005764:	4013      	ands	r3, r2
 8005766:	0019      	movs	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	2240      	movs	r2, #64	@ 0x40
 800577a:	4013      	ands	r3, r2
 800577c:	d01d      	beq.n	80057ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <UART_AdvFeatureConfig+0x15c>)
 8005786:	4013      	ands	r3, r2
 8005788:	0019      	movs	r1, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800579a:	2380      	movs	r3, #128	@ 0x80
 800579c:	035b      	lsls	r3, r3, #13
 800579e:	429a      	cmp	r2, r3
 80057a0:	d10b      	bne.n	80057ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <UART_AdvFeatureConfig+0x160>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	2280      	movs	r2, #128	@ 0x80
 80057c0:	4013      	ands	r3, r2
 80057c2:	d00b      	beq.n	80057dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005804 <UART_AdvFeatureConfig+0x164>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	0019      	movs	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	ffff7fff 	.word	0xffff7fff
 80057e8:	fffdffff 	.word	0xfffdffff
 80057ec:	fffeffff 	.word	0xfffeffff
 80057f0:	fffbffff 	.word	0xfffbffff
 80057f4:	ffffefff 	.word	0xffffefff
 80057f8:	ffffdfff 	.word	0xffffdfff
 80057fc:	ffefffff 	.word	0xffefffff
 8005800:	ff9fffff 	.word	0xff9fffff
 8005804:	fff7ffff 	.word	0xfff7ffff

08005808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b092      	sub	sp, #72	@ 0x48
 800580c:	af02      	add	r7, sp, #8
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2284      	movs	r2, #132	@ 0x84
 8005814:	2100      	movs	r1, #0
 8005816:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005818:	f7fc f90e 	bl	8001a38 <HAL_GetTick>
 800581c:	0003      	movs	r3, r0
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2208      	movs	r2, #8
 8005828:	4013      	ands	r3, r2
 800582a:	2b08      	cmp	r3, #8
 800582c:	d12c      	bne.n	8005888 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	2280      	movs	r2, #128	@ 0x80
 8005832:	0391      	lsls	r1, r2, #14
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4a46      	ldr	r2, [pc, #280]	@ (8005950 <UART_CheckIdleState+0x148>)
 8005838:	9200      	str	r2, [sp, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	f000 f88c 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d021      	beq.n	8005888 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005844:	f3ef 8310 	mrs	r3, PRIMASK
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800584c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800584e:	2301      	movs	r3, #1
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	f383 8810 	msr	PRIMASK, r3
}
 8005858:	46c0      	nop			@ (mov r8, r8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2180      	movs	r1, #128	@ 0x80
 8005866:	438a      	bics	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005870:	f383 8810 	msr	PRIMASK, r3
}
 8005874:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2278      	movs	r2, #120	@ 0x78
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e05f      	b.n	8005948 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2204      	movs	r2, #4
 8005890:	4013      	ands	r3, r2
 8005892:	2b04      	cmp	r3, #4
 8005894:	d146      	bne.n	8005924 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005898:	2280      	movs	r2, #128	@ 0x80
 800589a:	03d1      	lsls	r1, r2, #15
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4a2c      	ldr	r2, [pc, #176]	@ (8005950 <UART_CheckIdleState+0x148>)
 80058a0:	9200      	str	r2, [sp, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f000 f858 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 80058a8:	1e03      	subs	r3, r0, #0
 80058aa:	d03b      	beq.n	8005924 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80058b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b6:	2301      	movs	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			@ (mov r8, r8)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4921      	ldr	r1, [pc, #132]	@ (8005954 <UART_CheckIdleState+0x14c>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058de:	f3ef 8310 	mrs	r3, PRIMASK
 80058e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80058e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80058e8:	2301      	movs	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f383 8810 	msr	PRIMASK, r3
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2101      	movs	r1, #1
 8005900:	438a      	bics	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005906:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2280      	movs	r2, #128	@ 0x80
 8005914:	2120      	movs	r1, #32
 8005916:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2278      	movs	r2, #120	@ 0x78
 800591c:	2100      	movs	r1, #0
 800591e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e011      	b.n	8005948 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2280      	movs	r2, #128	@ 0x80
 800592e:	2120      	movs	r1, #32
 8005930:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2278      	movs	r2, #120	@ 0x78
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	0018      	movs	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	b010      	add	sp, #64	@ 0x40
 800594e:	bd80      	pop	{r7, pc}
 8005950:	01ffffff 	.word	0x01ffffff
 8005954:	fffffedf 	.word	0xfffffedf

08005958 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	1dfb      	adds	r3, r7, #7
 8005966:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005968:	e051      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3301      	adds	r3, #1
 800596e:	d04e      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fc f862 	bl	8001a38 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e051      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2204      	movs	r2, #4
 8005992:	4013      	ands	r3, r2
 8005994:	d03b      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b80      	cmp	r3, #128	@ 0x80
 800599a:	d038      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb6>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b40      	cmp	r3, #64	@ 0x40
 80059a0:	d035      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	2208      	movs	r2, #8
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d111      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 f900 	bl	8005bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2284      	movs	r2, #132	@ 0x84
 80059c4:	2108      	movs	r1, #8
 80059c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2278      	movs	r2, #120	@ 0x78
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e02c      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	2380      	movs	r3, #128	@ 0x80
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	401a      	ands	r2, r3
 80059e0:	2380      	movs	r3, #128	@ 0x80
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d112      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2280      	movs	r2, #128	@ 0x80
 80059ee:	0112      	lsls	r2, r2, #4
 80059f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 f8e3 	bl	8005bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2284      	movs	r2, #132	@ 0x84
 80059fe:	2120      	movs	r1, #32
 8005a00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2278      	movs	r2, #120	@ 0x78
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e00f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	425a      	negs	r2, r3
 8005a1e:	4153      	adcs	r3, r2
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	001a      	movs	r2, r3
 8005a24:	1dfb      	adds	r3, r7, #7
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d09e      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b004      	add	sp, #16
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b090      	sub	sp, #64	@ 0x40
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	1dbb      	adds	r3, r7, #6
 8005a44:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1dba      	adds	r2, r7, #6
 8005a50:	2158      	movs	r1, #88	@ 0x58
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2284      	movs	r2, #132	@ 0x84
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2280      	movs	r2, #128	@ 0x80
 8005a62:	2122      	movs	r1, #34	@ 0x22
 8005a64:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d028      	beq.n	8005ac0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a72:	4a3e      	ldr	r2, [pc, #248]	@ (8005b6c <UART_Start_Receive_DMA+0x134>)
 8005a74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b70 <UART_Start_Receive_DMA+0x138>)
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a82:	4a3c      	ldr	r2, [pc, #240]	@ (8005b74 <UART_Start_Receive_DMA+0x13c>)
 8005a84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3324      	adds	r3, #36	@ 0x24
 8005a98:	0019      	movs	r1, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	1dbb      	adds	r3, r7, #6
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	f7fc fd5e 	bl	8002564 <HAL_DMA_Start_IT>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d009      	beq.n	8005ac0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2284      	movs	r2, #132	@ 0x84
 8005ab0:	2110      	movs	r1, #16
 8005ab2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2280      	movs	r2, #128	@ 0x80
 8005ab8:	2120      	movs	r1, #32
 8005aba:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e050      	b.n	8005b62 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d019      	beq.n	8005afc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2180      	movs	r1, #128	@ 0x80
 8005aea:	0049      	lsls	r1, r1, #1
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afc:	f3ef 8310 	mrs	r3, PRIMASK
 8005b00:	613b      	str	r3, [r7, #16]
  return(result);
 8005b02:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b06:	2301      	movs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f383 8810 	msr	PRIMASK, r3
}
 8005b10:	46c0      	nop			@ (mov r8, r8)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f383 8810 	msr	PRIMASK, r3
}
 8005b2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b32:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b34:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b38:	2301      	movs	r3, #1
 8005b3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	f383 8810 	msr	PRIMASK, r3
}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2140      	movs	r1, #64	@ 0x40
 8005b50:	430a      	orrs	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	f383 8810 	msr	PRIMASK, r3
}
 8005b5e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b010      	add	sp, #64	@ 0x40
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	08005c89 	.word	0x08005c89
 8005b70:	08005df1 	.word	0x08005df1
 8005b74:	08005e6f 	.word	0x08005e6f

08005b78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b80:	f3ef 8310 	mrs	r3, PRIMASK
 8005b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b86:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f383 8810 	msr	PRIMASK, r3
}
 8005b94:	46c0      	nop			@ (mov r8, r8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	21c0      	movs	r1, #192	@ 0xc0
 8005ba2:	438a      	bics	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f383 8810 	msr	PRIMASK, r3
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b006      	add	sp, #24
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	@ 0x38
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8005bce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			@ (mov r8, r8)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4926      	ldr	r1, [pc, #152]	@ (8005c84 <UART_EndRxTransfer+0xc4>)
 8005bea:	400a      	ands	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfe:	623b      	str	r3, [r7, #32]
  return(result);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c04:	2301      	movs	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	f383 8810 	msr	PRIMASK, r3
}
 8005c2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d118      	bne.n	8005c66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3e:	2301      	movs	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			@ (mov r8, r8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2110      	movs	r1, #16
 8005c56:	438a      	bics	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2280      	movs	r2, #128	@ 0x80
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c7a:	46c0      	nop			@ (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b00e      	add	sp, #56	@ 0x38
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	fffffedf 	.word	0xfffffedf

08005c88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b094      	sub	sp, #80	@ 0x50
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d16f      	bne.n	8005d82 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca4:	225a      	movs	r2, #90	@ 0x5a
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005caa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cae:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb0:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f383 8810 	msr	PRIMASK, r3
}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4948      	ldr	r1, [pc, #288]	@ (8005dec <UART_DMAReceiveCplt+0x164>)
 8005ccc:	400a      	ands	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f383 8810 	msr	PRIMASK, r3
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce0:	623b      	str	r3, [r7, #32]
  return(result);
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			@ (mov r8, r8)
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	438a      	bics	r2, r1
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	f383 8810 	msr	PRIMASK, r3
}
 8005d0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d16:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d18:	2301      	movs	r3, #1
 8005d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2140      	movs	r1, #64	@ 0x40
 8005d30:	438a      	bics	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d42:	2280      	movs	r2, #128	@ 0x80
 8005d44:	2120      	movs	r1, #32
 8005d46:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d118      	bne.n	8005d82 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d50:	f3ef 8310 	mrs	r3, PRIMASK
 8005d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d56:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f383 8810 	msr	PRIMASK, r3
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2110      	movs	r1, #16
 8005d72:	438a      	bics	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d84:	2200      	movs	r2, #0
 8005d86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d124      	bne.n	8005dda <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d92:	225a      	movs	r2, #90	@ 0x5a
 8005d94:	2100      	movs	r1, #0
 8005d96:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	213a      	movs	r1, #58	@ 0x3a
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da6:	2258      	movs	r2, #88	@ 0x58
 8005da8:	5a9b      	ldrh	r3, [r3, r2]
 8005daa:	187a      	adds	r2, r7, r1
 8005dac:	8812      	ldrh	r2, [r2, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d204      	bcs.n	8005dbc <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db4:	187a      	adds	r2, r7, r1
 8005db6:	215a      	movs	r1, #90	@ 0x5a
 8005db8:	8812      	ldrh	r2, [r2, #0]
 8005dba:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dbe:	2258      	movs	r2, #88	@ 0x58
 8005dc0:	5a9a      	ldrh	r2, [r3, r2]
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc4:	215a      	movs	r1, #90	@ 0x5a
 8005dc6:	5a5b      	ldrh	r3, [r3, r1]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd0:	0011      	movs	r1, r2
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff f9ba 	bl	800514c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dd8:	e003      	b.n	8005de2 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7fa fd4d 	bl	800087c <HAL_UART_RxCpltCallback>
}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b014      	add	sp, #80	@ 0x50
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	fffffeff 	.word	0xfffffeff

08005df0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d128      	bne.n	8005e5e <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2258      	movs	r2, #88	@ 0x58
 8005e10:	5a9b      	ldrh	r3, [r3, r2]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	b299      	uxth	r1, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	225a      	movs	r2, #90	@ 0x5a
 8005e1a:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	210a      	movs	r1, #10
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2258      	movs	r2, #88	@ 0x58
 8005e2c:	5a9b      	ldrh	r3, [r3, r2]
 8005e2e:	187a      	adds	r2, r7, r1
 8005e30:	8812      	ldrh	r2, [r2, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d804      	bhi.n	8005e40 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	187a      	adds	r2, r7, r1
 8005e3a:	215a      	movs	r1, #90	@ 0x5a
 8005e3c:	8812      	ldrh	r2, [r2, #0]
 8005e3e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2258      	movs	r2, #88	@ 0x58
 8005e44:	5a9a      	ldrh	r2, [r3, r2]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	215a      	movs	r1, #90	@ 0x5a
 8005e4a:	5a5b      	ldrh	r3, [r3, r1]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	0011      	movs	r1, r2
 8005e56:	0018      	movs	r0, r3
 8005e58:	f7ff f978 	bl	800514c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e5c:	e003      	b.n	8005e66 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7ff f963 	bl	800512c <HAL_UART_RxHalfCpltCallback>
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b004      	add	sp, #16
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2280      	movs	r2, #128	@ 0x80
 8005e86:	589b      	ldr	r3, [r3, r2]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2280      	movs	r2, #128	@ 0x80
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b80      	cmp	r3, #128	@ 0x80
 8005e96:	d10a      	bne.n	8005eae <UART_DMAError+0x40>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b21      	cmp	r3, #33	@ 0x21
 8005e9c:	d107      	bne.n	8005eae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2252      	movs	r2, #82	@ 0x52
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7ff fe65 	bl	8005b78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2240      	movs	r2, #64	@ 0x40
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d10a      	bne.n	8005ed2 <UART_DMAError+0x64>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b22      	cmp	r3, #34	@ 0x22
 8005ec0:	d107      	bne.n	8005ed2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	225a      	movs	r2, #90	@ 0x5a
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f7ff fe77 	bl	8005bc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2284      	movs	r2, #132	@ 0x84
 8005ed6:	589b      	ldr	r3, [r3, r2]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	431a      	orrs	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2184      	movs	r1, #132	@ 0x84
 8005ee0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7ff f929 	bl	800513c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eea:	46c0      	nop			@ (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b006      	add	sp, #24
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	225a      	movs	r2, #90	@ 0x5a
 8005f04:	2100      	movs	r1, #0
 8005f06:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7ff f916 	bl	800513c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f10:	46c0      	nop			@ (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b004      	add	sp, #16
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f20:	f3ef 8310 	mrs	r3, PRIMASK
 8005f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f26:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f383 8810 	msr	PRIMASK, r3
}
 8005f34:	46c0      	nop			@ (mov r8, r8)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	438a      	bics	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff f8db 	bl	800511c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b006      	add	sp, #24
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b002      	add	sp, #8
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <memset>:
 8005f7e:	0003      	movs	r3, r0
 8005f80:	1882      	adds	r2, r0, r2
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d100      	bne.n	8005f88 <memset+0xa>
 8005f86:	4770      	bx	lr
 8005f88:	7019      	strb	r1, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	e7f9      	b.n	8005f82 <memset+0x4>
	...

08005f90 <__libc_init_array>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	2600      	movs	r6, #0
 8005f94:	4c0c      	ldr	r4, [pc, #48]	@ (8005fc8 <__libc_init_array+0x38>)
 8005f96:	4d0d      	ldr	r5, [pc, #52]	@ (8005fcc <__libc_init_array+0x3c>)
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	42a6      	cmp	r6, r4
 8005f9e:	d109      	bne.n	8005fb4 <__libc_init_array+0x24>
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	f000 f819 	bl	8005fd8 <_init>
 8005fa6:	4c0a      	ldr	r4, [pc, #40]	@ (8005fd0 <__libc_init_array+0x40>)
 8005fa8:	4d0a      	ldr	r5, [pc, #40]	@ (8005fd4 <__libc_init_array+0x44>)
 8005faa:	1b64      	subs	r4, r4, r5
 8005fac:	10a4      	asrs	r4, r4, #2
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	d105      	bne.n	8005fbe <__libc_init_array+0x2e>
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	00b3      	lsls	r3, r6, #2
 8005fb6:	58eb      	ldr	r3, [r5, r3]
 8005fb8:	4798      	blx	r3
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7ee      	b.n	8005f9c <__libc_init_array+0xc>
 8005fbe:	00b3      	lsls	r3, r6, #2
 8005fc0:	58eb      	ldr	r3, [r5, r3]
 8005fc2:	4798      	blx	r3
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7f2      	b.n	8005fae <__libc_init_array+0x1e>
 8005fc8:	08006064 	.word	0x08006064
 8005fcc:	08006064 	.word	0x08006064
 8005fd0:	08006068 	.word	0x08006068
 8005fd4:	08006064 	.word	0x08006064

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
